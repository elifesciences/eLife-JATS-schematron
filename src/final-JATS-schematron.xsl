<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:saxon="http://saxon.sf.net/" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:iso="http://purl.oclc.org/dsdl/schematron" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:ali="http://www.niso.org/schemas/ali/1.0/" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:dc="http://purl.org/dc/terms/" xmlns:e="https://elifesciences.org/namespace" xmlns:file="java.io.File" xmlns:java="http://www.java.com/" version="2.0">
  <!--Implementers: please note that overriding process-prolog or process-root is 
    the preferred method for meta-stylesheets to use where possible. -->
   <xsl:param name="archiveDirParameter"/>
   <xsl:param name="archiveNameParameter"/>
   <xsl:param name="fileNameParameter"/>
   <xsl:param name="fileDirParameter"/>
   <xsl:variable name="document-uri">
      <xsl:value-of select="document-uri(/)"/>
   </xsl:variable>

   <!--PHASES-->


   <!--PROLOG-->
   <xsl:output xmlns:svrl="http://purl.oclc.org/dsdl/svrl" method="xml" omit-xml-declaration="no" standalone="yes" indent="yes"/>

   <!--XSD TYPES FOR XSLT2-->


   <!--KEYS AND FUNCTIONS-->
   <xsl:function xmlns="http://purl.oclc.org/dsdl/schematron" name="e:get-version" as="xs:string">
      <xsl:param name="elem" as="node()"/>
      <xsl:choose>
         <xsl:when test="$elem/name()='article'">
            <xsl:value-of select="e:get-version-helper($elem)"/>
         </xsl:when>
         <xsl:otherwise>
            <xsl:value-of select="e:get-version-helper($elem/ancestor::article[1])"/>
         </xsl:otherwise>
      </xsl:choose>
  </xsl:function>
   <xsl:function xmlns="http://purl.oclc.org/dsdl/schematron" name="e:get-version-helper" as="xs:string">
      <xsl:param name="article" as="node()"/>
      <xsl:choose>
         <xsl:when test="$article//article-meta/custom-meta-group/custom-meta[meta-name='schema-version']/meta-value">
            <xsl:value-of select="$article//article-meta/custom-meta-group/custom-meta[meta-name='schema-version']/meta-value"/>
         </xsl:when>
         <xsl:otherwise>
            <xsl:value-of select="'1'"/>
         </xsl:otherwise>
      </xsl:choose>
  </xsl:function>
   <xsl:function xmlns="http://purl.oclc.org/dsdl/schematron" name="e:titleCaseToken" as="xs:string">
      <xsl:param name="s" as="xs:string"/>
      <xsl:choose>
         <xsl:when test="contains($s,'-')">
            <xsl:value-of select="concat(           upper-case(substring(substring-before($s,'-'), 1, 1)),           lower-case(substring(substring-before($s,'-'),2)),           '-',           upper-case(substring(substring-after($s,'-'), 1, 1)),           lower-case(substring(substring-after($s,'-'),2)))"/>
         </xsl:when>
         <xsl:when test="lower-case($s)='elife'">
            <xsl:value-of select="'eLife'"/>
         </xsl:when>
         <xsl:when test="lower-case($s)=('and','or','the','an','of','in','as','at','by','for','a','to','up','but','yet')">
            <xsl:value-of select="lower-case($s)"/>
         </xsl:when>
         <xsl:when test="matches(lower-case($s),'^rna$|^dna$|^mri$|^hiv$|^tor$|^aids$|^covid-19$|^covid$')">
            <xsl:value-of select="upper-case($s)"/>
         </xsl:when>
         <xsl:when test="matches(lower-case($s),'[1-4]d')">
            <xsl:value-of select="upper-case($s)"/>
         </xsl:when>
         <xsl:otherwise>
            <xsl:value-of select="concat(upper-case(substring($s, 1, 1)), lower-case(substring($s, 2)))"/>
         </xsl:otherwise>
      </xsl:choose>
  </xsl:function>
   <xsl:function xmlns="http://purl.oclc.org/dsdl/schematron" name="e:titleCase" as="xs:string">
      <xsl:param name="s" as="xs:string"/>
      <xsl:choose>
         <xsl:when test="contains($s,' ')">
            <xsl:variable name="token1" select="substring-before($s,' ')"/>
            <xsl:variable name="token2" select="substring-after($s,$token1)"/>
            <xsl:choose>
               <xsl:when test="lower-case($token1)='elife'">
                  <xsl:value-of select="concat('eLife',               ' ',               string-join(for $x in tokenize(substring-after($token2,' '),'\p{Zs}') return e:titleCaseToken($x),' ')               )"/>
               </xsl:when>
               <xsl:when test="matches(lower-case($token1),'^rna$|^dna$|^mri$|^hiv$|^tor$|^aids$|^covid-19$|^covid$')">
                  <xsl:value-of select="concat(upper-case($token1),               ' ',               string-join(for $x in tokenize(substring-after($token2,' '),'\p{Zs}') return e:titleCaseToken($x),' ')               )"/>
               </xsl:when>
               <xsl:when test="matches(lower-case($token1),'[1-4]d')">
                  <xsl:value-of select="concat(upper-case($token1),               ' ',               string-join(for $x in tokenize(substring-after($token2,' '),'\p{Zs}') return e:titleCaseToken($x),' ')               )"/>
               </xsl:when>
               <xsl:when test="contains($token1,'-')">
                  <xsl:value-of select="string-join(for $x in tokenize($s,'\p{Zs}') return e:titleCaseToken($x),' ')"/>
               </xsl:when>
               <xsl:otherwise>
                  <xsl:value-of select="concat(               concat(upper-case(substring($token1, 1, 1)), lower-case(substring($token1, 2))),               ' ',               string-join(for $x in tokenize(substring-after($token2,' '),'\p{Zs}') return e:titleCaseToken($x),' ')               )"/>
               </xsl:otherwise>
            </xsl:choose>
         </xsl:when>
         <xsl:when test="lower-case($s)='elife'">
            <xsl:value-of select="'eLife'"/>
         </xsl:when>
         <xsl:when test="lower-case($s)=('and','or','the','an','of')">
            <xsl:value-of select="lower-case($s)"/>
         </xsl:when>
         <xsl:when test="matches(lower-case($s),'^rna$|^dna$|^mri$|^hiv$|^tor$|^aids$|^covid-19$|^covid$')">
            <xsl:value-of select="upper-case($s)"/>
         </xsl:when>
         <xsl:when test="matches(lower-case($s),'[1-4]d')">
            <xsl:value-of select="upper-case($s)"/>
         </xsl:when>
         <xsl:otherwise>
            <xsl:value-of select="e:titleCaseToken($s)"/>
         </xsl:otherwise>
      </xsl:choose>
  </xsl:function>
   <xsl:function xmlns="http://purl.oclc.org/dsdl/schematron" name="e:article-type2title" as="xs:string">
      <xsl:param name="s" as="xs:string"/>
      <xsl:choose>
         <xsl:when test="$s = 'Replication Study'">
            <xsl:value-of select="'Replication Study:'"/>
         </xsl:when>
         <xsl:when test="$s = 'Registered Report'">
            <xsl:value-of select="'Registered report:'"/>
         </xsl:when>
         <xsl:when test="$s = 'Correction'">
            <xsl:value-of select="'Correction:'"/>
         </xsl:when>
         <xsl:when test="$s = 'Retraction'">
            <xsl:value-of select="'Retraction:'"/>
         </xsl:when>
         <xsl:when test="$s = 'Expression of Concern'">
            <xsl:value-of select="'Expression of Concern:'"/>
         </xsl:when>
         <xsl:otherwise>
            <xsl:value-of select="'undefined'"/>
         </xsl:otherwise>
      </xsl:choose>
  </xsl:function>
   <xsl:function xmlns="http://purl.oclc.org/dsdl/schematron" name="e:sec-type2title" as="xs:string">
      <xsl:param name="s" as="xs:string"/>
      <xsl:choose>
         <xsl:when test="$s = 'intro'">
            <xsl:value-of select="'Introduction'"/>
         </xsl:when>
         <xsl:when test="$s = 'results'">
            <xsl:value-of select="'Results'"/>
         </xsl:when>
         <xsl:when test="$s = 'discussion'">
            <xsl:value-of select="'Discussion'"/>
         </xsl:when>
         <xsl:when test="$s = 'materials|methods'">
            <xsl:value-of select="'Materials and methods'"/>
         </xsl:when>
         <xsl:when test="$s = 'results|discussion'">
            <xsl:value-of select="'Results and discussion'"/>
         </xsl:when>
         <xsl:when test="$s = 'methods'">
            <xsl:value-of select="'Methods'"/>
         </xsl:when>
      
         <xsl:when test="$s = 'additional-information'">
            <xsl:value-of select="'Additional information'"/>
         </xsl:when>
         <xsl:when test="$s = 'supplementary-material'">
            <xsl:value-of select="'Additional files'"/>
         </xsl:when>
         <xsl:when test="$s = 'data-availability'">
            <xsl:value-of select="'Data availability'"/>
         </xsl:when>
         <xsl:otherwise>
            <xsl:value-of select="'undefined'"/>
         </xsl:otherwise>
      </xsl:choose>
  </xsl:function>
   <xsl:function xmlns="http://purl.oclc.org/dsdl/schematron" name="e:fig-id-type" as="xs:string">
      <xsl:param name="s" as="xs:string"/>
      <xsl:choose>
         <xsl:when test="matches($s,'^fig[0-9]{1,3}$')">
            <xsl:value-of select="'Figure'"/>
         </xsl:when>
         <xsl:when test="matches($s,'^fig[0-9]{1,3}s[0-9]{1,3}$')">
            <xsl:value-of select="'Figure supplement'"/>
         </xsl:when>
         <xsl:when test="matches($s,'^box[0-9]{1,3}fig[0-9]{1,3}$')">
            <xsl:value-of select="'Box figure'"/>
         </xsl:when>
         <xsl:when test="matches($s,'^app[0-9]{1,3}fig[0-9]{1,3}$')">
            <xsl:value-of select="'Appendix figure'"/>
         </xsl:when>
         <xsl:when test="matches($s,'^app[0-9]{1,3}fig[0-9]{1,3}s[0-9]{1,3}$')">
            <xsl:value-of select="'Appendix figure supplement'"/>
         </xsl:when>
         <xsl:when test="matches($s,'^respfig[0-9]{1,3}$|^sa[0-9]fig[0-9]{1,3}$')">
            <xsl:value-of select="'Author response figure'"/>
         </xsl:when>
         <xsl:when test="matches($s,'^C[0-9]{1,3}$|^chem[0-9]{1,3}$')">
            <xsl:value-of select="'Chemical structure'"/>
         </xsl:when>
         <xsl:when test="matches($s,'^app[0-9]{1,3}C[0-9]{1,3}$|^app[0-9]{1,3}chem[0-9]{1,3}$')">
            <xsl:value-of select="'Appendix chemical structure'"/>
         </xsl:when>
         <xsl:when test="matches($s,'^S[0-9]{1,3}$|^scheme[0-9]{1,3}$')">
            <xsl:value-of select="'Scheme'"/>
         </xsl:when>
         <xsl:when test="matches($s,'^app[0-9]{1,3}S[0-9]{1,3}$|^app[0-9]{1,3}scheme[0-9]{1,3}$')">
            <xsl:value-of select="'Appendix scheme'"/>
         </xsl:when>
         <xsl:otherwise>
            <xsl:value-of select="'undefined'"/>
         </xsl:otherwise>
      </xsl:choose>
  </xsl:function>
   <xsl:function xmlns="http://purl.oclc.org/dsdl/schematron" name="e:stripDiacritics" as="xs:string">
      <xsl:param name="string" as="xs:string"/>
      <xsl:value-of select="replace(replace(replace(translate(normalize-unicode($string,'NFD'),'ƀȼđɇǥħɨıɉꝁłøɍŧɏƶ','bcdeghiijklortyz'),'\p{M}',''),'æ','ae'),'ß','ss')"/>
  </xsl:function>
   <xsl:function xmlns="http://purl.oclc.org/dsdl/schematron" name="e:ref-list-string" as="xs:string">
      <xsl:param name="ref"/>
      <xsl:choose>
         <xsl:when test="$ref/element-citation[1]/person-group[1]/* and $ref/element-citation[1]/year">
            <xsl:value-of select="concat(           e:get-collab-or-surname($ref/element-citation[1]/person-group[1]/*[1]),           ' ',           $ref/element-citation[1]/year[1],           ' ',           string-join(for $x in $ref/element-citation[1]/person-group[1]/*[position()=(2,3)]           return e:get-collab-or-surname($x),' ')           )"/>
         </xsl:when>
         <xsl:when test="$ref/element-citation/person-group[1]/*">
            <xsl:value-of select="concat(           e:get-collab-or-surname($ref/element-citation[1]/person-group[1]/*[1]),           ' 9999 ',           string-join(for $x in $ref/element-citation[1]/person-group[1]/*[position()=(2,3)]           return e:get-collab-or-surname($x),' ')           )"/>
         </xsl:when>
         <xsl:when test="$ref/element-citation/year">
            <xsl:value-of select="concat(' ',$ref/element-citation[1]/year[1])"/>
         </xsl:when>
         <xsl:otherwise>
            <xsl:value-of select="'zzzzz 9999'"/>
         </xsl:otherwise>
      </xsl:choose>
  </xsl:function>
   <xsl:function xmlns="http://purl.oclc.org/dsdl/schematron" name="e:ref-list-string2" as="xs:string">
      <xsl:param name="ref"/>
      <xsl:choose>
         <xsl:when test="$ref/element-citation[1]/year and count($ref/element-citation[1]/person-group[1]/*) = 2">
            <xsl:value-of select="concat(           e:get-collab-or-surname($ref/element-citation[1]/person-group[1]/*[1]),           ' ',           e:get-collab-or-surname($ref/element-citation[1]/person-group[1]/*[2]),           ' ',           $ref/element-citation[1]/year[1])"/>
         </xsl:when>
         <xsl:when test="$ref/element-citation/person-group[1]/* and $ref/element-citation[1]/year">
            <xsl:value-of select="concat(           e:get-collab-or-surname($ref/element-citation[1]/person-group[1]/*[1]),           ' ',           $ref/element-citation[1]/year[1])"/>
         </xsl:when>
         <xsl:when test="$ref/element-citation/person-group[1]/*">
            <xsl:value-of select="concat(           e:get-collab-or-surname($ref/element-citation[1]/person-group[1]/*[1]),           ' 9999 ')"/>
         </xsl:when>
         <xsl:when test="$ref/element-citation/year">
            <xsl:value-of select="concat(' ',$ref/element-citation[1]/year[1])"/>
         </xsl:when>
         <xsl:otherwise>
            <xsl:value-of select="'zzzzz 9999'"/>
         </xsl:otherwise>
      </xsl:choose>
  </xsl:function>
   <xsl:function xmlns="http://purl.oclc.org/dsdl/schematron" name="e:get-collab-or-surname" as="xs:string?">
      <xsl:param name="collab-or-name"/>
      <xsl:choose>
         <xsl:when test="$collab-or-name/name()='collab'">
            <xsl:value-of select="e:stripDiacritics(lower-case($collab-or-name))"/>
         </xsl:when>
         <xsl:when test="$collab-or-name/surname">
            <xsl:value-of select="e:stripDiacritics(lower-case($collab-or-name/surname[1]))"/>
         </xsl:when>
         <xsl:otherwise/>
      </xsl:choose>
  </xsl:function>
   <xsl:function xmlns="http://purl.oclc.org/dsdl/schematron" name="e:cite-name-text" as="xs:string">
      <xsl:param name="person-group"/>
      <xsl:choose>
         <xsl:when test="(count($person-group/*) = 1) and $person-group/name">
            <xsl:value-of select="$person-group/name/surname[1]"/>
         </xsl:when>
         <xsl:when test="(count($person-group/*) = 1) and $person-group/collab">
            <xsl:value-of select="$person-group/collab"/>
         </xsl:when>
         <xsl:when test="(count($person-group/*) = 2) and (count($person-group/name) = 1) and $person-group/*[1]/local-name() = 'collab'">
            <xsl:value-of select="concat($person-group/collab,' and ',$person-group/name/surname[1])"/>
         </xsl:when>
         <xsl:when test="(count($person-group/*) = 2) and (count($person-group/name) = 1) and $person-group/*[1]/local-name() = 'name'">
            <xsl:value-of select="concat($person-group/name/surname[1],' and ',$person-group/collab)"/>
         </xsl:when>
         <xsl:when test="(count($person-group/*) = 2) and (count($person-group/name) = 2)">
            <xsl:value-of select="concat($person-group/name[1]/surname[1],' and ',$person-group/name[2]/surname[1])"/>
         </xsl:when>
         <xsl:when test="(count($person-group/*) = 2) and (count($person-group/collab) = 2)">
            <xsl:value-of select="concat($person-group/collab[1],' and ',$person-group/collab[2])"/>
         </xsl:when>
         <xsl:when test="(count($person-group/*) ge 2) and $person-group/*[1]/local-name() = 'collab'">
            <xsl:value-of select="concat($person-group/collab[1], ' et al.')"/>
         </xsl:when>
         <xsl:when test="(count($person-group/*) ge 2) and $person-group/*[1]/local-name() = 'name'">
            <xsl:value-of select="concat($person-group/name[1]/surname[1], ' et al.')"/>
         </xsl:when>
         <xsl:otherwise>
            <xsl:value-of select="'undetermined'"/>
         </xsl:otherwise>
      </xsl:choose>
  </xsl:function>
   <xsl:function xmlns="http://purl.oclc.org/dsdl/schematron" name="e:citation-format1" as="xs:string">
      <xsl:param name="element-citation"/>
      <xsl:choose>
         <xsl:when test="$element-citation/person-group and $element-citation//year">
            <xsl:value-of select="concat(e:cite-name-text($element-citation/person-group[1]),', ',$element-citation/descendant::year[1])"/>
         </xsl:when>
         <xsl:when test="$element-citation/person-group and not($element-citation//year)">
            <xsl:value-of select="concat(e:cite-name-text($element-citation/person-group[1]),', ')"/>
         </xsl:when>
         <xsl:when test="not($element-citation/person-group) and $element-citation//year">
            <xsl:value-of select="concat('et al., ',$element-citation/descendant::year[1])"/>
         </xsl:when>
         <xsl:otherwise>
            <xsl:value-of select="', '"/>
         </xsl:otherwise>
      </xsl:choose>
  </xsl:function>
   <xsl:function xmlns="http://purl.oclc.org/dsdl/schematron" name="e:citation-format2" as="xs:string">
      <xsl:param name="element-citation"/>
      <xsl:choose>
         <xsl:when test="$element-citation/person-group and $element-citation//year">
            <xsl:value-of select="concat(e:cite-name-text($element-citation/person-group[1]),' (',$element-citation/descendant::year[1],')')"/>
         </xsl:when>
         <xsl:when test="$element-citation/person-group and not($element-citation//year)">
            <xsl:value-of select="concat(e:cite-name-text($element-citation/person-group[1]),' ()')"/>
         </xsl:when>
         <xsl:when test="not($element-citation/person-group) and $element-citation//year">
            <xsl:value-of select="concat('et al. (',$element-citation/descendant::year[1],')')"/>
         </xsl:when>
         <xsl:otherwise>
            <xsl:value-of select="', '"/>
         </xsl:otherwise>
      </xsl:choose>
  </xsl:function>
   <xsl:function xmlns="http://purl.oclc.org/dsdl/schematron" name="e:ref-cite-list">
      <xsl:param name="ref-list" as="node()"/>
      <xsl:element name="list">
         <xsl:for-each select="$ref-list/ref[element-citation[year]]">
            <xsl:variable name="cite" select="e:citation-format1(./element-citation[1])"/>
            <xsl:element name="item">
               <xsl:attribute name="id">
                  <xsl:value-of select="./@id"/>
               </xsl:attribute>
               <xsl:attribute name="no-suffix">
                  <xsl:value-of select="replace($cite,'[A-Za-z]$','')"/>
               </xsl:attribute>
               <xsl:value-of select="$cite"/>
            </xsl:element>
         </xsl:for-each>
      </xsl:element>
  </xsl:function>
   <xsl:function xmlns="http://purl.oclc.org/dsdl/schematron" name="e:non-distinct-citations">
      <xsl:param name="cite-list" as="node()"/>
      <xsl:element name="list">
         <xsl:for-each select="$cite-list//*:item">
            <xsl:variable name="cite" select="./string()"/>
            <xsl:choose>
               <xsl:when test="./preceding::*:item/string() = $cite">
                  <xsl:element name="item">
                     <xsl:attribute name="id">
                        <xsl:value-of select="./@id"/>
                     </xsl:attribute>
                     <xsl:value-of select="$cite"/>
                  </xsl:element>
               </xsl:when>
               <xsl:when test="not(matches($cite,'[A-Za-z]$')) and (./preceding::*:item/@no-suffix/string() = $cite)">
                  <xsl:element name="item">
                     <xsl:attribute name="id">
                        <xsl:value-of select="./@id"/>
                     </xsl:attribute>
                     <xsl:value-of select="$cite"/>
                  </xsl:element>
               </xsl:when>
               <xsl:when test="not(matches($cite,'[A-Za-z]$')) and ./following::*:item/@no-suffix/string() = $cite">
                  <xsl:element name="item">
                     <xsl:attribute name="id">
                        <xsl:value-of select="./@id"/>
                     </xsl:attribute>
                     <xsl:value-of select="$cite"/>
                  </xsl:element>
               </xsl:when>
               <xsl:otherwise/>
            </xsl:choose>
         </xsl:for-each>
      </xsl:element>
  </xsl:function>
   <xsl:function xmlns="http://purl.oclc.org/dsdl/schematron" name="e:get-name" as="xs:string">
      <xsl:param name="name"/>
      <xsl:choose>
         <xsl:when test="$name/given-names[1] and $name/surname[1] and $name/suffix[1]">
            <xsl:value-of select="concat($name/given-names[1],' ',$name/surname[1],' ',$name/suffix[1])"/>
         </xsl:when>
         <xsl:when test="not($name/given-names[1]) and $name/surname[1] and $name/suffix[1]">
            <xsl:value-of select="concat($name/surname[1],' ',$name/suffix[1])"/>
         </xsl:when>
         <xsl:when test="$name/given-names[1] and $name/surname[1] and not($name/suffix[1])">
            <xsl:value-of select="concat($name/given-names[1],' ',$name/surname[1])"/>
         </xsl:when>
         <xsl:when test="not($name/given-names[1]) and $name/surname[1] and not($name/suffix[1])">
            <xsl:value-of select="$name/surname[1]"/>
         </xsl:when>
         <xsl:otherwise>
        
            <xsl:value-of select="'No elements present'"/>
         </xsl:otherwise>
      </xsl:choose>
  </xsl:function>
   <xsl:function xmlns="http://purl.oclc.org/dsdl/schematron" name="e:get-collab">
      <xsl:param name="collab"/>
      <xsl:for-each select="$collab/(*|text())">
         <xsl:choose>
            <xsl:when test="./name()='contrib-group'"/>
            <xsl:otherwise>
               <xsl:value-of select="."/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:for-each>
  </xsl:function>
   <xsl:function xmlns="http://purl.oclc.org/dsdl/schematron" name="e:isbn-sum" as="xs:integer">
      <xsl:param name="s" as="xs:string"/>
      <xsl:choose>
         <xsl:when test="string-length($s) = 10">
            <xsl:variable name="d1" select="number(substring($s,1,1)) * 10"/>
            <xsl:variable name="d2" select="number(substring($s,2,1)) * 9"/>
            <xsl:variable name="d3" select="number(substring($s,3,1)) * 8"/>
            <xsl:variable name="d4" select="number(substring($s,4,1)) * 7"/>
            <xsl:variable name="d5" select="number(substring($s,5,1)) * 6"/>
            <xsl:variable name="d6" select="number(substring($s,6,1)) * 5"/>
            <xsl:variable name="d7" select="number(substring($s,7,1)) * 4"/>
            <xsl:variable name="d8" select="number(substring($s,8,1)) * 3"/>
            <xsl:variable name="d9" select="number(substring($s,9,1)) * 2"/>
            <xsl:variable name="d10" select="number(substring($s,10,1)) * 1"/>
            <xsl:value-of select="number($d1 + $d2 + $d3 + $d4 + $d5 + $d6 + $d7 + $d8 + $d9 + $d10) mod 11"/>
         </xsl:when>
         <xsl:when test="string-length($s) = 13">
            <xsl:variable name="d1" select="number(substring($s,1,1))"/>
            <xsl:variable name="d2" select="number(substring($s,2,1)) * 3"/>
            <xsl:variable name="d3" select="number(substring($s,3,1))"/>
            <xsl:variable name="d4" select="number(substring($s,4,1)) * 3"/>
            <xsl:variable name="d5" select="number(substring($s,5,1))"/>
            <xsl:variable name="d6" select="number(substring($s,6,1)) * 3"/>
            <xsl:variable name="d7" select="number(substring($s,7,1))"/>
            <xsl:variable name="d8" select="number(substring($s,8,1)) * 3"/>
            <xsl:variable name="d9" select="number(substring($s,9,1))"/>
            <xsl:variable name="d10" select="number(substring($s,10,1)) * 3"/>
            <xsl:variable name="d11" select="number(substring($s,11,1))"/>
            <xsl:variable name="d12" select="number(substring($s,12,1)) * 3"/>
            <xsl:variable name="d13" select="number(substring($s,13,1))"/>
            <xsl:value-of select="number($d1 + $d2 + $d3 + $d4 + $d5 + $d6 + $d7 + $d8 + $d9 + $d10 + $d11 + $d12 + $d13) mod 10"/>
         </xsl:when>
         <xsl:otherwise>
            <xsl:value-of select="number('1')"/>
         </xsl:otherwise>
      </xsl:choose>
  </xsl:function>
   <xsl:function xmlns="http://purl.oclc.org/dsdl/schematron" name="e:escape-for-regex" as="xs:string">
      <xsl:param name="arg" as="xs:string?"/>
      <xsl:sequence select="replace($arg,'(\.|\[|\]|\\|\||\-|\^|\$|\?|\*|\+|\{|\}|\(|\))','\\$1')"/>
  </xsl:function>
   <xsl:function xmlns="http://purl.oclc.org/dsdl/schematron" name="e:get-ordinal" as="xs:string">
      <xsl:param name="value" as="xs:integer?"/>
      <xsl:if test="translate(string($value), '0123456789', '') = '' and number($value) &gt; 0">
         <xsl:variable name="mod100" select="$value mod 100"/>
         <xsl:variable name="mod10" select="$value mod 10"/>
         <xsl:choose>
            <xsl:when test="$mod100 = 11 or $mod100 = 12 or $mod100 = 13">
               <xsl:value-of select="concat($value,'th')"/>
            </xsl:when>
            <xsl:when test="$mod10 = 1">
               <xsl:value-of select="concat($value,'st')"/>
            </xsl:when>
            <xsl:when test="$mod10 = 2">
               <xsl:value-of select="concat($value,'nd')"/>
            </xsl:when>
            <xsl:when test="$mod10 = 3">
               <xsl:value-of select="concat($value,'rd')"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:value-of select="concat($value,'th')"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:if>
  </xsl:function>
   <xsl:function xmlns="http://purl.oclc.org/dsdl/schematron" name="e:org-conform" as="xs:string">
      <xsl:param name="s" as="xs:string"/>
      <xsl:choose>
         <xsl:when test="matches($s,'b\.\p{Zs}?subtilis')">
            <xsl:value-of select="'B. subtilis'"/>
         </xsl:when>
         <xsl:when test="matches($s,'bacillus\p{Zs}?subtilis')">
            <xsl:value-of select="'Bacillus subtilis'"/>
         </xsl:when>
         <xsl:when test="matches($s,'d\.\p{Zs}?melanogaster')">
            <xsl:value-of select="'D. melanogaster'"/>
         </xsl:when>
         <xsl:when test="matches($s,'drosophila\p{Zs}?melanogaster')">
            <xsl:value-of select="'Drosophila melanogaster'"/>
         </xsl:when>
         <xsl:when test="matches($s,'e\.\p{Zs}?coli')">
            <xsl:value-of select="'E. coli'"/>
         </xsl:when>
         <xsl:when test="matches($s,'escherichia\p{Zs}?coli')">
            <xsl:value-of select="'Escherichia coli'"/>
         </xsl:when>
         <xsl:when test="matches($s,'s\.\p{Zs}?pombe')">
            <xsl:value-of select="'S. pombe'"/>
         </xsl:when>
         <xsl:when test="matches($s,'schizosaccharomyces\p{Zs}?pombe')">
            <xsl:value-of select="'Schizosaccharomyces pombe'"/>
         </xsl:when>
         <xsl:when test="matches($s,'s\.\p{Zs}?cerevisiae')">
            <xsl:value-of select="'S. cerevisiae'"/>
         </xsl:when>
         <xsl:when test="matches($s,'saccharomyces\p{Zs}?cerevisiae')">
            <xsl:value-of select="'Saccharomyces cerevisiae'"/>
         </xsl:when>
         <xsl:when test="matches($s,'c\.\p{Zs}?elegans')">
            <xsl:value-of select="'C. elegans'"/>
         </xsl:when>
         <xsl:when test="matches($s,'caenorhabditis\p{Zs}?elegans')">
            <xsl:value-of select="'Caenorhabditis elegans'"/>
         </xsl:when>
         <xsl:when test="matches($s,'a\.\p{Zs}?thaliana')">
            <xsl:value-of select="'A. thaliana'"/>
         </xsl:when>
         <xsl:when test="matches($s,'arabidopsis\p{Zs}?thaliana')">
            <xsl:value-of select="'Arabidopsis thaliana'"/>
         </xsl:when>
         <xsl:when test="matches($s,'m\.\p{Zs}?thermophila')">
            <xsl:value-of select="'M. thermophila'"/>
         </xsl:when>
         <xsl:when test="matches($s,'myceliophthora\p{Zs}?thermophila')">
            <xsl:value-of select="'Myceliophthora thermophila'"/>
         </xsl:when>
         <xsl:when test="matches($s,'dictyostelium')">
            <xsl:value-of select="'Dictyostelium'"/>
         </xsl:when>
         <xsl:when test="matches($s,'p\.\p{Zs}?falciparum')">
            <xsl:value-of select="'P. falciparum'"/>
         </xsl:when>
         <xsl:when test="matches($s,'plasmodium\p{Zs}?falciparum')">
            <xsl:value-of select="'Plasmodium falciparum'"/>
         </xsl:when>
         <xsl:when test="matches($s,'s\.\p{Zs}?enterica')">
            <xsl:value-of select="'S. enterica'"/>
         </xsl:when>
         <xsl:when test="matches($s,'salmonella\p{Zs}?enterica')">
            <xsl:value-of select="'Salmonella enterica'"/>
         </xsl:when>
         <xsl:when test="matches($s,'s\.\p{Zs}?pyogenes')">
            <xsl:value-of select="'S. pyogenes'"/>
         </xsl:when>
         <xsl:when test="matches($s,'streptococcus\p{Zs}?pyogenes')">
            <xsl:value-of select="'Streptococcus pyogenes'"/>
         </xsl:when>
         <xsl:when test="matches($s,'p\.\p{Zs}?dumerilii')">
            <xsl:value-of select="'P. dumerilii'"/>
         </xsl:when>
         <xsl:when test="matches($s,'platynereis\p{Zs}?dumerilii')">
            <xsl:value-of select="'Platynereis dumerilii'"/>
         </xsl:when>
         <xsl:when test="matches($s,'p\.\p{Zs}?cynocephalus')">
            <xsl:value-of select="'P. cynocephalus'"/>
         </xsl:when>
         <xsl:when test="matches($s,'papio\p{Zs}?cynocephalus')">
            <xsl:value-of select="'Papio cynocephalus'"/>
         </xsl:when>
         <xsl:when test="matches($s,'o\.\p{Zs}?fasciatus')">
            <xsl:value-of select="'O. fasciatus'"/>
         </xsl:when>
         <xsl:when test="matches($s,'oncopeltus\p{Zs}?fasciatus')">
            <xsl:value-of select="'Oncopeltus fasciatus'"/>
         </xsl:when>
         <xsl:when test="matches($s,'n\.\p{Zs}?crassa')">
            <xsl:value-of select="'N. crassa'"/>
         </xsl:when>
         <xsl:when test="matches($s,'neurospora\p{Zs}?crassa')">
            <xsl:value-of select="'Neurospora crassa'"/>
         </xsl:when>
         <xsl:when test="matches($s,'c\.\p{Zs}?intestinalis')">
            <xsl:value-of select="'C. intestinalis'"/>
         </xsl:when>
         <xsl:when test="matches($s,'ciona\p{Zs}?intestinalis')">
            <xsl:value-of select="'Ciona intestinalis'"/>
         </xsl:when>
         <xsl:when test="matches($s,'e\.\p{Zs}?cuniculi')">
            <xsl:value-of select="'E. cuniculi'"/>
         </xsl:when>
         <xsl:when test="matches($s,'encephalitozoon\p{Zs}?cuniculi')">
            <xsl:value-of select="'Encephalitozoon cuniculi'"/>
         </xsl:when>
         <xsl:when test="matches($s,'h\.\p{Zs}?salinarum')">
            <xsl:value-of select="'H. salinarum'"/>
         </xsl:when>
         <xsl:when test="matches($s,'halobacterium\p{Zs}?salinarum')">
            <xsl:value-of select="'Halobacterium salinarum'"/>
         </xsl:when>
         <xsl:when test="matches($s,'s\.\p{Zs}?solfataricus')">
            <xsl:value-of select="'S. solfataricus'"/>
         </xsl:when>
         <xsl:when test="matches($s,'sulfolobus\p{Zs}?solfataricus')">
            <xsl:value-of select="'Sulfolobus solfataricus'"/>
         </xsl:when>
         <xsl:when test="matches($s,'s\.\p{Zs}?mediterranea')">
            <xsl:value-of select="'S. mediterranea'"/>
         </xsl:when>
         <xsl:when test="matches($s,'schmidtea\p{Zs}?mediterranea')">
            <xsl:value-of select="'Schmidtea mediterranea'"/>
         </xsl:when>
         <xsl:when test="matches($s,'s\.\p{Zs}?rosetta')">
            <xsl:value-of select="'S. rosetta'"/>
         </xsl:when>
         <xsl:when test="matches($s,'salpingoeca\p{Zs}?rosetta')">
            <xsl:value-of select="'Salpingoeca rosetta'"/>
         </xsl:when>
         <xsl:when test="matches($s,'n\.\p{Zs}?vectensis')">
            <xsl:value-of select="'N. vectensis'"/>
         </xsl:when>
         <xsl:when test="matches($s,'nematostella\p{Zs}?vectensis')">
            <xsl:value-of select="'Nematostella vectensis'"/>
         </xsl:when>
         <xsl:when test="matches($s,'s\.\p{Zs}?aureus')">
            <xsl:value-of select="'S. aureus'"/>
         </xsl:when>
         <xsl:when test="matches($s,'staphylococcus\p{Zs}?aureus')">
            <xsl:value-of select="'Staphylococcus aureus'"/>
         </xsl:when>
         <xsl:when test="matches($s,'v\.\p{Zs}?cholerae')">
            <xsl:value-of select="'V. cholerae'"/>
         </xsl:when>
         <xsl:when test="matches($s,'vibrio\p{Zs}?cholerae')">
            <xsl:value-of select="'Vibrio cholerae'"/>
         </xsl:when>
         <xsl:when test="matches($s,'t\.\p{Zs}?thermophila')">
            <xsl:value-of select="'T. thermophila'"/>
         </xsl:when>
         <xsl:when test="matches($s,'tetrahymena\p{Zs}?thermophila')">
            <xsl:value-of select="'Tetrahymena thermophila'"/>
         </xsl:when>
         <xsl:when test="matches($s,'c\.\p{Zs}?reinhardtii')">
            <xsl:value-of select="'C. reinhardtii'"/>
         </xsl:when>
         <xsl:when test="matches($s,'chlamydomonas\p{Zs}?reinhardtii')">
            <xsl:value-of select="'Chlamydomonas reinhardtii'"/>
         </xsl:when>
         <xsl:when test="matches($s,'n\.\p{Zs}?attenuata')">
            <xsl:value-of select="'N. attenuata'"/>
         </xsl:when>
         <xsl:when test="matches($s,'nicotiana\p{Zs}?attenuata')">
            <xsl:value-of select="'Nicotiana attenuata'"/>
         </xsl:when>
         <xsl:when test="matches($s,'e\.\p{Zs}?carotovora')">
            <xsl:value-of select="'E. carotovora'"/>
         </xsl:when>
         <xsl:when test="matches($s,'erwinia\p{Zs}?carotovora')">
            <xsl:value-of select="'Erwinia carotovora'"/>
         </xsl:when>
         <xsl:when test="matches($s,'e\.\p{Zs}?faecalis')">
            <xsl:value-of select="'E. faecalis'"/>
         </xsl:when>
         <xsl:when test="matches($s,'h\.\p{Zs}?sapiens')">
            <xsl:value-of select="'H. sapiens'"/>
         </xsl:when>
         <xsl:when test="matches($s,'homo\p{Zs}?sapiens')">
            <xsl:value-of select="'Homo sapiens'"/>
         </xsl:when>
         <xsl:when test="matches($s,'c\.\p{Zs}?trachomatis')">
            <xsl:value-of select="'C. trachomatis'"/>
         </xsl:when>
         <xsl:when test="matches($s,'chlamydia\p{Zs}?trachomatis')">
            <xsl:value-of select="'Chlamydia trachomatis'"/>
         </xsl:when>
         <xsl:when test="matches($s,'enterococcus\p{Zs}?faecalis')">
            <xsl:value-of select="'Enterococcus faecalis'"/>
         </xsl:when>
         <xsl:when test="matches($s,'x\.\p{Zs}?laevis')">
            <xsl:value-of select="'X. laevis'"/>
         </xsl:when>
         <xsl:when test="matches($s,'xenopus\p{Zs}?laevis')">
            <xsl:value-of select="'Xenopus laevis'"/>
         </xsl:when>
         <xsl:when test="matches($s,'x\.\p{Zs}?tropicalis')">
            <xsl:value-of select="'X. tropicalis'"/>
         </xsl:when>
         <xsl:when test="matches($s,'xenopus\p{Zs}?tropicalis')">
            <xsl:value-of select="'Xenopus tropicalis'"/>
         </xsl:when>
         <xsl:when test="matches($s,'m\.\p{Zs}?musculus')">
            <xsl:value-of select="'M. musculus'"/>
         </xsl:when>
         <xsl:when test="matches($s,'mus\p{Zs}?musculus')">
            <xsl:value-of select="'Mus musculus'"/>
         </xsl:when>
         <xsl:when test="matches($s,'d\.\p{Zs}?immigrans')">
            <xsl:value-of select="'D. immigrans'"/>
         </xsl:when>
         <xsl:when test="matches($s,'drosophila\p{Zs}?immigrans')">
            <xsl:value-of select="'Drosophila immigrans'"/>
         </xsl:when>
         <xsl:when test="matches($s,'d\.\p{Zs}?subobscura')">
            <xsl:value-of select="'D. subobscura'"/>
         </xsl:when>
         <xsl:when test="matches($s,'drosophila\p{Zs}?subobscura')">
            <xsl:value-of select="'Drosophila subobscura'"/>
         </xsl:when>
         <xsl:when test="matches($s,'d\.\p{Zs}?affinis')">
            <xsl:value-of select="'D. affinis'"/>
         </xsl:when>
         <xsl:when test="matches($s,'drosophila\p{Zs}?affinis')">
            <xsl:value-of select="'Drosophila affinis'"/>
         </xsl:when>
         <xsl:when test="matches($s,'d\.\p{Zs}?obscura')">
            <xsl:value-of select="'D. obscura'"/>
         </xsl:when>
         <xsl:when test="matches($s,'drosophila\p{Zs}?obscura')">
            <xsl:value-of select="'Drosophila obscura'"/>
         </xsl:when>
         <xsl:when test="matches($s,'f\.\p{Zs}?tularensis')">
            <xsl:value-of select="'F. tularensis'"/>
         </xsl:when>
         <xsl:when test="matches($s,'francisella\p{Zs}?tularensis')">
            <xsl:value-of select="'Francisella tularensis'"/>
         </xsl:when>
         <xsl:when test="matches($s,'p\.\p{Zs}?plantaginis')">
            <xsl:value-of select="'P. plantaginis'"/>
         </xsl:when>
         <xsl:when test="matches($s,'podosphaera\p{Zs}?plantaginis')">
            <xsl:value-of select="'Podosphaera plantaginis'"/>
         </xsl:when>
         <xsl:when test="matches($s,'p\.\p{Zs}?lanceolata')">
            <xsl:value-of select="'P. lanceolata'"/>
         </xsl:when>
         <xsl:when test="matches($s,'plantago\p{Zs}?lanceolata')">
            <xsl:value-of select="'Plantago lanceolata'"/>
         </xsl:when>
         <xsl:when test="matches($s,'m\.\p{Zs}?trossulus')">
            <xsl:value-of select="'M. trossulus'"/>
         </xsl:when>
         <xsl:when test="matches($s,'mytilus\p{Zs}?trossulus')">
            <xsl:value-of select="'Mytilus trossulus'"/>
         </xsl:when>
         <xsl:when test="matches($s,'m\.\p{Zs}?edulis')">
            <xsl:value-of select="'M. edulis'"/>
         </xsl:when>
         <xsl:when test="matches($s,'mytilus\p{Zs}?edulis')">
            <xsl:value-of select="'Mytilus edulis'"/>
         </xsl:when>
         <xsl:when test="matches($s,'m\.\p{Zs}?chilensis')">
            <xsl:value-of select="'M. chilensis'"/>
         </xsl:when>
         <xsl:when test="matches($s,'mytilus\p{Zs}?chilensis')">
            <xsl:value-of select="'Mytilus chilensis'"/>
         </xsl:when>
         <xsl:when test="matches($s,'u\.\p{Zs}?maydis')">
            <xsl:value-of select="'U. maydis'"/>
         </xsl:when>
         <xsl:when test="matches($s,'ustilago\p{Zs}?maydis')">
            <xsl:value-of select="'Ustilago maydis'"/>
         </xsl:when>
         <xsl:when test="matches($s,'p\.\p{Zs}?knowlesi')">
            <xsl:value-of select="'P. knowlesi'"/>
         </xsl:when>
         <xsl:when test="matches($s,'plasmodium\p{Zs}?knowlesi')">
            <xsl:value-of select="'Plasmodium knowlesi'"/>
         </xsl:when>
         <xsl:when test="matches($s,'p\.\p{Zs}?aeruginosa')">
            <xsl:value-of select="'P. aeruginosa'"/>
         </xsl:when>
         <xsl:when test="matches($s,'pseudomonas\p{Zs}?aeruginosa')">
            <xsl:value-of select="'Pseudomonas aeruginosa'"/>
         </xsl:when>
         <xsl:when test="matches($s,'t\.\p{Zs}?brucei')">
            <xsl:value-of select="'T. brucei'"/>
         </xsl:when>
         <xsl:when test="matches($s,'trypanosoma\p{Zs}?brucei')">
            <xsl:value-of select="'Trypanosoma brucei'"/>
         </xsl:when>
         <xsl:when test="matches($s,'caulobacter\p{Zs}?crescentus')">
            <xsl:value-of select="'Caulobacter crescentus'"/>
         </xsl:when>
         <xsl:when test="matches($s,'c\.\p{Zs}?crescentus')">
            <xsl:value-of select="'C. crescentus'"/>
         </xsl:when>
         <xsl:when test="matches($s,'agrobacterium\p{Zs}?tumefaciens')">
            <xsl:value-of select="'Agrobacterium tumefaciens'"/>
         </xsl:when>
         <xsl:when test="matches($s,'a\.\p{Zs}?tumefaciens')">
            <xsl:value-of select="'A. tumefaciens'"/>
         </xsl:when>
         <xsl:when test="matches($s,'t\.\p{Zs}?gondii')">
            <xsl:value-of select="'T. gondii'"/>
         </xsl:when>
         <xsl:when test="matches($s,'toxoplasma\p{Zs}?gondii')">
            <xsl:value-of select="'Toxoplasma gondii'"/>
         </xsl:when>
         <xsl:when test="matches($s,'d\.\p{Zs}?rerio')">
            <xsl:value-of select="'D. rerio'"/>
         </xsl:when>
         <xsl:when test="matches($s,'danio\p{Zs}?rerio')">
            <xsl:value-of select="'Danio rerio'"/>
         </xsl:when>
         <xsl:when test="matches($s,'drosophila')">
            <xsl:value-of select="'Drosophila'"/>
         </xsl:when>
         <xsl:when test="matches($s,'yimenosaurus')">
            <xsl:value-of select="'Yimenosaurus'"/>
         </xsl:when>
         <xsl:when test="matches($s,'lesothosaurus\p{Zs}?diagnosticus')">
            <xsl:value-of select="'Lesothosaurus diagnosticus'"/>
         </xsl:when>
         <xsl:when test="matches($s,'l.\p{Zs}?diagnosticus')">
            <xsl:value-of select="'L. diagnosticus'"/>
         </xsl:when>
         <xsl:when test="matches($s,'scelidosaurus\p{Zs}?harrisonii')">
            <xsl:value-of select="'Scelidosaurus harrisonii'"/>
         </xsl:when>
         <xsl:when test="matches($s,'s.\p{Zs}?harrisonii')">
            <xsl:value-of select="'S. harrisonii'"/>
         </xsl:when>
         <xsl:when test="matches($s,'haya\p{Zs}?griva')">
            <xsl:value-of select="'Haya griva'"/>
         </xsl:when>
         <xsl:when test="matches($s,'h.\p{Zs}?griva')">
            <xsl:value-of select="'H. griva'"/>
         </xsl:when>
         <xsl:when test="matches($s,'polacanthus\p{Zs}?foxii')">
            <xsl:value-of select="'Polacanthus foxii'"/>
         </xsl:when>
         <xsl:when test="matches($s,'p.\p{Zs}?foxii')">
            <xsl:value-of select="'P. foxii'"/>
         </xsl:when>
         <xsl:when test="matches($s,'scutellosaurus\p{Zs}?lawleri')">
            <xsl:value-of select="'Scutellosaurus lawleri'"/>
         </xsl:when>
         <xsl:when test="matches($s,'s.\p{Zs}?lawleri')">
            <xsl:value-of select="'S. lawleri'"/>
         </xsl:when>
         <xsl:when test="matches($s,'saichania\p{Zs}?chulsanensis')">
            <xsl:value-of select="'Saichania chulsanensis'"/>
         </xsl:when>
         <xsl:when test="matches($s,'s.\p{Zs}?chulsanensis')">
            <xsl:value-of select="'S. chulsanensis'"/>
         </xsl:when>
         <xsl:when test="matches($s,'gargoyleosaurus\p{Zs}?parkpinorum')">
            <xsl:value-of select="'Gargoyleosaurus parkpinorum'"/>
         </xsl:when>
         <xsl:when test="matches($s,'g.\p{Zs}?parkpinorum')">
            <xsl:value-of select="'G. parkpinorum'"/>
         </xsl:when>
         <xsl:when test="matches($s,'europelta\p{Zs}?carbonensis')">
            <xsl:value-of select="'Europelta carbonensis'"/>
         </xsl:when>
         <xsl:when test="matches($s,'e.\p{Zs}?carbonensis')">
            <xsl:value-of select="'E. carbonensis'"/>
         </xsl:when>
         <xsl:when test="matches($s,'stegosaurus\p{Zs}?stenops')">
            <xsl:value-of select="'Stegosaurus stenops'"/>
         </xsl:when>
         <xsl:when test="matches($s,'s.\p{Zs}?stenops')">
            <xsl:value-of select="'S. stenops'"/>
         </xsl:when>
         <xsl:when test="matches($s,'pinacosaurus\p{Zs}?grangeri')">
            <xsl:value-of select="'Pinacosaurus grangeri'"/>
         </xsl:when>
         <xsl:when test="matches($s,'p.\p{Zs}?grangeri')">
            <xsl:value-of select="'P. grangeri'"/>
         </xsl:when>
         <xsl:when test="matches($s,'tatisaurus\p{Zs}?oehleri')">
            <xsl:value-of select="'Tatisaurus oehleri'"/>
         </xsl:when>
         <xsl:when test="matches($s,'t.\p{Zs}?oehleri')">
            <xsl:value-of select="'T. oehleri'"/>
         </xsl:when>
         <xsl:when test="matches($s,'hungarosaurus\p{Zs}?tormai')">
            <xsl:value-of select="'Hungarosaurus tormai'"/>
         </xsl:when>
         <xsl:when test="matches($s,'h.\p{Zs}?tormai')">
            <xsl:value-of select="'H. tormai'"/>
         </xsl:when>
         <xsl:when test="matches($s,'lesothosaurus\p{Zs}?diagnosticus')">
            <xsl:value-of select="'Lesothosaurus diagnosticus'"/>
         </xsl:when>
         <xsl:when test="matches($s,'l.\p{Zs}?diagnosticus')">
            <xsl:value-of select="'L. diagnosticus'"/>
         </xsl:when>
         <xsl:when test="matches($s,'bienosaurus\p{Zs}?lufengensis')">
            <xsl:value-of select="'Bienosaurus lufengensis'"/>
         </xsl:when>
         <xsl:when test="matches($s,'b.\p{Zs}?lufengensis')">
            <xsl:value-of select="'B. lufengensis'"/>
         </xsl:when>
         <xsl:when test="matches($s,'fabrosaurus\p{Zs}?australis')">
            <xsl:value-of select="'Fabrosaurus australis'"/>
         </xsl:when>
         <xsl:when test="matches($s,'f.\p{Zs}?australis')">
            <xsl:value-of select="'F. australis'"/>
         </xsl:when>
         <xsl:when test="matches($s,'chinshakiangosaurus\p{Zs}?chunghoensis')">
            <xsl:value-of select="'Chinshakiangosaurus chunghoensis'"/>
         </xsl:when>
         <xsl:when test="matches($s,'c.\p{Zs}?chunghoensis')">
            <xsl:value-of select="'C. chunghoensis'"/>
         </xsl:when>
         <xsl:when test="matches($s,'euoplocephalus\p{Zs}?tutus')">
            <xsl:value-of select="'Euoplocephalus tutus'"/>
         </xsl:when>
         <xsl:when test="matches($s,'e.\p{Zs}?tutus')">
            <xsl:value-of select="'E. tutus'"/>
         </xsl:when>
         <xsl:when test="matches($s,'xenopus')">
            <xsl:value-of select="'Xenopus'"/>
         </xsl:when>
         <xsl:otherwise>
            <xsl:value-of select="'undefined'"/>
         </xsl:otherwise>
      </xsl:choose>
   </xsl:function>
   <xsl:function xmlns="http://purl.oclc.org/dsdl/schematron" name="e:code-check">
      <xsl:param name="s" as="xs:string"/>
      <xsl:element name="code">
         <xsl:if test="contains($s,'github')">
            <xsl:element name="match">
               <xsl:value-of select="'github '"/>
            </xsl:element>
         </xsl:if>
         <xsl:if test="contains($s,'gitlab')">
            <xsl:element name="match">
               <xsl:value-of select="'gitlab '"/>
            </xsl:element>
         </xsl:if>
         <xsl:if test="contains($s,'git.exeter.ac.uk')">
            <xsl:element name="match">
               <xsl:value-of select="'git.exeter.ac.uk '"/>
            </xsl:element>
         </xsl:if>
         <xsl:if test="contains($s,'codeplex')">
            <xsl:element name="match">
               <xsl:value-of select="'codeplex '"/>
            </xsl:element>
         </xsl:if>
         <xsl:if test="contains($s,'sourceforge')">
            <xsl:element name="match">
               <xsl:value-of select="'sourceforge '"/>
            </xsl:element>
         </xsl:if>
         <xsl:if test="contains($s,'bitbucket')">
            <xsl:element name="match">
               <xsl:value-of select="'bitbucket '"/>
            </xsl:element>
         </xsl:if>
         <xsl:if test="contains($s,'assembla ')">
            <xsl:element name="match">
               <xsl:value-of select="'assembla '"/>
            </xsl:element>
         </xsl:if>
      </xsl:element>
  </xsl:function>
   <xsl:function xmlns="http://purl.oclc.org/dsdl/schematron" name="e:get-xrefs">
      <xsl:param name="article"/>
      <xsl:param name="object-id"/>
      <xsl:param name="object-type"/>
      <xsl:variable name="object-no" select="replace($object-id,'[^0-9]','')"/>
      <xsl:element name="matches">
         <xsl:for-each select="$article//xref[(@ref-type=$object-type) and not(ancestor::caption)]">
            <xsl:variable name="rid-no" select="replace(./@rid,'[^0-9]','')"/>
            <xsl:variable name="text-no" select="tokenize(normalize-space(replace(.,'[^0-9]',' ')),'\p{Zs}')[last()]"/>
            <xsl:choose>
               <xsl:when test="./@rid = $object-id">
                  <xsl:element name="match">
                     <xsl:attribute name="sec-id">
                        <xsl:value-of select="./ancestor::sec[1]/@id"/>
                     </xsl:attribute>
                     <xsl:value-of select="self::*"/>
                  </xsl:element>
               </xsl:when>
               <xsl:when test="contains(./@rid,'app')"/>
               <xsl:when test="($rid-no lt $object-no) and (./following-sibling::text()[1] = '–') and (./following-sibling::*[1]/name()='xref') and (number(replace(replace(./following-sibling::xref[1]/@rid,'\-','.'),'[a-z]','')) gt number($object-no))">
                  <xsl:element name="match">
                     <xsl:attribute name="sec-id">
                        <xsl:value-of select="./ancestor::sec[1]/@id"/>
                     </xsl:attribute>
                     <xsl:value-of select="self::*"/>
                  </xsl:element>
               </xsl:when>
               <xsl:when test="($rid-no lt $object-no) and contains(.,$object-no) and (contains(.,'Videos') or contains(.,'videos') and contains(.,'–'))">
                  <xsl:element name="match">
                     <xsl:attribute name="sec-id">
                        <xsl:value-of select="./ancestor::sec[1]/@id"/>
                     </xsl:attribute>
                     <xsl:value-of select="self::*"/>
                  </xsl:element>
               </xsl:when>
               <xsl:when test="($rid-no lt $object-no) and (contains(.,'Videos') or contains(.,'videos') and contains(.,'—')) and ($text-no gt $object-no)">
                  <xsl:element name="match">
                     <xsl:attribute name="sec-id">
                        <xsl:value-of select="./ancestor::sec[1]/@id"/>
                     </xsl:attribute>
                     <xsl:value-of select="self::*"/>
                  </xsl:element>
               </xsl:when>
               <xsl:otherwise/>
            </xsl:choose>
         </xsl:for-each>
      </xsl:element>
  </xsl:function>
   <xsl:function xmlns="http://purl.oclc.org/dsdl/schematron" name="e:get-iso-pub-date">
      <xsl:param name="element"/>
      <xsl:choose>
         <xsl:when test="$element/ancestor-or-self::article//article-meta/pub-date[(@date-type='publication') or (@date-type='pub')]/month">
            <xsl:variable name="pub-date" select="$element/ancestor-or-self::article//article-meta/pub-date[(@date-type='publication') or (@date-type='pub')]"/>
            <xsl:value-of select="concat($pub-date/year,'-',$pub-date/month,'-',$pub-date/day)"/>
         </xsl:when>
         <xsl:otherwise/>
      </xsl:choose>
  </xsl:function>
   <xsl:function xmlns="http://purl.oclc.org/dsdl/schematron" name="e:get-copyright-holder">
      <xsl:param name="contrib-group"/>
      <xsl:variable name="author-count" select="count($contrib-group/contrib[@contrib-type='author'])"/>
      <xsl:choose>
         <xsl:when test="$author-count lt 1"/>
         <xsl:when test="$author-count = 1">
            <xsl:choose>
               <xsl:when test="$contrib-group/contrib[@contrib-type='author']/collab">
                  <xsl:value-of select="$contrib-group/contrib[@contrib-type='author']/collab[1]/text()[1]"/>
               </xsl:when>
               <xsl:otherwise>
                  <xsl:value-of select="$contrib-group/contrib[@contrib-type='author']/name[1]/surname[1]"/>
               </xsl:otherwise>
            </xsl:choose>
         </xsl:when>
         <xsl:when test="$author-count = 2">
            <xsl:choose>
               <xsl:when test="$contrib-group/contrib[@contrib-type='author']/collab">
                  <xsl:choose>
                     <xsl:when test="$contrib-group/contrib[@contrib-type='author'][1]/collab and $contrib-group/contrib[@contrib-type='author'][2]/collab">
                        <xsl:value-of select="concat($contrib-group/contrib[@contrib-type='author']/collab[1]/text()[1],' and ',$contrib-group/contrib[@contrib-type='author']/collab[2]/text()[1])"/>
                     </xsl:when>
                     <xsl:when test="$contrib-group/contrib[@contrib-type='author'][1]/collab">
                        <xsl:value-of select="concat($contrib-group/contrib[@contrib-type='author'][1]/collab[1]/text()[1],' and ',$contrib-group/contrib[@contrib-type='author'][2]/name[1]/surname[1])"/>
                     </xsl:when>
                     <xsl:otherwise>
                        <xsl:value-of select="concat($contrib-group/contrib[@contrib-type='author'][1]/name[1]/surname[1],' and ',$contrib-group/contrib[@contrib-type='author'][2]/collab[1]/text()[1])"/>
                     </xsl:otherwise>
                  </xsl:choose>
               </xsl:when>
               <xsl:otherwise>
                  <xsl:value-of select="concat($contrib-group/contrib[@contrib-type='author'][1]/name[1]/surname[1],' and ',$contrib-group/contrib[@contrib-type='author'][2]/name[1]/surname[1])"/>
               </xsl:otherwise>
            </xsl:choose>
         </xsl:when>
      
         <xsl:otherwise>
            <xsl:variable name="is-equal-contrib" select="if ($contrib-group/contrib[@contrib-type='author'][1]/@equal-contrib='yes') then true() else false()"/>
            <xsl:choose>
               <xsl:when test="$is-equal-contrib">
            
                  <xsl:variable name="equal-contrib-rid" select="$contrib-group/contrib[@contrib-type='author'][1]/xref[starts-with(@rid,'equal-contrib')]/@rid"/>
                  <xsl:variable name="first-authors" select="$contrib-group/contrib[@contrib-type='author' and @equal-contrib='yes' and xref[@rid=$equal-contrib-rid] and (not(preceding-sibling::contrib) or preceding-sibling::contrib[1][@equal-contrib='yes' and xref[@rid=$equal-contrib-rid]])]"/>
                  <xsl:choose>
              
                     <xsl:when test="$author-count = 3 and count($first-authors) = 3">
                        <xsl:value-of select="concat(e:get-surname($contrib-group/contrib[@contrib-type='author'][1]),                   ', ',                   e:get-surname($contrib-group/contrib[@contrib-type='author'][2]),                   ' and ',                   e:get-surname($contrib-group/contrib[@contrib-type='author'][3]))"/>
                     </xsl:when>
              
                     <xsl:when test="count($first-authors) gt 3">
                        <xsl:variable name="first-auth-string" select="string-join(for $auth in $contrib-group/contrib[@contrib-type='author'][position() lt 4] return e:get-surname($auth),', ')"/>
                        <xsl:value-of select="concat($first-auth-string,' et al')"/>
                     </xsl:when>
              
                     <xsl:otherwise>
                        <xsl:variable name="first-auth-string" select="string-join(for $auth in $first-authors return e:get-surname($auth),', ')"/>
                        <xsl:value-of select="concat($first-auth-string,' et al')"/>
                     </xsl:otherwise>
                  </xsl:choose>
               </xsl:when>
          
               <xsl:otherwise>
                  <xsl:value-of select="concat(e:get-surname($contrib-group/contrib[@contrib-type='author'][1]),' et al')"/>
               </xsl:otherwise>
            </xsl:choose>
         </xsl:otherwise>
      </xsl:choose>
  </xsl:function>
   <xsl:function xmlns="http://purl.oclc.org/dsdl/schematron" name="e:get-surname" as="text()">
      <xsl:param name="contrib"/>
      <xsl:choose>
         <xsl:when test="$contrib/collab">
            <xsl:value-of select="$contrib/collab[1]/text()[1]"/>
         </xsl:when>
         <xsl:otherwise>
            <xsl:value-of select="$contrib//name[1]/surname[1]"/>
         </xsl:otherwise>
      </xsl:choose>
  </xsl:function>
   <xsl:function xmlns="http://purl.oclc.org/dsdl/schematron" name="e:insight-box" as="element()">
      <xsl:param name="box" as="xs:string"/>
      <xsl:param name="cite-text" as="xs:string"/>
      <xsl:variable name="box-text" select="substring-after(substring-after($box,'article'),' ')"/> 
    
      <xsl:element name="list">
         <xsl:for-each select="tokenize($cite-text,'\p{Zs}')">
            <xsl:choose>
               <xsl:when test="contains($box-text,.)"/>
               <xsl:otherwise>
                  <xsl:element name="item">
                     <xsl:attribute name="type">cite</xsl:attribute>
                     <xsl:value-of select="."/>
                  </xsl:element>
               </xsl:otherwise>
            </xsl:choose>
         </xsl:for-each>
         <xsl:for-each select="tokenize($box-text,'\p{Zs}')">
            <xsl:choose>
               <xsl:when test="contains($cite-text,.)"/>
               <xsl:otherwise>
                  <xsl:element name="item">
                     <xsl:attribute name="type">box</xsl:attribute>
                     <xsl:value-of select="."/>
                  </xsl:element>
               </xsl:otherwise>
            </xsl:choose>
         </xsl:for-each>
      </xsl:element>
  </xsl:function>
   <xsl:function xmlns="http://purl.oclc.org/dsdl/schematron" name="e:get-latin-terms" as="element()">
      <xsl:param name="article" as="element()"/>
      <xsl:param name="regex" as="xs:string"/>
    
      <xsl:variable name="roman-text" select="lower-case(       string-join(for $x in $article/*[local-name() = 'body' or local-name() = 'back']//*       return       if ($x/ancestor-or-self::sec[@sec-type='additional-information']) then ()       else if ($x/ancestor-or-self::ref-list) then ()       else if ($x/local-name() = 'italic') then ()       else $x/text(),' '))"/>
      <xsl:variable name="italic-text" select="lower-case(string-join($article//*:italic[not(ancestor::ref-list) and not(ancestor::sec[@sec-type='additional-information'])],' '))"/>
    
    
      <xsl:element name="result">
         <xsl:choose>
            <xsl:when test="matches($roman-text,$regex)">
               <xsl:element name="list">
                  <xsl:attribute name="list-type">roman</xsl:attribute>
                  <xsl:for-each select="tokenize($regex,'\|')">
                     <xsl:variable name="display" select="replace(replace(.,'\\p\{Zs\}\+',' '),'^ | $','')"/>
                     <xsl:element name="match">
                        <xsl:attribute name="count">
                           <xsl:value-of select="count(tokenize($roman-text,.)) - 1"/>
                        </xsl:attribute>
                        <xsl:value-of select="$display"/>
                     </xsl:element>
                  </xsl:for-each>
               </xsl:element>
            </xsl:when>
            <xsl:otherwise>
               <xsl:element name="list">
                  <xsl:attribute name="list-type">roman</xsl:attribute>
               </xsl:element>
            </xsl:otherwise>
         </xsl:choose>
         <xsl:choose>
            <xsl:when test="matches($italic-text,$regex)">
               <xsl:element name="list">
                  <xsl:attribute name="list-type">italic</xsl:attribute>
                  <xsl:for-each select="tokenize($regex,'\|')">
                     <xsl:variable name="display" select="replace(.,'\\p\{Zs\}\+',' ')"/>
                     <xsl:element name="match">
                        <xsl:attribute name="count">
                           <xsl:value-of select="count(tokenize($italic-text,.)) - 1"/>
                        </xsl:attribute>
                        <xsl:value-of select="$display"/>
                     </xsl:element>
                  </xsl:for-each>
               </xsl:element>
            </xsl:when>
            <xsl:otherwise>
               <xsl:element name="list">
                  <xsl:attribute name="list-type">italic</xsl:attribute>
               </xsl:element>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:element>
  </xsl:function>
   <xsl:function xmlns="http://purl.oclc.org/dsdl/schematron" name="e:print-latin-terms" as="xs:string">
      <xsl:param name="list" as="element()"/>
      <xsl:value-of select="string-join(       for $term in $list//*:match[@count != '0']        return if (number($term/@count) gt 1) then concat($term/@count,' instances of ',$term)       else concat($term/@count,' instance of ',$term)       ,', ')"/>
  </xsl:function>
   <xsl:function xmlns="http://purl.oclc.org/dsdl/schematron" name="e:list-panels">
      <xsl:param name="caption" as="xs:string"/>
      <xsl:element name="list">
         <xsl:for-each select="tokenize($caption,'\.\p{Zs}+')">
            <xsl:if test="matches(.,'^[B-K]\p{P}?[A-K]?\.?\p{Zs}+')">
               <xsl:element name="item">
                  <xsl:attribute name="token">
                     <xsl:value-of select="substring-before(.,' ')"/>
                  </xsl:attribute>
                  <xsl:value-of select="."/>
               </xsl:element>
            </xsl:if>
         </xsl:for-each>
      </xsl:element>
  </xsl:function>
   <xsl:function xmlns="http://purl.oclc.org/dsdl/schematron" name="e:get-weekday" as="xs:integer?">
      <xsl:param name="date" as="xs:anyAtomicType?"/>
      <xsl:sequence select="       if (empty($date)) then ()       else xs:integer((xs:date($date) - xs:date('1901-01-06')) div xs:dayTimeDuration('P1D')) mod 7       "/>
  </xsl:function>
   <xsl:function xmlns="http://purl.oclc.org/dsdl/schematron" name="e:line-count" as="xs:integer">
      <xsl:param name="arg" as="xs:string?"/>
    
      <xsl:sequence select="count(tokenize($arg,'(\r\n?|\n\r?)'))"/>
    
  </xsl:function>

   <!--DEFAULT RULES-->


   <!--MODE: SCHEMATRON-SELECT-FULL-PATH-->
   <!--This mode can be used to generate an ugly though full XPath for locators-->
   <xsl:template match="*" mode="schematron-select-full-path">
      <xsl:apply-templates select="." mode="schematron-get-full-path"/>
   </xsl:template>

   <!--MODE: SCHEMATRON-FULL-PATH-->
   <!--This mode can be used to generate an ugly though full XPath for locators-->
   <xsl:template match="*" mode="schematron-get-full-path">
      <xsl:apply-templates select="parent::*" mode="schematron-get-full-path"/>
      <xsl:text>/</xsl:text>
      <xsl:choose>
         <xsl:when test="namespace-uri()=''">
            <xsl:value-of select="name()"/>
         </xsl:when>
         <xsl:otherwise>
            <xsl:text>*:</xsl:text>
            <xsl:value-of select="local-name()"/>
            <xsl:text>[namespace-uri()='</xsl:text>
            <xsl:value-of select="namespace-uri()"/>
            <xsl:text>']</xsl:text>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:variable name="preceding" select="count(preceding-sibling::*[local-name()=local-name(current())                                   and namespace-uri() = namespace-uri(current())])"/>
      <xsl:text>[</xsl:text>
      <xsl:value-of select="1+ $preceding"/>
      <xsl:text>]</xsl:text>
   </xsl:template>
   <xsl:template match="@*" mode="schematron-get-full-path">
      <xsl:apply-templates select="parent::*" mode="schematron-get-full-path"/>
      <xsl:text>/</xsl:text>
      <xsl:choose>
         <xsl:when test="namespace-uri()=''">@<xsl:value-of select="name()"/>
         </xsl:when>
         <xsl:otherwise>
            <xsl:text>@*[local-name()='</xsl:text>
            <xsl:value-of select="local-name()"/>
            <xsl:text>' and namespace-uri()='</xsl:text>
            <xsl:value-of select="namespace-uri()"/>
            <xsl:text>']</xsl:text>
         </xsl:otherwise>
      </xsl:choose>
   </xsl:template>

   <!--MODE: SCHEMATRON-FULL-PATH-2-->
   <!--This mode can be used to generate prefixed XPath for humans-->
   <xsl:template match="node() | @*" mode="schematron-get-full-path-2">
      <xsl:for-each select="ancestor-or-self::*">
         <xsl:text>/</xsl:text>
         <xsl:value-of select="name(.)"/>
         <xsl:if test="preceding-sibling::*[name(.)=name(current())]">
            <xsl:text>[</xsl:text>
            <xsl:value-of select="count(preceding-sibling::*[name(.)=name(current())])+1"/>
            <xsl:text>]</xsl:text>
         </xsl:if>
      </xsl:for-each>
      <xsl:if test="not(self::*)">
         <xsl:text/>/@<xsl:value-of select="name(.)"/>
      </xsl:if>
   </xsl:template>
   <!--MODE: SCHEMATRON-FULL-PATH-3-->
   <!--This mode can be used to generate prefixed XPath for humans 
	(Top-level element has index)-->
   <xsl:template match="node() | @*" mode="schematron-get-full-path-3">
      <xsl:for-each select="ancestor-or-self::*">
         <xsl:text>/</xsl:text>
         <xsl:value-of select="name(.)"/>
         <xsl:if test="parent::*">
            <xsl:text>[</xsl:text>
            <xsl:value-of select="count(preceding-sibling::*[name(.)=name(current())])+1"/>
            <xsl:text>]</xsl:text>
         </xsl:if>
      </xsl:for-each>
      <xsl:if test="not(self::*)">
         <xsl:text/>/@<xsl:value-of select="name(.)"/>
      </xsl:if>
   </xsl:template>

   <!--MODE: GENERATE-ID-FROM-PATH -->
   <xsl:template match="/" mode="generate-id-from-path"/>
   <xsl:template match="text()" mode="generate-id-from-path">
      <xsl:apply-templates select="parent::*" mode="generate-id-from-path"/>
      <xsl:value-of select="concat('.text-', 1+count(preceding-sibling::text()), '-')"/>
   </xsl:template>
   <xsl:template match="comment()" mode="generate-id-from-path">
      <xsl:apply-templates select="parent::*" mode="generate-id-from-path"/>
      <xsl:value-of select="concat('.comment-', 1+count(preceding-sibling::comment()), '-')"/>
   </xsl:template>
   <xsl:template match="processing-instruction()" mode="generate-id-from-path">
      <xsl:apply-templates select="parent::*" mode="generate-id-from-path"/>
      <xsl:value-of select="concat('.processing-instruction-', 1+count(preceding-sibling::processing-instruction()), '-')"/>
   </xsl:template>
   <xsl:template match="@*" mode="generate-id-from-path">
      <xsl:apply-templates select="parent::*" mode="generate-id-from-path"/>
      <xsl:value-of select="concat('.@', name())"/>
   </xsl:template>
   <xsl:template match="*" mode="generate-id-from-path" priority="-0.5">
      <xsl:apply-templates select="parent::*" mode="generate-id-from-path"/>
      <xsl:text>.</xsl:text>
      <xsl:value-of select="concat('.',name(),'-',1+count(preceding-sibling::*[name()=name(current())]),'-')"/>
   </xsl:template>

   <!--MODE: GENERATE-ID-2 -->
   <xsl:template match="/" mode="generate-id-2">U</xsl:template>
   <xsl:template match="*" mode="generate-id-2" priority="2">
      <xsl:text>U</xsl:text>
      <xsl:number level="multiple" count="*"/>
   </xsl:template>
   <xsl:template match="node()" mode="generate-id-2">
      <xsl:text>U.</xsl:text>
      <xsl:number level="multiple" count="*"/>
      <xsl:text>n</xsl:text>
      <xsl:number count="node()"/>
   </xsl:template>
   <xsl:template match="@*" mode="generate-id-2">
      <xsl:text>U.</xsl:text>
      <xsl:number level="multiple" count="*"/>
      <xsl:text>_</xsl:text>
      <xsl:value-of select="string-length(local-name(.))"/>
      <xsl:text>_</xsl:text>
      <xsl:value-of select="translate(name(),':','.')"/>
   </xsl:template>
   <!--Strip characters-->
   <xsl:template match="text()" priority="-1"/>

   <!--SCHEMA SETUP-->
   <xsl:template match="/">
      <svrl:schematron-output xmlns:svrl="http://purl.oclc.org/dsdl/svrl" title="eLife Schematron" schemaVersion="">
         <xsl:comment>
            <xsl:value-of select="$archiveDirParameter"/>   
		 <xsl:value-of select="$archiveNameParameter"/>  
		 <xsl:value-of select="$fileNameParameter"/>  
		 <xsl:value-of select="$fileDirParameter"/>
         </xsl:comment>
         <svrl:ns-prefix-in-attribute-values uri="http://www.niso.org/schemas/ali/1.0/" prefix="ali"/>
         <svrl:ns-prefix-in-attribute-values uri="http://www.w3.org/XML/1998/namespace" prefix="xml"/>
         <svrl:ns-prefix-in-attribute-values uri="http://www.w3.org/1999/xlink" prefix="xlink"/>
         <svrl:ns-prefix-in-attribute-values uri="http://www.w3.org/2001/XInclude" prefix="xi"/>
         <svrl:ns-prefix-in-attribute-values uri="http://www.w3.org/1998/Math/MathML" prefix="mml"/>
         <svrl:ns-prefix-in-attribute-values uri="http://saxon.sf.net/" prefix="saxon"/>
         <svrl:ns-prefix-in-attribute-values uri="http://purl.org/dc/terms/" prefix="dc"/>
         <svrl:ns-prefix-in-attribute-values uri="http://www.w3.org/2001/XMLSchema" prefix="xs"/>
         <svrl:ns-prefix-in-attribute-values uri="https://elifesciences.org/namespace" prefix="e"/>
         <svrl:ns-prefix-in-attribute-values uri="java.io.File" prefix="file"/>
         <svrl:ns-prefix-in-attribute-values uri="http://www.java.com/" prefix="java"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">covid-prologue-pattern</xsl:attribute>
            <xsl:attribute name="name">covid-prologue-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M56"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">article-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">article-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M57"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">research-article-pattern</xsl:attribute>
            <xsl:attribute name="name">research-article-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M58"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">research-article-sub-article-pattern</xsl:attribute>
            <xsl:attribute name="name">research-article-sub-article-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M59"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">test-front-pattern</xsl:attribute>
            <xsl:attribute name="name">test-front-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M60"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">test-journal-meta-pattern</xsl:attribute>
            <xsl:attribute name="name">test-journal-meta-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M61"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">journal-id-pattern</xsl:attribute>
            <xsl:attribute name="name">journal-id-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M62"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">test-article-metadata-pattern</xsl:attribute>
            <xsl:attribute name="name">test-article-metadata-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M63"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">test-research-article-metadata-pattern</xsl:attribute>
            <xsl:attribute name="name">test-research-article-metadata-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M64"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">editorial-metadata-pattern</xsl:attribute>
            <xsl:attribute name="name">editorial-metadata-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M65"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">article-metadata-exceptions-pattern</xsl:attribute>
            <xsl:attribute name="name">article-metadata-exceptions-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M66"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">test-article-categories-pattern</xsl:attribute>
            <xsl:attribute name="name">test-article-categories-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M67"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">disp-channel-checks-pattern</xsl:attribute>
            <xsl:attribute name="name">disp-channel-checks-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M68"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">MSA-checks-pattern</xsl:attribute>
            <xsl:attribute name="name">MSA-checks-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M69"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">head-subj-checks-pattern</xsl:attribute>
            <xsl:attribute name="name">head-subj-checks-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M70"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">test-title-group-pattern</xsl:attribute>
            <xsl:attribute name="name">test-title-group-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M71"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">review-article-title-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">review-article-title-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M72"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">test-contrib-group-pattern</xsl:attribute>
            <xsl:attribute name="name">test-contrib-group-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M73"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">auth-contrib-group-pattern</xsl:attribute>
            <xsl:attribute name="name">auth-contrib-group-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M74"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">test-editor-contrib-group-pattern</xsl:attribute>
            <xsl:attribute name="name">test-editor-contrib-group-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M75"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">test-editors-contrib-pattern</xsl:attribute>
            <xsl:attribute name="name">test-editors-contrib-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M76"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">auth-cont-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">auth-cont-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M77"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">duplicated-cont-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">duplicated-cont-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M78"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">auth-cont-tests-v2-pattern</xsl:attribute>
            <xsl:attribute name="name">auth-cont-tests-v2-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M79"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">collab-cont-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">collab-cont-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M80"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">collab-cont-tests-v2-pattern</xsl:attribute>
            <xsl:attribute name="name">collab-cont-tests-v2-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M81"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">duplicated-cont-tests-v2-pattern</xsl:attribute>
            <xsl:attribute name="name">duplicated-cont-tests-v2-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M82"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">collab-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">collab-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M83"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">collab-tests-2-pattern</xsl:attribute>
            <xsl:attribute name="name">collab-tests-2-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M84"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">author-xref-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">author-xref-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M85"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">name-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">name-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M86"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">surname-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">surname-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M87"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">given-names-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">given-names-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M88"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">suffix-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">suffix-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M89"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">name-child-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">name-child-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M90"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">contrib-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">contrib-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M91"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">corresp-author-initial-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">corresp-author-initial-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M92"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">author-children-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">author-children-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M93"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">author-children-tests-v2-pattern</xsl:attribute>
            <xsl:attribute name="name">author-children-tests-v2-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M94"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">author-role-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">author-role-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M95"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">author-role-tests-2-pattern</xsl:attribute>
            <xsl:attribute name="name">author-role-tests-2-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M96"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">orcid-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">orcid-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M97"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">email-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">email-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M98"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">history-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">history-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M99"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">date-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">date-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M100"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">day-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">day-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M101"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">month-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">month-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M102"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">year-article-meta-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">year-article-meta-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M103"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">year-element-citation-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">year-element-citation-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M104"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">pub-date-tests-1-pattern</xsl:attribute>
            <xsl:attribute name="name">pub-date-tests-1-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M105"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">press-pub-date-pattern</xsl:attribute>
            <xsl:attribute name="name">press-pub-date-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M106"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">pub-date-tests-2-pattern</xsl:attribute>
            <xsl:attribute name="name">pub-date-tests-2-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M107"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">pub-history-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">pub-history-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M108"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">event-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">event-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M109"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">event-child-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">event-child-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M110"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">event-desc-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">event-desc-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M111"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">event-date-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">event-date-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M112"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">event-self-uri-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">event-self-uri-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M113"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">front-permissions-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">front-permissions-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M114"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">cc-by-permissions-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">cc-by-permissions-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M115"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">cc-0-permissions-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">cc-0-permissions-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M116"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">license-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">license-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M117"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">license-p-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">license-p-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M118"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">license-link-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">license-link-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M119"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">license-ali-ref-link-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">license-ali-ref-link-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M120"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">abstract-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">abstract-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M121"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">medicine-abstract-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">medicine-abstract-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M122"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">medicine-abstract-tests-2-pattern</xsl:attribute>
            <xsl:attribute name="name">medicine-abstract-tests-2-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M123"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">abstract-children-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">abstract-children-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M124"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">abstract-sec-titles-pattern</xsl:attribute>
            <xsl:attribute name="name">abstract-sec-titles-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M125"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">clintrial-related-object-pattern</xsl:attribute>
            <xsl:attribute name="name">clintrial-related-object-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M126"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">clintrial-related-object-p-pattern</xsl:attribute>
            <xsl:attribute name="name">clintrial-related-object-p-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M127"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">abstract-word-count-pattern</xsl:attribute>
            <xsl:attribute name="name">abstract-word-count-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M128"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">aff-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">aff-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M129"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">author-aff-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">author-aff-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M130"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">aff-institution-wrap-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">aff-institution-wrap-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M131"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">aff-institution-id-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">aff-institution-id-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M132"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">gen-aff-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">gen-aff-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M133"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">aff-child-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">aff-child-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M134"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">aff-ror-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">aff-ror-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M135"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">addr-line-parent-test-pattern</xsl:attribute>
            <xsl:attribute name="name">addr-line-parent-test-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M136"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">addr-line-child-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">addr-line-child-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M137"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">funding-group-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">funding-group-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M138"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">wellcome-fund-statement-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">wellcome-fund-statement-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M139"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">award-group-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">award-group-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M140"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">award-id-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">award-id-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M141"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">institution-wrap-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">institution-wrap-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M142"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">institution-id-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">institution-id-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M143"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">institution-id-tests-v2-pattern</xsl:attribute>
            <xsl:attribute name="name">institution-id-tests-v2-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M144"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">par-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">par-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M145"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">par-name-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">par-name-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M146"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">kwd-group-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">kwd-group-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M147"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">ro-kwd-group-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">ro-kwd-group-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M148"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">ro-kwd-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">ro-kwd-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M149"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">custom-meta-group-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">custom-meta-group-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M150"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">custom-meta-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">custom-meta-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M151"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">meta-value-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">meta-value-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M152"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">meta-value-child-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">meta-value-child-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M153"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">featmeta-value-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">featmeta-value-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M154"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">schema-value-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">schema-value-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M155"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elocation-id-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">elocation-id-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M156"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">related-object-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">related-object-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M157"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">volume-test-pattern</xsl:attribute>
            <xsl:attribute name="name">volume-test-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M158"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">equal-author-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">equal-author-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M159"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">p-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">p-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M160"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">p-text-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">p-text-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M161"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">p-child-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">p-child-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M162"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">p-child-tests-v2-pattern</xsl:attribute>
            <xsl:attribute name="name">p-child-tests-v2-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M163"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">xref-target-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">xref-target-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M164"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">body-xref-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">body-xref-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M165"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">ext-link-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">ext-link-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M166"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">das-software-heritage-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">das-software-heritage-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M167"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">software-heritage-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">software-heritage-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M168"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">ext-link-tests-2-pattern</xsl:attribute>
            <xsl:attribute name="name">ext-link-tests-2-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M169"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">fig-group-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">fig-group-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M170"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">fig-group-child-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">fig-group-child-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M171"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">fig-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">fig-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M172"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">ar-fig-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">ar-fig-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M173"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">graphic-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">graphic-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M174"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">media-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">media-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M175"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">file-extension-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">file-extension-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M176"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">video-test-pattern</xsl:attribute>
            <xsl:attribute name="name">video-test-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M177"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">supplementary-material-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">supplementary-material-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M178"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">box-supp-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">box-supp-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M179"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">back-supplementary-file-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">back-supplementary-file-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M180"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">back-source-data-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">back-source-data-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M181"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">back-source-code-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">back-source-code-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M182"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">source-data-specific-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">source-data-specific-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M183"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">fig-source-data-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">fig-source-data-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M184"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">fig-source-code-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">fig-source-code-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M185"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">vid-source-data-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">vid-source-data-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M186"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">vid-source-code-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">vid-source-code-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M187"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">table-source-data-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">table-source-data-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M188"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">table-source-code-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">table-source-code-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M189"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">disp-formula-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">disp-formula-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M190"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">inline-formula-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">inline-formula-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M191"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">math-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">math-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M192"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">math-descendant-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">math-descendant-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M193"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">disp-formula-child-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">disp-formula-child-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M194"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">inline-formula-child-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">inline-formula-child-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M195"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">math-overset-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">math-overset-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M196"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">table-wrap-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">table-wrap-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M197"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">table-title-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">table-title-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M198"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">table-title-tests-2-pattern</xsl:attribute>
            <xsl:attribute name="name">table-title-tests-2-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M199"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">kr-table-heading-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">kr-table-heading-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M200"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">kr-table-body-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">kr-table-body-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M201"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">kr-table-first-column-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">kr-table-first-column-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M202"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">kr-table-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">kr-table-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M203"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">table-cell-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">table-cell-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M204"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">body-table-label-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">body-table-label-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M205"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">app-table-label-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">app-table-label-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M206"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">table-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">table-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M207"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">tbody-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">tbody-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M208"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">thead-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">thead-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M209"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">tr-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">tr-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M210"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">td-child-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">td-child-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M211"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">th-child-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">th-child-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M212"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">th-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">th-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M213"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">table-fn-label-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">table-fn-label-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M214"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">table-fn-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">table-fn-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M215"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">fn-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">fn-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M216"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">list-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">list-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M217"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">list-item-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">list-item-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M218"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">general-video-pattern</xsl:attribute>
            <xsl:attribute name="name">general-video-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M219"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">code-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">code-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M220"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">code-tests-2-pattern</xsl:attribute>
            <xsl:attribute name="name">code-tests-2-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M221"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">code-tests-3-pattern</xsl:attribute>
            <xsl:attribute name="name">code-tests-3-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M222"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">generic-label-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">generic-label-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M223"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">equation-label-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">equation-label-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M224"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">aff-label-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">aff-label-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M225"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">disp-quote-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">disp-quote-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M226"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">bracket-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">bracket-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M227"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">body-box-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">body-box-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M228"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">app-box-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">app-box-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M229"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">app-content-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">app-content-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M230"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">attrib-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">attrib-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M231"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">attrib-child-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">attrib-child-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M232"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">body-video-specific-pattern</xsl:attribute>
            <xsl:attribute name="name">body-video-specific-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M233"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">app-video-specific-pattern</xsl:attribute>
            <xsl:attribute name="name">app-video-specific-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M234"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">fig-video-specific-pattern</xsl:attribute>
            <xsl:attribute name="name">fig-video-specific-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M235"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">dl-video-specific-pattern</xsl:attribute>
            <xsl:attribute name="name">dl-video-specific-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M236"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">ar-video-specific-pattern</xsl:attribute>
            <xsl:attribute name="name">ar-video-specific-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M237"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">body-table-pos-conformance-pattern</xsl:attribute>
            <xsl:attribute name="name">body-table-pos-conformance-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M238"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">app-table-pos-conformance-pattern</xsl:attribute>
            <xsl:attribute name="name">app-table-pos-conformance-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M239"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">fig-specific-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">fig-specific-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M240"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">fig-label-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">fig-label-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M241"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">fig-sup-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">fig-sup-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M242"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">rep-fig-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">rep-fig-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M243"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">dec-fig-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">dec-fig-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M244"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">box-fig-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">box-fig-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M245"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">app-fig-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">app-fig-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M246"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">app-fig-sup-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">app-fig-sup-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M247"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">fig-permissions-pattern</xsl:attribute>
            <xsl:attribute name="name">fig-permissions-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M248"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">fig-permissions-2-pattern</xsl:attribute>
            <xsl:attribute name="name">fig-permissions-2-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M249"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">permissions-2-pattern</xsl:attribute>
            <xsl:attribute name="name">permissions-2-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M250"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">permissions-3a-pattern</xsl:attribute>
            <xsl:attribute name="name">permissions-3a-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M251"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">permissions-3b-pattern</xsl:attribute>
            <xsl:attribute name="name">permissions-3b-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M252"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">permissions-3c-pattern</xsl:attribute>
            <xsl:attribute name="name">permissions-3c-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M253"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">fig-caption-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">fig-caption-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M254"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">fig-panel-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">fig-panel-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M255"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">ra-body-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">ra-body-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M256"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">medicine-section-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">medicine-section-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M257"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">top-level-sec-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">top-level-sec-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M258"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">conclusion-sec-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">conclusion-sec-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M259"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">conclusion-lower-sec-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">conclusion-lower-sec-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M260"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">article-title-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">article-title-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M261"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">sec-title-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">sec-title-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M262"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">fig-title-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">fig-title-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M263"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">supplementary-material-title-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">supplementary-material-title-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M264"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">video-title-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">video-title-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M265"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">ack-title-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">ack-title-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M266"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">ack-content-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">ack-content-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M267"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">ref-list-title-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">ref-list-title-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M268"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">app-title-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">app-title-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M269"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">fn-group-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">fn-group-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M270"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">comp-int-title-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">comp-int-title-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M271"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">auth-cont-title-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">auth-cont-title-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M272"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">ethics-title-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">ethics-title-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M273"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">ed-eval-title-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">ed-eval-title-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M274"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">dec-letter-title-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">dec-letter-title-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M275"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">reply-title-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">reply-title-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M276"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">title-child-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">title-child-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M277"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">award-group-ids-pattern</xsl:attribute>
            <xsl:attribute name="name">award-group-ids-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M278"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">fig-ids-pattern</xsl:attribute>
            <xsl:attribute name="name">fig-ids-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M279"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">fig-sup-ids-pattern</xsl:attribute>
            <xsl:attribute name="name">fig-sup-ids-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M280"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">box-fig-ids-pattern</xsl:attribute>
            <xsl:attribute name="name">box-fig-ids-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M281"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">app-fig-ids-pattern</xsl:attribute>
            <xsl:attribute name="name">app-fig-ids-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M282"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">app-fig-sup-ids-pattern</xsl:attribute>
            <xsl:attribute name="name">app-fig-sup-ids-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M283"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">rep-fig-ids-pattern</xsl:attribute>
            <xsl:attribute name="name">rep-fig-ids-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M284"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">rep-fig-sup-ids-pattern</xsl:attribute>
            <xsl:attribute name="name">rep-fig-sup-ids-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M285"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">video-ids-pattern</xsl:attribute>
            <xsl:attribute name="name">video-ids-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M286"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">video-sup-ids-pattern</xsl:attribute>
            <xsl:attribute name="name">video-sup-ids-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M287"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">app-video-ids-pattern</xsl:attribute>
            <xsl:attribute name="name">app-video-ids-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M288"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">app-video-sup-ids-pattern</xsl:attribute>
            <xsl:attribute name="name">app-video-sup-ids-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M289"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">box-vid-ids-pattern</xsl:attribute>
            <xsl:attribute name="name">box-vid-ids-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M290"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">related-articles-ids-pattern</xsl:attribute>
            <xsl:attribute name="name">related-articles-ids-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M291"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">aff-ids-pattern</xsl:attribute>
            <xsl:attribute name="name">aff-ids-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M292"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">fn-ids-pattern</xsl:attribute>
            <xsl:attribute name="name">fn-ids-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M293"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">disp-formula-ids-pattern</xsl:attribute>
            <xsl:attribute name="name">disp-formula-ids-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M294"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">mml-math-ids-pattern</xsl:attribute>
            <xsl:attribute name="name">mml-math-ids-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M295"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">app-table-wrap-ids-pattern</xsl:attribute>
            <xsl:attribute name="name">app-table-wrap-ids-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M296"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">resp-table-wrap-ids-pattern</xsl:attribute>
            <xsl:attribute name="name">resp-table-wrap-ids-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M297"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">table-wrap-ids-pattern</xsl:attribute>
            <xsl:attribute name="name">table-wrap-ids-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M298"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">body-top-level-sec-ids-pattern</xsl:attribute>
            <xsl:attribute name="name">body-top-level-sec-ids-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M299"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">back-top-level-sec-ids-pattern</xsl:attribute>
            <xsl:attribute name="name">back-top-level-sec-ids-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M300"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">low-level-sec-ids-pattern</xsl:attribute>
            <xsl:attribute name="name">low-level-sec-ids-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M301"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">app-ids-pattern</xsl:attribute>
            <xsl:attribute name="name">app-ids-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M302"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">mdar-ids-pattern</xsl:attribute>
            <xsl:attribute name="name">mdar-ids-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M303"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">transrep-ids-pattern</xsl:attribute>
            <xsl:attribute name="name">transrep-ids-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M304"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">fig-children-pattern</xsl:attribute>
            <xsl:attribute name="name">fig-children-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M305"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">table-wrap-children-pattern</xsl:attribute>
            <xsl:attribute name="name">table-wrap-children-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M306"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">media-children-pattern</xsl:attribute>
            <xsl:attribute name="name">media-children-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M307"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">supplementary-material-children-pattern</xsl:attribute>
            <xsl:attribute name="name">supplementary-material-children-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M308"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">author-notes-children-pattern</xsl:attribute>
            <xsl:attribute name="name">author-notes-children-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M309"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">sec-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">sec-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M310"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">res-data-sec-pattern</xsl:attribute>
            <xsl:attribute name="name">res-data-sec-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M311"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">res-ethics-sec-pattern</xsl:attribute>
            <xsl:attribute name="name">res-ethics-sec-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M312"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">back-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">back-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M313"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">data-content-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">data-content-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M314"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">ack-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">ack-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M315"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">ack-child-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">ack-child-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M316"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">app-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">app-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M317"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">additional-info-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">additional-info-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M318"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">additional-files-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">additional-files-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M319"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">trf-presence-pattern</xsl:attribute>
            <xsl:attribute name="name">trf-presence-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M320"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">additional-files-child-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">additional-files-child-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M321"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">comp-int-fn-group-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">comp-int-fn-group-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M322"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">comp-int-fn-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">comp-int-fn-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M323"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">auth-cont-fn-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">auth-cont-fn-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M324"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">ethics-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">ethics-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M325"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">ethics-fn-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">ethics-fn-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M326"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">dec-letter-reply-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">dec-letter-reply-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M327"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">dec-letter-reply-content-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">dec-letter-reply-content-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M328"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">dec-letter-reply-content-tests-2-pattern</xsl:attribute>
            <xsl:attribute name="name">dec-letter-reply-content-tests-2-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M329"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">ed-eval-front-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">ed-eval-front-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M330"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">ed-eval-front-child-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">ed-eval-front-child-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M331"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">ed-eval-contrib-group-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">ed-eval-contrib-group-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M332"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">ed-eval-author-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">ed-eval-author-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M333"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">ed-eval-rel-obj-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">ed-eval-rel-obj-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M334"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">dec-letter-front-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">dec-letter-front-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M335"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">dec-letter-editor-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">dec-letter-editor-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M336"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">dec-letter-editor-tests-2-pattern</xsl:attribute>
            <xsl:attribute name="name">dec-letter-editor-tests-2-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M337"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">dec-letter-reviewer-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">dec-letter-reviewer-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M338"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">dec-letter-reviewer-tests-2-pattern</xsl:attribute>
            <xsl:attribute name="name">dec-letter-reviewer-tests-2-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M339"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">dec-letter-body-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">dec-letter-body-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M340"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">dec-letter-body-p-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">dec-letter-body-p-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M341"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">dec-letter-box-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">dec-letter-box-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M342"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">decision-missing-table-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">decision-missing-table-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M343"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">reply-front-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">reply-front-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M344"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">reply-body-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">reply-body-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M345"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">reply-disp-quote-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">reply-disp-quote-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M346"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">reply-missing-disp-quote-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">reply-missing-disp-quote-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M347"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">reply-missing-disp-quote-tests-2-pattern</xsl:attribute>
            <xsl:attribute name="name">reply-missing-disp-quote-tests-2-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M348"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">reply-missing-table-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">reply-missing-table-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M349"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">sub-article-ext-link-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">sub-article-ext-link-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M350"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">sub-article-ref-p-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">sub-article-ref-p-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M351"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">ref-report-front-pattern</xsl:attribute>
            <xsl:attribute name="name">ref-report-front-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M352"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">sub-article-contrib-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">sub-article-contrib-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M353"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">sub-article-role-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">sub-article-role-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M354"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">ref-report-editor-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">ref-report-editor-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M355"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">ref-report-editor-tests-2-pattern</xsl:attribute>
            <xsl:attribute name="name">ref-report-editor-tests-2-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M356"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">ref-report-reviewer-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">ref-report-reviewer-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M357"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">anonymous-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">anonymous-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M358"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">research-advance-test-pattern</xsl:attribute>
            <xsl:attribute name="name">research-advance-test-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M359"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">insight-test-pattern</xsl:attribute>
            <xsl:attribute name="name">insight-test-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M360"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">correction-test-pattern</xsl:attribute>
            <xsl:attribute name="name">correction-test-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M361"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">retraction-test-pattern</xsl:attribute>
            <xsl:attribute name="name">retraction-test-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M362"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">eoc-test-pattern</xsl:attribute>
            <xsl:attribute name="name">eoc-test-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M363"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">research-article-ra-test-pattern</xsl:attribute>
            <xsl:attribute name="name">research-article-ra-test-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M364"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">related-articles-conformance-pattern</xsl:attribute>
            <xsl:attribute name="name">related-articles-conformance-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M365"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">video-parent-conformance-pattern</xsl:attribute>
            <xsl:attribute name="name">video-parent-conformance-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M366"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-general-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-general-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M367"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-gen-name-3-1-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-gen-name-3-1-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M368"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-gen-name-3-2-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-gen-name-3-2-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M369"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-gen-name-4-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-gen-name-4-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M370"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-year-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-year-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M371"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-source-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-source-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M372"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-ext-link-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-ext-link-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M373"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">collab-content-pattern</xsl:attribute>
            <xsl:attribute name="name">collab-content-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M374"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">ref-list-ordering-pattern</xsl:attribute>
            <xsl:attribute name="name">ref-list-ordering-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M375"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">ref-pattern</xsl:attribute>
            <xsl:attribute name="name">ref-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M376"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">xref-pattern</xsl:attribute>
            <xsl:attribute name="name">xref-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M377"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M378"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">element-citation-descendants-pattern</xsl:attribute>
            <xsl:attribute name="name">element-citation-descendants-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M379"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-journal-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-journal-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M380"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-journal-article-title-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-journal-article-title-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M381"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-journal-volume-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-journal-volume-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M382"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-journal-fpage-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-journal-fpage-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M383"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-journal-elocation-id-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-journal-elocation-id-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M384"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-journal-comment-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-journal-comment-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M385"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-journal-pub-id-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-journal-pub-id-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M386"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-book-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-book-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M387"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-book-person-group-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-book-person-group-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M388"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-book-chapter-title-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-book-chapter-title-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M389"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-book-publisher-name-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-book-publisher-name-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M390"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-book-edition-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-book-edition-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M391"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-book-pub-id-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-book-pub-id-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M392"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-book-comment-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-book-comment-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M393"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-data-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-data-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M394"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-data-v2-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-data-v2-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M395"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-data-person-group-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-data-person-group-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M396"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-data-pub-id-doi-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-data-pub-id-doi-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M397"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-data-pub-id-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-data-pub-id-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M398"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-data-gend-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-data-gend-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M399"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-patent-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-patent-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M400"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-patent-article-title-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-patent-article-title-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M401"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-patent-source-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-patent-source-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M402"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-patent-patent-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-patent-patent-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M403"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-software-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-software-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M404"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-software-data-title-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-software-data-title-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M405"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-preprint-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-preprint-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M406"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-preprint-person-group-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-preprint-person-group-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M407"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-preprint-pub-id-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-preprint-pub-id-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M408"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-preprint-article-title-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-preprint-article-title-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M409"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-preprint-source-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-preprint-source-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M410"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-web-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-web-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M411"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-web-person-group-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-web-person-group-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M412"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-web-article-title-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-web-article-title-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M413"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-web-source-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-web-source-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M414"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-web-date-in-citation-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-web-date-in-citation-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M415"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-report-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-report-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M416"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-report-preson-group-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-report-preson-group-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M417"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-report-source-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-report-source-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M418"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-report-publisher-name-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-report-publisher-name-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M419"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-report-pub-id-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-report-pub-id-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M420"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-confproc-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-confproc-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M421"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-confproc-preson-group-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-confproc-preson-group-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M422"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-confproc-article-title-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-confproc-article-title-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M423"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-confproc-conf-name-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-confproc-conf-name-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M424"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-confproc-conf-loc-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-confproc-conf-loc-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M425"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-confproc-fpage-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-confproc-fpage-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M426"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-confproc-pub-id-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-confproc-pub-id-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M427"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-thesis-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-thesis-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M428"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-thesis-preson-group-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-thesis-preson-group-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M429"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-thesis-article-title-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-thesis-article-title-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M430"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-thesis-publisher-name-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-thesis-publisher-name-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M431"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-thesis-publisher-loc-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-thesis-publisher-loc-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M432"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-thesis-pub-id-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-thesis-pub-id-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M433"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">gen-das-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">gen-das-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M434"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">das-elem-citation-data-pub-id-pattern</xsl:attribute>
            <xsl:attribute name="name">das-elem-citation-data-pub-id-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M435"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">das-elem-citation-children-pattern</xsl:attribute>
            <xsl:attribute name="name">das-elem-citation-children-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M436"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">das-elem-citation-year-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">das-elem-citation-year-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M437"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">pub-id-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">pub-id-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M438"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">pub-id-xlink-href-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">pub-id-xlink-href-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M439"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">feature-title-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">feature-title-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M440"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">feature-abstract-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">feature-abstract-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M441"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">digest-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">digest-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M442"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">feature-subj-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">feature-subj-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M443"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">feature-article-category-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">feature-article-category-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M444"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">feature-author-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">feature-author-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M445"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">feature-bio-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">feature-bio-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M446"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">feature-template-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">feature-template-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M447"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">insight-asbtract-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">insight-asbtract-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M448"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">insight-related-article-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">insight-related-article-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M449"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">feature-comment-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">feature-comment-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M450"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">correction-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">correction-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M451"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">retraction-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">retraction-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M452"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">gene-primer-sequence-pattern</xsl:attribute>
            <xsl:attribute name="name">gene-primer-sequence-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M453"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">rrid-org-code-pattern</xsl:attribute>
            <xsl:attribute name="name">rrid-org-code-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M454"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">duplicate-ref-pattern</xsl:attribute>
            <xsl:attribute name="name">duplicate-ref-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M455"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">ref-xref-conformance-pattern</xsl:attribute>
            <xsl:attribute name="name">ref-xref-conformance-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M456"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">unlinked-ref-cite-pattern</xsl:attribute>
            <xsl:attribute name="name">unlinked-ref-cite-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M457"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">missing-ref-cited-pattern</xsl:attribute>
            <xsl:attribute name="name">missing-ref-cited-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M458"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">unlinked-object-cite-pattern</xsl:attribute>
            <xsl:attribute name="name">unlinked-object-cite-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M459"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">vid-xref-conformance-pattern</xsl:attribute>
            <xsl:attribute name="name">vid-xref-conformance-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M460"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">fig-xref-conformance-pattern</xsl:attribute>
            <xsl:attribute name="name">fig-xref-conformance-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M461"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">table-xref-conformance-pattern</xsl:attribute>
            <xsl:attribute name="name">table-xref-conformance-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M462"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">supp-file-xref-conformance-pattern</xsl:attribute>
            <xsl:attribute name="name">supp-file-xref-conformance-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M463"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">equation-xref-conformance-pattern</xsl:attribute>
            <xsl:attribute name="name">equation-xref-conformance-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M464"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">org-ref-article-book-title-pattern</xsl:attribute>
            <xsl:attribute name="name">org-ref-article-book-title-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M465"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">org-title-kwd-pattern</xsl:attribute>
            <xsl:attribute name="name">org-title-kwd-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M466"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">unallowed-symbol-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">unallowed-symbol-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M467"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">unallowed-symbol-tests-sup-pattern</xsl:attribute>
            <xsl:attribute name="name">unallowed-symbol-tests-sup-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M468"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">underline-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">underline-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M469"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">latex-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">latex-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M470"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">country-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">country-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M471"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">city-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">city-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M472"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">institution-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">institution-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M473"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">department-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">department-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M474"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">journal-title-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">journal-title-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M475"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">ref-article-title-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">ref-article-title-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M476"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">journal-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">journal-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M477"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">book-chapter-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">book-chapter-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M478"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">ref-chapter-title-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">ref-chapter-title-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M479"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">ref-book-source-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">ref-book-source-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M480"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">preprint-title-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">preprint-title-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M481"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">website-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">website-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M482"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">software-ref-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">software-ref-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M483"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">data-ref-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">data-ref-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M484"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">ncbi-pub-id-checks-pattern</xsl:attribute>
            <xsl:attribute name="name">ncbi-pub-id-checks-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M485"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">publisher-name-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">publisher-name-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M486"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">ref-name-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">ref-name-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M487"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">page-conformity-pattern</xsl:attribute>
            <xsl:attribute name="name">page-conformity-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M488"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">isbn-conformity-pattern</xsl:attribute>
            <xsl:attribute name="name">isbn-conformity-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M489"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">isbn-conformity-2-pattern</xsl:attribute>
            <xsl:attribute name="name">isbn-conformity-2-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M490"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">data-availability-statement-pattern</xsl:attribute>
            <xsl:attribute name="name">data-availability-statement-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M491"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">data-availability-version-2-pattern</xsl:attribute>
            <xsl:attribute name="name">data-availability-version-2-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M492"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">data-availability-child-version-2-pattern</xsl:attribute>
            <xsl:attribute name="name">data-availability-child-version-2-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M493"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">data-availability-p-pattern</xsl:attribute>
            <xsl:attribute name="name">data-availability-p-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M494"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">data-availability-generated-p-pattern</xsl:attribute>
            <xsl:attribute name="name">data-availability-generated-p-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M495"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">data-availability-used-p-pattern</xsl:attribute>
            <xsl:attribute name="name">data-availability-used-p-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M496"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">data-availability-extra-p-pattern</xsl:attribute>
            <xsl:attribute name="name">data-availability-extra-p-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M497"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">ethics-info-pattern</xsl:attribute>
            <xsl:attribute name="name">ethics-info-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M498"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">sec-title-conformity-pattern</xsl:attribute>
            <xsl:attribute name="name">sec-title-conformity-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M499"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">abstract-house-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">abstract-house-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M500"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">KRT-xref-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">KRT-xref-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M501"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">KRT-check-pattern</xsl:attribute>
            <xsl:attribute name="name">KRT-check-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M502"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">KRT-td-checks-pattern</xsl:attribute>
            <xsl:attribute name="name">KRT-td-checks-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M503"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">colour-table-pattern</xsl:attribute>
            <xsl:attribute name="name">colour-table-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M504"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">colour-table-2-pattern</xsl:attribute>
            <xsl:attribute name="name">colour-table-2-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M505"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">colour-named-content-pattern</xsl:attribute>
            <xsl:attribute name="name">colour-named-content-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M506"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">colour-styled-content-pattern</xsl:attribute>
            <xsl:attribute name="name">colour-styled-content-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M507"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">colour-styled-content-v2-pattern</xsl:attribute>
            <xsl:attribute name="name">colour-styled-content-v2-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M508"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">math-colour-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">math-colour-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M509"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">mathbackground-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">mathbackground-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M510"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">mtext-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">mtext-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M511"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">inline-formula-length-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">inline-formula-length-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M512"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">p-punctuation-pattern</xsl:attribute>
            <xsl:attribute name="name">p-punctuation-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M513"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">italic-house-style-pattern</xsl:attribute>
            <xsl:attribute name="name">italic-house-style-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M514"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">final-latin-conformance-pattern</xsl:attribute>
            <xsl:attribute name="name">final-latin-conformance-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M515"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">pubmed-link-pattern</xsl:attribute>
            <xsl:attribute name="name">pubmed-link-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M516"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">pubmed-link-2-pattern</xsl:attribute>
            <xsl:attribute name="name">pubmed-link-2-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M517"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">rrid-link-pattern</xsl:attribute>
            <xsl:attribute name="name">rrid-link-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M518"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">ref-link-mandate-pattern</xsl:attribute>
            <xsl:attribute name="name">ref-link-mandate-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M519"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">fig-permissions-check-pattern</xsl:attribute>
            <xsl:attribute name="name">fig-permissions-check-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M520"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">xref-formatting-pattern</xsl:attribute>
            <xsl:attribute name="name">xref-formatting-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M521"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">ref-xref-formatting-pattern</xsl:attribute>
            <xsl:attribute name="name">ref-xref-formatting-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M522"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">code-fork-pattern</xsl:attribute>
            <xsl:attribute name="name">code-fork-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M523"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">auth-kwd-style-pattern</xsl:attribute>
            <xsl:attribute name="name">auth-kwd-style-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M524"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">general-kwd-pattern</xsl:attribute>
            <xsl:attribute name="name">general-kwd-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M525"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">ref-given-names-pattern</xsl:attribute>
            <xsl:attribute name="name">ref-given-names-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M526"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">data-ref-given-names-pattern</xsl:attribute>
            <xsl:attribute name="name">data-ref-given-names-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M527"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">ar-fig-title-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">ar-fig-title-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M528"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">section-title-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">section-title-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M529"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">strike-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">strike-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M530"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">title-bold-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">title-bold-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M531"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">italic-org-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">italic-org-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M532"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">sub-sup-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">sub-sup-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M533"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">break-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">break-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M534"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">flag-github-pattern</xsl:attribute>
            <xsl:attribute name="name">flag-github-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M535"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">flag-gitlab-pattern</xsl:attribute>
            <xsl:attribute name="name">flag-gitlab-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M536"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">doi-journal-ref-checks-pattern</xsl:attribute>
            <xsl:attribute name="name">doi-journal-ref-checks-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M537"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">doi-book-ref-checks-pattern</xsl:attribute>
            <xsl:attribute name="name">doi-book-ref-checks-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M538"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">doi-software-ref-checks-pattern</xsl:attribute>
            <xsl:attribute name="name">doi-software-ref-checks-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M539"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">doi-conf-ref-checks-pattern</xsl:attribute>
            <xsl:attribute name="name">doi-conf-ref-checks-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M540"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">zenodo-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">zenodo-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M541"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">link-ref-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">link-ref-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M542"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">fundref-rule-pattern</xsl:attribute>
            <xsl:attribute name="name">fundref-rule-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M543"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">unicode-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">unicode-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M544"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">private-char-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">private-char-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M545"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">element-allowlist-pattern</xsl:attribute>
            <xsl:attribute name="name">element-allowlist-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M546"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">empty-attribute-test-pattern</xsl:attribute>
            <xsl:attribute name="name">empty-attribute-test-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M547"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">contrib-id-attribute-test-pattern</xsl:attribute>
            <xsl:attribute name="name">contrib-id-attribute-test-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M548"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">content-type-attribute-test-pattern</xsl:attribute>
            <xsl:attribute name="name">content-type-attribute-test-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M549"/>
      </svrl:schematron-output>
   </xsl:template>

   <!--SCHEMATRON PATTERNS-->
   <svrl:text xmlns:svrl="http://purl.oclc.org/dsdl/svrl">eLife Schematron</svrl:text>
   <xsl:param name="features-subj" select="('Feature Article', 'Insight', 'Editorial')"/>
   <xsl:param name="features-article-types" select="('article-commentary','editorial','discussion')"/>
   <xsl:param name="research-subj" select="('Research Article', 'Short Report', 'Tools and Resources', 'Research Advance', 'Registered Report', 'Replication Study', 'Research Communication', 'Correction', 'Retraction', 'Scientific Correspondence', 'Review Article')"/>
   <xsl:param name="notice-article-types" select="('correction','retraction','expression-of-concern')"/>
   <xsl:param name="notice-display-types" select="('Correction','Retraction','Expression of Concern')"/>
   <xsl:param name="allowed-article-types" select="('research-article','review-article',$features-article-types, $notice-article-types)"/>
   <xsl:param name="allowed-disp-subj" select="($research-subj, $features-subj)"/>
   <xsl:param name="MSAs" select="('Biochemistry and Chemical Biology', 'Cancer Biology', 'Cell Biology', 'Chromosomes and Gene Expression', 'Computational and Systems Biology', 'Developmental Biology', 'Ecology', 'Epidemiology and Global Health', 'Evolutionary Biology', 'Genetics and Genomics', 'Medicine', 'Immunology and Inflammation', 'Microbiology and Infectious Disease', 'Neuroscience', 'Physics of Living Systems', 'Plant Biology', 'Stem Cells and Regenerative Medicine', 'Structural Biology and Molecular Biophysics')"/>
   <xsl:param name="org-regex" select="'b\.\p{Zs}?subtilis|bacillus\p{Zs}?subtilis|d\.\p{Zs}?melanogaster|drosophila\p{Zs}?melanogaster|e\.\p{Zs}?coli|escherichia\p{Zs}?coli|s\.\p{Zs}?pombe|schizosaccharomyces\p{Zs}?pombe|s\.\p{Zs}?cerevisiae|saccharomyces\p{Zs}?cerevisiae|c\.\p{Zs}?elegans|caenorhabditis\p{Zs}?elegans|a\.\p{Zs}?thaliana|arabidopsis\p{Zs}?thaliana|m\.\p{Zs}?thermophila|myceliophthora\p{Zs}?thermophila|dictyostelium|p\.\p{Zs}?falciparum|plasmodium\p{Zs}?falciparum|s\.\p{Zs}?enterica|salmonella\p{Zs}?enterica|s\.\p{Zs}?pyogenes|streptococcus\p{Zs}?pyogenes|p\.\p{Zs}?dumerilii|platynereis\p{Zs}?dumerilii|p\.\p{Zs}?cynocephalus|papio\p{Zs}?cynocephalus|o\.\p{Zs}?fasciatus|oncopeltus\p{Zs}?fasciatus|n\.\p{Zs}?crassa|neurospora\p{Zs}?crassa|c\.\p{Zs}?intestinalis|ciona\p{Zs}?intestinalis|e\.\p{Zs}?cuniculi|encephalitozoon\p{Zs}?cuniculi|h\.\p{Zs}?salinarum|halobacterium\p{Zs}?salinarum|s\.\p{Zs}?solfataricus|sulfolobus\p{Zs}?solfataricus|s\.\p{Zs}?mediterranea|schmidtea\p{Zs}?mediterranea|s\.\p{Zs}?rosetta|salpingoeca\p{Zs}?rosetta|n\.\p{Zs}?vectensis|nematostella\p{Zs}?vectensis|s\.\p{Zs}?aureus|staphylococcus\p{Zs}?aureus|v\.\p{Zs}?cholerae|vibrio\p{Zs}?cholerae|t\.\p{Zs}?thermophila|tetrahymena\p{Zs}?thermophila|c\.\p{Zs}?reinhardtii|chlamydomonas\p{Zs}?reinhardtii|n\.\p{Zs}?attenuata|nicotiana\p{Zs}?attenuata|e\.\p{Zs}?carotovora|erwinia\p{Zs}?carotovora|e\.\p{Zs}?faecalis|h\.\p{Zs}?sapiens|homo\p{Zs}?sapiens|c\.\p{Zs}?trachomatis|chlamydia\p{Zs}?trachomatis|enterococcus\p{Zs}?faecalis|x\.\p{Zs}?laevis|xenopus\p{Zs}?laevis|x\.\p{Zs}?tropicalis|xenopus\p{Zs}?tropicalis|m\.\p{Zs}?musculus|mus\p{Zs}?musculus|d\.\p{Zs}?immigrans|drosophila\p{Zs}?immigrans|d\.\p{Zs}?subobscura|drosophila\p{Zs}?subobscura|d\.\p{Zs}?affinis|drosophila\p{Zs}?affinis|d\.\p{Zs}?obscura|drosophila\p{Zs}?obscura|f\.\p{Zs}?tularensis|francisella\p{Zs}?tularensis|p\.\p{Zs}?plantaginis|podosphaera\p{Zs}?plantaginis|p\.\p{Zs}?lanceolata|plantago\p{Zs}?lanceolata|m\.\p{Zs}?trossulus|mytilus\p{Zs}?trossulus|m\.\p{Zs}?edulis|mytilus\p{Zs}?edulis|m\.\p{Zs}?chilensis|mytilus\p{Zs}?chilensis|u\.\p{Zs}?maydis|ustilago\p{Zs}?maydis|p\.\p{Zs}?knowlesi|plasmodium\p{Zs}?knowlesi|p\.\p{Zs}?aeruginosa|pseudomonas\p{Zs}?aeruginosa|t\.\p{Zs}?brucei|trypanosoma\p{Zs}?brucei|caulobacter\p{Zs}?crescentus|c\.\p{Zs}?crescentus|agrobacterium\p{Zs}?tumefaciens|a\.\p{Zs}?tumefaciens|t\.\p{Zs}?gondii|toxoplasma\p{Zs}?gondii|d\.\p{Zs}?rerio|danio\p{Zs}?rerio|drosophila|yimenosaurus|lesothosaurus\p{Zs}?diagnosticus|l.\p{Zs}?diagnosticus|scelidosaurus\p{Zs}?harrisonii|s.\p{Zs}?harrisonii|haya\p{Zs}?griva|h.\p{Zs}?griva|polacanthus\p{Zs}?foxii|p.\p{Zs}?foxii|scutellosaurus\p{Zs}?lawleri|s.\p{Zs}?lawleri|saichania\p{Zs}?chulsanensis|s.\p{Zs}?chulsanensis|gargoyleosaurus\p{Zs}?parkpinorum|g.\p{Zs}?parkpinorum|europelta\p{Zs}?carbonensis|e.\p{Zs}?carbonensis|stegosaurus\p{Zs}?stenops|s.\p{Zs}?stenops|pinacosaurus\p{Zs}?grangeri|p.\p{Zs}?grangeri|tatisaurus\p{Zs}?oehleri|t.\p{Zs}?oehleri|hungarosaurus\p{Zs}?tormai|h.\p{Zs}?tormai|lesothosaurus\p{Zs}?diagnosticus|l.\p{Zs}?diagnosticus|bienosaurus\p{Zs}?lufengensis|b.\p{Zs}?lufengensis|fabrosaurus\p{Zs}?australis|f.\p{Zs}?australis|chinshakiangosaurus\p{Zs}?chunghoensis|c.\p{Zs}?chunghoensis|euoplocephalus\p{Zs}?tutus|e.\p{Zs}?tutus|xenopus'"/>
   <xsl:param name="sec-title-regex" select="string-join(     for $x in tokenize($org-regex,'\|')     return concat('^',$x,'$')     ,'|')"/>
   <xsl:param name="latin-regex" select="'in\p{Zs}+vitro|ex\p{Zs}+vitro|in\p{Zs}+vivo|ex\p{Zs}+vivo|a\p{Zs}+priori|a\p{Zs}+posteriori|de\p{Zs}+novo|in\p{Zs}+utero|in\p{Zs}+natura|in\p{Zs}+situ|in\p{Zs}+planta|in\p{Zs}+cellulo|rete\p{Zs}+mirabile|nomen\p{Zs}+novum| sensu |ad\p{Zs}+libitum|in\p{Zs}+ovo'"/>

   <!--PATTERN covid-prologue-pattern-->


	  <!--RULE covid-prologue-->
   <xsl:template match="article[front/article-meta//article-title[matches(lower-case(.),'sars-cov-2|covid-19|coronavirus')]]" priority="1000" mode="M56">

		<!--ASSERT warning-->
      <xsl:choose>
         <xsl:when test="preceding::processing-instruction('covid-19-tdm')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="preceding::processing-instruction('covid-19-tdm')">
               <xsl:attribute name="id">covid-processing-instruction</xsl:attribute>
               <xsl:attribute name="role">warning</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[covid-processing-instruction] The article title (<xsl:text/>
                  <xsl:value-of select="front/article-meta//article-title"/>
                  <xsl:text/>) suggests that this article should probably have the covid processing instruction - '&lt;?covid-19-tdm?&gt;' - but it does not. Should it?</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M56"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M56"/>
   <xsl:template match="@*|node()" priority="-2" mode="M56">
      <xsl:apply-templates select="*" mode="M56"/>
   </xsl:template>

   <!--PATTERN article-tests-pattern-->


	  <!--RULE article-tests-->
   <xsl:template match="article" priority="1000" mode="M57">
      <xsl:variable name="line-count" select="e:line-count(.)"/>

		    <!--REPORT info-->
      <xsl:if test="@dtd-version">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@dtd-version">
            <xsl:attribute name="id">dtd-info</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[dtd-info] DTD version is <xsl:text/>
               <xsl:value-of select="@dtd-version"/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@article-type = $allowed-article-types"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@article-type = $allowed-article-types">
               <xsl:attribute name="id">test-article-type</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[test-article-type] article-type must be equal to 'article-commentary', 'correction', 'discussion', 'editorial', or 'research-article'. Currently it is <xsl:text/>
                  <xsl:value-of select="@article-type"/>
                  <xsl:text/>
               </svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(front) = 1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(front) = 1">
               <xsl:attribute name="id">test-article-front</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[test-article-front] Article must have one child front. Currently there are <xsl:text/>
                  <xsl:value-of select="count(front)"/>
                  <xsl:text/>
               </svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(body) = 1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(body) = 1">
               <xsl:attribute name="id">test-article-body</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[test-article-body] Article must have one child body. Currently there are <xsl:text/>
                  <xsl:value-of select="count(body)"/>
                  <xsl:text/>
               </svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="(@article-type = ('article-commentary','discussion','editorial','research-article','review-article')) and count(back) != 1">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(@article-type = ('article-commentary','discussion','editorial','research-article','review-article')) and count(back) != 1">
            <xsl:attribute name="id">test-article-back</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[test-article-back] Article must have one child back. Currently there are <xsl:text/>
               <xsl:value-of select="count(back)"/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="not(descendant::code) and ($line-count gt 1)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="not(descendant::code) and ($line-count gt 1)">
            <xsl:attribute name="id">line-count</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/code-blocks#line-count</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[line-count] Articles without code blocks must only have one line in the xml. The xml for this article has <xsl:text/>
               <xsl:value-of select="$line-count"/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="@article-type='retraction'">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@article-type='retraction'">
            <xsl:attribute name="id">retraction-info</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[retraction-info] Ensure that the PDF for the article which is being retracted (<xsl:text/>
               <xsl:value-of select="string-join(descendant::article-meta/related-article[@related-article-type='retracted-article']/@xlink:href,'; ')"/>
               <xsl:text/>) is also updated with a header saying it's been retracted.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="@article-type!='research-article' and sub-article">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@article-type!='research-article' and sub-article">
            <xsl:attribute name="id">non-r-article-sub-article</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[non-r-article-sub-article] <xsl:text/>
               <xsl:value-of select="@article-type"/>
               <xsl:text/> type articles cannot have sub-articles (peer review materials).</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M57"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M57"/>
   <xsl:template match="@*|node()" priority="-2" mode="M57">
      <xsl:apply-templates select="*" mode="M57"/>
   </xsl:template>

   <!--PATTERN research-article-pattern-->


	  <!--RULE research-article-->
   <xsl:template match="article[@article-type='research-article']" priority="1000" mode="M58">
      <xsl:variable name="disp-channel" select="descendant::article-meta/article-categories/subj-group[@subj-group-type='display-channel']/subject[1]"/>
      <xsl:variable name="version" select="e:get-version(.)"/>

		    <!--REPORT warning-->
      <xsl:if test="if ($version='1') then ($disp-channel != 'Scientific Correspondence') and not(sub-article[@article-type='decision-letter'])      else ($disp-channel != 'Scientific Correspondence') and not(sub-article[@article-type='referee-report'])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="if ($version='1') then ($disp-channel != 'Scientific Correspondence') and not(sub-article[@article-type='decision-letter']) else ($disp-channel != 'Scientific Correspondence') and not(sub-article[@article-type='referee-report'])">
            <xsl:attribute name="id">test-r-article-d-letter</xsl:attribute>
            <xsl:attribute name="flag">dl-ar</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[test-r-article-d-letter] A decision letter should almost always be present for research articles. This one doesn't have one. Check that this is correct.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="if ($version='1') then ($disp-channel = 'Feature Article') and not(sub-article[@article-type='decision-letter'])      else ($disp-channel = 'Feature Article') and not(sub-article[@article-type='referee-report'])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="if ($version='1') then ($disp-channel = 'Feature Article') and not(sub-article[@article-type='decision-letter']) else ($disp-channel = 'Feature Article') and not(sub-article[@article-type='referee-report'])">
            <xsl:attribute name="id">final-test-r-article-d-letter-feat</xsl:attribute>
            <xsl:attribute name="flag">dl-ar</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/feature-content#final-test-r-article-d-letter-feat</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[final-test-r-article-d-letter-feat] A decision letter should be present for research articles. Feature template 5s almost always have a decision letter, but this one does not. Is that correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="if ($version='1') then ($disp-channel != 'Scientific Correspondence') and not(sub-article[@article-type='reply'])      else ($disp-channel != 'Scientific Correspondence') and not(sub-article[@article-type='author-comment'])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="if ($version='1') then ($disp-channel != 'Scientific Correspondence') and not(sub-article[@article-type='reply']) else ($disp-channel != 'Scientific Correspondence') and not(sub-article[@article-type='author-comment'])">
            <xsl:attribute name="id">test-r-article-a-reply</xsl:attribute>
            <xsl:attribute name="flag">dl-ar</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[test-r-article-a-reply] Author response should usually be present for research articles, but this one does not have one. Is that correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M58"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M58"/>
   <xsl:template match="@*|node()" priority="-2" mode="M58">
      <xsl:apply-templates select="*" mode="M58"/>
   </xsl:template>

   <!--PATTERN research-article-sub-article-pattern-->


	  <!--RULE research-article-sub-article-->
   <xsl:template match="article[@article-type='research-article' and sub-article]" priority="1000" mode="M59">
      <xsl:variable name="disp-channel" select="descendant::article-meta/article-categories/subj-group[@subj-group-type='display-channel']/subject[1]"/>
      <xsl:variable name="version" select="e:get-version(.)"/>

		    <!--REPORT error-->
      <xsl:if test="if ($version='1') then ($disp-channel != 'Scientific Correspondence') and not(sub-article[@article-type!='reply'])        else ($disp-channel != 'Scientific Correspondence') and not(sub-article[@article-type!='author-comment'])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="if ($version='1') then ($disp-channel != 'Scientific Correspondence') and not(sub-article[@article-type!='reply']) else ($disp-channel != 'Scientific Correspondence') and not(sub-article[@article-type!='author-comment'])">
            <xsl:attribute name="id">r-article-sub-articles</xsl:attribute>
            <xsl:attribute name="flag">dl-ar</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[r-article-sub-articles] <xsl:text/>
               <xsl:value-of select="$disp-channel"/>
               <xsl:text/> type articles cannot have only an Author response. The following combinations of peer review-material are permitted: Editor's evaluation, Decision letter, and Author response; Decision letter, and Author response; Editor's evaluation and Decision letter; Editor's evaluation and Author response; or Decision letter.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M59"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M59"/>
   <xsl:template match="@*|node()" priority="-2" mode="M59">
      <xsl:apply-templates select="*" mode="M59"/>
   </xsl:template>

   <!--PATTERN test-front-pattern-->


	  <!--RULE test-front-->
   <xsl:template match="article/front" priority="1000" mode="M60">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(journal-meta) = 1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(journal-meta) = 1">
               <xsl:attribute name="id">test-front-jmeta</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[test-front-jmeta] There must be one journal-meta that is a child of front. Currently there are <xsl:text/>
                  <xsl:value-of select="count(journal-meta)"/>
                  <xsl:text/>
               </svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(article-meta) = 1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(article-meta) = 1">
               <xsl:attribute name="id">test-front-ameta</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[test-front-ameta] There must be one article-meta that is a child of front. Currently there are <xsl:text/>
                  <xsl:value-of select="count(article-meta)"/>
                  <xsl:text/>
               </svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M60"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M60"/>
   <xsl:template match="@*|node()" priority="-2" mode="M60">
      <xsl:apply-templates select="*" mode="M60"/>
   </xsl:template>

   <!--PATTERN test-journal-meta-pattern-->


	  <!--RULE test-journal-meta-->
   <xsl:template match="article/front/journal-meta" priority="1000" mode="M61">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="journal-id[@journal-id-type='nlm-ta'] = 'elife'"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="journal-id[@journal-id-type='nlm-ta'] = 'elife'">
               <xsl:attribute name="id">test-journal-nlm</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[test-journal-nlm] journal-id[@journal-id-type='nlm-ta'] must only contain 'elife'. Currently it is <xsl:text/>
                  <xsl:value-of select="journal-id[@journal-id-type='nlm-ta']"/>
                  <xsl:text/>
               </svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="journal-id[@journal-id-type='publisher-id'] = 'eLife'"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="journal-id[@journal-id-type='publisher-id'] = 'eLife'">
               <xsl:attribute name="id">test-journal-pubid-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[test-journal-pubid-1] journal-id[@journal-id-type='publisher-id'] must only contain 'eLife'. Currently it is <xsl:text/>
                  <xsl:value-of select="journal-id[@journal-id-type='publisher-id']"/>
                  <xsl:text/>
               </svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="journal-title-group/journal-title = 'eLife'"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="journal-title-group/journal-title = 'eLife'">
               <xsl:attribute name="id">test-journal-pubid-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[test-journal-pubid-2] journal-meta must contain a journal-title-group with a child journal-title which must be equal to 'eLife'. Currently it is <xsl:text/>
                  <xsl:value-of select="journal-id[@journal-id-type='publisher-id']"/>
                  <xsl:text/>
               </svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="issn = '2050-084X'"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="issn = '2050-084X'">
               <xsl:attribute name="id">test-journal-pubid-3</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[test-journal-pubid-3] ISSN must be 2050-084X. Currently it is <xsl:text/>
                  <xsl:value-of select="issn"/>
                  <xsl:text/>
               </svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="issn[@publication-format='electronic'][@pub-type='epub']"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="issn[@publication-format='electronic'][@pub-type='epub']">
               <xsl:attribute name="id">test-journal-pubid-4</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[test-journal-pubid-4] The journal issn element must have a @publication-format='electronic' and a @pub-type='epub'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M61"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M61"/>
   <xsl:template match="@*|node()" priority="-2" mode="M61">
      <xsl:apply-templates select="*" mode="M61"/>
   </xsl:template>

   <!--PATTERN journal-id-pattern-->


	  <!--RULE journal-id-->
   <xsl:template match="article/front/journal-meta/journal-id" priority="1000" mode="M62">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@journal-id-type=('nlm-ta','publisher-id')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@journal-id-type=('nlm-ta','publisher-id')">
               <xsl:attribute name="id">test-journal-id</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[test-journal-id] The only journal-id-types permitted are 'nlm-ta' or 'publisher-id'. <xsl:text/>
                  <xsl:value-of select="@journal-id-type"/>
                  <xsl:text/> is not permitted.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M62"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M62"/>
   <xsl:template match="@*|node()" priority="-2" mode="M62">
      <xsl:apply-templates select="*" mode="M62"/>
   </xsl:template>

   <!--PATTERN test-article-metadata-pattern-->


	  <!--RULE test-article-metadata-->
   <xsl:template match="article/front/article-meta" priority="1000" mode="M63">
      <xsl:variable name="article-id" select="article-id[@pub-id-type='publisher-id'][1]"/>
      <xsl:variable name="article-type" select="ancestor::article/@article-type"/>
      <xsl:variable name="subj-type" select="descendant::subj-group[@subj-group-type='display-channel']/subject[1]"/>
      <xsl:variable name="exceptions" select="('Insight',$notice-display-types)"/>
      <xsl:variable name="no-digest" select="('Scientific Correspondence','Replication Study','Research Advance','Registered Report',$notice-display-types,$features-subj)"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches($article-id,'^\d{5}$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($article-id,'^\d{5}$')">
               <xsl:attribute name="id">test-article-id</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[test-article-id] article-id must consist only of 5 digits. Currently it is <xsl:text/>
                  <xsl:value-of select="article-id[@pub-id-type='publisher-id']"/>
                  <xsl:text/>
               </svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="starts-with(article-id[@pub-id-type='doi'][1],'10.7554/eLife.')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="starts-with(article-id[@pub-id-type='doi'][1],'10.7554/eLife.')">
               <xsl:attribute name="id">test-article-doi-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[test-article-doi-1] Article level DOI must start with '10.7554/eLife.'. Currently it is <xsl:text/>
                  <xsl:value-of select="article-id[@pub-id-type='doi']"/>
                  <xsl:text/>
               </svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="substring-after(article-id[@pub-id-type='doi'][1],'10.7554/eLife.') = $article-id"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="substring-after(article-id[@pub-id-type='doi'][1],'10.7554/eLife.') = $article-id">
               <xsl:attribute name="id">test-article-doi-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[test-article-doi-2] Article level DOI must be a concatenation of '10.7554/eLife.' and the article-id. Currently it is <xsl:text/>
                  <xsl:value-of select="article-id[@pub-id-type='doi']"/>
                  <xsl:text/>
               </svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(article-categories) = 1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(article-categories) = 1">
               <xsl:attribute name="id">test-article-presence</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[test-article-presence] There must be one article-categories element in the article-meta. Currently there are <xsl:text/>
                  <xsl:value-of select="count(article-categories)"/>
                  <xsl:text/>
               </svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="title-group[article-title]"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="title-group[article-title]">
               <xsl:attribute name="id">test-title-group-presence</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[test-title-group-presence] title-group containing article-title must be present.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="pub-date[@publication-format='electronic'][@date-type='publication']"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="pub-date[@publication-format='electronic'][@date-type='publication']">
               <xsl:attribute name="id">test-epub-date</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[test-epub-date] There must be a child pub-date[@publication-format='electronic'][@date-type='publication'] in article-meta.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="pub-date[@pub-type='collection']"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="pub-date[@pub-type='collection']">
               <xsl:attribute name="id">test-pub-collection-presence</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[test-pub-collection-presence] There must be a child pub-date[@pub-type='collection'] in article-meta.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="volume"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="volume">
               <xsl:attribute name="id">test-volume-presence</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[test-volume-presence] There must be a child volume in article-meta.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(volume[1],'^[0-9]*$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(volume[1],'^[0-9]*$')">
               <xsl:attribute name="id">test-volume-contents</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[test-volume-contents] volume must only contain a number.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="elocation-id"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="elocation-id">
               <xsl:attribute name="id">test-elocation-presence</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[test-elocation-presence] There must be a child elocation-id in article-meta.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="not($article-type = $notice-article-types) and not(self-uri)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="not($article-type = $notice-article-types) and not(self-uri)">
            <xsl:attribute name="id">test-self-uri-presence</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[test-self-uri-presence] There must be a child self-uri in article-meta.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="not($article-type = $notice-article-types) and not(self-uri[@content-type='pdf'])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="not($article-type = $notice-article-types) and not(self-uri[@content-type='pdf'])">
            <xsl:attribute name="id">test-self-uri-att</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[test-self-uri-att] self-uri must have an @content-type="pdf"</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="not($article-type = $notice-article-types) and not(self-uri[starts-with(@xlink:href,concat('elife-', $article-id))])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="not($article-type = $notice-article-types) and not(self-uri[starts-with(@xlink:href,concat('elife-', $article-id))])">
            <xsl:attribute name="id">test-self-uri-pdf-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[test-self-uri-pdf-1] self-uri must have attribute xlink:href="elife-xxxxx.pdf" where xxxxx = the article-id. Currently it is <xsl:text/>
               <xsl:value-of select="self-uri/@xlink:href"/>
               <xsl:text/>. It should start with elife-<xsl:text/>
               <xsl:value-of select="$article-id"/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="not($article-type = $notice-article-types) and not(self-uri[matches(@xlink:href, '^elife-[\d]{5}\.pdf$|^elife-[\d]{5}-v[0-9]{1,2}\.pdf$')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="not($article-type = $notice-article-types) and not(self-uri[matches(@xlink:href, '^elife-[\d]{5}\.pdf$|^elife-[\d]{5}-v[0-9]{1,2}\.pdf$')])">
            <xsl:attribute name="id">test-self-uri-pdf-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[test-self-uri-pdf-2] self-uri does not conform.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="not($article-type = ($notice-article-types,'article-commentary')) and count(history) != 1">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="not($article-type = ($notice-article-types,'article-commentary')) and count(history) != 1">
            <xsl:attribute name="id">test-history-presence</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[test-history-presence] There must be one and only one history element in the article-meta. Currently there are <xsl:text/>
               <xsl:value-of select="count(history)"/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(permissions) = 1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(permissions) = 1">
               <xsl:attribute name="id">test-permissions-presence</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/licensing-and-copyright#test-permissions-presence</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[test-permissions-presence] There must be one and only one permissions element in the article-meta. Currently there are <xsl:text/>
                  <xsl:value-of select="count(permissions)"/>
                  <xsl:text/>
               </svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="not($article-type = $notice-article-types) and (count(abstract[not(@abstract-type='executive-summary')]) != 1 or (count(abstract[not(@abstract-type='executive-summary')]) != 1 and count(abstract[@abstract-type='executive-summary']) != 1))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="not($article-type = $notice-article-types) and (count(abstract[not(@abstract-type='executive-summary')]) != 1 or (count(abstract[not(@abstract-type='executive-summary')]) != 1 and count(abstract[@abstract-type='executive-summary']) != 1))">
            <xsl:attribute name="id">test-abstracts</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/article-structure/abstract-digest-impact-statement#test-abstracts</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[test-abstracts] There must either be only one abstract or one abstract and one abstract[@abstract-type="executive-summary]. No other variations are allowed.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="($subj-type= $no-digest) and abstract[@abstract-type='executive-summary']">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="($subj-type= $no-digest) and abstract[@abstract-type='executive-summary']">
            <xsl:attribute name="id">test-no-digest</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/article-structure/abstract-digest-impact-statement#test-no-digest</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[test-no-digest] '<xsl:text/>
               <xsl:value-of select="$subj-type"/>
               <xsl:text/>' cannot have a digest.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="if ($article-type = $features-article-types) then ()       else if ($subj-type = ('Scientific Correspondence',$notice-display-types)) then ()       else count(funding-group) != 1">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="if ($article-type = $features-article-types) then () else if ($subj-type = ('Scientific Correspondence',$notice-display-types)) then () else count(funding-group) != 1">
            <xsl:attribute name="id">test-funding-group-presence</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/funding-information#test-funding-group-presence</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[test-funding-group-presence] There must be one and only one funding-group element in the article-meta. Currently there are <xsl:text/>
               <xsl:value-of select="count(funding-group)"/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="if ($subj-type = $exceptions) then ()       else count(custom-meta-group) != 1">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="if ($subj-type = $exceptions) then () else count(custom-meta-group) != 1">
            <xsl:attribute name="id">test-custom-meta-group-presence</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[test-custom-meta-group-presence] One custom-meta-group should be present in article-meta for all article types except Insights, Retractions, Corrections and Expressions of Concern.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="if ($subj-type = $notice-display-types) then ()       else count(kwd-group[@kwd-group-type='author-keywords']) != 1">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="if ($subj-type = $notice-display-types) then () else count(kwd-group[@kwd-group-type='author-keywords']) != 1">
            <xsl:attribute name="id">test-auth-kwd-group-presence-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[test-auth-kwd-group-presence-1] One author keyword group must be present in article-meta.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="if ($subj-type = $notice-display-types) then (count(kwd-group[@kwd-group-type='author-keywords']) != 0)       else ()">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="if ($subj-type = $notice-display-types) then (count(kwd-group[@kwd-group-type='author-keywords']) != 0) else ()">
            <xsl:attribute name="id">test-auth-kwd-group-presence-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[test-auth-kwd-group-presence-2] <xsl:text/>
               <xsl:value-of select="$subj-type"/>
               <xsl:text/> articles must not have any author keywords</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="count(kwd-group[@kwd-group-type='research-organism']) gt 1">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(kwd-group[@kwd-group-type='research-organism']) gt 1">
            <xsl:attribute name="id">test-ro-kwd-group-presence-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[test-ro-kwd-group-presence-1] More than 1 Research organism keyword group is present in article-meta. This is incorrect.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="if ($subj-type = ('Research Article', 'Research Advance', 'Replication Study', 'Research Communication'))       then (count(kwd-group[@kwd-group-type='research-organism']) = 0)       else ()">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="if ($subj-type = ('Research Article', 'Research Advance', 'Replication Study', 'Research Communication')) then (count(kwd-group[@kwd-group-type='research-organism']) = 0) else ()">
            <xsl:attribute name="id">test-ro-kwd-group-presence-2</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[test-ro-kwd-group-presence-2] <xsl:text/>
               <xsl:value-of select="$subj-type"/>
               <xsl:text/> does not contain a Research Organism keyword group. Is this correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="($subj-type=('Research Article','Research Advance','Tools and Resources','Short Report')) and (history/date[@date-type='received']/@iso-8601-date gt '2021-07-01') and not(pub-history[event[self-uri[@content-type='preprint']]])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="($subj-type=('Research Article','Research Advance','Tools and Resources','Short Report')) and (history/date[@date-type='received']/@iso-8601-date gt '2021-07-01') and not(pub-history[event[self-uri[@content-type='preprint']]])">
            <xsl:attribute name="id">preprint-presence</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[preprint-presence] This <xsl:text/>
               <xsl:value-of select="$subj-type"/>
               <xsl:text/> was received on '<xsl:text/>
               <xsl:value-of select="history/date[@date-type='received']/@iso-8601-date"/>
               <xsl:text/>' (after the preprint mandate) but does not have preprint information. Is that correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M63"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M63"/>
   <xsl:template match="@*|node()" priority="-2" mode="M63">
      <xsl:apply-templates select="*" mode="M63"/>
   </xsl:template>

   <!--PATTERN test-research-article-metadata-pattern-->


	  <!--RULE test-research-article-metadata-->
   <xsl:template match="article[@article-type='research-article']/front/article-meta" priority="1000" mode="M64">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="contrib-group"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contrib-group">
               <xsl:attribute name="id">test-contrib-group-presence-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[test-contrib-group-presence-1] contrib-group (with no attributes containing authors) must be present (as a child of article-meta) for research articles.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="contrib-group[@content-type='section']"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contrib-group[@content-type='section']">
               <xsl:attribute name="id">test-contrib-group-presence-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[test-contrib-group-presence-2] contrib-group[@content-type='section'] must be present (as a child of article-meta) for research articles (this is the contrib-group which contains reviewers and editors).</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M64"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M64"/>
   <xsl:template match="@*|node()" priority="-2" mode="M64">
      <xsl:apply-templates select="*" mode="M64"/>
   </xsl:template>

   <!--PATTERN editorial-metadata-pattern-->


	  <!--RULE editorial-metadata-->
   <xsl:template match="article[@article-type='editorial']/front/article-meta" priority="1000" mode="M65">

		<!--REPORT error-->
      <xsl:if test="contrib-group[@content-type='section']">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contrib-group[@content-type='section']">
            <xsl:attribute name="id">editorial-editors-presence</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[editorial-editors-presence] Editorials cannot contain Editors and/or Reviewers. This one has a contrib-group[@content-type='section'] containing <xsl:text/>
               <xsl:value-of select="string-join(for $x in contrib-group[@content-type='section']/contrib return concat('&quot;',e:get-name($x/*[1][name()=('name','collab')]),'&quot;',' as ','&quot;',$x/role[1],'&quot;'),' and ')"/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M65"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M65"/>
   <xsl:template match="@*|node()" priority="-2" mode="M65">
      <xsl:apply-templates select="*" mode="M65"/>
   </xsl:template>

   <!--PATTERN article-metadata-exceptions-pattern-->


	  <!--RULE article-metadata-exceptions-->
   <xsl:template match="article[@article-type=('article-commentary',$notice-article-types)]/front/article-meta" priority="1000" mode="M66">

		<!--REPORT error-->
      <xsl:if test="funding-group">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="funding-group">
            <xsl:attribute name="id">funding-exception</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[funding-exception] <xsl:text/>
               <xsl:value-of select="descendant::subj-group[@subj-group-type='display-channel'][1]/subject[1]"/>
               <xsl:text/>s cannot have funding, but this one has a funding-group element. Please remove it.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M66"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M66"/>
   <xsl:template match="@*|node()" priority="-2" mode="M66">
      <xsl:apply-templates select="*" mode="M66"/>
   </xsl:template>

   <!--PATTERN test-article-categories-pattern-->


	  <!--RULE test-article-categories-->
   <xsl:template match="article-meta/article-categories" priority="1000" mode="M67">
      <xsl:variable name="article-type" select="ancestor::article/@article-type"/>
      <xsl:variable name="template" select="parent::article-meta/custom-meta-group/custom-meta[meta-name='Template']/meta-value[1]"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(subj-group[@subj-group-type='display-channel']) = 1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(subj-group[@subj-group-type='display-channel']) = 1">
               <xsl:attribute name="id">disp-subj-test</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[disp-subj-test] There must be one subj-group[@subj-group-type='display-channel'] which is a child of article-categories. Currently there are <xsl:text/>
                  <xsl:value-of select="count(article-categories/subj-group[@subj-group-type='display-channel'])"/>
                  <xsl:text/>.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(subj-group[@subj-group-type='display-channel']/subject) = 1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(subj-group[@subj-group-type='display-channel']/subject) = 1">
               <xsl:attribute name="id">disp-subj-test2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[disp-subj-test2] subj-group[@subj-group-type='display-channel'] must contain only one subject. Currently there are <xsl:text/>
                  <xsl:value-of select="count(subj-group[@subj-group-type='display-channel']/subject)"/>
                  <xsl:text/>.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="count(subj-group[@subj-group-type='heading']) gt 2">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(subj-group[@subj-group-type='heading']) gt 2">
            <xsl:attribute name="id">head-subj-test1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[head-subj-test1] article-categories must contain 0-2 subj-group[@subj-group-type='heading'] elements. Currently there are <xsl:text/>
               <xsl:value-of select="count(subj-group[@subj-group-type='heading']/subject)"/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="($article-type = ('research-article','review-article',$notice-article-types,'article-commentary')) and not($template ='5') and count(subj-group[@subj-group-type='heading']) lt 1">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="($article-type = ('research-article','review-article',$notice-article-types,'article-commentary')) and not($template ='5') and count(subj-group[@subj-group-type='heading']) lt 1">
            <xsl:attribute name="id">head-subj-test2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[head-subj-test2] article-categories must contain one and or two subj-group[@subj-group-type='heading'] elements. Currently there are 0.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="($article-type = ('editorial','discussion')) and count(subj-group[@subj-group-type='heading']) lt 1">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="($article-type = ('editorial','discussion')) and count(subj-group[@subj-group-type='heading']) lt 1">
            <xsl:attribute name="id">head-subj-test3</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[head-subj-test3] article-categories does not contain a subj-group[@subj-group-type='heading']. Is this correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(subj-group[@subj-group-type='heading']/subject) = count(distinct-values(subj-group[@subj-group-type='heading']/subject))"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(subj-group[@subj-group-type='heading']/subject) = count(distinct-values(subj-group[@subj-group-type='heading']/subject))">
               <xsl:attribute name="id">head-subj-distinct-test</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[head-subj-distinct-test] Where there are two headings, the content of one must not match the content of the other (each heading should be unique)</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M67"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M67"/>
   <xsl:template match="@*|node()" priority="-2" mode="M67">
      <xsl:apply-templates select="*" mode="M67"/>
   </xsl:template>

   <!--PATTERN disp-channel-checks-pattern-->


	  <!--RULE disp-channel-checks-->
   <xsl:template match="article-categories/subj-group[@subj-group-type='display-channel']/subject" priority="1000" mode="M68">
      <xsl:variable name="article-type" select="ancestor::article/@article-type"/>
      <xsl:variable name="research-disp-channels" select="('Research Article', 'Short Report', 'Tools and Resources', 'Research Advance', 'Registered Report', 'Replication Study', 'Research Communication', 'Scientific Correspondence')"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test=". = $allowed-disp-subj"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test=". = $allowed-disp-subj">
               <xsl:attribute name="id">disp-subj-value-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[disp-subj-value-test-1] Content of the display channel should be one of the following: Research Article, Short Report, Tools and Resources, Research Advance, Registered Report, Replication Study, Research Communication, Feature Article, Insight, Editorial, Correction, Retraction . Currently it is <xsl:text/>
                  <xsl:value-of select="."/>
                  <xsl:text/>.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="($article-type = 'research-article') and not(.=($research-disp-channels,'Feature Article'))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="($article-type = 'research-article') and not(.=($research-disp-channels,'Feature Article'))">
            <xsl:attribute name="id">disp-subj-value-test-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[disp-subj-value-test-2] Article is an @article-type="<xsl:text/>
               <xsl:value-of select="$article-type"/>
               <xsl:text/>" but the display channel is <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>. It should be one of 'Research Article', 'Short Report', 'Tools and Resources', 'Research Advance', 'Registered Report', 'Replication Study', 'Research Communication', or 'Scientific Correspondence' according to the article-type.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="($article-type = 'article-commentary') and not(.='Insight')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="($article-type = 'article-commentary') and not(.='Insight')">
            <xsl:attribute name="id">disp-subj-value-test-3</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[disp-subj-value-test-3] Article is an @article-type="<xsl:text/>
               <xsl:value-of select="$article-type"/>
               <xsl:text/>" but the display channel is <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>. It should be 'Insight' according to the article-type.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="($article-type = 'editorial') and not(.='Editorial')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="($article-type = 'editorial') and not(.='Editorial')">
            <xsl:attribute name="id">disp-subj-value-test-4</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[disp-subj-value-test-4] Article is an @article-type="<xsl:text/>
               <xsl:value-of select="$article-type"/>
               <xsl:text/>" but the display channel is <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>. It should be 'Editorial' according to the article-type.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="($article-type = 'correction') and not(.='Correction')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="($article-type = 'correction') and not(.='Correction')">
            <xsl:attribute name="id">disp-subj-value-test-5</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[disp-subj-value-test-5] Article is an @article-type="<xsl:text/>
               <xsl:value-of select="$article-type"/>
               <xsl:text/>" but the display channel is <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>. It should be 'Correction' according to the article-type.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="($article-type = 'discussion') and not(.='Feature Article')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="($article-type = 'discussion') and not(.='Feature Article')">
            <xsl:attribute name="id">disp-subj-value-test-6</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[disp-subj-value-test-6] Article is an @article-type="<xsl:text/>
               <xsl:value-of select="$article-type"/>
               <xsl:text/>" but the display channel is <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>. It should be 'Feature Article' according to the article-type.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="($article-type = 'review-article') and not(.='Review Article')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="($article-type = 'review-article') and not(.='Review Article')">
            <xsl:attribute name="id">disp-subj-value-test-7</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[disp-subj-value-test-7] Article is an @article-type="<xsl:text/>
               <xsl:value-of select="$article-type"/>
               <xsl:text/>" but the display channel is <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>. It should be 'Review Article' according to the article-type.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="($article-type = 'retraction') and not(.='Retraction')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="($article-type = 'retraction') and not(.='Retraction')">
            <xsl:attribute name="id">disp-subj-value-test-8</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[disp-subj-value-test-8] Article is an @article-type="<xsl:text/>
               <xsl:value-of select="$article-type"/>
               <xsl:text/>" but the display channel is <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>. It should be 'Retraction' according to the article-type.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="($article-type = 'expression-of-concern') and not(.='Expression of Concern')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="($article-type = 'expression-of-concern') and not(.='Expression of Concern')">
            <xsl:attribute name="id">disp-subj-value-test-9</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[disp-subj-value-test-9] Article is an @article-type="<xsl:text/>
               <xsl:value-of select="$article-type"/>
               <xsl:text/>" but the display channel is <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>. It should be 'Expression of Concern' according to the article-type.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M68"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M68"/>
   <xsl:template match="@*|node()" priority="-2" mode="M68">
      <xsl:apply-templates select="*" mode="M68"/>
   </xsl:template>

   <!--PATTERN MSA-checks-pattern-->


	  <!--RULE MSA-checks-->
   <xsl:template match="article-categories/subj-group[@subj-group-type='heading']/subject" priority="1000" mode="M69">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test=". = $MSAs"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test=". = $MSAs">
               <xsl:attribute name="id">head-subj-MSA-test</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[head-subj-MSA-test] Content of the heading must match one of the MSAs.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M69"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M69"/>
   <xsl:template match="@*|node()" priority="-2" mode="M69">
      <xsl:apply-templates select="*" mode="M69"/>
   </xsl:template>

   <!--PATTERN head-subj-checks-pattern-->


	  <!--RULE head-subj-checks-->
   <xsl:template match="article-categories/subj-group[@subj-group-type='heading']" priority="1000" mode="M70">
      <xsl:variable name="article-type" select="ancestor::article/@article-type"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(subject) = 1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(subject) = 1">
               <xsl:attribute name="id">head-subj-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[head-subj-test-1] Each subj-group[@subj-group-type='heading'] must contain one and only one subject. This one contains <xsl:text/>
                  <xsl:value-of select="count(subject)"/>
                  <xsl:text/>.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M70"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M70"/>
   <xsl:template match="@*|node()" priority="-2" mode="M70">
      <xsl:apply-templates select="*" mode="M70"/>
   </xsl:template>

   <!--PATTERN test-title-group-pattern-->


	  <!--RULE test-title-group-->
   <xsl:template match="article/front/article-meta/title-group" priority="1000" mode="M71">
      <xsl:variable name="subj-type" select="ancestor::article//subj-group[@subj-group-type='display-channel']/subject[1]"/>
      <xsl:variable name="lc" select="normalize-space(lower-case(article-title[1]))"/>
      <xsl:variable name="title" select="replace(article-title[1],'\p{P}','')"/>
      <xsl:variable name="body" select="ancestor::front/following-sibling::body[1]"/>
      <xsl:variable name="tokens" select="string-join(for $x in tokenize($title,' ')[position() &gt; 1] return      if (matches($x,'^[A-Z]') and (string-length($x) gt 1) and matches($body,concat(' ',lower-case($x),' '))) then $x      else (),', ')"/>

		    <!--REPORT error-->
      <xsl:if test="ends-with(replace(article-title[1],'\p{Z}',''),'.')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="ends-with(replace(article-title[1],'\p{Z}',''),'.')">
            <xsl:attribute name="id">article-title-test-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[article-title-test-1] Article title must not end with a full stop - '<xsl:text/>
               <xsl:value-of select="article-title"/>
               <xsl:text/>'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="article-title[text() != ''] = lower-case(article-title[1])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="article-title[text() != ''] = lower-case(article-title[1])">
            <xsl:attribute name="id">article-title-test-2</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[article-title-test-2] Article title is entirely in lower case, is this correct? - <xsl:text/>
               <xsl:value-of select="article-title"/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="article-title[text() != ''] = upper-case(article-title[1])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="article-title[text() != ''] = upper-case(article-title[1])">
            <xsl:attribute name="id">article-title-test-3</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[article-title-test-3] Article title must not be entirely in upper case - <xsl:text/>
               <xsl:value-of select="article-title"/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="not(article-title/*) and normalize-space(article-title[1])=''">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="not(article-title/*) and normalize-space(article-title[1])=''">
            <xsl:attribute name="id">article-title-test-4</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[article-title-test-4] Article title must not be empty.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="article-title//mml:math">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="article-title//mml:math">
            <xsl:attribute name="id">article-title-test-5</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[article-title-test-5] Article title contains maths. Is this correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="article-title//bold">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="article-title//bold">
            <xsl:attribute name="id">article-title-test-6</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[article-title-test-6] Article title must not contain bold.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="article-title//underline">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="article-title//underline">
            <xsl:attribute name="id">article-title-test-7</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[article-title-test-7] Article title must not contain underline.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="article-title//break">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="article-title//break">
            <xsl:attribute name="id">article-title-test-8</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[article-title-test-8] Article title must not contain a line break (the element 'break').</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches(article-title[1],'-Based ')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(article-title[1],'-Based ')">
            <xsl:attribute name="id">article-title-test-9</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[article-title-test-9] Article title contains the string '-Based '. this should be lower-case, '-based '. - <xsl:text/>
               <xsl:value-of select="article-title"/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="($subj-type = ('Research Article', 'Short Report', 'Tools and Resources', 'Research Advance', 'Research Communication', 'Feature article', 'Insight', 'Editorial', 'Scientific Correspondence')) and not(ancestor::article-meta/abstract[not(@abstract-type) and sec]) and contains(article-title[1],':')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="($subj-type = ('Research Article', 'Short Report', 'Tools and Resources', 'Research Advance', 'Research Communication', 'Feature article', 'Insight', 'Editorial', 'Scientific Correspondence')) and not(ancestor::article-meta/abstract[not(@abstract-type) and sec]) and contains(article-title[1],':')">
            <xsl:attribute name="id">article-title-test-10</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[article-title-test-10] Article title contains a colon. This almost never allowed. - <xsl:text/>
               <xsl:value-of select="article-title"/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="not($subj-type = ($notice-display-types,'Scientific Correspondence','Replication Study')) and matches($tokens,'[A-Za-z]')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="not($subj-type = ($notice-display-types,'Scientific Correspondence','Replication Study')) and matches($tokens,'[A-Za-z]')">
            <xsl:attribute name="id">article-title-test-11</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[article-title-test-11] Article title contains a capitalised word(s) which is not capitalised in the body of the article - <xsl:text/>
               <xsl:value-of select="$tokens"/>
               <xsl:text/> - is this correct? - <xsl:text/>
               <xsl:value-of select="article-title"/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(article-title[1],' [Bb]ased ') and not(matches(article-title[1],' [Bb]ased on '))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(article-title[1],' [Bb]ased ') and not(matches(article-title[1],' [Bb]ased on '))">
            <xsl:attribute name="id">article-title-test-12</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[article-title-test-12] Article title contains the string ' based'. Should the preceding space be replaced by a hyphen - '-based'. - <xsl:text/>
               <xsl:value-of select="article-title"/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M71"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M71"/>
   <xsl:template match="@*|node()" priority="-2" mode="M71">
      <xsl:apply-templates select="*" mode="M71"/>
   </xsl:template>

   <!--PATTERN review-article-title-tests-pattern-->


	  <!--RULE review-article-title-tests-->
   <xsl:template match="article[@article-type='review-article']/front/article-meta/title-group/article-title[contains(.,': ')]" priority="1000" mode="M72">
      <xsl:variable name="pre-colon" select="substring-before(.,':')"/>
      <xsl:variable name="post-colon" select="substring-after(.,': ')"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="substring($pre-colon,1,1) = upper-case(substring($pre-colon,1,1))"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="substring($pre-colon,1,1) = upper-case(substring($pre-colon,1,1))">
               <xsl:attribute name="id">review-article-title-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[review-article-title-1] The first character in the title for a review article should be upper case. '<xsl:text/>
                  <xsl:value-of select="substring($pre-colon,1,1)"/>
                  <xsl:text/>' in '<xsl:text/>
                  <xsl:value-of select="."/>
                  <xsl:text/>'</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="substring($post-colon,1,1) = upper-case(substring($post-colon,1,1))"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="substring($post-colon,1,1) = upper-case(substring($post-colon,1,1))">
               <xsl:attribute name="id">review-article-title-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[review-article-title-2] The first character after the colon in the title for a review article should be upper case. '<xsl:text/>
                  <xsl:value-of select="substring($post-colon,1,1)"/>
                  <xsl:text/>' in '<xsl:text/>
                  <xsl:value-of select="."/>
                  <xsl:text/>'</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M72"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M72"/>
   <xsl:template match="@*|node()" priority="-2" mode="M72">
      <xsl:apply-templates select="*" mode="M72"/>
   </xsl:template>

   <!--PATTERN test-contrib-group-pattern-->


	  <!--RULE test-contrib-group-->
   <xsl:template match="article/front/article-meta/contrib-group" priority="1000" mode="M73">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="contrib"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contrib">
               <xsl:attribute name="id">contrib-presence-test</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[contrib-presence-test] contrib-group must contain at least one contrib.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="count(contrib[@equal-contrib='yes']) = 1">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(contrib[@equal-contrib='yes']) = 1">
            <xsl:attribute name="id">equal-count-test</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[equal-count-test] There is one contrib with the attribute equal-contrib='yes'. This cannot be correct. Either 2 or more contribs within the same contrib-group should have this attribute, or none. Check <xsl:text/>
               <xsl:value-of select="contrib[@equal-contrib='yes']/name"/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M73"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M73"/>
   <xsl:template match="@*|node()" priority="-2" mode="M73">
      <xsl:apply-templates select="*" mode="M73"/>
   </xsl:template>

   <!--PATTERN auth-contrib-group-pattern-->


	  <!--RULE auth-contrib-group-->
   <xsl:template match="article/front/article-meta/contrib-group[1]" priority="1000" mode="M74">
      <xsl:variable name="names" select="for $name in contrib[@contrib-type='author']/name[1] return e:get-name($name)"/>
      <xsl:variable name="indistinct-names" select="for $name in distinct-values($names) return $name[count($names[. = $name]) gt 1]"/>
      <xsl:variable name="orcids" select="for $x in contrib[@contrib-type='author']/contrib-id[@contrib-id-type='orcid'] return substring-after($x,'orcid.org/')"/>
      <xsl:variable name="indistinct-orcids" select="for $orcid in distinct-values($orcids) return $orcid[count($orcids[. = $orcid]) gt 1]"/>
      <xsl:variable name="article-type" select="ancestor::article/@article-type"/>
      <xsl:variable name="non-contribs" select="('article-commentary', 'editorial', 'book-review', $notice-article-types)"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="contrib[@contrib-type='author' and @corresp='yes']"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contrib[@contrib-type='author' and @corresp='yes']">
               <xsl:attribute name="id">corresp-presence-test</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[corresp-presence-test] There must be at least one corresponding author (a contrib[@contrib-type='author' and @corresp='yes'] in the first contrib-group).</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT warning-->
      <xsl:choose>
         <xsl:when test="empty($indistinct-names)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="empty($indistinct-names)">
               <xsl:attribute name="id">duplicate-author-test</xsl:attribute>
               <xsl:attribute name="role">warning</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[duplicate-author-test] There is more than one author with the following name(s) - <xsl:text/>
                  <xsl:value-of select="if (count($indistinct-names) gt 1) then concat(string-join($indistinct-names[position() != last()],', '),' and ',$indistinct-names[last()]) else $indistinct-names"/>
                  <xsl:text/> - which is very likely be incorrect.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="empty($indistinct-orcids)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="empty($indistinct-orcids)">
               <xsl:attribute name="id">duplicate-orcid-test</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[duplicate-orcid-test] There is more than one author with the following ORCiD(s) - <xsl:text/>
                  <xsl:value-of select="if (count($indistinct-orcids) gt 1) then concat(string-join($indistinct-orcids[position() != last()],', '),' and ',$indistinct-orcids[last()]) else $indistinct-orcids"/>
                  <xsl:text/> - which must be incorrect.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="$article-type=$non-contribs and descendant::contrib[@contrib-type='author' and role]">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="$article-type=$non-contribs and descendant::contrib[@contrib-type='author' and role]">
            <xsl:attribute name="id">non-contrib-contribs</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[non-contrib-contribs] <xsl:text/>
               <xsl:value-of select="$article-type"/>
               <xsl:text/> type articles should not contain author contributions.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M74"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M74"/>
   <xsl:template match="@*|node()" priority="-2" mode="M74">
      <xsl:apply-templates select="*" mode="M74"/>
   </xsl:template>

   <!--PATTERN test-editor-contrib-group-pattern-->


	  <!--RULE test-editor-contrib-group-->
   <xsl:template match="article/front/article-meta/contrib-group[@content-type='section']" priority="1000" mode="M75">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(contrib[@contrib-type='senior_editor']) = 1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(contrib[@contrib-type='senior_editor']) = 1">
               <xsl:attribute name="id">editor-conformance-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[editor-conformance-1] contrib-group[@content-type='section'] must contain one (and only 1) Senior Editor (contrib[@contrib-type='senior_editor']).</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT warning-->
      <xsl:choose>
         <xsl:when test="count(contrib[@contrib-type='editor']) = 1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(contrib[@contrib-type='editor']) = 1">
               <xsl:attribute name="id">editor-conformance-2</xsl:attribute>
               <xsl:attribute name="role">warning</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[editor-conformance-2] contrib-group[@content-type='section'] should contain one (and only 1) Reviewing Editor (contrib[@contrib-type='editor']). This one doesn't which is almost definitely incorrect and needs correcting.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M75"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M75"/>
   <xsl:template match="@*|node()" priority="-2" mode="M75">
      <xsl:apply-templates select="*" mode="M75"/>
   </xsl:template>

   <!--PATTERN test-editors-contrib-pattern-->


	  <!--RULE test-editors-contrib-->
   <xsl:template match="article/front/article-meta/contrib-group[@content-type='section']/contrib" priority="1000" mode="M76">
      <xsl:variable name="name" select="e:get-name(name[1])"/>
      <xsl:variable name="role" select="role[1]"/>

		    <!--REPORT error-->
      <xsl:if test="(@contrib-type='senior_editor') and ($role!='Senior Editor')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(@contrib-type='senior_editor') and ($role!='Senior Editor')">
            <xsl:attribute name="id">editor-conformance-3</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[editor-conformance-3] <xsl:text/>
               <xsl:value-of select="$name"/>
               <xsl:text/> has a @contrib-type='senior_editor' but their role is not 'Senior Editor' (<xsl:text/>
               <xsl:value-of select="$role"/>
               <xsl:text/>), which is incorrect.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="(@contrib-type='editor') and ($role!='Reviewing Editor')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(@contrib-type='editor') and ($role!='Reviewing Editor')">
            <xsl:attribute name="id">editor-conformance-4</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[editor-conformance-4] <xsl:text/>
               <xsl:value-of select="$name"/>
               <xsl:text/> has a @contrib-type='editor' but their role is not 'Reviewing Editor' (<xsl:text/>
               <xsl:value-of select="$role"/>
               <xsl:text/>), which is incorrect.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M76"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M76"/>
   <xsl:template match="@*|node()" priority="-2" mode="M76">
      <xsl:apply-templates select="*" mode="M76"/>
   </xsl:template>

   <!--PATTERN auth-cont-tests-pattern-->


	  <!--RULE auth-cont-tests-->
   <xsl:template match="article[@article-type=('research-article','review-article') and e:get-version(.)='1']//article-meta//contrib[(@contrib-type='author') and not(child::collab) and not(ancestor::collab)]" priority="1000" mode="M77">

		<!--ASSERT warning-->
      <xsl:choose>
         <xsl:when test="child::xref[@ref-type='fn' and matches(@rid,'^con[0-9]{1,3}$')]"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="child::xref[@ref-type='fn' and matches(@rid,'^con[0-9]{1,3}$')]">
               <xsl:attribute name="id">auth-cont-test-1</xsl:attribute>
               <xsl:attribute name="flag">version-1</xsl:attribute>
               <xsl:attribute name="role">warning</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[auth-cont-test-1] <xsl:text/>
                  <xsl:value-of select="e:get-name(name[1])"/>
                  <xsl:text/> has no contributions. Please ensure to query this with the authors.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M77"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M77"/>
   <xsl:template match="@*|node()" priority="-2" mode="M77">
      <xsl:apply-templates select="*" mode="M77"/>
   </xsl:template>

   <!--PATTERN duplicated-cont-tests-pattern-->


	  <!--RULE duplicated-cont-tests-->
   <xsl:template match="article[e:get-version(.)='1']//article-meta//contrib[(@contrib-type='author') and xref[@ref-type='fn' and matches(@rid,'^con[0-9]{1,3}$')]]" priority="1000" mode="M78">
      <xsl:variable name="cont-rid" select="xref[@ref-type='fn' and matches(@rid,'^con[0-9]{1,3}$')]/@rid"/>
      <xsl:variable name="cont-fn" select="ancestor::article//back//fn[@id=$cont-rid]/p"/>
      <xsl:variable name="con-vals" select="for $x in tokenize(string-join($cont-fn,', '),', ') return replace(lower-case($x),'\p{Zs}$|^\p{Zs}','')"/>
      <xsl:variable name="indistinct-conts" select="for $val in distinct-values($con-vals) return $val[count($con-vals[. = $val]) gt 1]"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="empty($indistinct-conts)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="empty($indistinct-conts)">
               <xsl:attribute name="id">dupe-cont-test-1</xsl:attribute>
               <xsl:attribute name="flag">version-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[dupe-cont-test-1] Author <xsl:text/>
                  <xsl:value-of select="if (name) then e:get-name(name[1]) else if (collab) then (e:get-collab(collab[1])) else ('with no name')"/>
                  <xsl:text/> has duplicated contributions which is incorrect. The indistinct contributions are: <xsl:text/>
                  <xsl:value-of select="string-join($indistinct-conts,'; ')"/>
                  <xsl:text/>.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M78"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M78"/>
   <xsl:template match="@*|node()" priority="-2" mode="M78">
      <xsl:apply-templates select="*" mode="M78"/>
   </xsl:template>

   <!--PATTERN auth-cont-tests-v2-pattern-->


	  <!--RULE auth-cont-tests-v2-->
   <xsl:template match="article[@article-type=('research-article','review-article') and e:get-version(.)!='1']//article-meta//contrib[(@contrib-type='author') and not(child::collab) and not(ancestor::collab)]" priority="1000" mode="M79">

		<!--ASSERT warning-->
      <xsl:choose>
         <xsl:when test="role"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="role">
               <xsl:attribute name="id">auth-cont-test-1-v2</xsl:attribute>
               <xsl:attribute name="flag">version-2</xsl:attribute>
               <xsl:attribute name="role">warning</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[auth-cont-test-1-v2] <xsl:text/>
                  <xsl:value-of select="e:get-name(name[1])"/>
                  <xsl:text/> has no contributions. Please ensure to query this with the authors.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT warning-->
      <xsl:if test="role and not(role[@vocab='credit'])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="role and not(role[@vocab='credit'])">
            <xsl:attribute name="id">auth-cont-test-2-v2</xsl:attribute>
            <xsl:attribute name="flag">version-2</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[auth-cont-test-2-v2] <xsl:text/>
               <xsl:value-of select="e:get-name(name[1])"/>
               <xsl:text/> has no CRediT contributions. Is that correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M79"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M79"/>
   <xsl:template match="@*|node()" priority="-2" mode="M79">
      <xsl:apply-templates select="*" mode="M79"/>
   </xsl:template>

   <!--PATTERN collab-cont-tests-pattern-->


	  <!--RULE collab-cont-tests-->
   <xsl:template match="article[@article-type=('research-article','review-article') and e:get-version(.)='1']//article-meta//contrib[(@contrib-type='author') and child::collab]" priority="1000" mode="M80">

		<!--ASSERT warning-->
      <xsl:choose>
         <xsl:when test="child::xref[@ref-type='fn' and matches(@rid,'^con[0-9]{1,3}$')]"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="child::xref[@ref-type='fn' and matches(@rid,'^con[0-9]{1,3}$')]">
               <xsl:attribute name="id">collab-cont-test-1</xsl:attribute>
               <xsl:attribute name="flag">version-1</xsl:attribute>
               <xsl:attribute name="role">warning</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[collab-cont-test-1] <xsl:text/>
                  <xsl:value-of select="e:get-collab(child::collab[1])"/>
                  <xsl:text/> has no contributions. Please ensure to query this with the authors.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M80"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M80"/>
   <xsl:template match="@*|node()" priority="-2" mode="M80">
      <xsl:apply-templates select="*" mode="M80"/>
   </xsl:template>

   <!--PATTERN collab-cont-tests-v2-pattern-->


	  <!--RULE collab-cont-tests-v2-->
   <xsl:template match="article[@article-type=('research-article','review-article') and e:get-version(.)!='1']//article-meta//contrib[(@contrib-type='author') and child::collab]" priority="1000" mode="M81">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="role"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="role">
               <xsl:attribute name="id">final-collab-cont-test-1-v2</xsl:attribute>
               <xsl:attribute name="flag">version-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[final-collab-cont-test-1-v2] <xsl:text/>
                  <xsl:value-of select="e:get-collab(child::collab[1])"/>
                  <xsl:text/> has no contributions. Please ensure to query this with the authors.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT warning-->
      <xsl:if test="role and not(role[@vocab='credit'])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="role and not(role[@vocab='credit'])">
            <xsl:attribute name="id">final-collab-cont-test-2-v2</xsl:attribute>
            <xsl:attribute name="flag">version-2</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[final-collab-cont-test-2-v2] <xsl:text/>
               <xsl:value-of select="e:get-collab(child::collab[1])"/>
               <xsl:text/> has no CRediT contributions. Is that correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M81"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M81"/>
   <xsl:template match="@*|node()" priority="-2" mode="M81">
      <xsl:apply-templates select="*" mode="M81"/>
   </xsl:template>

   <!--PATTERN duplicated-cont-tests-v2-pattern-->


	  <!--RULE duplicated-cont-tests-v2-->
   <xsl:template match="article[e:get-version(.)!='1']//article-meta//contrib[@contrib-type='author']" priority="1000" mode="M82">
      <xsl:variable name="roles" select="for $x in role return lower-case($x/data())"/>
      <xsl:variable name="indistinct-conts" select="for $role in distinct-values($roles) return $role[count($roles[. = $role]) gt 1]"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="empty($indistinct-conts)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="empty($indistinct-conts)">
               <xsl:attribute name="id">dupe-cont-test-v2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[dupe-cont-test-v2] Author <xsl:text/>
                  <xsl:value-of select="if (name) then e:get-name(name[1]) else if (collab) then (e:get-collab(collab[1])) else ('with no name')"/>
                  <xsl:text/> has duplicated contributions - <xsl:text/>
                  <xsl:value-of select="$indistinct-conts"/>
                  <xsl:text/> - which is incorrect.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M82"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M82"/>
   <xsl:template match="@*|node()" priority="-2" mode="M82">
      <xsl:apply-templates select="*" mode="M82"/>
   </xsl:template>

   <!--PATTERN collab-tests-pattern-->


	  <!--RULE collab-tests-->
   <xsl:template match="article//article-meta/contrib-group[1]/contrib[@contrib-type='author']/collab/contrib-group" priority="1000" mode="M83">
      <xsl:variable name="names" select="for $name in contrib[@contrib-type='author']/name[1] return e:get-name($name)"/>
      <xsl:variable name="indistinct-names" select="for $name in distinct-values($names) return $name[count($names[. = $name]) gt 1]"/>
      <xsl:variable name="orcids" select="for $x in contrib[@contrib-type='author']/contrib-id[@contrib-id-type='orcid'] return substring-after($x,'orcid.org/')"/>
      <xsl:variable name="indistinct-orcids" select="for $orcid in distinct-values($orcids) return $orcid[count($orcids[. = $orcid]) gt 1]"/>

		    <!--ASSERT warning-->
      <xsl:choose>
         <xsl:when test="empty($indistinct-names)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="empty($indistinct-names)">
               <xsl:attribute name="id">duplicate-member-test</xsl:attribute>
               <xsl:attribute name="role">warning</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[duplicate-member-test] There is more than one member of the group author <xsl:text/>
                  <xsl:value-of select="e:get-collab(parent::collab)"/>
                  <xsl:text/> with the following name(s) - <xsl:text/>
                  <xsl:value-of select="if (count($indistinct-names) gt 1) then concat(string-join($indistinct-names[position() != last()],', '),' and ',$indistinct-names[last()]) else $indistinct-names"/>
                  <xsl:text/> - which is very likely incorrect.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="empty($indistinct-orcids)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="empty($indistinct-orcids)">
               <xsl:attribute name="id">duplicate-member-orcid-test</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[duplicate-member-orcid-test] There is more than one member of the group author <xsl:text/>
                  <xsl:value-of select="e:get-collab(parent::collab)"/>
                  <xsl:text/> with the following ORCiD(s) - <xsl:text/>
                  <xsl:value-of select="if (count($indistinct-orcids) gt 1) then concat(string-join($indistinct-orcids[position() != last()],', '),' and ',$indistinct-orcids[last()]) else $indistinct-orcids"/>
                  <xsl:text/> - which must be incorrect.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M83"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M83"/>
   <xsl:template match="@*|node()" priority="-2" mode="M83">
      <xsl:apply-templates select="*" mode="M83"/>
   </xsl:template>

   <!--PATTERN collab-tests-2-pattern-->


	  <!--RULE collab-tests-2-->
   <xsl:template match="article//article-meta/contrib-group[1][contrib[@contrib-type='author']/collab/contrib-group]" priority="1000" mode="M84">
      <xsl:variable name="top-names" select="for $name in contrib[@contrib-type='author']/name[1] return e:get-name($name)"/>
      <xsl:variable name="members" select="for $member in contrib[@contrib-type='author']/collab/contrib-group/contrib[@contrib-type='author']/name[1]         return e:get-name($member)"/>
      <xsl:variable name="auth-and-member" select="$top-names[.=$members]"/>

		    <!--ASSERT warning-->
      <xsl:choose>
         <xsl:when test="empty($auth-and-member)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="empty($auth-and-member)">
               <xsl:attribute name="id">auth-and-member-test</xsl:attribute>
               <xsl:attribute name="role">warning</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[auth-and-member-test] Top level author(s) <xsl:text/>
                  <xsl:value-of select="if (count($auth-and-member) gt 1) then concat(string-join($auth-and-member[position() != last()],', '),' and ',$auth-and-member[last()]) else $auth-and-member"/>
                  <xsl:text/> are also a member of a group author. Is this correct?</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M84"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M84"/>
   <xsl:template match="@*|node()" priority="-2" mode="M84">
      <xsl:apply-templates select="*" mode="M84"/>
   </xsl:template>

   <!--PATTERN author-xref-tests-pattern-->


	  <!--RULE author-xref-tests-->
   <xsl:template match="article-meta//contrib[@contrib-type='author']/xref" priority="1000" mode="M85">

		<!--REPORT error-->
      <xsl:if test="(@ref-type='aff') and preceding-sibling::xref[not(@ref-type='aff')]">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(@ref-type='aff') and preceding-sibling::xref[not(@ref-type='aff')]">
            <xsl:attribute name="id">author-xref-test-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[author-xref-test-1] Affiliation footnote links (xrefs) from authors must be the first type of link. For <xsl:text/>
               <xsl:value-of select="e:get-name(preceding-sibling::name[1])"/>
               <xsl:text/>, their affiliation link - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> - appears after another non-affiliation link, when it should appear before it.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="(@ref-type='fn') and contains(@rid,'equal') and preceding-sibling::xref[not(@ref-type='aff')]">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(@ref-type='fn') and contains(@rid,'equal') and preceding-sibling::xref[not(@ref-type='aff')]">
            <xsl:attribute name="id">author-xref-test-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[author-xref-test-2] Equal contribution links from authors must appear after affiliation footnote links. For <xsl:text/>
               <xsl:value-of select="e:get-name(preceding-sibling::name[1])"/>
               <xsl:text/>, their equal contribution link (to <xsl:text/>
               <xsl:value-of select="idref(@rid)"/>
               <xsl:text/>) appears after another non-affiliation link, when it should appear before it.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="(@ref-type='fn') and contains(@rid,'pa') and following-sibling::xref[@ref-type='aff' or contains(@rid,'equal')]">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(@ref-type='fn') and contains(@rid,'pa') and following-sibling::xref[@ref-type='aff' or contains(@rid,'equal')]">
            <xsl:attribute name="id">author-xref-test-3</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[author-xref-test-3] Present address type footnote links from authors must appear after affiliation and equal contribution links (if there is one). For <xsl:text/>
               <xsl:value-of select="e:get-name(preceding-sibling::name[1])"/>
               <xsl:text/>, their present address link (to <xsl:text/>
               <xsl:value-of select="idref(@rid)"/>
               <xsl:text/>) appears before an affiliation link or equal contribution link.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="contains(@rid,'dataset')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(@rid,'dataset')">
            <xsl:attribute name="id">author-xref-test-4</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[author-xref-test-4] Author footnote links to datasets are not needed. Please remove this - &lt;xref <xsl:text/>
               <xsl:value-of select="string-join(for $x in self::*/@* return concat($x/name(),'=&quot;',$x,'&quot;'),' ')"/>
               <xsl:text/>/&gt;</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M85"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M85"/>
   <xsl:template match="@*|node()" priority="-2" mode="M85">
      <xsl:apply-templates select="*" mode="M85"/>
   </xsl:template>

   <!--PATTERN name-tests-pattern-->


	  <!--RULE name-tests-->
   <xsl:template match="contrib-group//name" priority="1000" mode="M86">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(surname) = 1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(surname) = 1">
               <xsl:attribute name="id">surname-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[surname-test-1] Each name must contain only one surname.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="count(given-names) gt 1">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(given-names) gt 1">
            <xsl:attribute name="id">given-names-test-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[given-names-test-1] Each name must contain only one given-names element.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--ASSERT warning-->
      <xsl:choose>
         <xsl:when test="given-names"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="given-names">
               <xsl:attribute name="id">given-names-test-2</xsl:attribute>
               <xsl:attribute name="role">warning</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[given-names-test-2] This name - <xsl:text/>
                  <xsl:value-of select="."/>
                  <xsl:text/> - does not contain a given-name. Please check with eLife staff that this is correct.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M86"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M86"/>
   <xsl:template match="@*|node()" priority="-2" mode="M86">
      <xsl:apply-templates select="*" mode="M86"/>
   </xsl:template>

   <!--PATTERN surname-tests-pattern-->


	  <!--RULE surname-tests-->
   <xsl:template match="contrib-group//name/surname" priority="1000" mode="M87">

		<!--REPORT error-->
      <xsl:if test="not(*) and (normalize-space(.)='')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="not(*) and (normalize-space(.)='')">
            <xsl:attribute name="id">surname-test-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[surname-test-2] surname must not be empty.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="descendant::bold or descendant::sub or descendant::sup or descendant::italic or descendant::sc">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="descendant::bold or descendant::sub or descendant::sup or descendant::italic or descendant::sc">
            <xsl:attribute name="id">surname-test-3</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[surname-test-3] surname must not contain any formatting (bold, or italic emphasis, or smallcaps, superscript or subscript).</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(.,&quot;^[\p{L}\p{M}\s'’-]*$&quot;)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,&quot;^[\p{L}\p{M}\s'’-]*$&quot;)">
               <xsl:attribute name="id">surname-test-4</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[surname-test-4] surname should usually only contain letters, spaces, or hyphens. <xsl:text/>
                  <xsl:value-of select="."/>
                  <xsl:text/> contains other characters.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,'^\p{Ll}') and not(matches(.,'^de[rn]? |^van |^von |^el |^te[rn] '))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'^\p{Ll}') and not(matches(.,'^de[rn]? |^van |^von |^el |^te[rn] '))">
            <xsl:attribute name="id">surname-test-5</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[surname-test-5] surname doesn't begin with a capital letter - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>. Is this correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches(.,'^\p{Zs}')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'^\p{Zs}')">
            <xsl:attribute name="id">surname-test-6</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[surname-test-6] surname starts with a space, which cannot be correct - '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches(.,'\p{Zs}$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'\p{Zs}$')">
            <xsl:attribute name="id">surname-test-7</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[surname-test-7] surname ends with a space, which cannot be correct - '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,'^[A-Z]{1,2}\p{Zs}') and (string-length(.) gt 3)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'^[A-Z]{1,2}\p{Zs}') and (string-length(.) gt 3)">
            <xsl:attribute name="id">surname-test-8</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[surname-test-8] surname looks to start with initial - '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>'. Should '<xsl:text/>
               <xsl:value-of select="substring-before(.,' ')"/>
               <xsl:text/>' be placed in the given-names field?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,'[\(\)\[\]]')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'[\(\)\[\]]')">
            <xsl:attribute name="id">surname-test-9</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[surname-test-9] surname contains brackets - '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>'. Should the bracketed text be placed in the given-names field instead?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,'\p{Zs}(III?|I?V)$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'\p{Zs}(III?|I?V)$')">
            <xsl:attribute name="id">surname-test-10</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[surname-test-10] surname ends with what might be roman numerals - '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>'. Should these be placed in a suffix element instead?</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M87"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M87"/>
   <xsl:template match="@*|node()" priority="-2" mode="M87">
      <xsl:apply-templates select="*" mode="M87"/>
   </xsl:template>

   <!--PATTERN given-names-tests-pattern-->


	  <!--RULE given-names-tests-->
   <xsl:template match="contrib-group//name/given-names" priority="1000" mode="M88">

		<!--REPORT error-->
      <xsl:if test="not(*) and (normalize-space(.)='')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="not(*) and (normalize-space(.)='')">
            <xsl:attribute name="id">given-names-test-3</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[given-names-test-3] given-names must not be empty.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="descendant::bold or descendant::sub or descendant::sup or descendant::italic or descendant::sc">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="descendant::bold or descendant::sub or descendant::sup or descendant::italic or descendant::sc">
            <xsl:attribute name="id">given-names-test-4</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[given-names-test-4] given-names must not contain any formatting (bold, or italic emphasis, or smallcaps, superscript or subscript) - '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(.,&quot;^[\p{L}\p{M}\(\)\s'’-]*$&quot;)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,&quot;^[\p{L}\p{M}\(\)\s'’-]*$&quot;)">
               <xsl:attribute name="id">given-names-test-5</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[given-names-test-5] given-names should usually only contain letters, spaces, or hyphens. <xsl:text/>
                  <xsl:value-of select="."/>
                  <xsl:text/> contains other characters.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT warning-->
      <xsl:choose>
         <xsl:when test="matches(.,'^\p{Lu}')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'^\p{Lu}')">
               <xsl:attribute name="id">given-names-test-6</xsl:attribute>
               <xsl:attribute name="role">warning</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[given-names-test-6] given-names doesn't begin with a capital letter - '<xsl:text/>
                  <xsl:value-of select="."/>
                  <xsl:text/>'. Is this correct?</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="matches(.,'^[\p{L}]{1}\.$|^[\p{L}]{1}\.\p{Zs}?[\p{L}]{1}\.\p{Zs}?$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'^[\p{L}]{1}\.$|^[\p{L}]{1}\.\p{Zs}?[\p{L}]{1}\.\p{Zs}?$')">
            <xsl:attribute name="id">given-names-test-7</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[given-names-test-7] given-names contains initialised full stop(s) which is incorrect - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches(.,'^\p{Zs}')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'^\p{Zs}')">
            <xsl:attribute name="id">given-names-test-8</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[given-names-test-8] given-names starts with a space, which cannot be correct - '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches(.,'\p{Zs}$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'\p{Zs}$')">
            <xsl:attribute name="id">given-names-test-9</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[given-names-test-9] given-names ends with a space, which cannot be correct - '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,'[A-Za-z] [Dd]e[rn]?$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'[A-Za-z] [Dd]e[rn]?$')">
            <xsl:attribute name="id">given-names-test-10</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[given-names-test-10] given-names ends with de, der, or den - should this be captured as the beginning of the surname instead? - '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,'[A-Za-z] [Vv]an$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'[A-Za-z] [Vv]an$')">
            <xsl:attribute name="id">given-names-test-11</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[given-names-test-11] given-names ends with ' van' - should this be captured as the beginning of the surname instead? - '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,'[A-Za-z] [Vv]on$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'[A-Za-z] [Vv]on$')">
            <xsl:attribute name="id">given-names-test-12</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[given-names-test-12] given-names ends with ' von' - should this be captured as the beginning of the surname instead? - '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,'[A-Za-z] [Ee]l$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'[A-Za-z] [Ee]l$')">
            <xsl:attribute name="id">given-names-test-13</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[given-names-test-13] given-names ends with ' el' - should this be captured as the beginning of the surname instead? - '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,'[A-Za-z] [Tt]e[rn]?$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'[A-Za-z] [Tt]e[rn]?$')">
            <xsl:attribute name="id">given-names-test-14</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[given-names-test-14] given-names ends with te, ter, or ten - should this be captured as the beginning of the surname instead? - '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches(normalize-space(.),'[A-Za-z]\p{Zs}[A-za-z]\p{Zs}[A-za-z]\p{Zs}[A-za-z]|[A-Za-z]\p{Zs}[A-za-z]\p{Zs}[A-za-z]$|^[A-za-z]\p{Zs}[A-za-z]$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(normalize-space(.),'[A-Za-z]\p{Zs}[A-za-z]\p{Zs}[A-za-z]\p{Zs}[A-za-z]|[A-Za-z]\p{Zs}[A-za-z]\p{Zs}[A-za-z]$|^[A-za-z]\p{Zs}[A-za-z]$')">
            <xsl:attribute name="id">given-names-test-15</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[given-names-test-15] given-names contains initials with spaces. Ensure that the space(s) is removed between initials - '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,'[\(\)\[\]]')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'[\(\)\[\]]')">
            <xsl:attribute name="id">final-given-names-test-16</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[final-given-names-test-16] given-names contains brackets - '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>'. This will be flagged by Crossref (although will not actually cause any significant problems).</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M88"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M88"/>
   <xsl:template match="@*|node()" priority="-2" mode="M88">
      <xsl:apply-templates select="*" mode="M88"/>
   </xsl:template>

   <!--PATTERN suffix-tests-pattern-->


	  <!--RULE suffix-tests-->
   <xsl:template match="contrib-group//name/suffix" priority="1000" mode="M89">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test=".=('Jr', 'Jnr', 'Sr', 'Snr', 'I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test=".=('Jr', 'Jnr', 'Sr', 'Snr', 'I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X')">
               <xsl:attribute name="id">suffix-assert</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[suffix-assert] suffix can only have one of these values - 'Jr', 'Jnr', 'Sr', 'Snr', 'I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="*">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="*">
            <xsl:attribute name="id">suffix-child-test</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[suffix-child-test] suffix cannot have any child elements - <xsl:text/>
               <xsl:value-of select="*/local-name()"/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M89"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M89"/>
   <xsl:template match="@*|node()" priority="-2" mode="M89">
      <xsl:apply-templates select="*" mode="M89"/>
   </xsl:template>

   <!--PATTERN name-child-tests-pattern-->


	  <!--RULE name-child-tests-->
   <xsl:template match="contrib-group//name/*" priority="1000" mode="M90">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="local-name() = ('surname','given-names','suffix')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="local-name() = ('surname','given-names','suffix')">
               <xsl:attribute name="id">disallowed-child-assert</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[disallowed-child-assert] <xsl:text/>
                  <xsl:value-of select="local-name()"/>
                  <xsl:text/> is not allowed as a child of name.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M90"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M90"/>
   <xsl:template match="@*|node()" priority="-2" mode="M90">
      <xsl:apply-templates select="*" mode="M90"/>
   </xsl:template>

   <!--PATTERN contrib-tests-pattern-->


	  <!--RULE contrib-tests-->
   <xsl:template match="article-meta//contrib" priority="1000" mode="M91">
      <xsl:variable name="type" select="@contrib-type"/>
      <xsl:variable name="subj-type" select="ancestor::article//subj-group[@subj-group-type='display-channel']/subject[1]"/>
      <xsl:variable name="aff-rid1" select="xref[@ref-type='aff'][1]/@rid"/>
      <xsl:variable name="inst1" select="ancestor::contrib-group//aff[@id = $aff-rid1]//institution[not(@content-type)][1]"/>
      <xsl:variable name="aff-rid2" select="xref[@ref-type='aff'][2]/@rid"/>
      <xsl:variable name="inst2" select="ancestor::contrib-group//aff[@id = $aff-rid2]//institution[not(@content-type)][1]"/>
      <xsl:variable name="aff-rid3" select="xref[@ref-type='aff'][3]/@rid"/>
      <xsl:variable name="inst3" select="ancestor::contrib-group//aff[@id = $aff-rid3]//institution[not(@content-type)][1]"/>
      <xsl:variable name="aff-rid4" select="xref[@ref-type='aff'][4]/@rid"/>
      <xsl:variable name="inst4" select="ancestor::contrib-group//aff[@id = $aff-rid4]//institution[not(@content-type)][1]"/>
      <xsl:variable name="aff-rid5" select="xref[@ref-type='aff'][5]/@rid"/>
      <xsl:variable name="inst5" select="ancestor::contrib-group//aff[@id = $aff-rid5]//institution[not(@content-type)][1]"/>
      <xsl:variable name="inst" select="concat($inst1,'*',$inst2,'*',$inst3,'*',$inst4,'*',$inst5)"/>
      <xsl:variable name="coi-rid" select="xref[starts-with(@rid,'conf')]/@rid"/>
      <xsl:variable name="coi" select="ancestor::article//fn[@id = $coi-rid]/p[1]"/>
      <xsl:variable name="comp-regex" select="' [Ii]nc[.]?| LLC| Ltd| [Ll]imited| [Cc]ompanies| [Cc]ompany| [Cc]o\.| Pharmaceutical[s]| [Pp][Ll][Cc]|AstraZeneca|Pfizer| R&amp;D'"/>
      <xsl:variable name="fn-rid" select="xref[starts-with(@rid,'fn')]/@rid"/>
      <xsl:variable name="fn" select="string-join(ancestor::article-meta//author-notes/fn[@id = $fn-rid]/p,'')"/>
      <xsl:variable name="name" select="if (child::collab[1]) then collab else if (child::name[1]) then e:get-name(child::name[1]) else ()"/>

		    <!--REPORT error-->
      <xsl:if test="if ($subj-type = $notice-display-types) then ()        else if (collab) then ()        else if (ancestor::collab) then ()        else if ($type != 'author') then ()        else count(xref[@ref-type='aff']) = 0">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="if ($subj-type = $notice-display-types) then () else if (collab) then () else if (ancestor::collab) then () else if ($type != 'author') then () else count(xref[@ref-type='aff']) = 0">
            <xsl:attribute name="id">contrib-test-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[contrib-test-1] Authors should have at least 1 link to an affiliation. <xsl:text/>
               <xsl:value-of select="$name"/>
               <xsl:text/> does not.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="if ($subj-type = $notice-display-types) then ()            else if ($type != 'author') then ()            else if (collab) then ()            else if (ancestor::collab) then (count(xref[@ref-type='aff']) + count(aff) = 0)            else ()">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="if ($subj-type = $notice-display-types) then () else if ($type != 'author') then () else if (collab) then () else if (ancestor::collab) then (count(xref[@ref-type='aff']) + count(aff) = 0) else ()">
            <xsl:attribute name="id">contrib-test-5</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[contrib-test-5] Group author members should likely have an affiliation. <xsl:text/>
               <xsl:value-of select="$name"/>
               <xsl:text/> does not. Is this OK?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="($type = 'senior_editor') and (count(xref[@ref-type='aff']) + count(aff) = 0)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="($type = 'senior_editor') and (count(xref[@ref-type='aff']) + count(aff) = 0)">
            <xsl:attribute name="id">contrib-test-2</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[contrib-test-2] The <xsl:text/>
               <xsl:value-of select="role[1]"/>
               <xsl:text/> doesn't have an affiliation - <xsl:text/>
               <xsl:value-of select="$name"/>
               <xsl:text/> - is this correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="($type = 'editor') and (count(xref[@ref-type='aff']) + count(aff) = 0)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="($type = 'editor') and (count(xref[@ref-type='aff']) + count(aff) = 0)">
            <xsl:attribute name="id">contrib-test-4</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[contrib-test-4] The <xsl:text/>
               <xsl:value-of select="role[1]"/>
               <xsl:text/> (<xsl:text/>
               <xsl:value-of select="$name"/>
               <xsl:text/>) must have an affiliation. Exeter: If it is not present in the eJP ouput, please check with eLife production. Production: Please check eJP or ask Editorial for the correct affiliation. - is this correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="name and collab">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="name and collab">
            <xsl:attribute name="id">contrib-test-3</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[contrib-test-3] author contains both a child name and a child collab. This is not correct.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="if (collab) then ()         else count(name) != 1">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="if (collab) then () else count(name) != 1">
            <xsl:attribute name="id">name-test</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[name-test] Contrib contains no collab but has <xsl:text/>
               <xsl:value-of select="count(name)"/>
               <xsl:text/> name(s). This is not correct.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="self::*[@corresp='yes'][not(child::*:email)]">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="self::*[@corresp='yes'][not(child::*:email)]">
            <xsl:attribute name="id">contrib-email-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[contrib-email-1] Corresponding authors must have an email.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="not(@corresp='yes') and (not(ancestor::collab/parent::contrib[@corresp='yes'])) and (child::email)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="not(@corresp='yes') and (not(ancestor::collab/parent::contrib[@corresp='yes'])) and (child::email)">
            <xsl:attribute name="id">contrib-email-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[contrib-email-2] Non-corresponding authors must not have an email.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="(@contrib-type='author') and ($coi = 'No competing interests declared') and (matches($inst,$comp-regex))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(@contrib-type='author') and ($coi = 'No competing interests declared') and (matches($inst,$comp-regex))">
            <xsl:attribute name="id">COI-test</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[COI-test] <xsl:text/>
               <xsl:value-of select="$name"/>
               <xsl:text/> is affiliated with what looks like a company, but contains no COI statement. Is this correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches($fn,'[Dd]eceased') and not(@deceased='yes')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($fn,'[Dd]eceased') and not(@deceased='yes')">
            <xsl:attribute name="id">deceased-test-1</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/people/deceased-status#deceased-test-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[deceased-test-1] <xsl:text/>
               <xsl:value-of select="$name"/>
               <xsl:text/> has a linked footnote '<xsl:text/>
               <xsl:value-of select="$fn"/>
               <xsl:text/>', but not @deceased="yes" which is incorrect.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="(@deceased='yes') and not(matches($fn,'[Dd]eceased'))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(@deceased='yes') and not(matches($fn,'[Dd]eceased'))">
            <xsl:attribute name="id">deceased-test-2</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/people/deceased-status#deceased-test-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[deceased-test-2] <xsl:text/>
               <xsl:value-of select="$name"/>
               <xsl:text/> has the attribute deceased="yes", but no footnote which contains the text 'Deceased', which is incorrect.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M91"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M91"/>
   <xsl:template match="@*|node()" priority="-2" mode="M91">
      <xsl:apply-templates select="*" mode="M91"/>
   </xsl:template>

   <!--PATTERN corresp-author-initial-tests-pattern-->


	  <!--RULE corresp-author-initial-tests-->
   <xsl:template match="article[@article-type=('research-article','review-article','discussion')]//article-meta[not(descendant::custom-meta[meta-name='Template']/meta-value='3')]/contrib-group[1][count(contrib[@contrib-type='author' and @corresp='yes']) gt 1]/contrib[@contrib-type='author' and @corresp='yes' and name]" priority="1000" mode="M92">
      <xsl:variable name="name" select="e:get-name(name[1])"/>
      <xsl:variable name="normalized-name" select="e:stripDiacritics($name)"/>

		    <!--REPORT warning-->
      <xsl:if test="$normalized-name != $name">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="$normalized-name != $name">
            <xsl:attribute name="id">corresp-author-initial-test</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[corresp-author-initial-test] <xsl:text/>
               <xsl:value-of select="$name"/>
               <xsl:text/> has a name with letters that have diacritics or marks. Please ensure that their initials display correctly in the PDF in the 'For correspondence' section on the first page.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M92"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M92"/>
   <xsl:template match="@*|node()" priority="-2" mode="M92">
      <xsl:apply-templates select="*" mode="M92"/>
   </xsl:template>

   <!--PATTERN author-children-tests-pattern-->


	  <!--RULE author-children-tests-->
   <xsl:template match="article[e:get-version(.)='1']//article-meta//contrib[@contrib-type='author']/*" priority="1000" mode="M93">
      <xsl:variable name="article-type" select="ancestor::article/@article-type"/>
      <xsl:variable name="template" select="ancestor::article-meta/custom-meta-group/custom-meta[meta-name='Template']/meta-value[1]"/>
      <xsl:variable name="allowed-contrib-blocks" select="('name', 'collab', 'contrib-id', 'email', 'xref')"/>
      <xsl:variable name="allowed-contrib-blocks-features" select="($allowed-contrib-blocks, 'bio')"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="if (ancestor::collab) then self::*[local-name() = ($allowed-contrib-blocks,'aff')]       else if ($template = '5') then self::*[local-name() = $allowed-contrib-blocks-features]       else if ($article-type = $features-article-types) then self::*[local-name() = $allowed-contrib-blocks-features]       else self::*[local-name() = $allowed-contrib-blocks]"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="if (ancestor::collab) then self::*[local-name() = ($allowed-contrib-blocks,'aff')] else if ($template = '5') then self::*[local-name() = $allowed-contrib-blocks-features] else if ($article-type = $features-article-types) then self::*[local-name() = $allowed-contrib-blocks-features] else self::*[local-name() = $allowed-contrib-blocks]">
               <xsl:attribute name="id">author-children-test</xsl:attribute>
               <xsl:attribute name="flag">version-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[author-children-test] <xsl:text/>
                  <xsl:value-of select="self::*/local-name()"/>
                  <xsl:text/> is not allowed as a child of author.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M93"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M93"/>
   <xsl:template match="@*|node()" priority="-2" mode="M93">
      <xsl:apply-templates select="*" mode="M93"/>
   </xsl:template>

   <!--PATTERN author-children-tests-v2-pattern-->


	  <!--RULE author-children-tests-v2-->
   <xsl:template match="article[e:get-version(.)!='1']//article-meta//contrib[@contrib-type='author']/*" priority="1000" mode="M94">
      <xsl:variable name="article-type" select="ancestor::article/@article-type"/>
      <xsl:variable name="template" select="ancestor::article-meta/custom-meta-group/custom-meta[meta-name='Template']/meta-value[1]"/>
      <xsl:variable name="allowed-contrib-blocks" select="('name', 'collab', 'contrib-id', 'email', 'xref','role')"/>
      <xsl:variable name="allowed-contrib-blocks-features" select="($allowed-contrib-blocks, 'bio')"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="if (ancestor::collab) then self::*[local-name() = ($allowed-contrib-blocks,'aff')]         else if ($template = '5') then self::*[local-name() = $allowed-contrib-blocks-features]         else if ($article-type = $features-article-types) then self::*[local-name() = $allowed-contrib-blocks-features]         else self::*[local-name() = $allowed-contrib-blocks]"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="if (ancestor::collab) then self::*[local-name() = ($allowed-contrib-blocks,'aff')] else if ($template = '5') then self::*[local-name() = $allowed-contrib-blocks-features] else if ($article-type = $features-article-types) then self::*[local-name() = $allowed-contrib-blocks-features] else self::*[local-name() = $allowed-contrib-blocks]">
               <xsl:attribute name="id">author-children-test-v2</xsl:attribute>
               <xsl:attribute name="flag">version-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[author-children-test-v2] <xsl:text/>
                  <xsl:value-of select="self::*/local-name()"/>
                  <xsl:text/> is not allowed as a child of author.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M94"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M94"/>
   <xsl:template match="@*|node()" priority="-2" mode="M94">
      <xsl:apply-templates select="*" mode="M94"/>
   </xsl:template>

   <!--PATTERN author-role-tests-pattern-->


	  <!--RULE author-role-tests-->
   <xsl:template match="article[e:get-version(.)!='1']//article-meta//contrib[@contrib-type='author']/role[@vocab='credit']" priority="1000" mode="M95">
      <xsl:variable name="credit-roles" select="'credit-roles.xml'"/>
      <xsl:variable name="vocab-term" select="@vocab-term"/>
      <xsl:variable name="vocab-term-id" select="lower-case(@vocab-term-identifier)"/>
      <xsl:variable name="credit-role" select="document($credit-roles)//*:item[(@term = $vocab-term) or (@uri = $vocab-term-id)]"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@vocab-identifier='http://credit.niso.org/'"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@vocab-identifier='http://credit.niso.org/'">
               <xsl:attribute name="id">credit-role-check-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[credit-role-check-1] A CRediT taxonomy role must have a @vocab-identifier whose value is http://credit.niso.org/.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="not(@vocab-term-identifier) or ((count($credit-role) = 1) and ($vocab-term-id != $credit-role/@uri))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="not(@vocab-term-identifier) or ((count($credit-role) = 1) and ($vocab-term-id != $credit-role/@uri))">
            <xsl:attribute name="id">credit-role-check-2</xsl:attribute>
            <xsl:attribute name="flag">version-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[credit-role-check-2] A CRediT taxonomy role must have a @vocab-term-identifier, the value of which must be the URL of the specific CRediT term. <xsl:text/>
               <xsl:value-of select="if (empty($credit-role)) then concat('It must be one of these - ',string-join(document($credit-roles)//*:item/@uri,', ')) else concat('In this case ',$credit-role/@uri,' (based on the @vocab-term of this role element)')"/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="not(@vocab-term) or ((count($credit-role) = 1) and ($vocab-term != $credit-role/@term))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="not(@vocab-term) or ((count($credit-role) = 1) and ($vocab-term != $credit-role/@term))">
            <xsl:attribute name="id">credit-role-check-3</xsl:attribute>
            <xsl:attribute name="flag">version-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[credit-role-check-3] A CRediT taxonomy role must have a @vocab-term, the value of which must be one of the CRediT terms - <xsl:text/>
               <xsl:value-of select="if (empty($credit-role)) then string-join(document($credit-roles)//*:item/@term,', ')            else concat(' in this case ',$credit-role/@term,' (based on the @vocab-term-identifer of of this role element)')"/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="(count($credit-role) = 1) and $vocab-term=$credit-role/@term and $vocab-term-id= $credit-role/@uri"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(count($credit-role) = 1) and $vocab-term=$credit-role/@term and $vocab-term-id= $credit-role/@uri">
               <xsl:attribute name="id">credit-role-check-4</xsl:attribute>
               <xsl:attribute name="flag">version-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[credit-role-check-4] A CRediT taxonomy role must have a @vocab-term, whose value is a specific CRediT taxonomy term, and a @vocab-term-identifier, whose value is the URL for that corresponding CRediT term. <xsl:text/>
                  <xsl:value-of select="concat('Either the @vocab-term - ', $vocab-term, ' - is incorrect and must be ', if ($credit-role[@uri=$vocab-term-id]) then $credit-role[@uri=$vocab-term-id]/@term else 'unknown', ', or the @vocab-term-identifier - ', $vocab-term-id,' - is incorrect and must be ', $credit-role[@term=$vocab-term]/@uri)"/>
                  <xsl:text/>.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M95"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M95"/>
   <xsl:template match="@*|node()" priority="-2" mode="M95">
      <xsl:apply-templates select="*" mode="M95"/>
   </xsl:template>

   <!--PATTERN author-role-tests-2-pattern-->


	  <!--RULE author-role-tests-2-->
   <xsl:template match="article[e:get-version(.)!='1']//article-meta//contrib[@contrib-type='author']/role[not(@vocab='credit')]" priority="1000" mode="M96">
      <xsl:variable name="vocab-term" select="@vocab-term"/>
      <xsl:variable name="vocab-term-id" select="lower-case(@vocab-term-identifier)"/>

		    <!--REPORT error-->
      <xsl:if test="@vocab-term or @vocab-term-identifier or @vocab-identifier">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@vocab-term or @vocab-term-identifier or @vocab-identifier">
            <xsl:attribute name="id">author-role-check-1</xsl:attribute>
            <xsl:attribute name="flag">version-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[author-role-check-1] role with <xsl:text/>
               <xsl:value-of select="string-join(@*[name()=('vocab-term','vocab-term-identifier','vocab-identifier')]/name(),'; ')"/>
               <xsl:text/> attributes must have a vocab="credit" attribute. This one does not.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches(lower-case(.),'^\p{Zs}*(conceptuali[sz]ation|data\p{Zs}+curation|formal\p{Zs}+analysis|funding\p{Zs}+acquisition|investigation|methodology|project\p{Zs}+administration|resources|software|supervision|validation|visualization|writing\p{Zs}+[-–—]\p{Zs}+original\p{Zs}+draft|writing\p{Zs}+[-–—]\p{Zs}+review(ing)?\p{Zs}+(&amp;|and)\p{Zs}+editing)\p{Zs}*$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(lower-case(.),'^\p{Zs}*(conceptuali[sz]ation|data\p{Zs}+curation|formal\p{Zs}+analysis|funding\p{Zs}+acquisition|investigation|methodology|project\p{Zs}+administration|resources|software|supervision|validation|visualization|writing\p{Zs}+[-–—]\p{Zs}+original\p{Zs}+draft|writing\p{Zs}+[-–—]\p{Zs}+review(ing)?\p{Zs}+(&amp;|and)\p{Zs}+editing)\p{Zs}*$')">
            <xsl:attribute name="id">author-role-check-2</xsl:attribute>
            <xsl:attribute name="flag">version-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[author-role-check-2] role with content '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>' exactly matches one of the CRediT taxonomy terms, but it does not have a vocab="credit" attribute.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M96"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M96"/>
   <xsl:template match="@*|node()" priority="-2" mode="M96">
      <xsl:apply-templates select="*" mode="M96"/>
   </xsl:template>

   <!--PATTERN orcid-tests-pattern-->


	  <!--RULE orcid-tests-->
   <xsl:template match="contrib-id[@contrib-id-type='orcid']" priority="1000" mode="M97">
      <xsl:variable name="text" select="."/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@authenticated='true'"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@authenticated='true'">
               <xsl:attribute name="id">orcid-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[orcid-test-1] contrib-id[@contrib-id-type="orcid"] must have an @authenticated="true"</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(.,'^http[s]?://orcid.org/[\d]{4}-[\d]{4}-[\d]{4}-[\d]{3}[0-9X]$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'^http[s]?://orcid.org/[\d]{4}-[\d]{4}-[\d]{4}-[\d]{3}[0-9X]$')">
               <xsl:attribute name="id">orcid-test-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[orcid-test-2] contrib-id[@contrib-id-type="orcid"] must contain a valid ORCID URL in the format 'https://orcid.org/0000-0000-0000-0000'</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="(preceding::contrib-id[@contrib-id-type='orcid']/text() = $text) or (following::contrib-id[@contrib-id-type='orcid']/text() = $text)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(preceding::contrib-id[@contrib-id-type='orcid']/text() = $text) or (following::contrib-id[@contrib-id-type='orcid']/text() = $text)">
            <xsl:attribute name="id">final-orcid-test-3</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[final-orcid-test-3] <xsl:text/>
               <xsl:value-of select="e:get-name(parent::*/name[1])"/>
               <xsl:text/>'s ORCiD is the same as another author's - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>. Duplicated ORCiDs are not allowed. If it is clear who the ORCiD belongs to, remove the duplicate. If it is not clear please raise a query with production so that they can raise it with the authors.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M97"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M97"/>
   <xsl:template match="@*|node()" priority="-2" mode="M97">
      <xsl:apply-templates select="*" mode="M97"/>
   </xsl:template>

   <!--PATTERN email-tests-pattern-->


	  <!--RULE email-tests-->
   <xsl:template match="article-meta//email" priority="1000" mode="M98">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(upper-case(.),'^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]+$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(upper-case(.),'^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]+$')">
               <xsl:attribute name="id">email-test</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[email-test] email element must contain a valid email address. Currently it is <xsl:text/>
                  <xsl:value-of select="self::*"/>
                  <xsl:text/>.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M98"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M98"/>
   <xsl:template match="@*|node()" priority="-2" mode="M98">
      <xsl:apply-templates select="*" mode="M98"/>
   </xsl:template>

   <!--PATTERN history-tests-pattern-->


	  <!--RULE history-tests-->
   <xsl:template match="article-meta/history" priority="1000" mode="M99">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="date[@date-type='received']"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="date[@date-type='received']">
               <xsl:attribute name="id">history-date-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[history-date-test-1] history must contain date[@date-type='received']</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="date[@date-type='accepted']"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="date[@date-type='accepted']">
               <xsl:attribute name="id">history-date-test-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[history-date-test-2] history must contain date[@date-type='accepted']</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M99"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M99"/>
   <xsl:template match="@*|node()" priority="-2" mode="M99">
      <xsl:apply-templates select="*" mode="M99"/>
   </xsl:template>

   <!--PATTERN date-tests-pattern-->


	  <!--RULE date-tests-->
   <xsl:template match="date" priority="1000" mode="M100">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(day[1],'^[0-9]{2}$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(day[1],'^[0-9]{2}$')">
               <xsl:attribute name="id">date-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[date-test-1] date must contain day in the format 00. Currently it is '<xsl:text/>
                  <xsl:value-of select="day"/>
                  <xsl:text/>'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(month[1],'^[0-9]{2}$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(month[1],'^[0-9]{2}$')">
               <xsl:attribute name="id">date-test-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[date-test-2] date must contain month in the format 00. Currently it is '<xsl:text/>
                  <xsl:value-of select="month"/>
                  <xsl:text/>'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(year[1],'^[0-9]{4}$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(year[1],'^[0-9]{4}$')">
               <xsl:attribute name="id">date-test-3</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[date-test-3] date must contain year in the format 0000. Currently it is Currently it is '<xsl:text/>
                  <xsl:value-of select="year"/>
                  <xsl:text/>'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@iso-8601-date = concat(year[1],'-',month[1],'-',day[1])"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@iso-8601-date = concat(year[1],'-',month[1],'-',day[1])">
               <xsl:attribute name="id">date-test-4</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[date-test-4] date must have an @iso-8601-date the value of which must be the values of the year-month-day elements. Currently it is <xsl:text/>
                  <xsl:value-of select="@iso-8601-date"/>
                  <xsl:text/>, when it should be <xsl:text/>
                  <xsl:value-of select="concat(year,'-',month,'-',day)"/>
                  <xsl:text/>.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M100"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M100"/>
   <xsl:template match="@*|node()" priority="-2" mode="M100">
      <xsl:apply-templates select="*" mode="M100"/>
   </xsl:template>

   <!--PATTERN day-tests-pattern-->


	  <!--RULE day-tests-->
   <xsl:template match="day[not(parent::string-date)]" priority="1000" mode="M101">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(.,'^[0][1-9]$|^[1-2][0-9]$|^[3][0-1]$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'^[0][1-9]$|^[1-2][0-9]$|^[3][0-1]$')">
               <xsl:attribute name="id">day-conformity</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[day-conformity] day must contain 2 digits which are between '01' and '31' - '<xsl:text/>
                  <xsl:value-of select="."/>
                  <xsl:text/>' doesn't meet this requirement.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M101"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M101"/>
   <xsl:template match="@*|node()" priority="-2" mode="M101">
      <xsl:apply-templates select="*" mode="M101"/>
   </xsl:template>

   <!--PATTERN month-tests-pattern-->


	  <!--RULE month-tests-->
   <xsl:template match="month[not(parent::string-date)]" priority="1000" mode="M102">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(.,'^[0][1-9]$|^[1][0-2]$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'^[0][1-9]$|^[1][0-2]$')">
               <xsl:attribute name="id">month-conformity</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[month-conformity] month must contain 2 digits which are between '01' and '12' - '<xsl:text/>
                  <xsl:value-of select="."/>
                  <xsl:text/>' doesn't meet this requirement.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M102"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M102"/>
   <xsl:template match="@*|node()" priority="-2" mode="M102">
      <xsl:apply-templates select="*" mode="M102"/>
   </xsl:template>

   <!--PATTERN year-article-meta-tests-pattern-->


	  <!--RULE year-article-meta-tests-->
   <xsl:template match="year[ancestor::article-meta]" priority="1000" mode="M103">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(.,'^[2]0[0-2][0-9]$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'^[2]0[0-2][0-9]$')">
               <xsl:attribute name="id">year-article-meta-conformity</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[year-article-meta-conformity] year in article-meta must contain 4 digits which match the regular expression '^[2]0[0-2][0-9]$' - '<xsl:text/>
                  <xsl:value-of select="."/>
                  <xsl:text/>' doesn't meet this requirement.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M103"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M103"/>
   <xsl:template match="@*|node()" priority="-2" mode="M103">
      <xsl:apply-templates select="*" mode="M103"/>
   </xsl:template>

   <!--PATTERN year-element-citation-tests-pattern-->


	  <!--RULE year-element-citation-tests-->
   <xsl:template match="year[ancestor::element-citation]" priority="1000" mode="M104">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(.,'^[1][6-9][0-9][0-9][a-z]?$|^[2]0[0-2][0-9][a-z]?$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'^[1][6-9][0-9][0-9][a-z]?$|^[2]0[0-2][0-9][a-z]?$')">
               <xsl:attribute name="id">final-year-element-citation-conformity</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#final-year-element-citation-conformity</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[final-year-element-citation-conformity] year in reference must contain content which matches the regular expression '^[1][6-9][0-9][0-9][a-z]?$|^[2]0[0-2][0-9][a-z]?$' - '<xsl:text/>
                  <xsl:value-of select="."/>
                  <xsl:text/>' doesn't meet this requirement. If there is no year, and this cannot be determined yourself, please query this with the authors.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M104"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M104"/>
   <xsl:template match="@*|node()" priority="-2" mode="M104">
      <xsl:apply-templates select="*" mode="M104"/>
   </xsl:template>

   <!--PATTERN pub-date-tests-1-pattern-->


	  <!--RULE pub-date-tests-1-->
   <xsl:template match="pub-date[not(@pub-type='collection')]" priority="1000" mode="M105">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(day[1],'^[0-9]{2}$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(day[1],'^[0-9]{2}$')">
               <xsl:attribute name="id">final-pub-date-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[final-pub-date-test-1] pub-date must contain day in the format 00. Currently it is '<xsl:text/>
                  <xsl:value-of select="day"/>
                  <xsl:text/>'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(month[1],'^[0-9]{2}$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(month[1],'^[0-9]{2}$')">
               <xsl:attribute name="id">final-pub-date-test-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[final-pub-date-test-2] pub-date must contain month in the format 00. Currently it is '<xsl:text/>
                  <xsl:value-of select="month"/>
                  <xsl:text/>'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(year[1],'^[0-9]{4}$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(year[1],'^[0-9]{4}$')">
               <xsl:attribute name="id">pub-date-test-3</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[pub-date-test-3] pub-date must contain year in the format 0000. Currently it is '<xsl:text/>
                  <xsl:value-of select="year"/>
                  <xsl:text/>'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M105"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M105"/>
   <xsl:template match="@*|node()" priority="-2" mode="M105">
      <xsl:apply-templates select="*" mode="M105"/>
   </xsl:template>

   <!--PATTERN press-pub-date-pattern-->


	  <!--RULE press-pub-date-->
   <xsl:template match="pub-date[not(@pub-type='collection') and day and month and year][concat(year[1],'-',month[1],'-',day[1]) gt format-date(current-date(), '[Y0001]-[M01]-[D01]')]" priority="1000" mode="M106">
      <xsl:variable name="date" select="concat(year[1],'-',month[1],'-',day[1])"/>

		    <!--REPORT warning-->
      <xsl:if test="e:get-weekday($date) != 2">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="e:get-weekday($date) != 2">
            <xsl:attribute name="id">press-pub-date-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[press-pub-date-check] The publication date for this article is in the future (<xsl:text/>
               <xsl:value-of select="$date"/>
               <xsl:text/>), but the day of publication is not a Tuesday (for Press). Is that correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M106"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M106"/>
   <xsl:template match="@*|node()" priority="-2" mode="M106">
      <xsl:apply-templates select="*" mode="M106"/>
   </xsl:template>

   <!--PATTERN pub-date-tests-2-pattern-->


	  <!--RULE pub-date-tests-2-->
   <xsl:template match="pub-date[@pub-type='collection']" priority="1000" mode="M107">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(year[1],'^[0-9]{4}$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(year[1],'^[0-9]{4}$')">
               <xsl:attribute name="id">pub-date-test-4</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[pub-date-test-4] date must contain year in the format 0000. Currently it is '<xsl:text/>
                  <xsl:value-of select="year"/>
                  <xsl:text/>'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="*/local-name() != 'year'">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="*/local-name() != 'year'">
            <xsl:attribute name="id">pub-date-test-5</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[pub-date-test-5] pub-date[@pub-type='collection'] can only contain a year element.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="year[1] = parent::*/pub-date[@publication-format='electronic'][@date-type='publication']/year[1]"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="year[1] = parent::*/pub-date[@publication-format='electronic'][@date-type='publication']/year[1]">
               <xsl:attribute name="id">pub-date-test-6</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[pub-date-test-6] pub-date[@pub-type='collection'] year must be the same as pub-date[@publication-format='electronic'][@date-type='publication'] year.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M107"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M107"/>
   <xsl:template match="@*|node()" priority="-2" mode="M107">
      <xsl:apply-templates select="*" mode="M107"/>
   </xsl:template>

   <!--PATTERN pub-history-tests-pattern-->


	  <!--RULE pub-history-tests-->
   <xsl:template match="pub-history" priority="1000" mode="M108">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="parent::article-meta"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="parent::article-meta">
               <xsl:attribute name="id">pub-history-parent</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[pub-history-parent] <xsl:text/>
                  <xsl:value-of select="name(.)"/>
                  <xsl:text/> is only allowed to be captured as a child of article-meta. This one is a child of <xsl:text/>
                  <xsl:value-of select="parent::*/name()"/>
                  <xsl:text/>.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(event) = 1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(event) = 1">
               <xsl:attribute name="id">pub-history-child</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[pub-history-child] <xsl:text/>
                  <xsl:value-of select="name(.)"/>
                  <xsl:text/> must have one, and only one, event element. This one has <xsl:text/>
                  <xsl:value-of select="count(event)"/>
                  <xsl:text/>.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M108"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M108"/>
   <xsl:template match="@*|node()" priority="-2" mode="M108">
      <xsl:apply-templates select="*" mode="M108"/>
   </xsl:template>

   <!--PATTERN event-tests-pattern-->


	  <!--RULE event-tests-->
   <xsl:template match="event" priority="1000" mode="M109">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="event-desc"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="event-desc">
               <xsl:attribute name="id">event-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[event-test-1] <xsl:text/>
                  <xsl:value-of select="name(.)"/>
                  <xsl:text/> must contain an event-desc element. This one does not.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="date[@date-type='preprint']"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="date[@date-type='preprint']">
               <xsl:attribute name="id">event-test-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[event-test-2] <xsl:text/>
                  <xsl:value-of select="name(.)"/>
                  <xsl:text/> must contain a date element with the attribute date-type="preprint". This one does not.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="self-uri"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="self-uri">
               <xsl:attribute name="id">event-test-3</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[event-test-3] <xsl:text/>
                  <xsl:value-of select="name(.)"/>
                  <xsl:text/> must contain a self-uri element. This one does not.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M109"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M109"/>
   <xsl:template match="@*|node()" priority="-2" mode="M109">
      <xsl:apply-templates select="*" mode="M109"/>
   </xsl:template>

   <!--PATTERN event-child-tests-pattern-->


	  <!--RULE event-child-tests-->
   <xsl:template match="event/*" priority="1000" mode="M110">
      <xsl:variable name="allowed-elems" select="('event-desc','date','self-uri')"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="name()=$allowed-elems"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="name()=$allowed-elems">
               <xsl:attribute name="id">event-child</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[event-child] <xsl:text/>
                  <xsl:value-of select="name(.)"/>
                  <xsl:text/> is not allowed in an event element. The only permitted children of event are <xsl:text/>
                  <xsl:value-of select="string-join($allowed-elems,', ')"/>
                  <xsl:text/>.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M110"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M110"/>
   <xsl:template match="@*|node()" priority="-2" mode="M110">
      <xsl:apply-templates select="*" mode="M110"/>
   </xsl:template>

   <!--PATTERN event-desc-tests-pattern-->


	  <!--RULE event-desc-tests-->
   <xsl:template match="event-desc" priority="1000" mode="M111">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="starts-with(.,'This manuscript was published as a preprint at ')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="starts-with(.,'This manuscript was published as a preprint at ')">
               <xsl:attribute name="id">event-desc-content</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[event-desc-content] <xsl:text/>
                  <xsl:value-of select="name(.)"/>
                  <xsl:text/> must contain the text 'This manuscript was published as a preprint at ' followed by the preprint server name. This one does not.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="*">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="*">
            <xsl:attribute name="id">event-desc-elems</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[event-desc-elems] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> cannot contain elements. This one has the following: <xsl:text/>
               <xsl:value-of select="string-join(distinct-values(*/name()),', ')"/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M111"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M111"/>
   <xsl:template match="@*|node()" priority="-2" mode="M111">
      <xsl:apply-templates select="*" mode="M111"/>
   </xsl:template>

   <!--PATTERN event-date-tests-pattern-->


	  <!--RULE event-date-tests-->
   <xsl:template match="event/date[@date-type='preprint']" priority="1000" mode="M112">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="day and month and year"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="day and month and year">
               <xsl:attribute name="id">event-date-child</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[event-date-child] <xsl:text/>
                  <xsl:value-of select="name(.)"/>
                  <xsl:text/> in event must have a day, month and year element. This one does not.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M112"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M112"/>
   <xsl:template match="@*|node()" priority="-2" mode="M112">
      <xsl:apply-templates select="*" mode="M112"/>
   </xsl:template>

   <!--PATTERN event-self-uri-tests-pattern-->


	  <!--RULE event-self-uri-tests-->
   <xsl:template match="event/self-uri" priority="1000" mode="M113">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@content-type='preprint'"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@content-type='preprint'">
               <xsl:attribute name="id">event-self-uri-content-type</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[event-self-uri-content-type] <xsl:text/>
                  <xsl:value-of select="name(.)"/>
                  <xsl:text/> in event must have the attribute content-type="preprint". This one does not.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="not(*) and normalize-space(.)=''"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="not(*) and normalize-space(.)=''">
               <xsl:attribute name="id">event-self-uri-content</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[event-self-uri-content] <xsl:text/>
                  <xsl:value-of select="name(.)"/>
                  <xsl:text/> in event must be empty. This one contains elements and/or text.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(@xlink:href,'^https?:..(www\.)?[-a-zA-Z0-9@:%.,_\+~#=!]{2,256}\.[a-z]{2,6}([-a-zA-Z0-9@:;%,_\\(\)+.~#?!&amp;&lt;&gt;//=]*)$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(@xlink:href,'^https?:..(www\.)?[-a-zA-Z0-9@:%.,_\+~#=!]{2,256}\.[a-z]{2,6}([-a-zA-Z0-9@:;%,_\\(\)+.~#?!&amp;&lt;&gt;//=]*)$')">
               <xsl:attribute name="id">event-self-uri-href-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[event-self-uri-href-1] <xsl:text/>
                  <xsl:value-of select="name(.)"/>
                  <xsl:text/> in event must have an xlink:href attribute containing a link to the preprint. This one does not have a valid URI - <xsl:text/>
                  <xsl:value-of select="@xlink:href"/>
                  <xsl:text/>.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="matches(lower-case(@xlink:href),'(bio|med)rxiv')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(lower-case(@xlink:href),'(bio|med)rxiv')">
            <xsl:attribute name="id">event-self-uri-href-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[event-self-uri-href-2] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> in event must have an xlink:href attribute containing a link to the preprint. Where possible this should be a doi. bioRxiv and medRxiv preprint have dois, and this one points to one of those, but it is not a doi - <xsl:text/>
               <xsl:value-of select="@xlink:href"/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--ASSERT warning-->
      <xsl:choose>
         <xsl:when test="matches(@xlink:href,'https?://(dx.doi.org|doi.org)/')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(@xlink:href,'https?://(dx.doi.org|doi.org)/')">
               <xsl:attribute name="id">event-self-uri-href-3</xsl:attribute>
               <xsl:attribute name="role">warning</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[event-self-uri-href-3] <xsl:text/>
                  <xsl:value-of select="name(.)"/>
                  <xsl:text/> in event must have an xlink:href attribute containing a link to the preprint. Where possible this should be a doi. This one is not a doi - <xsl:text/>
                  <xsl:value-of select="@xlink:href"/>
                  <xsl:text/>. Please check whether there is a doi that can be used instead.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M113"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M113"/>
   <xsl:template match="@*|node()" priority="-2" mode="M113">
      <xsl:apply-templates select="*" mode="M113"/>
   </xsl:template>

   <!--PATTERN front-permissions-tests-pattern-->


	  <!--RULE front-permissions-tests-->
   <xsl:template match="front//permissions" priority="1000" mode="M114">
      <xsl:variable name="author-contrib-group" select="ancestor::article-meta/contrib-group[1]"/>
      <xsl:variable name="copyright-holder" select="e:get-copyright-holder($author-contrib-group)"/>
      <xsl:variable name="license-type" select="license/@xlink:href"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="ali:free_to_read"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="ali:free_to_read">
               <xsl:attribute name="id">permissions-test-4</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/licensing-and-copyright#permissions-test-4</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[permissions-test-4] permissions must contain an ali:free_to_read element.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="license"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="license">
               <xsl:attribute name="id">permissions-test-5</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[permissions-test-5] permissions must contain license.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="($license-type = 'http://creativecommons.org/publicdomain/zero/1.0/') or ($license-type = 'http://creativecommons.org/licenses/by/4.0/')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="($license-type = 'http://creativecommons.org/publicdomain/zero/1.0/') or ($license-type = 'http://creativecommons.org/licenses/by/4.0/')">
               <xsl:attribute name="id">permissions-test-9</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/licensing-and-copyright#permissions-test-9</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[permissions-test-9] license does not have an @xlink:href which is equal to 'http://creativecommons.org/publicdomain/zero/1.0/' or 'http://creativecommons.org/licenses/by/4.0/'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT info-->
      <xsl:if test="license">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="license">
            <xsl:attribute name="id">permissions-info</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/licensing-and-copyright#permissions-info</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[permissions-info] This article is licensed under a<xsl:text/>
               <xsl:value-of select="      if (contains($license-type,'publicdomain/zero')) then ' CC0 1.0'      else if (contains($license-type,'by/4.0')) then ' CC BY 4.0'      else if (contains($license-type,'by/3.0')) then ' CC BY 3.0'      else 'n unknown'"/>
               <xsl:text/> license. <xsl:text/>
               <xsl:value-of select="$license-type"/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M114"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M114"/>
   <xsl:template match="@*|node()" priority="-2" mode="M114">
      <xsl:apply-templates select="*" mode="M114"/>
   </xsl:template>

   <!--PATTERN cc-by-permissions-tests-pattern-->


	  <!--RULE cc-by-permissions-tests-->
   <xsl:template match="front//permissions[contains(license[1]/@xlink:href,'creativecommons.org/licenses/by/')]" priority="1000" mode="M115">
      <xsl:variable name="author-contrib-group" select="ancestor::article-meta/contrib-group[1]"/>
      <xsl:variable name="copyright-holder" select="e:get-copyright-holder($author-contrib-group)"/>
      <xsl:variable name="license-type" select="license/@xlink:href"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="copyright-statement"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="copyright-statement">
               <xsl:attribute name="id">permissions-test-1</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/licensing-and-copyright#permissions-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[permissions-test-1] permissions must contain copyright-statement in CC BY licensed articles.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(copyright-year[1],'^[0-9]{4}$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(copyright-year[1],'^[0-9]{4}$')">
               <xsl:attribute name="id">permissions-test-2</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/licensing-and-copyright#permissions-test-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[permissions-test-2] permissions must contain copyright-year in the format 0000 in CC BY licensed articles. Currently it is <xsl:text/>
                  <xsl:value-of select="copyright-year"/>
                  <xsl:text/>.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="copyright-holder"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="copyright-holder">
               <xsl:attribute name="id">permissions-test-3</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/licensing-and-copyright#permissions-test-3</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[permissions-test-3] permissions must contain copyright-holder in CC BY licensed articles.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="copyright-year = ancestor::article-meta/pub-date[@publication-format='electronic'][@date-type=('publication','pub')]/year"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="copyright-year = ancestor::article-meta/pub-date[@publication-format='electronic'][@date-type=('publication','pub')]/year">
               <xsl:attribute name="id">permissions-test-6</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/licensing-and-copyright#permissions-test-6</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[permissions-test-6] copyright-year must match the contents of the year in the pub-date[@publication-format='electronic'][@date-type='publication']. Currently, copyright-year=<xsl:text/>
                  <xsl:value-of select="copyright-year"/>
                  <xsl:text/> and pub-date=<xsl:text/>
                  <xsl:value-of select="ancestor::article-meta/pub-date[@publication-format='electronic'][@date-type=('publication','pub')]/year"/>
                  <xsl:text/>.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="copyright-holder = $copyright-holder"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="copyright-holder = $copyright-holder">
               <xsl:attribute name="id">permissions-test-7</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/licensing-and-copyright#permissions-test-7</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[permissions-test-7] copyright-holder is incorrect. If the article has one author then it should be their surname (or collab name). If it has two authors it should be the surname (or collab name) of the first, then ' and ' and then the surname (or collab name) of the second. If three or more, it should be the surname (or collab name) of the first, and then ' et al'. Currently it's '<xsl:text/>
                  <xsl:value-of select="copyright-holder"/>
                  <xsl:text/>' when based on the author list it should be '<xsl:text/>
                  <xsl:value-of select="$copyright-holder"/>
                  <xsl:text/>'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="copyright-statement = concat('© ',copyright-year,', ',copyright-holder)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="copyright-statement = concat('© ',copyright-year,', ',copyright-holder)">
               <xsl:attribute name="id">permissions-test-8</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/licensing-and-copyright#permissions-test-8</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[permissions-test-8] copyright-statement must contain a concatenation of '© ', copyright-year, and copyright-holder. Currently it is <xsl:text/>
                  <xsl:value-of select="copyright-statement"/>
                  <xsl:text/> when according to the other values it should be <xsl:text/>
                  <xsl:value-of select="concat('© ',copyright-year,', ',copyright-holder)"/>
                  <xsl:text/>
               </svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT warning-->
      <xsl:if test="ancestor::article-meta/contrib-group[1]/aff[country='United States']//institution[matches(lower-case(.),'national institutes of health|office of the director|national cancer institute|^nci$|national eye institute|^nei$|national heart,? lung,? and blood institute|^nhlbi$|national human genome research institute|^nhgri$|national institute on aging|^nia$|national institute on alcohol abuse and alcoholism|^niaaa$|national institute of allergy and infectious diseases|^niaid$|national institute of arthritis and musculoskeletal and skin diseases|^niams$|national institute of biomedical imaging and bioengineering|^nibib$|national institute of child health and human development|^nichd$|national institute on deafness and other communication disorders|^nidcd$|national institute of dental and craniofacial research|^nidcr$|national institute of diabetes and digestive and kidney diseases|^niddk$|national institute on drug abuse|^nida$|national institute of environmental health sciences|^niehs$|national institute of general medical sciences|^nigms$|national institute of mental health|^nimh$|national institute on minority health and health disparities|^nimhd$|national institute of neurological disorders and stroke|^ninds$|national institute of nursing research|^ninr$|national library of medicine|^nlm$|center for information technology|^cit$|center for scientific review|^csr$|fogarty international center|^fic$|national center for advancing translational sciences|^ncats$|national center for complementary and integrative health|^nccih$|nih clinical center|^nih cc$')]">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="ancestor::article-meta/contrib-group[1]/aff[country='United States']//institution[matches(lower-case(.),'national institutes of health|office of the director|national cancer institute|^nci$|national eye institute|^nei$|national heart,? lung,? and blood institute|^nhlbi$|national human genome research institute|^nhgri$|national institute on aging|^nia$|national institute on alcohol abuse and alcoholism|^niaaa$|national institute of allergy and infectious diseases|^niaid$|national institute of arthritis and musculoskeletal and skin diseases|^niams$|national institute of biomedical imaging and bioengineering|^nibib$|national institute of child health and human development|^nichd$|national institute on deafness and other communication disorders|^nidcd$|national institute of dental and craniofacial research|^nidcr$|national institute of diabetes and digestive and kidney diseases|^niddk$|national institute on drug abuse|^nida$|national institute of environmental health sciences|^niehs$|national institute of general medical sciences|^nigms$|national institute of mental health|^nimh$|national institute on minority health and health disparities|^nimhd$|national institute of neurological disorders and stroke|^ninds$|national institute of nursing research|^ninr$|national library of medicine|^nlm$|center for information technology|^cit$|center for scientific review|^csr$|fogarty international center|^fic$|national center for advancing translational sciences|^ncats$|national center for complementary and integrative health|^nccih$|nih clinical center|^nih cc$')]">
            <xsl:attribute name="id">permissions-test-16</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[permissions-test-16] This article is CC-BY, but one or more of the authors is affiliation with the NIH (<xsl:text/>
               <xsl:value-of select="string-join(for $x in ancestor::article-meta/contrib-group[1]/aff[country='United States']//institution[matches(lower-case(.),'national institutes of health|office of the director|national cancer institute|^nci$|national eye institute|^nei$|national heart,? lung,? and blood institute|^nhlbi$|national human genome research institute|^nhgri$|national institute on aging|^nia$|national institute on alcohol abuse and alcoholism|^niaaa$|national institute of allergy and infectious diseases|^niaid$|national institute of arthritis and musculoskeletal and skin diseases|^niams$|national institute of biomedical imaging and bioengineering|^nibib$|national institute of child health and human development|^nichd$|national institute on deafness and other communication disorders|^nidcd$|national institute of dental and craniofacial research|^nidcr$|national institute of diabetes and digestive and kidney diseases|^niddk$|national institute on drug abuse|^nida$|national institute of environmental health sciences|^niehs$|national institute of general medical sciences|^nigms$|national institute of mental health|^nimh$|national institute on minority health and health disparities|^nimhd$|national institute of neurological disorders and stroke|^ninds$|national institute of nursing research|^ninr$|national library of medicine|^nlm$|center for information technology|^cit$|center for scientific review|^csr$|fogarty international center|^fic$|national center for advancing translational sciences|^ncats$|national center for complementary and integrative health|^nccih$|nih clinical center|^nih cc$')] return $x,'; ')"/>
               <xsl:text/>). Should it be CC0 instead?</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M115"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M115"/>
   <xsl:template match="@*|node()" priority="-2" mode="M115">
      <xsl:apply-templates select="*" mode="M115"/>
   </xsl:template>

   <!--PATTERN cc-0-permissions-tests-pattern-->


	  <!--RULE cc-0-permissions-tests-->
   <xsl:template match="front//permissions[contains(license[1]/@xlink:href,'creativecommons.org/publicdomain/zero')]" priority="1000" mode="M116">
      <xsl:variable name="license-type" select="license/@xlink:href"/>

		    <!--REPORT error-->
      <xsl:if test="copyright-statement">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="copyright-statement">
            <xsl:attribute name="id">cc-0-test-1</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/licensing-and-copyright#cc-0-test-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[cc-0-test-1] This is a CC0 licensed article (<xsl:text/>
               <xsl:value-of select="$license-type"/>
               <xsl:text/>), but there is a copyright-statement (<xsl:text/>
               <xsl:value-of select="copyright-statement"/>
               <xsl:text/>) which is not correct.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="copyright-year">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="copyright-year">
            <xsl:attribute name="id">cc-0-test-2</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/licensing-and-copyright#cc-0-test-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[cc-0-test-2] This is a CC0 licensed article (<xsl:text/>
               <xsl:value-of select="$license-type"/>
               <xsl:text/>), but there is a copyright-year (<xsl:text/>
               <xsl:value-of select="copyright-year"/>
               <xsl:text/>) which is not correct.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="copyright-holder">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="copyright-holder">
            <xsl:attribute name="id">cc-0-test-3</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/licensing-and-copyright#cc-0-test-3</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[cc-0-test-3] This is a CC0 licensed article (<xsl:text/>
               <xsl:value-of select="$license-type"/>
               <xsl:text/>), but there is a copyright-holder (<xsl:text/>
               <xsl:value-of select="copyright-holder"/>
               <xsl:text/>) which is not correct.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M116"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M116"/>
   <xsl:template match="@*|node()" priority="-2" mode="M116">
      <xsl:apply-templates select="*" mode="M116"/>
   </xsl:template>

   <!--PATTERN license-tests-pattern-->


	  <!--RULE license-tests-->
   <xsl:template match="front//permissions/license" priority="1000" mode="M117">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="ali:license_ref"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="ali:license_ref">
               <xsl:attribute name="id">license-test-1</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/licensing-and-copyright#license-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[license-test-1] license must contain ali:license_ref.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(license-p) = 1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(license-p) = 1">
               <xsl:attribute name="id">license-test-2</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/licensing-and-copyright#license-test-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[license-test-2] license must contain one and only one license-p.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M117"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M117"/>
   <xsl:template match="@*|node()" priority="-2" mode="M117">
      <xsl:apply-templates select="*" mode="M117"/>
   </xsl:template>

   <!--PATTERN license-p-tests-pattern-->


	  <!--RULE license-p-tests-->
   <xsl:template match="front//permissions/license/license-p" priority="1000" mode="M118">
      <xsl:variable name="license-link" select="parent::license/@xlink:href"/>
      <xsl:variable name="license-type" select="if (contains($license-link,'//creativecommons.org/publicdomain/zero/1.0/')) then 'cc0' else if (contains($license-link,'//creativecommons.org/licenses/by/4.0/')) then 'ccby' else ('unknown')"/>
      <xsl:variable name="cc0-text" select="'This is an open-access article, free of all copyright, and may be freely reproduced, distributed, transmitted, modified, built upon, or otherwise used by anyone for any lawful purpose. The work is made available under the Creative Commons CC0 public domain dedication.'"/>
      <xsl:variable name="ccby-text" select="'This article is distributed under the terms of the Creative Commons Attribution License, which permits unrestricted use and redistribution provided that the original author and source are credited.'"/>

		    <!--REPORT error-->
      <xsl:if test="($license-type='ccby') and .!=$ccby-text">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="($license-type='ccby') and .!=$ccby-text">
            <xsl:attribute name="id">license-p-test-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[license-p-test-1] The text in license-p is incorrect (<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>). Since this article is CCBY licensed, the text should be <xsl:text/>
               <xsl:value-of select="$ccby-text"/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="($license-type='cc0') and .!=$cc0-text">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="($license-type='cc0') and .!=$cc0-text">
            <xsl:attribute name="id">license-p-test-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[license-p-test-2] The text in license-p is incorrect (<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>). Since this article is CC0 licensed, the text should be <xsl:text/>
               <xsl:value-of select="$cc0-text"/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M118"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M118"/>
   <xsl:template match="@*|node()" priority="-2" mode="M118">
      <xsl:apply-templates select="*" mode="M118"/>
   </xsl:template>

   <!--PATTERN license-link-tests-pattern-->


	  <!--RULE license-link-tests-->
   <xsl:template match="permissions/license[@xlink:href]/license-p" priority="1000" mode="M119">
      <xsl:variable name="license-link" select="parent::license/@xlink:href"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="some $x in ext-link satisfies $x/@xlink:href = $license-link"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="some $x in ext-link satisfies $x/@xlink:href = $license-link">
               <xsl:attribute name="id">license-p-test-3</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[license-p-test-3] If a license element has an xlink:href attribute, there must be a link in license-p that matches the link in the license/@xlink:href attribute. License link: <xsl:text/>
                  <xsl:value-of select="$license-link"/>
                  <xsl:text/>. Links in the license-p: <xsl:text/>
                  <xsl:value-of select="string-join(ext-link/@xlink:href,'; ')"/>
                  <xsl:text/>.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M119"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M119"/>
   <xsl:template match="@*|node()" priority="-2" mode="M119">
      <xsl:apply-templates select="*" mode="M119"/>
   </xsl:template>

   <!--PATTERN license-ali-ref-link-tests-pattern-->


	  <!--RULE license-ali-ref-link-tests-->
   <xsl:template match="permissions/license[ali:license_ref]/license-p" priority="1000" mode="M120">
      <xsl:variable name="ali-ref" select="parent::license/ali:license_ref"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="some $x in ext-link satisfies $x/@xlink:href = $ali-ref"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="some $x in ext-link satisfies $x/@xlink:href = $ali-ref">
               <xsl:attribute name="id">license-p-test-4</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[license-p-test-4] If a license contains an ali:license_ref element, there must be a link in license-p that matches the link in the ali:license_ref element. ali:license_ref link: <xsl:text/>
                  <xsl:value-of select="$ali-ref"/>
                  <xsl:text/>. Links in the license-p: <xsl:text/>
                  <xsl:value-of select="string-join(ext-link/@xlink:href,'; ')"/>
                  <xsl:text/>.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M120"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M120"/>
   <xsl:template match="@*|node()" priority="-2" mode="M120">
      <xsl:apply-templates select="*" mode="M120"/>
   </xsl:template>

   <!--PATTERN abstract-tests-pattern-->


	  <!--RULE abstract-tests-->
   <xsl:template match="front//abstract" priority="1000" mode="M121">
      <xsl:variable name="article-type" select="ancestor::article/@article-type"/>

		    <!--REPORT error-->
      <xsl:if test="(count(p) + count(sec[descendant::p])) lt 1">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(count(p) + count(sec[descendant::p])) lt 1">
            <xsl:attribute name="id">abstract-test-2</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/article-structure/abstract-digest-impact-statement#abstract-test-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[abstract-test-2] At least 1 p element or sec element (with descendant p) must be present in abstract.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="descendant::disp-formula">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="descendant::disp-formula">
            <xsl:attribute name="id">abstract-test-4</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/article-structure/abstract-digest-impact-statement#abstract-test-4</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[abstract-test-4] abstracts cannot contain display formulas.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="child::sec and not(count(sec) = (5,6))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="child::sec and not(count(sec) = (5,6))">
            <xsl:attribute name="id">final-abstract-test-5</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/article-structure/abstract-digest-impact-statement#final-abstract-test-5</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[final-abstract-test-5] If an abstract is structured, then it must have 5 or 6 sections depending on whether it is a clinical trial. An article without a clinical trial should have 5 sections, whereas one with a clinical trial should have 6.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(lower-case(.),'^\p{Zs}*abstract')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(lower-case(.),'^\p{Zs}*abstract')">
            <xsl:attribute name="id">abstract-test-6</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/article-structure/abstract-digest-impact-statement#abstract-test-6</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[abstract-test-6] Abstract starts with the word 'Abstract', which is almost certainly incorrect - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="some $x in child::p satisfies (starts-with($x,'Background:') or starts-with($x,'Methods:') or starts-with($x,'Results:') or starts-with($x,'Conclusion:') or starts-with($x,'Trial registration:') or starts-with($x,'Clinical trial number:'))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="some $x in child::p satisfies (starts-with($x,'Background:') or starts-with($x,'Methods:') or starts-with($x,'Results:') or starts-with($x,'Conclusion:') or starts-with($x,'Trial registration:') or starts-with($x,'Clinical trial number:'))">
            <xsl:attribute name="id">abstract-test-7</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/article-structure/abstract-digest-impact-statement#abstract-test-7</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[abstract-test-7] Abstract looks like it should instead be captured as a structured abstract (using sections) - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M121"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M121"/>
   <xsl:template match="@*|node()" priority="-2" mode="M121">
      <xsl:apply-templates select="*" mode="M121"/>
   </xsl:template>

   <!--PATTERN medicine-abstract-tests-pattern-->


	  <!--RULE medicine-abstract-tests-->
   <xsl:template match="article[@article-type='research-article']//article-meta[article-categories/subj-group[@subj-group-type='heading']/subject[. = ('Medicine','Epidemiology and Global Health')] and contains(title-group[1]/article-title[1],': ')]/abstract[not(@abstract-type)]" priority="1000" mode="M122">

		<!--ASSERT warning-->
      <xsl:choose>
         <xsl:when test="sec"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="sec">
               <xsl:attribute name="id">medicine-abstract-conformance</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/article-structure/abstract-digest-impact-statement#medicine-abstract-conformance</xsl:attribute>
               <xsl:attribute name="role">warning</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[medicine-abstract-conformance] Medicine articles with a colon in their title should likely have a structured abstract. If there is no note in eJP about this, either the colon in the title is incorrect, or the abstract should be changed to a structured format.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M122"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M122"/>
   <xsl:template match="@*|node()" priority="-2" mode="M122">
      <xsl:apply-templates select="*" mode="M122"/>
   </xsl:template>

   <!--PATTERN medicine-abstract-tests-2-pattern-->


	  <!--RULE medicine-abstract-tests-2-->
   <xsl:template match="article[@article-type='research-article']//article-meta[article-categories[not(subj-group[@subj-group-type='display-channel']/subject[lower-case(.)='feature article'])]/subj-group[@subj-group-type='heading']/subject[. = ('Medicine','Epidemiology and Global Health')] and history/date[@date-type='received' and @iso-8601-date]]/abstract[not(@abstract-type) and not(sec)]" priority="1000" mode="M123">

		<!--ASSERT warning-->
      <xsl:choose>
         <xsl:when test="parent::article-meta/history/date[@date-type='received']/@iso-8601-date lt '2021-04-05'"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="parent::article-meta/history/date[@date-type='received']/@iso-8601-date lt '2021-04-05'">
               <xsl:attribute name="id">medicine-abstract-conformance-2</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/article-structure/abstract-digest-impact-statement#medicine-abstract-conformance-2</xsl:attribute>
               <xsl:attribute name="role">warning</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[medicine-abstract-conformance-2] <xsl:text/>
                  <xsl:value-of select="parent::article-meta/article-categories/subj-group[@subj-group-type='heading']/subject[. = ('Medicine','Epidemiology and Global Health')]"/>
                  <xsl:text/> articles submitted after 4th April 2021 should have a structured abstract, but this one does not. eLife: please check this with Editorial if there are no related notes from eJP. Exeter: Please flag this to the eLife Production team.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M123"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M123"/>
   <xsl:template match="@*|node()" priority="-2" mode="M123">
      <xsl:apply-templates select="*" mode="M123"/>
   </xsl:template>

   <!--PATTERN abstract-children-tests-pattern-->


	  <!--RULE abstract-children-tests-->
   <xsl:template match="front//abstract/*" priority="1000" mode="M124">
      <xsl:variable name="allowed-elems" select="('p','sec','title')"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="local-name() = $allowed-elems"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="local-name() = $allowed-elems">
               <xsl:attribute name="id">abstract-child-test-1</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/article-structure/abstract-digest-impact-statement#abstract-child-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[abstract-child-test-1] <xsl:text/>
                  <xsl:value-of select="name(.)"/>
                  <xsl:text/> is not allowed as a child of abstract.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M124"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M124"/>
   <xsl:template match="@*|node()" priority="-2" mode="M124">
      <xsl:apply-templates select="*" mode="M124"/>
   </xsl:template>

   <!--PATTERN abstract-sec-titles-pattern-->


	  <!--RULE abstract-sec-titles-->
   <xsl:template match="abstract[not(@abstract-type)]/sec" priority="1000" mode="M125">
      <xsl:variable name="pos" select="count(ancestor::abstract/sec) - count(following-sibling::sec)"/>

		    <!--REPORT error-->
      <xsl:if test="($pos = 1) and (title != 'Background:')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="($pos = 1) and (title != 'Background:')">
            <xsl:attribute name="id">clintrial-conformance-1</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/article-structure/abstract-digest-impact-statement#clintrial-conformance-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[clintrial-conformance-1] First section title is '<xsl:text/>
               <xsl:value-of select="title"/>
               <xsl:text/>' - but the only allowed value is 'Background:'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="($pos = 2) and (title != 'Methods:')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="($pos = 2) and (title != 'Methods:')">
            <xsl:attribute name="id">clintrial-conformance-2</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/article-structure/abstract-digest-impact-statement#clintrial-conformance-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[clintrial-conformance-2] Second section title is '<xsl:text/>
               <xsl:value-of select="title"/>
               <xsl:text/>' - but the only allowed value is 'Methods:'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="($pos = 3) and (title != 'Results:')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="($pos = 3) and (title != 'Results:')">
            <xsl:attribute name="id">clintrial-conformance-3</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/article-structure/abstract-digest-impact-statement#clintrial-conformance-3</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[clintrial-conformance-3] Third section title is '<xsl:text/>
               <xsl:value-of select="title"/>
               <xsl:text/>' - but the only allowed value is 'Results:'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="($pos = 4) and (title != 'Conclusions:')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="($pos = 4) and (title != 'Conclusions:')">
            <xsl:attribute name="id">clintrial-conformance-4</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/article-structure/abstract-digest-impact-statement#clintrial-conformance-4</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[clintrial-conformance-4] Fourth section title is '<xsl:text/>
               <xsl:value-of select="title"/>
               <xsl:text/>' - but the only allowed value is 'Conclusions:'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="($pos = 6) and (title != 'Clinical trial number:')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="($pos = 6) and (title != 'Clinical trial number:')">
            <xsl:attribute name="id">clintrial-conformance-5</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/article-structure/abstract-digest-impact-statement#clintrial-conformance-5</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[clintrial-conformance-5] Sixth section title is '<xsl:text/>
               <xsl:value-of select="title"/>
               <xsl:text/>' - but the only allowed value is 'Clinical trial number:'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="($pos = 5) and (title != 'Funding:')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="($pos = 5) and (title != 'Funding:')">
            <xsl:attribute name="id">clintrial-conformance-6</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/article-structure/abstract-digest-impact-statement#clintrial-conformance-6</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[clintrial-conformance-6] Fifth section title is '<xsl:text/>
               <xsl:value-of select="title"/>
               <xsl:text/>' - but the only allowed value is 'Funding:'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="child::sec">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="child::sec">
            <xsl:attribute name="id">clintrial-conformance-7</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/article-structure/abstract-digest-impact-statement#clintrial-conformance-7</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[clintrial-conformance-7] Nested secs are not allowed in abstracts. Sec with the id <xsl:text/>
               <xsl:value-of select="@id"/>
               <xsl:text/> and title '<xsl:text/>
               <xsl:value-of select="title"/>
               <xsl:text/>' has child sections.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(@id,'^abs[1-9]$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(@id,'^abs[1-9]$')">
               <xsl:attribute name="id">clintrial-conformance-8</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/article-structure/abstract-digest-impact-statement#clintrial-conformance-8</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[clintrial-conformance-8] <xsl:text/>
                  <xsl:value-of select="name(.)"/>
                  <xsl:text/> must have an @id in the format 'abs1'. <xsl:text/>
                  <xsl:value-of select="@id"/>
                  <xsl:text/> does not conform to this convention.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M125"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M125"/>
   <xsl:template match="@*|node()" priority="-2" mode="M125">
      <xsl:apply-templates select="*" mode="M125"/>
   </xsl:template>

   <!--PATTERN clintrial-related-object-pattern-->


	  <!--RULE clintrial-related-object-->
   <xsl:template match="abstract[not(@abstract-type) and sec]//related-object" priority="1000" mode="M126">
      <xsl:variable name="registries" select="'clinical-trial-registries.xml'"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="ancestor::sec[title = 'Clinical trial number:']"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="ancestor::sec[title = 'Clinical trial number:']">
               <xsl:attribute name="id">clintrial-related-object-1</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/article-structure/abstract-digest-impact-statement#clintrial-related-object-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[clintrial-related-object-1] <xsl:text/>
                  <xsl:value-of select="name(.)"/>
                  <xsl:text/> in abstract must be placed in a section whose title is 'Clinical trial number:'</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@source-type='clinical-trials-registry'"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@source-type='clinical-trials-registry'">
               <xsl:attribute name="id">clintrial-related-object-2</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/article-structure/abstract-digest-impact-statement#clintrial-related-object-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[clintrial-related-object-2] <xsl:text/>
                  <xsl:value-of select="name(.)"/>
                  <xsl:text/> must have an @source-type='clinical-trials-registry'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@source-id"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@source-id">
               <xsl:attribute name="id">clintrial-related-object-3</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/article-structure/abstract-digest-impact-statement#clintrial-related-object-3</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[clintrial-related-object-3] <xsl:text/>
                  <xsl:value-of select="name(.)"/>
                  <xsl:text/> must have an @source-id.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@source-id-type='registry-name'"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@source-id-type='registry-name'">
               <xsl:attribute name="id">clintrial-related-object-4</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/article-structure/abstract-digest-impact-statement#clintrial-related-object-4</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[clintrial-related-object-4] <xsl:text/>
                  <xsl:value-of select="name(.)"/>
                  <xsl:text/> must have an @source-id-type='registry-name'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@document-id-type='clinical-trial-number'"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@document-id-type='clinical-trial-number'">
               <xsl:attribute name="id">clintrial-related-object-5</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/article-structure/abstract-digest-impact-statement#clintrial-related-object-5</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[clintrial-related-object-5] <xsl:text/>
                  <xsl:value-of select="name(.)"/>
                  <xsl:text/> must have an @document-id-type='clinical-trial-number'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@document-id"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@document-id">
               <xsl:attribute name="id">clintrial-related-object-6</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/article-structure/abstract-digest-impact-statement#clintrial-related-object-6</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[clintrial-related-object-6] <xsl:text/>
                  <xsl:value-of select="name(.)"/>
                  <xsl:text/> must have an @document-id.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@xlink:href"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@xlink:href">
               <xsl:attribute name="id">clintrial-related-object-7</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/article-structure/abstract-digest-impact-statement#clintrial-related-object-7</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[clintrial-related-object-7] <xsl:text/>
                  <xsl:value-of select="name(.)"/>
                  <xsl:text/> must have an @xlink:href.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT warning-->
      <xsl:choose>
         <xsl:when test="contains(.,@document-id/string())"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,@document-id/string())">
               <xsl:attribute name="id">clintrial-related-object-8</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/article-structure/abstract-digest-impact-statement#clintrial-related-object-8</xsl:attribute>
               <xsl:attribute name="role">warning</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[clintrial-related-object-8] <xsl:text/>
                  <xsl:value-of select="name(.)"/>
                  <xsl:text/> has an @document-id '<xsl:text/>
                  <xsl:value-of select="@document-id"/>
                  <xsl:text/>'. But this is not in the text, which is likely incorrect - <xsl:text/>
                  <xsl:value-of select="."/>
                  <xsl:text/>.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(@id,'^RO[1-9]')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(@id,'^RO[1-9]')">
               <xsl:attribute name="id">clintrial-related-object-9</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/article-structure/abstract-digest-impact-statement#clintrial-related-object-9</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[clintrial-related-object-9] <xsl:text/>
                  <xsl:value-of select="name(.)"/>
                  <xsl:text/> must have an @id in the format 'RO1'. '<xsl:text/>
                  <xsl:value-of select="@id"/>
                  <xsl:text/>' does not conform to this convention.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="parent::p"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="parent::p">
               <xsl:attribute name="id">clintrial-related-object-10</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/article-structure/abstract-digest-impact-statement#clintrial-related-object-10</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[clintrial-related-object-10] <xsl:text/>
                  <xsl:value-of select="name(.)"/>
                  <xsl:text/> in abstract must be a child of a &lt;p&gt; element.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="some $x in document($registries)/registries/registry satisfies ($x/subtitle/string()=@source-id)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="some $x in document($registries)/registries/registry satisfies ($x/subtitle/string()=@source-id)">
               <xsl:attribute name="id">clintrial-related-object-11</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/article-structure/abstract-digest-impact-statement#clintrial-related-object-11</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[clintrial-related-object-11] <xsl:text/>
                  <xsl:value-of select="name(.)"/>
                  <xsl:text/> @source-id value must be one of the subtitles of the Crossref clinical trial registries. "<xsl:text/>
                  <xsl:value-of select="@source-id"/>
                  <xsl:text/>" is not one of the following <xsl:text/>
                  <xsl:value-of select="string-join(for $x in document($registries)/registries/registry return concat('&quot;',$x/subtitle/string(),'&quot; (',$x/doi/string(),')'),', ')"/>
                  <xsl:text/>
               </svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="@source-id='ClinicalTrials.gov' and @xlink:href!=concat('https://clinicaltrials.gov/show/',@document-id)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@source-id='ClinicalTrials.gov' and @xlink:href!=concat('https://clinicaltrials.gov/show/',@document-id)">
            <xsl:attribute name="id">clintrial-related-object-12</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/article-structure/abstract-digest-impact-statement#clintrial-related-object-12</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[clintrial-related-object-12] ClinicalTrials.gov trial links are in the format https://clinicaltrials.gov/show/{number}. This <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> has the link '<xsl:text/>
               <xsl:value-of select="@xlink:href"/>
               <xsl:text/>', which based on the clinical trial registry (<xsl:text/>
               <xsl:value-of select="@source-id"/>
               <xsl:text/>) and @document-id (<xsl:text/>
               <xsl:value-of select="@document-id"/>
               <xsl:text/>) is not right. Either the xlink:href is wrong (should it be <xsl:text/>
               <xsl:value-of select="concat('https://clinicaltrials.gov/show/',@document-id)"/>
               <xsl:text/> instead?) or the @document-id value is wrong, or the @source-id value is incorrect (or all/some combination of these).</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M126"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M126"/>
   <xsl:template match="@*|node()" priority="-2" mode="M126">
      <xsl:apply-templates select="*" mode="M126"/>
   </xsl:template>

   <!--PATTERN clintrial-related-object-p-pattern-->


	  <!--RULE clintrial-related-object-p-->
   <xsl:template match="abstract[not(@abstract-type)]/sec[//related-object[@document-id-type='clinical-trial-number']]" priority="1000" mode="M127">

		<!--REPORT warning-->
      <xsl:if test="count(descendant::related-object[@document-id-type='clinical-trial-number']) gt 3">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(descendant::related-object[@document-id-type='clinical-trial-number']) gt 3">
            <xsl:attribute name="id">clintrial-related-object-13</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/article-structure/abstract-digest-impact-statement#clintrial-related-object-13</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[clintrial-related-object-13] There are <xsl:text/>
               <xsl:value-of select="count(descendant::related-object)"/>
               <xsl:text/> clinical trial numbers tagged in the structured abstract, which seems like a large number. Please check that this is correct and has not been mistagged.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M127"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M127"/>
   <xsl:template match="@*|node()" priority="-2" mode="M127">
      <xsl:apply-templates select="*" mode="M127"/>
   </xsl:template>

   <!--PATTERN abstract-word-count-pattern-->


	  <!--RULE abstract-word-count-->
   <xsl:template match="front//abstract[not(@abstract-type) and not(sec)]" priority="1000" mode="M128">
      <xsl:variable name="p-words" select="string-join(child::p[not(starts-with(.,'DOI:') or starts-with(.,'Editorial note:'))],' ')"/>
      <xsl:variable name="count" select="count(tokenize(normalize-space(replace($p-words,'\p{P}','')),' '))"/>

		    <!--REPORT warning-->
      <xsl:if test="($count gt 280)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="($count gt 280)">
            <xsl:attribute name="id">final-abstract-word-count-restriction</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/article-structure/abstract-digest-impact-statement#final-abstract-word-count-restriction</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[final-abstract-word-count-restriction] The abstract contains <xsl:text/>
               <xsl:value-of select="$count"/>
               <xsl:text/> words, when the usual upper limit is 280. Abstracts with more than 280 words should be checked with the eLife Editorial team.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M128"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M128"/>
   <xsl:template match="@*|node()" priority="-2" mode="M128">
      <xsl:apply-templates select="*" mode="M128"/>
   </xsl:template>

   <!--PATTERN aff-tests-pattern-->


	  <!--RULE aff-tests-->
   <xsl:template match="article-meta/contrib-group/aff" priority="1000" mode="M129">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="parent::contrib-group//contrib//xref/@rid = @id"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="parent::contrib-group//contrib//xref/@rid = @id">
               <xsl:attribute name="id">aff-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[aff-test-1] aff elements that are direct children of contrib-group must have an xref in that contrib-group pointing to them.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M129"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M129"/>
   <xsl:template match="@*|node()" priority="-2" mode="M129">
      <xsl:apply-templates select="*" mode="M129"/>
   </xsl:template>

   <!--PATTERN author-aff-tests-pattern-->


	  <!--RULE author-aff-tests-->
   <xsl:template match="article-meta/contrib-group[not(@*)]//aff" priority="1000" mode="M130">
      <xsl:variable name="display" select="string-join(descendant::*[not(local-name()=('label','institution-id','institution-wrap','named-content'))],', ')"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="country"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="country">
               <xsl:attribute name="id">final-auth-aff-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[final-auth-aff-test-1] Author affiliations must have a country. This one does not - <xsl:text/>
                  <xsl:value-of select="$display"/>
                  <xsl:text/>.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="addr-line[named-content[@content-type='city']]"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="addr-line[named-content[@content-type='city']]">
               <xsl:attribute name="id">final-auth-aff-test-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[final-auth-aff-test-2] Author affiliations must have a city. This one does not - <xsl:text/>
                  <xsl:value-of select="$display"/>
                  <xsl:text/>
               </svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="institution[not(@*)] or institution-wrap[institution[not(@*)]]"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="institution[not(@*)] or institution-wrap[institution[not(@*)]]">
               <xsl:attribute name="id">final-auth-aff-test-3</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[final-auth-aff-test-3] Author affiliations must have a top level institution. This one (with the id <xsl:text/>
                  <xsl:value-of select="@id"/>
                  <xsl:text/>) does not - <xsl:text/>
                  <xsl:value-of select="$display"/>
                  <xsl:text/>
               </svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M130"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M130"/>
   <xsl:template match="@*|node()" priority="-2" mode="M130">
      <xsl:apply-templates select="*" mode="M130"/>
   </xsl:template>

   <!--PATTERN aff-institution-wrap-tests-pattern-->


	  <!--RULE aff-institution-wrap-tests-->
   <xsl:template match="aff//institution-wrap" priority="1000" mode="M131">
      <xsl:variable name="display" select="string-join(parent::aff//*[not(local-name()=('label','institution-id','institution-wrap','named-content'))],', ')"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="institution-id and institution[not(@*)]"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="institution-id and institution[not(@*)]">
               <xsl:attribute name="id">aff-institution-wrap-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[aff-institution-wrap-test-1] If an affiliation has an institution wrap, then it must have both an institution-id and an institution. If there is no ROR for this institution, then it should be captured as a single institution element without institution-wrap. This institution-wrap does not have both elements - <xsl:text/>
                  <xsl:value-of select="$display"/>
                  <xsl:text/>
               </svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="parent::aff"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="parent::aff">
               <xsl:attribute name="id">aff-institution-wrap-test-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[aff-institution-wrap-test-2] institution-wrap must be a child of aff. This one has <xsl:text/>
                  <xsl:value-of select="parent::*/name()"/>
                  <xsl:text/> as its parent.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="text()">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="text()">
            <xsl:attribute name="id">aff-institution-wrap-test-3</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[aff-institution-wrap-test-3] institution-wrap cannot contain text. It can only contain elements.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(institution-id) = 1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(institution-id) = 1">
               <xsl:attribute name="id">aff-institution-wrap-test-4</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[aff-institution-wrap-test-4] institution-wrap must contain 1 and only 1 institution-id elements. This one has <xsl:text/>
                  <xsl:value-of select="count(institution-id)"/>
                  <xsl:text/>.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(institution[not(@*)]) = 1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(institution[not(@*)]) = 1">
               <xsl:attribute name="id">aff-institution-wrap-test-5</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[aff-institution-wrap-test-5] institution-wrap must contain 1 and only 1 institution elements. This one has <xsl:text/>
                  <xsl:value-of select="count(institution[not(@*)])"/>
                  <xsl:text/>.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M131"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M131"/>
   <xsl:template match="@*|node()" priority="-2" mode="M131">
      <xsl:apply-templates select="*" mode="M131"/>
   </xsl:template>

   <!--PATTERN aff-institution-id-tests-pattern-->


	  <!--RULE aff-institution-id-tests-->
   <xsl:template match="aff//institution-id" priority="1000" mode="M132">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@institution-id-type='ror'"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@institution-id-type='ror'">
               <xsl:attribute name="id">aff-institution-id-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[aff-institution-id-test-1] institution-id in aff must have the attribute institution-id-type="ror".</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(.,'https?://ror\.org/[a-z0-9]{9}')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'https?://ror\.org/[a-z0-9]{9}')">
               <xsl:attribute name="id">aff-institution-id-test-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[aff-institution-id-test-2] institution-id in aff must a value which is a valid ROR id. '<xsl:text/>
                  <xsl:value-of select="."/>
                  <xsl:text/>' is not a valid ROR id.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="*">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="*">
            <xsl:attribute name="id">aff-institution-id-test-3</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[aff-institution-id-test-3] institution-id in aff cannot contain elements, only text (which is a valid ROR id). This one contains the following element(s): <xsl:text/>
               <xsl:value-of select="string-join(*/name(),'; ')"/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M132"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M132"/>
   <xsl:template match="@*|node()" priority="-2" mode="M132">
      <xsl:apply-templates select="*" mode="M132"/>
   </xsl:template>

   <!--PATTERN gen-aff-tests-pattern-->


	  <!--RULE gen-aff-tests-->
   <xsl:template match="aff" priority="1000" mode="M133">
      <xsl:variable name="display" select="string-join(descendant::*[not(local-name()=('label','institution-id','institution-wrap','named-content'))],', ')"/>

		    <!--REPORT error-->
      <xsl:if test="count(institution[not(@*)]) + count(institution-wrap/institution[not(@*)]) gt 1">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(institution[not(@*)]) + count(institution-wrap/institution[not(@*)]) gt 1">
            <xsl:attribute name="id">gen-aff-test-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[gen-aff-test-1] Affiliations cannot have more than 1 top level institutions. <xsl:text/>
               <xsl:value-of select="$display"/>
               <xsl:text/> has <xsl:text/>
               <xsl:value-of select="count(institution[not(@*)]) + count(institution-wrap/institution[not(@*)])"/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="count(institution[@content-type='dept']) + count(institution-wrap/institution[@content-type='dept']) ge 1">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(institution[@content-type='dept']) + count(institution-wrap/institution[@content-type='dept']) ge 1">
            <xsl:attribute name="id">gen-aff-test-2</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[gen-aff-test-2] Affiliation has <xsl:text/>
               <xsl:value-of select="count(institution[@content-type='dept']) + count(institution-wrap/institution[@content-type='dept'])"/>
               <xsl:text/> department field(s) - <xsl:text/>
               <xsl:value-of select="$display"/>
               <xsl:text/>. Is this correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="count(label) gt 1">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(label) gt 1">
            <xsl:attribute name="id">gen-aff-test-3</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[gen-aff-test-3] Affiliations cannot have more than 1 label. <xsl:text/>
               <xsl:value-of select="$display"/>
               <xsl:text/> has <xsl:text/>
               <xsl:value-of select="count(label)"/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="count(addr-line) gt 1">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(addr-line) gt 1">
            <xsl:attribute name="id">gen-aff-test-4</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[gen-aff-test-4] Affiliations cannot have more than 1 addr-line elements. <xsl:text/>
               <xsl:value-of select="$display"/>
               <xsl:text/> has <xsl:text/>
               <xsl:value-of select="count(addr-line)"/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="count(country) gt 1">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(country) gt 1">
            <xsl:attribute name="id">gen-aff-test-5</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[gen-aff-test-5] Affiliations cannot have more than 1 country elements. <xsl:text/>
               <xsl:value-of select="$display"/>
               <xsl:text/> has <xsl:text/>
               <xsl:value-of select="count(country)"/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="text()">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="text()">
            <xsl:attribute name="id">gen-aff-test-6</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[gen-aff-test-6] aff elements cannot contain text. They can only contain elements (label, institution, addr-line, country). This one (<xsl:text/>
               <xsl:value-of select="@id"/>
               <xsl:text/>) contains the text '<xsl:text/>
               <xsl:value-of select="string-join(text(),'')"/>
               <xsl:text/>'</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M133"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M133"/>
   <xsl:template match="@*|node()" priority="-2" mode="M133">
      <xsl:apply-templates select="*" mode="M133"/>
   </xsl:template>

   <!--PATTERN aff-child-tests-pattern-->


	  <!--RULE aff-child-tests-->
   <xsl:template match="aff/*" priority="1000" mode="M134">
      <xsl:variable name="allowed-elems" select="('label','institution','institution-wrap','addr-line','country')"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="name()=$allowed-elems"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="name()=$allowed-elems">
               <xsl:attribute name="id">aff-child-conformity</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[aff-child-conformity] <xsl:text/>
                  <xsl:value-of select="name()"/>
                  <xsl:text/> is not allowed as a child of &lt;aff&gt;.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M134"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M134"/>
   <xsl:template match="@*|node()" priority="-2" mode="M134">
      <xsl:apply-templates select="*" mode="M134"/>
   </xsl:template>

   <!--PATTERN aff-ror-tests-pattern-->


	  <!--RULE aff-ror-tests-->
   <xsl:template match="aff[institution-wrap/institution-id[@institution-id-type='ror']]" priority="1000" mode="M135">
      <xsl:variable name="rors" select="'rors.xml'"/>
      <xsl:variable name="ror" select="institution-wrap[1]/institution-id[@institution-id-type='ror'][1]"/>
      <xsl:variable name="matching-ror" select="document($rors)//*:ror[*:id=$ror]"/>
      <xsl:variable name="display" select="string-join(descendant::*[not(local-name()=('label','institution-id','institution-wrap','named-content'))],', ')"/>

		    <!--ASSERT warning-->
      <xsl:choose>
         <xsl:when test="exists($matching-ror)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="exists($matching-ror)">
               <xsl:attribute name="id">aff-ror</xsl:attribute>
               <xsl:attribute name="role">warning</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[aff-ror] Affiliation (<xsl:text/>
                  <xsl:value-of select="$display"/>
                  <xsl:text/>) has a ROR id - <xsl:text/>
                  <xsl:value-of select="$ror"/>
                  <xsl:text/> - but it does not look like a correct one.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT warning-->
      <xsl:if test="exists($matching-ror) and not(contains(institution-wrap[1]/institution[1],$matching-ror/*:name))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="exists($matching-ror) and not(contains(institution-wrap[1]/institution[1],$matching-ror/*:name))">
            <xsl:attribute name="id">aff-ror-name</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[aff-ror-name] Affiliation has a ROR id, but it does not contain the name of the institution as captured in the ROR data within its institution. Is that OK? ROR has '<xsl:text/>
               <xsl:value-of select="$matching-ror/*:name"/>
               <xsl:text/>', but the institution is <xsl:text/>
               <xsl:value-of select="institution-wrap[1]/institution[1]"/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="(addr-line/named-content[@content-type='city'] or ancestor::contrib[@contrib-type='author' and not(ancestor::sub-article)]) and exists($matching-ror) and not(contains(addr-line[1]/named-content[@content-type='city'][1],$matching-ror/*:city))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(addr-line/named-content[@content-type='city'] or ancestor::contrib[@contrib-type='author' and not(ancestor::sub-article)]) and exists($matching-ror) and not(contains(addr-line[1]/named-content[@content-type='city'][1],$matching-ror/*:city))">
            <xsl:attribute name="id">aff-ror-city</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[aff-ror-city] Affiliation has a ROR id, but its city is not the same one as in the ROR data. Is that OK? ROR has '<xsl:text/>
               <xsl:value-of select="$matching-ror/*:city"/>
               <xsl:text/>', but the affiliation city is <xsl:text/>
               <xsl:value-of select="addr-line[1]/named-content[@content-type='city'][1]"/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="(country or ancestor::contrib[@contrib-type='author' and not(ancestor::sub-article)]) and exists($matching-ror) and not(contains(country[1],$matching-ror/*:country))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(country or ancestor::contrib[@contrib-type='author' and not(ancestor::sub-article)]) and exists($matching-ror) and not(contains(country[1],$matching-ror/*:country))">
            <xsl:attribute name="id">aff-ror-country</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[aff-ror-country] Affiliation has a ROR id, but its country is not the same one as in the ROR data. Is that OK? ROR has '<xsl:text/>
               <xsl:value-of select="$matching-ror/*:country"/>
               <xsl:text/>', but the affiliation country is <xsl:text/>
               <xsl:value-of select="country[1]"/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M135"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M135"/>
   <xsl:template match="@*|node()" priority="-2" mode="M135">
      <xsl:apply-templates select="*" mode="M135"/>
   </xsl:template>

   <!--PATTERN addr-line-parent-test-pattern-->


	  <!--RULE addr-line-parent-test-->
   <xsl:template match="addr-line" priority="1000" mode="M136">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="parent::aff"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="parent::aff">
               <xsl:attribute name="id">addr-line-parent</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[addr-line-parent] <xsl:text/>
                  <xsl:value-of select="name()"/>
                  <xsl:text/> is not allowed as a child of &lt;<xsl:text/>
                  <xsl:value-of select="parent::*[1]/local-name()"/>
                  <xsl:text/>&gt;.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M136"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M136"/>
   <xsl:template match="@*|node()" priority="-2" mode="M136">
      <xsl:apply-templates select="*" mode="M136"/>
   </xsl:template>

   <!--PATTERN addr-line-child-tests-pattern-->


	  <!--RULE addr-line-child-tests-->
   <xsl:template match="addr-line/*" priority="1000" mode="M137">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="name()='named-content'"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="name()='named-content'">
               <xsl:attribute name="id">addr-line-child-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[addr-line-child-1] <xsl:text/>
                  <xsl:value-of select="name()"/>
                  <xsl:text/> is not allowed as a child of &lt;addr-line&gt;.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="(name()='named-content') and not(@content-type='city')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(name()='named-content') and not(@content-type='city')">
            <xsl:attribute name="id">addr-line-child-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[addr-line-child-2] <xsl:text/>
               <xsl:value-of select="name()"/>
               <xsl:text/> in &lt;addr-line&gt; must have the attribute content-type="city". <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> does not.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M137"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M137"/>
   <xsl:template match="@*|node()" priority="-2" mode="M137">
      <xsl:apply-templates select="*" mode="M137"/>
   </xsl:template>

   <!--PATTERN funding-group-tests-pattern-->


	  <!--RULE funding-group-tests-->
   <xsl:template match="article-meta/funding-group" priority="1000" mode="M138">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(funding-statement) = 1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(funding-statement) = 1">
               <xsl:attribute name="id">funding-group-test-1</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/funding-information#funding-group-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[funding-group-test-1] One funding-statement should be present in funding-group.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT warning-->
      <xsl:if test="count(award-group) = 0">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(award-group) = 0">
            <xsl:attribute name="id">funding-group-test-2</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/funding-information#funding-group-test-2</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[funding-group-test-2] There is no funding for this article. Is this correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="(count(award-group) = 0) and (funding-statement!='No external funding was received for this work.')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(count(award-group) = 0) and (funding-statement!='No external funding was received for this work.')">
            <xsl:attribute name="id">funding-group-test-3</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/funding-information#funding-group-test-3</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[funding-group-test-3] Is this funding-statement correct? - '<xsl:text/>
               <xsl:value-of select="funding-statement"/>
               <xsl:text/>' Usually it should be 'No external funding was received for this work.'</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="(count(award-group) != 0) and not(matches(funding-statement[1],'^The funders? had no role in study design, data collection,? and interpretation, or the decision to submit the work for publication\.( For the purpose of Open Access, the authors have applied a CC BY public copyright license to any Author Accepted Manuscript version arising from this submission\.)?$'))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(count(award-group) != 0) and not(matches(funding-statement[1],'^The funders? had no role in study design, data collection,? and interpretation, or the decision to submit the work for publication\.( For the purpose of Open Access, the authors have applied a CC BY public copyright license to any Author Accepted Manuscript version arising from this submission\.)?$'))">
            <xsl:attribute name="id">funding-group-test-4</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/funding-information#funding-group-test-4</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[funding-group-test-4] Is the funding-statement correct? There are funders, but the statement is '<xsl:text/>
               <xsl:value-of select="funding-statement[1]"/>
               <xsl:text/>'. If there are funders it should usually be 'The funders had no role in study design, data collection and interpretation, or the decision to submit the work for publication.'</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M138"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M138"/>
   <xsl:template match="@*|node()" priority="-2" mode="M138">
      <xsl:apply-templates select="*" mode="M138"/>
   </xsl:template>

   <!--PATTERN wellcome-fund-statement-tests-pattern-->


	  <!--RULE wellcome-fund-statement-tests-->
   <xsl:template match="article-meta/funding-group[descendant::institution[lower-case(.)=('wellcome','wellcome trust')]]/funding-statement" priority="1000" mode="M139">

		<!--ASSERT warning-->
      <xsl:choose>
         <xsl:when test="matches(lower-case(.),'for the purpose of open access, the authors have applied a cc by public copyright license to any author accepted manuscript version arising from this submission\.$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(lower-case(.),'for the purpose of open access, the authors have applied a cc by public copyright license to any author accepted manuscript version arising from this submission\.$')">
               <xsl:attribute name="id">wellcome-fund-statement</xsl:attribute>
               <xsl:attribute name="role">warning</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[wellcome-fund-statement] This article has Wellcome funding declared, but the funding statement does not end with "For the purpose of Open Access, the authors have applied a CC BY public copyright license to any Author Accepted Manuscript version arising from this submission." is that correct? The funding statement is currently <xsl:text/>
                  <xsl:value-of select="."/>
                  <xsl:text/>.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M139"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M139"/>
   <xsl:template match="@*|node()" priority="-2" mode="M139">
      <xsl:apply-templates select="*" mode="M139"/>
   </xsl:template>

   <!--PATTERN award-group-tests-pattern-->


	  <!--RULE award-group-tests-->
   <xsl:template match="funding-group/award-group" priority="1000" mode="M140">
      <xsl:variable name="id" select="@id"/>
      <xsl:variable name="institution" select="funding-source[1]/institution-wrap[1]/institution[1]"/>
      <xsl:variable name="version" select="e:get-version(.)"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="funding-source"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="funding-source">
               <xsl:attribute name="id">award-group-test-2</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/funding-information#award-group-test-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[award-group-test-2] award-group must contain a funding-source.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="if ($version = '1') then not(principal-award-recipient)      else ()">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="if ($version = '1') then not(principal-award-recipient) else ()">
            <xsl:attribute name="id">final-award-group-test-3</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/funding-information#final-award-group-test-3</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[final-award-group-test-3] award-group must contain a principal-award-recipient.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="if ($version != '1') then principal-award-recipient      else ()">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="if ($version != '1') then principal-award-recipient else ()">
            <xsl:attribute name="id">award-group-test-3-v2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[award-group-test-3-v2] award-group must not contain a principal-award-recipient in <xsl:text/>
               <xsl:value-of select="$version"/>
               <xsl:text/> version XML.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="count(award-id) gt 1">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(award-id) gt 1">
            <xsl:attribute name="id">award-group-test-4</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/funding-information#award-group-test-4</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[award-group-test-4] award-group may contain one and only one award-id.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="funding-source/institution-wrap"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="funding-source/institution-wrap">
               <xsl:attribute name="id">award-group-test-5</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/funding-information#award-group-test-5</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[award-group-test-5] funding-source must contain an institution-wrap.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="count(funding-source/institution-wrap/institution) = 0">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(funding-source/institution-wrap/institution) = 0">
            <xsl:attribute name="id">award-group-test-6</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/funding-information#award-group-test-6</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[award-group-test-6] Every piece of funding must have an institution. &lt;award-group id="<xsl:text/>
               <xsl:value-of select="@id"/>
               <xsl:text/>"&gt; does not have one.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="if ($version = '1') then not(ancestor::article//article-meta//contrib//xref/@rid = $id)      else ()">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="if ($version = '1') then not(ancestor::article//article-meta//contrib//xref/@rid = $id) else ()">
            <xsl:attribute name="id">final-award-group-test-7</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/funding-information#final-award-group-test-7</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[final-award-group-test-7] There is no author associated with the funding for <xsl:text/>
               <xsl:value-of select="$institution"/>
               <xsl:text/>, which is incorrect. (There is no xref from a contrib pointing to this &lt;award-group id="<xsl:text/>
               <xsl:value-of select="$id"/>
               <xsl:text/>"&gt;).</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="count(funding-source/institution-wrap/institution) gt 1">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(funding-source/institution-wrap/institution) gt 1">
            <xsl:attribute name="id">award-group-test-8</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/funding-information#award-group-test-8</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[award-group-test-8] Every piece of funding must only have 1 institution. &lt;award-group id="<xsl:text/>
               <xsl:value-of select="@id"/>
               <xsl:text/>"&gt; has <xsl:text/>
               <xsl:value-of select="count(funding-source/institution-wrap/institution)"/>
               <xsl:text/> - <xsl:text/>
               <xsl:value-of select="string-join(funding-source/institution-wrap/institution,', ')"/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M140"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M140"/>
   <xsl:template match="@*|node()" priority="-2" mode="M140">
      <xsl:apply-templates select="*" mode="M140"/>
   </xsl:template>

   <!--PATTERN award-id-tests-pattern-->


	  <!--RULE award-id-tests-->
   <xsl:template match="funding-group/award-group/award-id" priority="1000" mode="M141">
      <xsl:variable name="id" select="parent::award-group/@id"/>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,',|;')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,',|;')">
            <xsl:attribute name="id">award-id-test-1</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/funding-information#award-id-test-1</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[award-id-test-1] Funding entry with id <xsl:text/>
               <xsl:value-of select="$id"/>
               <xsl:text/> has a comma or semi-colon in the award id. Should this be separated out into several funding entries? - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches(.,'^\p{Zs}?[Nn][/]?[\.]?[Aa][.]?\p{Zs}?$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'^\p{Zs}?[Nn][/]?[\.]?[Aa][.]?\p{Zs}?$')">
            <xsl:attribute name="id">award-id-test-2</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/funding-information#award-id-test-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[award-id-test-2] Award id contains - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> - This entry should be empty.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches(.,'^\p{Zs}?[Nn]one[\.]?\p{Zs}?$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'^\p{Zs}?[Nn]one[\.]?\p{Zs}?$')">
            <xsl:attribute name="id">award-id-test-3</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/funding-information#award-id-test-3</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[award-id-test-3] Award id contains - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> - This entry should be empty.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,'&amp;#x\d')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'&amp;#x\d')">
            <xsl:attribute name="id">award-id-test-4</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/funding-information#award-id-test-4</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[award-id-test-4] Award id contains what looks like a broken unicode - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M141"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M141"/>
   <xsl:template match="@*|node()" priority="-2" mode="M141">
      <xsl:apply-templates select="*" mode="M141"/>
   </xsl:template>

   <!--PATTERN institution-wrap-tests-pattern-->


	  <!--RULE institution-wrap-tests-->
   <xsl:template match="article-meta//award-group//institution-wrap" priority="1000" mode="M142">

		<!--ASSERT warning-->
      <xsl:choose>
         <xsl:when test="institution-id[@institution-id-type='FundRef']"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="institution-id[@institution-id-type='FundRef']">
               <xsl:attribute name="id">institution-id-test</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/funding-information#institution-id-test</xsl:attribute>
               <xsl:attribute name="role">warning</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[institution-id-test] Whenever possible, a funder should have a doi - please check whether there is an appropriate doi in the open funder registry. (institution-id[@institution-id-type="FundRef"] is not present in institution-wrap).</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M142"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M142"/>
   <xsl:template match="@*|node()" priority="-2" mode="M142">
      <xsl:apply-templates select="*" mode="M142"/>
   </xsl:template>

   <!--PATTERN institution-id-tests-pattern-->


	  <!--RULE institution-id-tests-->
   <xsl:template match="article[e:get-version(.)='1']//award-group//institution-wrap/institution-id" priority="1000" mode="M143">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@institution-id-type='FundRef'"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@institution-id-type='FundRef'">
               <xsl:attribute name="id">institution-id-test-2</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/funding-information#institution-id-test-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[institution-id-test-2] <xsl:text/>
                  <xsl:value-of select="name(.)"/>
                  <xsl:text/> element must have the attribute institution-id-type="FundRef".</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="normalize-space(.) != ''"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="normalize-space(.) != ''">
               <xsl:attribute name="id">institution-id-test-3</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/funding-information#institution-id-test-3</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[institution-id-test-3] The funding entry for <xsl:text/>
                  <xsl:value-of select="parent::institution-wrap/institution"/>
                  <xsl:text/> has an empty <xsl:text/>
                  <xsl:value-of select="name(.)"/>
                  <xsl:text/> element, which is not allowed.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="*">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="*">
            <xsl:attribute name="id">institution-id-test-4</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/funding-information#institution-id-test-4</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[institution-id-test-4] The <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element in funding entry for <xsl:text/>
               <xsl:value-of select="parent::institution-wrap/institution"/>
               <xsl:text/> contains child element(s) (<xsl:text/>
               <xsl:value-of select="string-join(distinct-values(*/name()),', ')"/>
               <xsl:text/>) which is not allowed.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="(normalize-space(.) != '') and not(matches(.,'^http[s]?://d?x?\.?doi.org/10.13039/\d*$'))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(normalize-space(.) != '') and not(matches(.,'^http[s]?://d?x?\.?doi.org/10.13039/\d*$'))">
            <xsl:attribute name="id">institution-id-test-5</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/funding-information#institution-id-test-5</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[institution-id-test-5] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element in funding entry for <xsl:text/>
               <xsl:value-of select="parent::institution-wrap/institution"/>
               <xsl:text/> contains the following text - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> - which is not a fundref doi.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M143"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M143"/>
   <xsl:template match="@*|node()" priority="-2" mode="M143">
      <xsl:apply-templates select="*" mode="M143"/>
   </xsl:template>

   <!--PATTERN institution-id-tests-v2-pattern-->


	  <!--RULE institution-id-tests-v2-->
   <xsl:template match="article[e:get-version(.)!='1']//award-group//institution-wrap/institution-id" priority="1000" mode="M144">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@institution-id-type='doi'"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@institution-id-type='doi'">
               <xsl:attribute name="id">institution-id-test-2-v2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[institution-id-test-2-v2] <xsl:text/>
                  <xsl:value-of select="name(.)"/>
                  <xsl:text/> element must have the attribute institution-id-type="doi".</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="normalize-space(.) != ''"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="normalize-space(.) != ''">
               <xsl:attribute name="id">institution-id-test-3-v2</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/funding-information#institution-id-test-3</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[institution-id-test-3-v2] The funding entry for <xsl:text/>
                  <xsl:value-of select="parent::institution-wrap/institution"/>
                  <xsl:text/> has an empty <xsl:text/>
                  <xsl:value-of select="name(.)"/>
                  <xsl:text/> element, which is not allowed.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="*">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="*">
            <xsl:attribute name="id">institution-id-test-4-v2</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/funding-information#institution-id-test-4</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[institution-id-test-4-v2] The <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element in funding entry for <xsl:text/>
               <xsl:value-of select="parent::institution-wrap/institution"/>
               <xsl:text/> contains child element(s) (<xsl:text/>
               <xsl:value-of select="string-join(distinct-values(*/name()),', ')"/>
               <xsl:text/>) which is not allowed.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="(normalize-space(.) != '') and not(matches(.,'^10.13039/\d*$'))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(normalize-space(.) != '') and not(matches(.,'^10.13039/\d*$'))">
            <xsl:attribute name="id">institution-id-test-5-v2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[institution-id-test-5-v2] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element in funding entry for <xsl:text/>
               <xsl:value-of select="parent::institution-wrap/institution"/>
               <xsl:text/> contains the following text - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> - which is not a fundref doi.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@vocab='open-funder-registry'"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@vocab='open-funder-registry'">
               <xsl:attribute name="id">institution-id-test-6</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[institution-id-test-6] <xsl:text/>
                  <xsl:value-of select="name(.)"/>
                  <xsl:text/> in funding must have a vocab="open-funder-registry" attribute. This one does not.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@vocab-identifier='10.13039/open-funder-registry'"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@vocab-identifier='10.13039/open-funder-registry'">
               <xsl:attribute name="id">institution-id-test-7</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[institution-id-test-7] <xsl:text/>
                  <xsl:value-of select="name(.)"/>
                  <xsl:text/> in funding must have a vocab-identifier="10.13039/open-funder-registry" attribute. This one does not.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M144"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M144"/>
   <xsl:template match="@*|node()" priority="-2" mode="M144">
      <xsl:apply-templates select="*" mode="M144"/>
   </xsl:template>

   <!--PATTERN par-tests-pattern-->


	  <!--RULE par-tests-->
   <xsl:template match="funding-group//principal-award-recipient" priority="1000" mode="M145">
      <xsl:variable name="authors" select="for $x in ancestor::article//article-meta/contrib-group[1]/contrib[@contrib-type='author']         return if ($x/name) then e:get-name($x/name[1])         else if ($x/collab) then e:get-collab($x/collab[1])         else ''"/>
      <xsl:variable name="par-text" select="if (name) then e:get-name(name[1]) else e:get-collab(collab[1])"/>

		    <!--REPORT error-->
      <xsl:if test="normalize-space(.)='' and not(*)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="normalize-space(.)='' and not(*)">
            <xsl:attribute name="id">par-test-1</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/funding-information#par-test-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[par-test-1] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> cannot be empty.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="$par-text = $authors"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="$par-text = $authors">
               <xsl:attribute name="id">par-test-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[par-test-2] Author name in funding section (<xsl:text/>
                  <xsl:value-of select="$par-text"/>
                  <xsl:text/>) does not match any of the author names in the author list: <xsl:text/>
                  <xsl:value-of select="string-join($authors,', ')"/>
                  <xsl:text/>.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M145"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M145"/>
   <xsl:template match="@*|node()" priority="-2" mode="M145">
      <xsl:apply-templates select="*" mode="M145"/>
   </xsl:template>

   <!--PATTERN par-name-tests-pattern-->


	  <!--RULE par-name-tests-->
   <xsl:template match="funding-group//principal-award-recipient/name" priority="1000" mode="M146">

		<!--REPORT error-->
      <xsl:if test="contains(.,'.')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'.')">
            <xsl:attribute name="id">par-name-test-1</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/funding-information#par-name-test-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[par-name-test-1] Author name in funding entry contains a full stop - <xsl:text/>
               <xsl:value-of select="e:get-name(.)"/>
               <xsl:text/>. Please remove the full stop.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="surname or given-names"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="surname or given-names">
               <xsl:attribute name="id">par-name-test-2</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/funding-information#par-name-test-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[par-name-test-2] name in principal-award-recipient cannot be empty.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M146"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M146"/>
   <xsl:template match="@*|node()" priority="-2" mode="M146">
      <xsl:apply-templates select="*" mode="M146"/>
   </xsl:template>

   <!--PATTERN kwd-group-tests-pattern-->


	  <!--RULE kwd-group-tests-->
   <xsl:template match="article-meta/kwd-group[not(@kwd-group-type='research-organism')]" priority="1000" mode="M147">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@kwd-group-type='author-keywords'"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@kwd-group-type='author-keywords'">
               <xsl:attribute name="id">kwd-group-type</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[kwd-group-type] kwd-group must have a @kwd-group-type 'research-organism', or 'author-keywords'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT warning-->
      <xsl:choose>
         <xsl:when test="kwd"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="kwd">
               <xsl:attribute name="id">non-ro-kwd-presence-test</xsl:attribute>
               <xsl:attribute name="role">warning</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[non-ro-kwd-presence-test] kwd-group must contain at least one kwd</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M147"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M147"/>
   <xsl:template match="@*|node()" priority="-2" mode="M147">
      <xsl:apply-templates select="*" mode="M147"/>
   </xsl:template>

   <!--PATTERN ro-kwd-group-tests-pattern-->


	  <!--RULE ro-kwd-group-tests-->
   <xsl:template match="article-meta/kwd-group[@kwd-group-type='research-organism']" priority="1000" mode="M148">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="title = 'Research organism'"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="title = 'Research organism'">
               <xsl:attribute name="id">kwd-group-title</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[kwd-group-title] kwd-group title is <xsl:text/>
                  <xsl:value-of select="title"/>
                  <xsl:text/>, which is wrong. It should be 'Research organism'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT warning-->
      <xsl:choose>
         <xsl:when test="kwd"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="kwd">
               <xsl:attribute name="id">ro-kwd-presence-test</xsl:attribute>
               <xsl:attribute name="role">warning</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[ro-kwd-presence-test] kwd-group must contain at least one kwd</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M148"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M148"/>
   <xsl:template match="@*|node()" priority="-2" mode="M148">
      <xsl:apply-templates select="*" mode="M148"/>
   </xsl:template>

   <!--PATTERN ro-kwd-tests-pattern-->


	  <!--RULE ro-kwd-tests-->
   <xsl:template match="article-meta/kwd-group[@kwd-group-type='research-organism']/kwd" priority="1000" mode="M149">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="substring(.,1,1) = upper-case(substring(.,1,1))"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="substring(.,1,1) = upper-case(substring(.,1,1))">
               <xsl:attribute name="id">kwd-upper-case</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[kwd-upper-case] research-organism kwd elements should start with an upper-case letter.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="*[local-name() != 'italic']">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="*[local-name() != 'italic']">
            <xsl:attribute name="id">kwd-child-test</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[kwd-child-test] research-organism keywords cannot have child elements such as <xsl:text/>
               <xsl:value-of select="*/local-name()"/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M149"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M149"/>
   <xsl:template match="@*|node()" priority="-2" mode="M149">
      <xsl:apply-templates select="*" mode="M149"/>
   </xsl:template>

   <!--PATTERN custom-meta-group-tests-pattern-->


	  <!--RULE custom-meta-group-tests-->
   <xsl:template match="article-meta/custom-meta-group" priority="1000" mode="M150">
      <xsl:variable name="type" select="parent::article-meta/article-categories/subj-group[@subj-group-type='display-channel']/subject[1]"/>

		    <!--REPORT error-->
      <xsl:if test="($type = $research-subj) and not(count(custom-meta[@specific-use='meta-only'])=(1,2))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="($type = $research-subj) and not(count(custom-meta[@specific-use='meta-only'])=(1,2))">
            <xsl:attribute name="id">custom-meta-presence</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[custom-meta-presence] Only 1 or 2 custom-meta[@specific-use='meta-only'] elements are permitted in custom-meta-group for <xsl:text/>
               <xsl:value-of select="$type"/>
               <xsl:text/>. This one has <xsl:text/>
               <xsl:value-of select="count(custom-meta[@specific-use='meta-only'])"/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="($type = $features-subj) and not(count(custom-meta[@specific-use='meta-only']) = (2,3))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="($type = $features-subj) and not(count(custom-meta[@specific-use='meta-only']) = (2,3))">
            <xsl:attribute name="id">features-custom-meta-presence</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/feature-content#features-custom-meta-presence</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[features-custom-meta-presence] 2 or 3 custom-meta[@specific-use='meta-only'] must be present in custom-meta-group for <xsl:text/>
               <xsl:value-of select="$type"/>
               <xsl:text/>. This one has <xsl:text/>
               <xsl:value-of select="count(custom-meta[@specific-use='meta-only'])"/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M150"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M150"/>
   <xsl:template match="@*|node()" priority="-2" mode="M150">
      <xsl:apply-templates select="*" mode="M150"/>
   </xsl:template>

   <!--PATTERN custom-meta-tests-pattern-->


	  <!--RULE custom-meta-tests-->
   <xsl:template match="article-meta/custom-meta-group/custom-meta" priority="1000" mode="M151">
      <xsl:variable name="type" select="ancestor::article-meta/article-categories/subj-group[@subj-group-type='display-channel']/subject[1]"/>
      <xsl:variable name="pos" select="count(parent::custom-meta-group/custom-meta) - count(following-sibling::custom-meta)"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(meta-name) = 1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(meta-name) = 1">
               <xsl:attribute name="id">custom-meta-test-1</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/article-structure/abstract-digest-impact-statement#custom-meta-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[custom-meta-test-1] One meta-name must be present in custom-meta.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="($type = $research-subj) and not(meta-name = ('Author impact statement','schema-version'))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="($type = $research-subj) and not(meta-name = ('Author impact statement','schema-version'))">
            <xsl:attribute name="id">custom-meta-test-2</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/article-structure/abstract-digest-impact-statement#custom-meta-test-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[custom-meta-test-2] The value of meta-name can only be 'Author impact statement' or 'schema-version'. Currently it is <xsl:text/>
               <xsl:value-of select="meta-name"/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="($type = $research-subj) and ($pos=2) and  (meta-name != 'schema-version')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="($type = $research-subj) and ($pos=2) and (meta-name != 'schema-version')">
            <xsl:attribute name="id">custom-meta-test-17</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[custom-meta-test-17] The value of the 2nd meta-name can only be 'schema-version'. Currently it is <xsl:text/>
               <xsl:value-of select="meta-name"/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(meta-value) = 1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(meta-value) = 1">
               <xsl:attribute name="id">custom-meta-test-3</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/article-structure/abstract-digest-impact-statement#custom-meta-test-3</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[custom-meta-test-3] One meta-value must be present in custom-meta.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="($type = $features-subj) and ($pos=1) and  (meta-name != 'Author impact statement')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="($type = $features-subj) and ($pos=1) and (meta-name != 'Author impact statement')">
            <xsl:attribute name="id">custom-meta-test-14</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/article-structure/abstract-digest-impact-statement#custom-meta-test-14</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[custom-meta-test-14] The value of the 1st meta-name can only be 'Author impact statement'. Currently it is <xsl:text/>
               <xsl:value-of select="meta-name"/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="($type = $features-subj) and ($pos=2) and  (meta-name != 'Template')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="($type = $features-subj) and ($pos=2) and (meta-name != 'Template')">
            <xsl:attribute name="id">custom-meta-test-15</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/article-structure/abstract-digest-impact-statement#custom-meta-test-15</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[custom-meta-test-15] The value of the 2nd meta-name can only be 'Template'. Currently it is <xsl:text/>
               <xsl:value-of select="meta-name"/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="($type = $features-subj) and ($pos=3) and  (meta-name != 'schema-version')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="($type = $features-subj) and ($pos=3) and (meta-name != 'schema-version')">
            <xsl:attribute name="id">custom-meta-test-18</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[custom-meta-test-18] The value of the 3rd meta-name can only be 'schema-version'. Currently it is <xsl:text/>
               <xsl:value-of select="meta-name"/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M151"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M151"/>
   <xsl:template match="@*|node()" priority="-2" mode="M151">
      <xsl:apply-templates select="*" mode="M151"/>
   </xsl:template>

   <!--PATTERN meta-value-tests-pattern-->


	  <!--RULE meta-value-tests-->
   <xsl:template match="article-meta/custom-meta-group/custom-meta[meta-name='Author impact statement']/meta-value" priority="1000" mode="M152">
      <xsl:variable name="subj" select="ancestor::article-meta//subj-group[@subj-group-type='display-channel']/subject[1]"/>
      <xsl:variable name="count" select="count(for $x in tokenize(normalize-space(replace(.,'\p{P}','')),' ') return $x)"/>
      <xsl:variable name="we-token" select="substring-before(substring-after(lower-case(.),' we '),' ')"/>
      <xsl:variable name="verbs" select="('name', 'named', 'can', 'progress', 'progressed', 'explain', 'explained', 'found', 'founded', 'present', 'presented', 'have', 'describe', 'described', 'showed', 'report', 'reported', 'miss', 'missed', 'identify', 'identified', 'better', 'bettered', 'validate', 'validated', 'use', 'used', 'listen', 'listened', 'demonstrate', 'demonstrated', 'argue', 'argued', 'will', 'assess', 'assessed', 'are', 'may', 'observe', 'observed', 'find', 'found', 'previously', 'should', 'rely', 'relied', 'reflect', 'reflected', 'recognise', 'recognised', 'attend', 'attended', 'first', 'define', 'defined', 'here', 'need', 'needed')"/>

		    <!--REPORT error-->
      <xsl:if test="not(child::*) and normalize-space(.)=''">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="not(child::*) and normalize-space(.)=''">
            <xsl:attribute name="id">custom-meta-test-4</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[custom-meta-test-4] The value of meta-value cannot be empty</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="($count gt 40)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="($count gt 40)">
            <xsl:attribute name="id">custom-meta-test-5</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/article-structure/abstract-digest-impact-statement#custom-meta-test-5</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[custom-meta-test-5] Impact statement contains more than 40 words (<xsl:text/>
               <xsl:value-of select="$count"/>
               <xsl:text/>). This is not allowed.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(.,'[\.|\?]$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'[\.|\?]$')">
               <xsl:attribute name="id">final-custom-meta-test-6</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/article-structure/abstract-digest-impact-statement#final-custom-meta-test-6</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[final-custom-meta-test-6] Impact statement must end with a full stop or question mark.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT warning-->
      <xsl:if test="matches(replace(.,' et al\. ',' et al '),'[\p{L}][\p{L}]+\. .*$|[\p{L}\p{N}][\p{L}\p{N}]+\? .*$|[\p{L}\p{N}][\p{L}\p{N}]+! .*$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(replace(.,' et al\. ',' et al '),'[\p{L}][\p{L}]+\. .*$|[\p{L}\p{N}][\p{L}\p{N}]+\? .*$|[\p{L}\p{N}][\p{L}\p{N}]+! .*$')">
            <xsl:attribute name="id">custom-meta-test-7</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/article-structure/abstract-digest-impact-statement#custom-meta-test-7</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[custom-meta-test-7] Impact statement appears to be made up of more than one sentence. Please check, as more than one sentence is not allowed.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="not($subj = 'Replication Study') and matches(.,'[:;]')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="not($subj = 'Replication Study') and matches(.,'[:;]')">
            <xsl:attribute name="id">custom-meta-test-8</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/article-structure/abstract-digest-impact-statement#custom-meta-test-8</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[custom-meta-test-8] Impact statement contains a colon or semi-colon, which is likely incorrect. It needs to be a proper sentence.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches(.,'[Ww]e show|[Ww]e present|[Tt]his study|[Tt]his paper')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'[Ww]e show|[Ww]e present|[Tt]his study|[Tt]his paper')">
            <xsl:attribute name="id">final-custom-meta-test-9</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/article-structure/abstract-digest-impact-statement#final-custom-meta-test-9</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[final-custom-meta-test-9] Impact statement contains a possessive phrase. This is not allowed.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches(.,'^[\d]+$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'^[\d]+$')">
            <xsl:attribute name="id">custom-meta-test-10</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/article-structure/abstract-digest-impact-statement#custom-meta-test-10</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[custom-meta-test-10] Impact statement is comprised entirely of numbers, which must be incorrect.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,' [Oo]ur |^[Oo]ur ')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,' [Oo]ur |^[Oo]ur ')">
            <xsl:attribute name="id">custom-meta-test-11</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/article-structure/abstract-digest-impact-statement#custom-meta-test-11</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[custom-meta-test-11] Impact statement contains 'our'. Is this possessive langauge relating to the article or research itself (which should be removed)?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,' study ') and not(matches(.,'[Tt]his study'))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,' study ') and not(matches(.,'[Tt]his study'))">
            <xsl:attribute name="id">custom-meta-test-13</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/article-structure/abstract-digest-impact-statement#custom-meta-test-13</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[custom-meta-test-13] Impact statement contains 'study'. Is this a third person description of this article? If so, it should be changed to not include this.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="($subj = 'Replication Study') and not(matches(.,'^Editors[\p{Po}] Summary: '))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="($subj = 'Replication Study') and not(matches(.,'^Editors[\p{Po}] Summary: '))">
            <xsl:attribute name="id">final-rep-study-custom-meta-test</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/article-structure/abstract-digest-impact-statement#final-rep-study-custom-meta-test</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[final-rep-study-custom-meta-test] Impact statement in Replication studies must begin with 'Editors' summary: '. This does not - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="$we-token = $verbs">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="$we-token = $verbs">
            <xsl:attribute name="id">custom-meta-test-16</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/article-structure/abstract-digest-impact-statement#custom-meta-test-16</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[custom-meta-test-16] Impact statement contains 'we' followed by a verb - '<xsl:text/>
               <xsl:value-of select="concat('we ',$we-token)"/>
               <xsl:text/>' in '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>'. Is this possessive language relating to the article or research itself (which should be removed)?</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M152"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M152"/>
   <xsl:template match="@*|node()" priority="-2" mode="M152">
      <xsl:apply-templates select="*" mode="M152"/>
   </xsl:template>

   <!--PATTERN meta-value-child-tests-pattern-->


	  <!--RULE meta-value-child-tests-->
   <xsl:template match="article-meta/custom-meta-group/custom-meta/meta-value/*" priority="1000" mode="M153">
      <xsl:variable name="allowed-elements" select="('italic','sup','sub')"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="local-name() = $allowed-elements"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="local-name() = $allowed-elements">
               <xsl:attribute name="id">custom-meta-child-test-1</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/article-structure/abstract-digest-impact-statement#custom-meta-child-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[custom-meta-child-test-1] <xsl:text/>
                  <xsl:value-of select="name(.)"/>
                  <xsl:text/> is not allowed in impact statement.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M153"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M153"/>
   <xsl:template match="@*|node()" priority="-2" mode="M153">
      <xsl:apply-templates select="*" mode="M153"/>
   </xsl:template>

   <!--PATTERN featmeta-value-tests-pattern-->


	  <!--RULE featmeta-value-tests-->
   <xsl:template match="article-meta/custom-meta-group/custom-meta[meta-name='Template']/meta-value" priority="1000" mode="M154">
      <xsl:variable name="type" select="ancestor::article-meta//subj-group[@subj-group-type='display-channel']/subject[1]"/>

		    <!--REPORT error-->
      <xsl:if test="child::*">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="child::*">
            <xsl:attribute name="id">feat-custom-meta-test-1</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/feature-content#feat-custom-meta-test-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[feat-custom-meta-test-1] <xsl:text/>
               <xsl:value-of select="child::*[1]/name()"/>
               <xsl:text/> is not allowed in a Template type meta-value.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test=". = ('1','2','3','4','5')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test=". = ('1','2','3','4','5')">
               <xsl:attribute name="id">feat-custom-meta-test-2</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/feature-content#feat-custom-meta-test-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[feat-custom-meta-test-2] Template type meta-value must one of '1','2','3','4', or '5'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT info-->
      <xsl:if test=". = ('1','2','3','4','5')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test=". = ('1','2','3','4','5')">
            <xsl:attribute name="id">feat-custom-meta-test-info</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/feature-content#feat-custom-meta-test-info</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[feat-custom-meta-test-info] Template <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="($type='Insight') and (. != '1')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="($type='Insight') and (. != '1')">
            <xsl:attribute name="id">feat-custom-meta-test-3</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/feature-content#feat-custom-meta-test-3</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[feat-custom-meta-test-3] <xsl:text/>
               <xsl:value-of select="$type"/>
               <xsl:text/> must be a template 1. Currently it is a template <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="($type='Editorial') and (. != '2')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="($type='Editorial') and (. != '2')">
            <xsl:attribute name="id">feat-custom-meta-test-4</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/feature-content#feat-custom-meta-test-4</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[feat-custom-meta-test-4] <xsl:text/>
               <xsl:value-of select="$type"/>
               <xsl:text/> must be a template 2. Currently it is a template <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="($type='Feature Article') and not(.=('3','4','5'))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="($type='Feature Article') and not(.=('3','4','5'))">
            <xsl:attribute name="id">feat-custom-meta-test-5</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/feature-content#feat-custom-meta-test-5</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[feat-custom-meta-test-5] <xsl:text/>
               <xsl:value-of select="$type"/>
               <xsl:text/> must be a template 3, 4, or 5. Currently it is a template <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M154"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M154"/>
   <xsl:template match="@*|node()" priority="-2" mode="M154">
      <xsl:apply-templates select="*" mode="M154"/>
   </xsl:template>

   <!--PATTERN schema-value-tests-pattern-->


	  <!--RULE schema-value-tests-->
   <xsl:template match="article-meta/custom-meta-group/custom-meta[meta-name='schema-version']/meta-value" priority="1000" mode="M155">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test=".='2.0.0'"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test=".='2.0.0'">
               <xsl:attribute name="id">schema-custom-meta-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[schema-custom-meta-test-1] The meta-value element for schema-version must have a value of '2.0.0'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M155"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M155"/>
   <xsl:template match="@*|node()" priority="-2" mode="M155">
      <xsl:apply-templates select="*" mode="M155"/>
   </xsl:template>

   <!--PATTERN elocation-id-tests-pattern-->


	  <!--RULE elocation-id-tests-->
   <xsl:template match="article-meta/elocation-id" priority="1000" mode="M156">
      <xsl:variable name="article-id" select="parent::article-meta/article-id[@pub-id-type='publisher-id'][1]"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test=". = concat('e' , $article-id)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test=". = concat('e' , $article-id)">
               <xsl:attribute name="id">test-elocation-conformance</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[test-elocation-conformance] elocation-id is incorrect. Its value should be a concatenation of 'e' and the article id, in this case <xsl:text/>
                  <xsl:value-of select="concat('e',$article-id)"/>
                  <xsl:text/>.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M156"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M156"/>
   <xsl:template match="@*|node()" priority="-2" mode="M156">
      <xsl:apply-templates select="*" mode="M156"/>
   </xsl:template>

   <!--PATTERN related-object-tests-pattern-->


	  <!--RULE related-object-tests-->
   <xsl:template match="related-object" priority="1000" mode="M157">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="ancestor::abstract[not(@abstract-type)] or parent::front-stub/parent::sub-article[@article-type='editor-report']"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="ancestor::abstract[not(@abstract-type)] or parent::front-stub/parent::sub-article[@article-type='editor-report']">
               <xsl:attribute name="id">related-object-ancestor</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/article-structure/abstract-digest-impact-statement#related-object-ancestor</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[related-object-ancestor] <xsl:text/>
                  <xsl:value-of select="name(.)"/>
                  <xsl:text/> is not allowed outside of the main abstract (abstract[not(@abstract-type)]) or in the front-stub for an editor's evaluation.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M157"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M157"/>
   <xsl:template match="@*|node()" priority="-2" mode="M157">
      <xsl:apply-templates select="*" mode="M157"/>
   </xsl:template>

   <!--PATTERN volume-test-pattern-->


	  <!--RULE volume-test-->
   <xsl:template match="article-meta/volume" priority="1000" mode="M158">
      <xsl:variable name="pub-date" select="parent::article-meta/pub-date[@publication-format='electronic'][@date-type=('publication','pub')]/year[1]"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test=". = number($pub-date) - 2011"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test=". = number($pub-date) - 2011">
               <xsl:attribute name="id">volume-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[volume-test-1] Journal volume is incorrect. It should be <xsl:text/>
                  <xsl:value-of select="number($pub-date) - 2011"/>
                  <xsl:text/>.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M158"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M158"/>
   <xsl:template match="@*|node()" priority="-2" mode="M158">
      <xsl:apply-templates select="*" mode="M158"/>
   </xsl:template>

   <!--PATTERN equal-author-tests-pattern-->


	  <!--RULE equal-author-tests-->
   <xsl:template match="article-meta//contrib[@contrib-type='author']" priority="1000" mode="M159">

		<!--REPORT error-->
      <xsl:if test="@equal-contrib='yes' and not(xref[matches(@rid,'^equal-contrib[0-9]$')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@equal-contrib='yes' and not(xref[matches(@rid,'^equal-contrib[0-9]$')])">
            <xsl:attribute name="id">equal-author-test-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[equal-author-test-1] Equal authors must contain an xref[@ref-type='fn'] with an @rid that starts with 'equal-contrib' and ends in a digit.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="xref[matches(@rid,'^equal-contrib[0-9]$')] and not(@equal-contrib='yes')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="xref[matches(@rid,'^equal-contrib[0-9]$')] and not(@equal-contrib='yes')">
            <xsl:attribute name="id">equal-author-test-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[equal-author-test-2] author contains an xref[@ref-type='fn'] with a 'equal-contrib0' type @rid, but the contrib has no @equal-contrib='yes'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M159"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M159"/>
   <xsl:template match="@*|node()" priority="-2" mode="M159">
      <xsl:apply-templates select="*" mode="M159"/>
   </xsl:template>

   <!--PATTERN p-tests-pattern-->


	  <!--RULE p-tests-->
   <xsl:template match="p" priority="1000" mode="M160">
      <xsl:variable name="article-type" select="ancestor::article/@article-type"/>

		    <!--REPORT error-->
      <xsl:if test="@*">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@*">
            <xsl:attribute name="id">p-test-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[p-test-2] p element must not have any attributes.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="((ancestor::article/@article-type = ('article-commentary', 'discussion', 'editorial', 'research-article', 'review-article')) and ancestor::body[parent::article]) and (descendant::*[1]/local-name() = 'bold') and not(ancestor::caption) and not(descendant::*[1]/preceding-sibling::text()) and matches(descendant::bold[1],'\p{L}') and (descendant::bold[1] != 'Related research article')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="((ancestor::article/@article-type = ('article-commentary', 'discussion', 'editorial', 'research-article', 'review-article')) and ancestor::body[parent::article]) and (descendant::*[1]/local-name() = 'bold') and not(ancestor::caption) and not(descendant::*[1]/preceding-sibling::text()) and matches(descendant::bold[1],'\p{L}') and (descendant::bold[1] != 'Related research article')">
            <xsl:attribute name="id">p-test-5</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[p-test-5] p element starts with bolded text - <xsl:text/>
               <xsl:value-of select="descendant::*[1]"/>
               <xsl:text/> - Should it be a header?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="(ancestor::body[parent::article]) and (string-length(.) le 100) and not(parent::*[local-name() = ('list-item','fn','td','th')]) and (preceding-sibling::*[1]/local-name() = 'p') and (string-length(preceding-sibling::p[1]) le 100) and not($article-type = $notice-article-types) and not((count(*) = 1) and child::supplementary-material)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(ancestor::body[parent::article]) and (string-length(.) le 100) and not(parent::*[local-name() = ('list-item','fn','td','th')]) and (preceding-sibling::*[1]/local-name() = 'p') and (string-length(preceding-sibling::p[1]) le 100) and not($article-type = $notice-article-types) and not((count(*) = 1) and child::supplementary-material)">
            <xsl:attribute name="id">p-test-6</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[p-test-6] Should this be captured as a list-item in a list? p element is less than 100 characters long, and is preceded by another p element less than 100 characters long.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,'^\p{Zs}?•') and not(ancestor::sub-article)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'^\p{Zs}?•') and not(ancestor::sub-article)">
            <xsl:attribute name="id">p-test-7</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[p-test-7] p element starts with a bullet point. It is very likely that this should instead be captured as a list-item in a list[@list-type='bullet']. - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M160"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M160"/>
   <xsl:template match="@*|node()" priority="-2" mode="M160">
      <xsl:apply-templates select="*" mode="M160"/>
   </xsl:template>

   <!--PATTERN p-text-tests-pattern-->


	  <!--RULE p-text-tests-->
   <xsl:template match="p[not(inline-formula or disp-formula or code)]" priority="1000" mode="M161">
      <xsl:variable name="text-tokens" select="for $x in tokenize(.,' ') return if (matches($x,'±[Ss][Dd]|±standard|±SEM|±S\.E\.M|±s\.e\.m|\+[Ss][Dd]|\+standard|\+SEM|\+S\.E\.M|\+s\.e\.m')) then $x else ()"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count($text-tokens) = 0"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count($text-tokens) = 0">
               <xsl:attribute name="id">p-test-3</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[p-test-3] p element contains <xsl:text/>
                  <xsl:value-of select="string-join($text-tokens,', ')"/>
                  <xsl:text/> - The spacing is incorrect.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M161"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M161"/>
   <xsl:template match="@*|node()" priority="-2" mode="M161">
      <xsl:apply-templates select="*" mode="M161"/>
   </xsl:template>

   <!--PATTERN p-child-tests-pattern-->


	  <!--RULE p-child-tests-->
   <xsl:template match="article[e:get-version(.)='1']//p/*" priority="1000" mode="M162">
      <xsl:variable name="allowed-p-blocks" select="('bold', 'sup', 'sub', 'sc', 'italic', 'underline', 'xref','inline-formula', 'disp-formula','supplementary-material', 'code', 'ext-link', 'named-content', 'inline-graphic', 'monospace', 'related-object', 'table-wrap')"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="if (ancestor::sec[@sec-type='data-availability']) then self::*/local-name() = ($allowed-p-blocks,'element-citation')  else self::*/local-name() = $allowed-p-blocks"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="if (ancestor::sec[@sec-type='data-availability']) then self::*/local-name() = ($allowed-p-blocks,'element-citation') else self::*/local-name() = $allowed-p-blocks">
               <xsl:attribute name="id">allowed-p-test</xsl:attribute>
               <xsl:attribute name="flag">version-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[allowed-p-test] p element cannot contain <xsl:text/>
                  <xsl:value-of select="self::*/local-name()"/>
                  <xsl:text/>. only contain the following elements are allowed - <xsl:text/>
                  <xsl:value-of select="string-join($allowed-p-blocks,', ')"/>
                  <xsl:text/>.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M162"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M162"/>
   <xsl:template match="@*|node()" priority="-2" mode="M162">
      <xsl:apply-templates select="*" mode="M162"/>
   </xsl:template>

   <!--PATTERN p-child-tests-v2-pattern-->


	  <!--RULE p-child-tests-v2-->
   <xsl:template match="article[e:get-version(.)!='1']//p/*" priority="1000" mode="M163">
      <xsl:variable name="allowed-p-blocks" select="('bold', 'sup', 'sub', 'sc', 'italic', 'underline', 'xref','inline-formula', 'disp-formula','supplementary-material', 'code', 'ext-link', 'named-content', 'inline-graphic', 'monospace', 'related-object', 'table-wrap','styled-content')"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="name() = $allowed-p-blocks"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="name() = $allowed-p-blocks">
               <xsl:attribute name="id">allowed-p-test-v2</xsl:attribute>
               <xsl:attribute name="flag">version-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[allowed-p-test-v2] p element cannot contain <xsl:text/>
                  <xsl:value-of select="name()"/>
                  <xsl:text/>. only contain the following elements are allowed - <xsl:text/>
                  <xsl:value-of select="string-join($allowed-p-blocks,', ')"/>
                  <xsl:text/>.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M163"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M163"/>
   <xsl:template match="@*|node()" priority="-2" mode="M163">
      <xsl:apply-templates select="*" mode="M163"/>
   </xsl:template>

   <!--PATTERN xref-target-tests-pattern-->


	  <!--RULE xref-target-tests-->
   <xsl:template match="xref" priority="1000" mode="M164">
      <xsl:variable name="rid" select="tokenize(@rid,' ')[1]"/>
      <xsl:variable name="target" select="self::*/ancestor::article//*[@id = $rid]"/>

		    <!--REPORT error-->
      <xsl:if test="(@ref-type='aff') and ($target/local-name() != 'aff')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(@ref-type='aff') and ($target/local-name() != 'aff')">
            <xsl:attribute name="id">aff-xref-target-test</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[aff-xref-target-test] xref with @ref-type='<xsl:text/>
               <xsl:value-of select="@ref-type"/>
               <xsl:text/>' points to <xsl:text/>
               <xsl:value-of select="$target/local-name()"/>
               <xsl:text/>. This is not correct.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="(@ref-type='fn') and ($target/local-name() != 'fn')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(@ref-type='fn') and ($target/local-name() != 'fn')">
            <xsl:attribute name="id">fn-xref-target-test</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[fn-xref-target-test] xref with @ref-type='<xsl:text/>
               <xsl:value-of select="@ref-type"/>
               <xsl:text/>' points to <xsl:text/>
               <xsl:value-of select="$target/local-name()"/>
               <xsl:text/>. This is not correct.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="(@ref-type='fig') and ($target/local-name() != 'fig')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(@ref-type='fig') and ($target/local-name() != 'fig')">
            <xsl:attribute name="id">fig-xref-target-test</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/asset-citations#fig-xref-target-test</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[fig-xref-target-test] xref with @ref-type='<xsl:text/>
               <xsl:value-of select="@ref-type"/>
               <xsl:text/>' points to <xsl:text/>
               <xsl:value-of select="$target/local-name()"/>
               <xsl:text/>. This is not correct.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="(@ref-type='video') and (($target/local-name() != 'media') or not($target/@mimetype='video'))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(@ref-type='video') and (($target/local-name() != 'media') or not($target/@mimetype='video'))">
            <xsl:attribute name="id">vid-xref-target-test</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/asset-citations#vid-xref-target-test</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[vid-xref-target-test] xref with @ref-type='<xsl:text/>
               <xsl:value-of select="@ref-type"/>
               <xsl:text/>' must point to a media[@mimetype="video"] element. Either this links to the incorrect location or the xref/@ref-type is incorrect.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="(@ref-type='bibr') and ($target/local-name() != 'ref')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(@ref-type='bibr') and ($target/local-name() != 'ref')">
            <xsl:attribute name="id">bibr-xref-target-test</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[bibr-xref-target-test] xref with @ref-type='<xsl:text/>
               <xsl:value-of select="@ref-type"/>
               <xsl:text/>' points to <xsl:text/>
               <xsl:value-of select="$target/local-name()"/>
               <xsl:text/>. This is not correct.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="(@ref-type='supplementary-material') and ($target/local-name() != 'supplementary-material')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(@ref-type='supplementary-material') and ($target/local-name() != 'supplementary-material')">
            <xsl:attribute name="id">supplementary-material-xref-target-test</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/asset-citations#supplementary-material-xref-target-test</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[supplementary-material-xref-target-test] xref with @ref-type='<xsl:text/>
               <xsl:value-of select="@ref-type"/>
               <xsl:text/>' points to <xsl:text/>
               <xsl:value-of select="$target/local-name()"/>
               <xsl:text/>. This is not correct.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="(@ref-type='other') and not($target/local-name() = 'award-group')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(@ref-type='other') and not($target/local-name() = 'award-group')">
            <xsl:attribute name="id">other-xref-target-test</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/asset-citations#other-xref-target-test</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[other-xref-target-test] xref with @ref-type='<xsl:text/>
               <xsl:value-of select="@ref-type"/>
               <xsl:text/>' points to <xsl:text/>
               <xsl:value-of select="$target/local-name()"/>
               <xsl:text/>. This is not correct.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="(@ref-type='table') and ($target/local-name() != 'table-wrap') and ($target/local-name() != 'table')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(@ref-type='table') and ($target/local-name() != 'table-wrap') and ($target/local-name() != 'table')">
            <xsl:attribute name="id">table-xref-target-test</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/asset-citations#table-xref-target-test</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[table-xref-target-test] xref with @ref-type='<xsl:text/>
               <xsl:value-of select="@ref-type"/>
               <xsl:text/>' points to <xsl:text/>
               <xsl:value-of select="$target/local-name()"/>
               <xsl:text/>. This is not correct.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="(@ref-type='table-fn') and ($target/local-name() != 'fn')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(@ref-type='table-fn') and ($target/local-name() != 'fn')">
            <xsl:attribute name="id">table-fn-xref-target-test</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[table-fn-xref-target-test] xref with @ref-type='<xsl:text/>
               <xsl:value-of select="@ref-type"/>
               <xsl:text/>' points to <xsl:text/>
               <xsl:value-of select="$target/local-name()"/>
               <xsl:text/>. This is not correct.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="(@ref-type='box') and ($target/local-name() != 'boxed-text')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(@ref-type='box') and ($target/local-name() != 'boxed-text')">
            <xsl:attribute name="id">box-xref-target-test</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/asset-citations#box-xref-target-test</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[box-xref-target-test] xref with @ref-type='<xsl:text/>
               <xsl:value-of select="@ref-type"/>
               <xsl:text/>' points to <xsl:text/>
               <xsl:value-of select="$target/local-name()"/>
               <xsl:text/>. This is not correct.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="(@ref-type='sec') and ($target/local-name() != 'sec')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(@ref-type='sec') and ($target/local-name() != 'sec')">
            <xsl:attribute name="id">sec-xref-target-test</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[sec-xref-target-test] xref with @ref-type='<xsl:text/>
               <xsl:value-of select="@ref-type"/>
               <xsl:text/>' points to <xsl:text/>
               <xsl:value-of select="$target/local-name()"/>
               <xsl:text/>. This is not correct.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="(@ref-type='app') and ($target/local-name() != 'app')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(@ref-type='app') and ($target/local-name() != 'app')">
            <xsl:attribute name="id">app-xref-target-test</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[app-xref-target-test] xref with @ref-type='<xsl:text/>
               <xsl:value-of select="@ref-type"/>
               <xsl:text/>' points to <xsl:text/>
               <xsl:value-of select="$target/local-name()"/>
               <xsl:text/>. This is not correct.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="(@ref-type='decision-letter') and ($target/local-name() != 'sub-article')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(@ref-type='decision-letter') and ($target/local-name() != 'sub-article')">
            <xsl:attribute name="id">decision-letter-xref-target-test</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[decision-letter-xref-target-test] xref with @ref-type='<xsl:text/>
               <xsl:value-of select="@ref-type"/>
               <xsl:text/>' points to <xsl:text/>
               <xsl:value-of select="$target/local-name()"/>
               <xsl:text/>. This is not correct.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="(@ref-type='disp-formula') and ($target/local-name() != 'disp-formula')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(@ref-type='disp-formula') and ($target/local-name() != 'disp-formula')">
            <xsl:attribute name="id">disp-formula-xref-target-test</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/asset-citations#disp-formula-xref-target-test</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[disp-formula-xref-target-test] xref with @ref-type='<xsl:text/>
               <xsl:value-of select="@ref-type"/>
               <xsl:text/>' points to <xsl:text/>
               <xsl:value-of select="$target/local-name()"/>
               <xsl:text/>. This is not correct.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@ref-type = ('aff', 'fn', 'fig', 'video', 'bibr', 'supplementary-material', 'other', 'table', 'table-fn', 'box', 'sec', 'app', 'decision-letter', 'disp-formula')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@ref-type = ('aff', 'fn', 'fig', 'video', 'bibr', 'supplementary-material', 'other', 'table', 'table-fn', 'box', 'sec', 'app', 'decision-letter', 'disp-formula')">
               <xsl:attribute name="id">xref-ref-type-conformance</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[xref-ref-type-conformance] @ref-type='<xsl:text/>
                  <xsl:value-of select="@ref-type"/>
                  <xsl:text/>' is not allowed . The only allowed values are 'aff', 'fn', 'fig', 'video', 'bibr', 'supplementary-material', 'other', 'table', 'table-fn', 'box', 'sec', 'app', 'decision-letter', 'disp-formula'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="boolean($target) = false()">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="boolean($target) = false()">
            <xsl:attribute name="id">xref-target-conformance</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/asset-citations#xref-target-conformance</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[xref-target-conformance] xref with @ref-type='<xsl:text/>
               <xsl:value-of select="@ref-type"/>
               <xsl:text/>' points to an element with an @id='<xsl:text/>
               <xsl:value-of select="$rid"/>
               <xsl:text/>', but no such element exists.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M164"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M164"/>
   <xsl:template match="@*|node()" priority="-2" mode="M164">
      <xsl:apply-templates select="*" mode="M164"/>
   </xsl:template>

   <!--PATTERN body-xref-tests-pattern-->


	  <!--RULE body-xref-tests-->
   <xsl:template match="body//xref" priority="1000" mode="M165">

		<!--REPORT error-->
      <xsl:if test="not(child::*) and normalize-space(.)=''">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="not(child::*) and normalize-space(.)=''">
            <xsl:attribute name="id">empty-xref-test</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/asset-citations#empty-xref-test</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[empty-xref-test] Empty xref in the body is not allowed. Its position is here in the text - "<xsl:text/>
               <xsl:value-of select="concat(preceding-sibling::text()[1],'*Empty xref*',following-sibling::text()[1])"/>
               <xsl:text/>".</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="ends-with(.,';') or ends-with(.,'; ')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="ends-with(.,';') or ends-with(.,'; ')">
            <xsl:attribute name="id">semi-colon-xref-test</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/asset-citations#semi-colon-xref-test</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[semi-colon-xref-test] xref ends with semi-colon - '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>' - which is incorrect. The semi-colon should be placed after the link as 'normal' text.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M165"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M165"/>
   <xsl:template match="@*|node()" priority="-2" mode="M165">
      <xsl:apply-templates select="*" mode="M165"/>
   </xsl:template>

   <!--PATTERN ext-link-tests-pattern-->


	  <!--RULE ext-link-tests-->
   <xsl:template match="ext-link[@ext-link-type='uri']" priority="1000" mode="M166">
      <xsl:variable name="formatting-elems" select="('bold','fixed-case','italic','monospace','overline','overline-start','overline-end','roman','sans-serif','sc','strike','underline','underline-start','underline-end','ruby','sub','sup')"/>
      <xsl:variable name="parent" select="parent::*[1]/local-name()"/>
      <xsl:variable name="form-children" select="string-join(         for $x in child::* return if ($x/local-name()=$formatting-elems) then $x/local-name()         else ()         ,', ')"/>
      <xsl:variable name="non-form-children" select="string-join(         for $x in child::* return if ($x/local-name()=$formatting-elems) then ()         else ($x/local-name())         ,', ')"/>

		    <!--ASSERT warning-->
      <xsl:choose>
         <xsl:when test="matches(@xlink:href,'^https?:..(www\.)?[-a-zA-Z0-9@:%.,_\+~#=!]{1,256}\.[a-z]{2,6}([-a-zA-Z0-9@:;%,_\\(\)+.~#?!&amp;&lt;&gt;//=]*)$|^ftp://.|^tel:.|^mailto:.')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(@xlink:href,'^https?:..(www\.)?[-a-zA-Z0-9@:%.,_\+~#=!]{1,256}\.[a-z]{2,6}([-a-zA-Z0-9@:;%,_\\(\)+.~#?!&amp;&lt;&gt;//=]*)$|^ftp://.|^tel:.|^mailto:.')">
               <xsl:attribute name="id">url-conformance-test</xsl:attribute>
               <xsl:attribute name="role">warning</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[url-conformance-test] @xlink:href doesn't look like a URL - '<xsl:text/>
                  <xsl:value-of select="@xlink:href"/>
                  <xsl:text/>'. Is this correct?</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT warning-->
      <xsl:if test="matches(@xlink:href,'^(ftp|sftp)://\S+:\S+@')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(@xlink:href,'^(ftp|sftp)://\S+:\S+@')">
            <xsl:attribute name="id">ftp-credentials-flag</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[ftp-credentials-flag] @xlink:href contains what looks like a link to an FTP site which contains credentials (username and password) - '<xsl:text/>
               <xsl:value-of select="@xlink:href"/>
               <xsl:text/>'. If the link without credentials works (<xsl:text/>
               <xsl:value-of select="concat(substring-before(@xlink:href,'://'),'://',substring-after(@xlink:href,'@'))"/>
               <xsl:text/>), then please replace it with that and notify the authors that you have done so. If the link without credentials does not work, please query with the authors in order to obtain a link without credentials.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches(@xlink:href,'\.$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(@xlink:href,'\.$')">
            <xsl:attribute name="id">url-fullstop-report</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[url-fullstop-report] '<xsl:text/>
               <xsl:value-of select="@xlink:href"/>
               <xsl:text/>' - Link ends in a full stop which is incorrect.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches(@xlink:href,'[\p{Zs}]')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(@xlink:href,'[\p{Zs}]')">
            <xsl:attribute name="id">url-space-report</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[url-space-report] '<xsl:text/>
               <xsl:value-of select="@xlink:href"/>
               <xsl:text/>' - Link contains a space which is incorrect.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="(matches(.,'^https?:..(www\.)?[-a-zA-Z0-9@:%.,_\+~#=]{2,256}\.[a-z]{2,6}([-a-zA-Z0-9@:%,_\+.~#?&amp;//=]*)$|^ftp://.|^git://.|^tel:.|^mailto:.') and $parent = $formatting-elems)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(matches(.,'^https?:..(www\.)?[-a-zA-Z0-9@:%.,_\+~#=]{2,256}\.[a-z]{2,6}([-a-zA-Z0-9@:%,_\+.~#?&amp;//=]*)$|^ftp://.|^git://.|^tel:.|^mailto:.') and $parent = $formatting-elems)">
            <xsl:attribute name="id">ext-link-parent-test</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[ext-link-parent-test] ext-link - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> - has a formatting parent element - <xsl:text/>
               <xsl:value-of select="$parent"/>
               <xsl:text/> - which almost certainly unnecessary.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="(matches(.,'^https?:..(www\.)?[-a-zA-Z0-9@:%.,_\+~#=]{2,256}\.[a-z]{2,6}([-a-zA-Z0-9@:%,_\+.~#?&amp;//=]*)$|^ftp://.|^git://.|^tel:.|^mailto:.') and ($form-children!=''))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(matches(.,'^https?:..(www\.)?[-a-zA-Z0-9@:%.,_\+~#=]{2,256}\.[a-z]{2,6}([-a-zA-Z0-9@:%,_\+.~#?&amp;//=]*)$|^ftp://.|^git://.|^tel:.|^mailto:.') and ($form-children!=''))">
            <xsl:attribute name="id">ext-link-child-test</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[ext-link-child-test] ext-link - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> - has a formatting child element - <xsl:text/>
               <xsl:value-of select="$form-children"/>
               <xsl:text/> - which is not correct.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="$non-form-children=''"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="$non-form-children=''">
               <xsl:attribute name="id">ext-link-child-test-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[ext-link-child-test-2] ext-link - <xsl:text/>
                  <xsl:value-of select="."/>
                  <xsl:text/> - has a non-formatting child element - <xsl:text/>
                  <xsl:value-of select="$non-form-children"/>
                  <xsl:text/> - which is not correct.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="contains(.,'copy archived')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'copy archived')">
            <xsl:attribute name="id">ext-link-child-test-3</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/toolkit/archiving-code#ext-link-child-test-3</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[ext-link-child-test-3] ext-link - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> - contains the phrase 'copy archived', which is incorrect.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,'^[Dd][Oo][Ii]:|^[Dd][Oo][Ii]\p{Zs}')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'^[Dd][Oo][Ii]:|^[Dd][Oo][Ii]\p{Zs}')">
            <xsl:attribute name="id">ext-link-child-test-4</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[ext-link-child-test-4] ext-link text - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> - appears to start with the string 'Doi:' or 'Doi ' (or similar), which is unnecessary.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(@xlink:href,'datadryad.org/review?')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(@xlink:href,'datadryad.org/review?')">
            <xsl:attribute name="id">ext-link-child-test-5</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/data-availability#ext-link-child-test-5</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[ext-link-child-test-5] ext-link looks like it points to a review dryad dataset - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>. Should it be updated?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="(.!=@xlink:href) and matches(.,'https?:|ftp:|www\.')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(.!=@xlink:href) and matches(.,'https?:|ftp:|www\.')">
            <xsl:attribute name="id">ext-link-text</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[ext-link-text] The text for a URL is '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>' (which looks like a URL), but it is not the same as the actual embedded link, which is '<xsl:text/>
               <xsl:value-of select="@xlink:href"/>
               <xsl:text/>'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M166"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M166"/>
   <xsl:template match="@*|node()" priority="-2" mode="M166">
      <xsl:apply-templates select="*" mode="M166"/>
   </xsl:template>

   <!--PATTERN das-software-heritage-tests-pattern-->


	  <!--RULE das-software-heritage-tests-->
   <xsl:template match="sec[@sec-type='data-availability']//ext-link[contains(@xlink:href,'softwareheritage')]" priority="1000" mode="M167">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="(matches(@xlink:href,'.*swh:.:dir.*origin=.*visit=.*anchor=.*') and . = replace(substring-after(@xlink:href,'anchor='),'/$',''))"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(matches(@xlink:href,'.*swh:.:dir.*origin=.*visit=.*anchor=.*') and . = replace(substring-after(@xlink:href,'anchor='),'/$',''))">
               <xsl:attribute name="id">software-heritage-test-1</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/toolkit/archiving-code#software-heritage-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[software-heritage-test-1] Software heritage links in the data availability statement must be the full contextual link, with the revision SWHID as the text of the link for Kriya 2. '<xsl:text/>
                  <xsl:value-of select="."/>
                  <xsl:text/>' is not either of these.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M167"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M167"/>
   <xsl:template match="@*|node()" priority="-2" mode="M167">
      <xsl:apply-templates select="*" mode="M167"/>
   </xsl:template>

   <!--PATTERN software-heritage-tests-pattern-->


	  <!--RULE software-heritage-tests-->
   <xsl:template match="ext-link[contains(@xlink:href,'softwareheritage')]" priority="1000" mode="M168">
      <xsl:variable name="origin" select="lower-case(substring-before(substring-after(@xlink:href,'origin='),';'))"/>

		    <!--REPORT error-->
      <xsl:if test="(ancestor::body or ancestor::ref) and not(matches(@xlink:href,'.*swh:.:dir.*origin=.*visit=.*anchor=.*'))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(ancestor::body or ancestor::ref) and not(matches(@xlink:href,'.*swh:.:dir.*origin=.*visit=.*anchor=.*'))">
            <xsl:attribute name="id">software-heritage-test-2</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/toolkit/archiving-code#software-heritage-test-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[software-heritage-test-2] Software heritage links in the main text or references must be the directory link with contextual information. '<xsl:text/>
               <xsl:value-of select="@xlink:href"/>
               <xsl:text/>' is not a directory link with contextual information.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="ancestor::body and matches(@xlink:href,'.*swh:.:dir.*origin=.*visit=.*anchor=.*') and (. != replace(substring-after(@xlink:href,'anchor='),'/$',''))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="ancestor::body and matches(@xlink:href,'.*swh:.:dir.*origin=.*visit=.*anchor=.*') and (. != replace(substring-after(@xlink:href,'anchor='),'/$',''))">
            <xsl:attribute name="id">software-heritage-test-3</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/toolkit/archiving-code#software-heritage-test-3</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[software-heritage-test-3] The text for Software heritage links in the main text must be the revision SWHID without contextual information. '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>' is not. Based on the link itself, the text that is embedded should be '<xsl:text/>
               <xsl:value-of select="replace(substring-after(@xlink:href,'anchor='),'/$','')"/>
               <xsl:text/>'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="ancestor::body and not(some $x in preceding-sibling::ext-link[position() le 3] satisfies replace(lower-case($x/@xlink:href),'/$','') = $origin)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="ancestor::body and not(some $x in preceding-sibling::ext-link[position() le 3] satisfies replace(lower-case($x/@xlink:href),'/$','') = $origin)">
            <xsl:attribute name="id">software-heritage-test-4</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/toolkit/archiving-code#software-heritage-test-4</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[software-heritage-test-4] A Software heritage link must follow the original link for the software. The Software heritage link with the text '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>' has '<xsl:text/>
               <xsl:value-of select="$origin"/>
               <xsl:text/>' as its origin URL, but there is no preceding link with that same URL.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="contains(@xlink:href,'[…]')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(@xlink:href,'[…]')">
            <xsl:attribute name="id">software-heritage-test-5</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/toolkit/archiving-code#software-heritage-test-5</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[software-heritage-test-5] A Software heritage link contains '[…]', meaning that the link has been copied incorrectly (it is truncated, and cannot be followed).</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M168"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M168"/>
   <xsl:template match="@*|node()" priority="-2" mode="M168">
      <xsl:apply-templates select="*" mode="M168"/>
   </xsl:template>

   <!--PATTERN ext-link-tests-2-pattern-->


	  <!--RULE ext-link-tests-2-->
   <xsl:template match="ext-link[@ext-link-type='uri' and not(ancestor::sec[@sec-type='data-availability']) and not(parent::element-citation) and not(ancestor::table-wrap) and string-length(.) gt 59]" priority="1000" mode="M169">

		<!--REPORT info-->
      <xsl:if test=". = @xlink:href">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test=". = @xlink:href">
            <xsl:attribute name="id">ext-link-length</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[ext-link-length] Consider embedding long URLs in text instead of displaying in full, where appropriate. This is a very long URL - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M169"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M169"/>
   <xsl:template match="@*|node()" priority="-2" mode="M169">
      <xsl:apply-templates select="*" mode="M169"/>
   </xsl:template>

   <!--PATTERN fig-group-tests-pattern-->


	  <!--RULE fig-group-tests-->
   <xsl:template match="fig-group" priority="1000" mode="M170">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(child::fig[not(@specific-use='child-fig')]) = 1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(child::fig[not(@specific-use='child-fig')]) = 1">
               <xsl:attribute name="id">fig-group-test-1</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/figures#fig-group-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[fig-group-test-1] fig-group must have one and only one main figure.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="not(child::fig[@specific-use='child-fig']) and not(descendant::media[@mimetype='video'])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="not(child::fig[@specific-use='child-fig']) and not(descendant::media[@mimetype='video'])">
            <xsl:attribute name="id">fig-group-test-2</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/figures#fig-group-test-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[fig-group-test-2] fig-group does not contain a figure supplement or a figure-level video, which must be incorrect.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M170"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M170"/>
   <xsl:template match="@*|node()" priority="-2" mode="M170">
      <xsl:apply-templates select="*" mode="M170"/>
   </xsl:template>

   <!--PATTERN fig-group-child-tests-pattern-->


	  <!--RULE fig-group-child-tests-->
   <xsl:template match="fig-group/*" priority="1000" mode="M171">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="local-name() = ('fig','media')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="local-name() = ('fig','media')">
               <xsl:attribute name="id">fig-group-child-test-1</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/figures#fig-group-child-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[fig-group-child-test-1] <xsl:text/>
                  <xsl:value-of select="name(.)"/>
                  <xsl:text/> is not allowed as a child of fig-group.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="(local-name() = 'media') and not(@mimetype='video')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(local-name() = 'media') and not(@mimetype='video')">
            <xsl:attribute name="id">fig-group-child-test-2</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/figures#fig-group-child-test-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[fig-group-child-test-2] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> which is a child of fig-group, must have an @mimetype='video' - i.e. only video type media is allowed as a child of fig-group.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M171"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M171"/>
   <xsl:template match="@*|node()" priority="-2" mode="M171">
      <xsl:apply-templates select="*" mode="M171"/>
   </xsl:template>

   <!--PATTERN fig-tests-pattern-->


	  <!--RULE fig-tests-->
   <xsl:template match="fig[not(ancestor::sub-article)]" priority="1000" mode="M172">
      <xsl:variable name="article-type" select="ancestor::article/@article-type"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@position"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@position">
               <xsl:attribute name="id">fig-test-2</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/figures#fig-test-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[fig-test-2] fig must have a @position.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="not($article-type = ($features-article-types,$notice-article-types)) and not(label)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="not($article-type = ($features-article-types,$notice-article-types)) and not(label)">
            <xsl:attribute name="id">fig-test-3</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/figures#fig-test-3</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[fig-test-3] fig must have a label.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="($article-type = $features-article-types) and not(label)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="($article-type = $features-article-types) and not(label)">
            <xsl:attribute name="id">feat-fig-test-3</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/figures#feat-fig-test-3</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[feat-fig-test-3] fig doesn't have a label. Is this correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="not($article-type = ('discussion',$notice-article-types)) and not(caption)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="not($article-type = ('discussion',$notice-article-types)) and not(caption)">
            <xsl:attribute name="id">final-fig-test-4</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/figures#final-fig-test-4</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[final-fig-test-4] <xsl:text/>
               <xsl:value-of select="label"/>
               <xsl:text/> has no title or caption (caption element).</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="not($article-type = ('discussion',$notice-article-types)) and not(caption/title)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="not($article-type = ('discussion',$notice-article-types)) and not(caption/title)">
            <xsl:attribute name="id">final-fig-test-5</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/figures#final-fig-test-5</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[final-fig-test-5] fig caption must have a title.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="not($article-type = $notice-article-types) and (matches(@id,'^fig[0-9]{1,3}$') and not(caption/p))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="not($article-type = $notice-article-types) and (matches(@id,'^fig[0-9]{1,3}$') and not(caption/p))">
            <xsl:attribute name="id">fig-test-6</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/figures#fig-test-6</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[fig-test-6] Figure does not have a legend, which is very unorthodox. Is this correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="graphic"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="graphic">
               <xsl:attribute name="id">final-fig-test-7</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/figures#final-fig-test-7</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[final-fig-test-7] fig must have a graphic.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M172"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M172"/>
   <xsl:template match="@*|node()" priority="-2" mode="M172">
      <xsl:apply-templates select="*" mode="M172"/>
   </xsl:template>

   <!--PATTERN ar-fig-tests-pattern-->


	  <!--RULE ar-fig-tests-->
   <xsl:template match="fig[ancestor::sub-article[@article-type='reply']]" priority="1000" mode="M173">
      <xsl:variable name="article-type" select="ancestor::article/@article-type"/>
      <xsl:variable name="count" select="count(ancestor::body//fig)"/>
      <xsl:variable name="pos" select="$count - count(following::fig)"/>
      <xsl:variable name="no" select="substring-after(@id,'fig')"/>

		    <!--REPORT error-->
      <xsl:if test="if ($article-type = ($features-article-types,$notice-article-types)) then ()         else not(label)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="if ($article-type = ($features-article-types,$notice-article-types)) then () else not(label)">
            <xsl:attribute name="id">ar-fig-test-2</xsl:attribute>
            <xsl:attribute name="flag">dl-ar</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/figures#ar-fig-test-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[ar-fig-test-2] Author Response fig must have a label.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="graphic"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="graphic">
               <xsl:attribute name="id">final-ar-fig-test-3</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/figures#final-ar-fig-test-3</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[final-ar-fig-test-3] Author Response fig must have a graphic.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="$no = string($pos)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="$no = string($pos)">
               <xsl:attribute name="id">final-ar-fig-position-test</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/figures#final-ar-fig-position-test</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[final-ar-fig-position-test] <xsl:text/>
                  <xsl:value-of select="label"/>
                  <xsl:text/> does not appear in sequence which is incorrect. Relative to the other AR images it is placed in position <xsl:text/>
                  <xsl:value-of select="$pos"/>
                  <xsl:text/>.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M173"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M173"/>
   <xsl:template match="@*|node()" priority="-2" mode="M173">
      <xsl:apply-templates select="*" mode="M173"/>
   </xsl:template>

   <!--PATTERN graphic-tests-pattern-->


	  <!--RULE graphic-tests-->
   <xsl:template match="graphic|inline-graphic" priority="1000" mode="M174">
      <xsl:variable name="link" select="@xlink:href"/>
      <xsl:variable name="file" select="lower-case($link)"/>

		    <!--REPORT error-->
      <xsl:if test="contains(@mime-subtype,'tiff') and not(matches($file,'\.tif$|\.tiff$'))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(@mime-subtype,'tiff') and not(matches($file,'\.tif$|\.tiff$'))">
            <xsl:attribute name="id">graphic-test-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[graphic-test-1] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> has tif mime-subtype but filename does not end with '.tif' or '.tiff'. This cannot be correct.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="contains(@mime-subtype,'postscript') and not(ends-with($file,'.eps'))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(@mime-subtype,'postscript') and not(ends-with($file,'.eps'))">
            <xsl:attribute name="id">graphic-test-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[graphic-test-2] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> has postscript mime-subtype but filename does not end with '.eps'. This cannot be correct.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="contains(@mime-subtype,'jpeg') and not(matches($file,'\.jpg$|\.jpeg$'))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(@mime-subtype,'jpeg') and not(matches($file,'\.jpg$|\.jpeg$'))">
            <xsl:attribute name="id">graphic-test-3</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[graphic-test-3] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> has jpeg mime-subtype but filename does not end with '.jpg' or '.jpeg'. This cannot be correct.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@mimetype=('image','application')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@mimetype=('image','application')">
               <xsl:attribute name="id">graphic-test-4</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[graphic-test-4] <xsl:text/>
                  <xsl:value-of select="name(.)"/>
                  <xsl:text/> must have a @mimetype='image' or 'application'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(@xlink:href,'\.[\p{L}\p{N}]{1,6}$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(@xlink:href,'\.[\p{L}\p{N}]{1,6}$')">
               <xsl:attribute name="id">graphic-test-5</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[graphic-test-5] <xsl:text/>
                  <xsl:value-of select="name(.)"/>
                  <xsl:text/> must have an @xlink:href which contains a file reference.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="preceding::graphic/@xlink:href = $link">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="preceding::graphic/@xlink:href = $link">
            <xsl:attribute name="id">graphic-test-6</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[graphic-test-6] Image file for <xsl:text/>
               <xsl:value-of select="if (name()='inline-graphic') then 'inline-graphic' else replace(parent::fig/label,'\.','')"/>
               <xsl:text/> (<xsl:text/>
               <xsl:value-of select="$link"/>
               <xsl:text/>) is the same as the one used for <xsl:text/>
               <xsl:value-of select="replace(preceding::graphic[@xlink:href=$link][1]/parent::fig/label,'\.','')"/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="contains($link,'&amp;')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains($link,'&amp;')">
            <xsl:attribute name="id">graphic-test-8</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[graphic-test-8] Image file-name for <xsl:text/>
               <xsl:value-of select="if (name()='inline-graphic') then 'inline-graphic' else replace(parent::fig/label,'\.','')"/>
               <xsl:text/> contains an ampersand - <xsl:text/>
               <xsl:value-of select="tokenize($link,'/')[last()]"/>
               <xsl:text/>. Please rename the file so that this ampersand is removed.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M174"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M174"/>
   <xsl:template match="@*|node()" priority="-2" mode="M174">
      <xsl:apply-templates select="*" mode="M174"/>
   </xsl:template>

   <!--PATTERN media-tests-pattern-->


	  <!--RULE media-tests-->
   <xsl:template match="media" priority="1000" mode="M175">
      <xsl:variable name="file" select="@mime-subtype"/>
      <xsl:variable name="link" select="@xlink:href"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@mimetype=('video','application','text','image', 'audio','chemical')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@mimetype=('video','application','text','image', 'audio','chemical')">
               <xsl:attribute name="id">media-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[media-test-1] media must have @mimetype, the value of which has to be one of 'video','application','text','image', or 'audio', 'chemical'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@mime-subtype"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@mime-subtype">
               <xsl:attribute name="id">media-test-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[media-test-2] media must have @mime-subtype.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(@xlink:href,'\.[\p{L}\p{N}]{1,15}$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(@xlink:href,'\.[\p{L}\p{N}]{1,15}$')">
               <xsl:attribute name="id">media-test-3</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[media-test-3] media must have an @xlink:href which contains a file reference.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT warning-->
      <xsl:if test="if ($file='octet-stream') then ()         else if ($file = 'msword') then not(matches(@xlink:href,'\.doc[x]?$'))         else if ($file = 'gif') then not(matches(@xlink:href,'\.mp4$|\.gif$'))         else if ($file = 'excel') then not(matches(@xlink:href,'\.xl[s|t|m][x|m|b]?$'))         else if ($file='x-m') then not(ends-with(@xlink:href,'.m'))         else if ($file='tab-separated-values') then not(ends-with(@xlink:href,'.tsv'))         else if ($file='jpeg') then not(matches(@xlink:href,'\.[Jj][Pp][Gg]$'))         else if ($file='tiff') then not(matches(@xlink:href,'\.tiff?$'))         else if ($file='postscript') then not(matches(@xlink:href,'\.[Aa][Ii]$|\.[Pp][Ss]$'))         else if ($file='x-tex') then not(ends-with(@xlink:href,'.tex'))         else if ($file='x-gzip') then not(ends-with(@xlink:href,'.gz'))         else if ($file='html') then not(ends-with(@xlink:href,'.html'))         else if ($file='x-wav') then not(ends-with(@xlink:href,'.wav'))         else if ($file='x-aiff') then not(ends-with(@xlink:href,'.aiff'))         else if ($file='x-macbinary') then not(ends-with(@xlink:href,'.bin'))         else if ($file='x-pdb') then not(ends-with(@xlink:href,'.pdb'))         else if ($file='fasta') then not(ends-with(@xlink:href,'.fasta'))         else if (@mimetype='text') then not(matches(@xlink:href,'\.txt$|\.py$|\.xml$|\.sh$|\.rtf$|\.c$|\.for$|\.pl$'))         else not(ends-with(@xlink:href,concat('.',$file)))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="if ($file='octet-stream') then () else if ($file = 'msword') then not(matches(@xlink:href,'\.doc[x]?$')) else if ($file = 'gif') then not(matches(@xlink:href,'\.mp4$|\.gif$')) else if ($file = 'excel') then not(matches(@xlink:href,'\.xl[s|t|m][x|m|b]?$')) else if ($file='x-m') then not(ends-with(@xlink:href,'.m')) else if ($file='tab-separated-values') then not(ends-with(@xlink:href,'.tsv')) else if ($file='jpeg') then not(matches(@xlink:href,'\.[Jj][Pp][Gg]$')) else if ($file='tiff') then not(matches(@xlink:href,'\.tiff?$')) else if ($file='postscript') then not(matches(@xlink:href,'\.[Aa][Ii]$|\.[Pp][Ss]$')) else if ($file='x-tex') then not(ends-with(@xlink:href,'.tex')) else if ($file='x-gzip') then not(ends-with(@xlink:href,'.gz')) else if ($file='html') then not(ends-with(@xlink:href,'.html')) else if ($file='x-wav') then not(ends-with(@xlink:href,'.wav')) else if ($file='x-aiff') then not(ends-with(@xlink:href,'.aiff')) else if ($file='x-macbinary') then not(ends-with(@xlink:href,'.bin')) else if ($file='x-pdb') then not(ends-with(@xlink:href,'.pdb')) else if ($file='fasta') then not(ends-with(@xlink:href,'.fasta')) else if (@mimetype='text') then not(matches(@xlink:href,'\.txt$|\.py$|\.xml$|\.sh$|\.rtf$|\.c$|\.for$|\.pl$')) else not(ends-with(@xlink:href,concat('.',$file)))">
            <xsl:attribute name="id">media-test-4</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[media-test-4] media must have a file reference in @xlink:href which is equivalent to its @mime-subtype.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches(label[1],'[Aa]nimation') and not(@mime-subtype='gif')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(label[1],'[Aa]nimation') and not(@mime-subtype='gif')">
            <xsl:attribute name="id">media-test-5</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[media-test-5] <xsl:text/>
               <xsl:value-of select="label"/>
               <xsl:text/> media with animation type label must have a @mime-subtype='gif'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(@xlink:href,'\.doc[x]?$|\.pdf$|\.xlsx$|\.xml$|\.xlsx$|\.mp4$|\.gif$')  and (@mime-subtype='octet-stream')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(@xlink:href,'\.doc[x]?$|\.pdf$|\.xlsx$|\.xml$|\.xlsx$|\.mp4$|\.gif$') and (@mime-subtype='octet-stream')">
            <xsl:attribute name="id">media-test-6</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[media-test-6] media has @mime-subtype='octet-stream', but the file reference ends with a recognised mime-type. Is this correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="if (child::label) then not(matches(label[1],'^Video \d{1,4}\.$|^Figure \d{1,4}—video \d{1,4}\.$|^Figure \d{1,4}—animation \d{1,4}\.$|^Table \d{1,4}—video \d{1,4}\.$|^Appendix \d{1,4}—video \d{1,4}\.$|^Appendix \d{1,4}—figure \d{1,4}—video \d{1,4}\.$|^Appendix \d{1,4}—figure \d{1,4}—animation \d{1,4}\.$|^Animation \d{1,4}\.$|^Decision letter video \d{1,4}\.$|^Author response video \d{1,4}\.$'))         else ()">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="if (child::label) then not(matches(label[1],'^Video \d{1,4}\.$|^Figure \d{1,4}—video \d{1,4}\.$|^Figure \d{1,4}—animation \d{1,4}\.$|^Table \d{1,4}—video \d{1,4}\.$|^Appendix \d{1,4}—video \d{1,4}\.$|^Appendix \d{1,4}—figure \d{1,4}—video \d{1,4}\.$|^Appendix \d{1,4}—figure \d{1,4}—animation \d{1,4}\.$|^Animation \d{1,4}\.$|^Decision letter video \d{1,4}\.$|^Author response video \d{1,4}\.$')) else ()">
            <xsl:attribute name="id">media-test-7</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[media-test-7] media label does not conform to eLife's usual label format - <xsl:text/>
               <xsl:value-of select="label[1]"/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="if (ancestor::sec[@sec-type='supplementary-material']) then ()         else if (@mimetype='video') then (not(label))         else ()">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="if (ancestor::sec[@sec-type='supplementary-material']) then () else if (@mimetype='video') then (not(label)) else ()">
            <xsl:attribute name="id">media-test-8</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[media-test-8] video does not contain a label, which is incorrect.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches(lower-case(@xlink:href),'\.xml$|\.html$|\.json$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(lower-case(@xlink:href),'\.xml$|\.html$|\.json$')">
            <xsl:attribute name="id">media-test-9</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[media-test-9] media points to an xml, html or json file. This cannot be handled by Kriya currently. Please download the file, place it in a zip and replace the file with this zip (otherwise the file will be erroneously overwritten before publication).</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="preceding::media/@xlink:href = $link">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="preceding::media/@xlink:href = $link">
            <xsl:attribute name="id">media-test-10</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[media-test-10] Media file for <xsl:text/>
               <xsl:value-of select="if (@mimetype='video') then replace(label,'\.','') else replace(parent::*/label,'\.','')"/>
               <xsl:text/> (<xsl:text/>
               <xsl:value-of select="$link"/>
               <xsl:text/>) is the same as the one used for <xsl:text/>
               <xsl:value-of select="if (preceding::media[@xlink:href=$link][1]/@mimetype='video') then replace(preceding::media[@xlink:href=$link][1]/label,'\.','')         else replace(preceding::media[@xlink:href=$link][1]/parent::*/label,'\.','')"/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="contains($link,'&amp;')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains($link,'&amp;')">
            <xsl:attribute name="id">media-test-11</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[media-test-11] Media filename for <xsl:text/>
               <xsl:value-of select="if (@mimetype='video') then replace(label,'\.','') else replace(parent::*/label,'\.','')"/>
               <xsl:text/> contains an ampersand - <xsl:text/>
               <xsl:value-of select="tokenize($link,'/')[last()]"/>
               <xsl:text/>. Please rename the file so that this ampersand is removed.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="text()">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="text()">
            <xsl:attribute name="id">media-test-12</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[media-test-12] Media element cannot contain text. This one has <xsl:text/>
               <xsl:value-of select="string-join(text(),'')"/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="not(@mimetype='video') and *">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="not(@mimetype='video') and *">
            <xsl:attribute name="id">media-test-13</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[media-test-13] Media element that is not a mimetype="video" cannot contain elements. This one has the following element(s) <xsl:text/>
               <xsl:value-of select="string-join(*/name(),'; ')"/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M175"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M175"/>
   <xsl:template match="@*|node()" priority="-2" mode="M175">
      <xsl:apply-templates select="*" mode="M175"/>
   </xsl:template>

   <!--PATTERN file-extension-tests-pattern-->


	  <!--RULE file-extension-tests-->
   <xsl:template match="graphic[@xlink:href]|media[@xlink:href]" priority="1000" mode="M176">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(@xlink:href,'\.[a-z0-9]+$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(@xlink:href,'\.[a-z0-9]+$')">
               <xsl:attribute name="id">file-extension-conformance</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[file-extension-conformance] The file extenstion for a file must be in lower case. This <xsl:text/>
                  <xsl:value-of select="name(.)"/>
                  <xsl:text/> element has an xlink:href which does not end with a lowercase file extension (<xsl:text/>
                  <xsl:value-of select="tokenize(@xlink:href,'\.')[last()]"/>
                  <xsl:text/> in <xsl:text/>
                  <xsl:value-of select="@xlink:href"/>
                  <xsl:text/>).</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M176"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M176"/>
   <xsl:template match="@*|node()" priority="-2" mode="M176">
      <xsl:apply-templates select="*" mode="M176"/>
   </xsl:template>

   <!--PATTERN video-test-pattern-->


	  <!--RULE video-test-->
   <xsl:template match="media[child::label]" priority="1000" mode="M177">

		<!--REPORT error-->
      <xsl:if test="not(ancestor::sub-article) and not(caption/title)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="not(ancestor::sub-article) and not(caption/title)">
            <xsl:attribute name="id">final-video-title</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[final-video-title] <xsl:text/>
               <xsl:value-of select="replace(label,'\.$,','')"/>
               <xsl:text/> does not have a title, which is incorrect.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="ancestor::sub-article and not(caption/title)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="ancestor::sub-article and not(caption/title)">
            <xsl:attribute name="id">final-video-title-sa</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[final-video-title-sa] <xsl:text/>
               <xsl:value-of select="replace(label,'\.$,','')"/>
               <xsl:text/> does not have a title, which is incorrect.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M177"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M177"/>
   <xsl:template match="@*|node()" priority="-2" mode="M177">
      <xsl:apply-templates select="*" mode="M177"/>
   </xsl:template>

   <!--PATTERN supplementary-material-tests-pattern-->


	  <!--RULE supplementary-material-tests-->
   <xsl:template match="supplementary-material" priority="1000" mode="M178">
      <xsl:variable name="link" select="media[1]/@xlink:href"/>
      <xsl:variable name="file" select="if (contains($link,'.')) then lower-case(tokenize($link,'\.')[last()]) else ()"/>
      <xsl:variable name="code-files" select="('m','py','lib','jl','c','sh','for','cpproj','ipynb','mph','cc','rmd','nlogo','stan','wrl','pl','r','fas','ijm','llb','ipf','mdl','h')"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="label"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="label">
               <xsl:attribute name="id">supplementary-material-test-1</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/additional-files#supplementary-material-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[supplementary-material-test-1] supplementary-material must have a label.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT warning-->
      <xsl:if test="not(matches(label[1],'Transparent reporting form|MDAR checklist')) and not(caption)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="not(matches(label[1],'Transparent reporting form|MDAR checklist')) and not(caption)">
            <xsl:attribute name="id">supplementary-material-test-2</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/additional-files#supplementary-material-test-2</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[supplementary-material-test-2] <xsl:text/>
               <xsl:value-of select="label"/>
               <xsl:text/> is missing a title/caption - is this correct? (supplementary-material should have a child caption.)</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="if (caption) then not(caption/title)         else ()">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="if (caption) then not(caption/title) else ()">
            <xsl:attribute name="id">final-supplementary-material-test-3</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/additional-files#final-supplementary-material-test-3</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[final-supplementary-material-test-3] <xsl:text/>
               <xsl:value-of select="label"/>
               <xsl:text/> doesn't have a title. Is this correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="media"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="media">
               <xsl:attribute name="id">final-supplementary-material-test-5</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/additional-files#final-supplementary-material-test-5</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[final-supplementary-material-test-5] <xsl:text/>
                  <xsl:value-of select="label"/>
                  <xsl:text/> is missing a file (supplementary-material must have a media).</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(label[1],'^MDAR checklist$|^Transparent reporting form$|^Figure \d{1,4}—source data \d{1,4}\.$|^Figure \d{1,4}—figure supplement \d{1,4}—source data \d{1,4}\.$|^Table \d{1,4}—source data \d{1,4}\.$|^Video \d{1,4}—source data \d{1,4}\.$|^Figure \d{1,4}—source code \d{1,4}\.$|^Figure \d{1,4}—figure supplement \d{1,4}—source code \d{1,4}\.$|^Table \d{1,4}—source code \d{1,4}\.$|^Video \d{1,4}—source code \d{1,4}\.$|^Supplementary file \d{1,4}\.$|^Source data \d{1,4}\.$|^Source code \d{1,4}\.$|^Reporting standard \d{1,4}\.$|^Appendix \d{1,3}—figure \d{1,4}—source data \d{1,4}\.$|^Appendix \d{1,3}—figure \d{1,4}—figure supplement \d{1,4}—source data \d{1,4}\.$|^Appendix \d{1,3}—table \d{1,4}—source data \d{1,4}\.$|^Appendix \d{1,3}—video \d{1,4}—source data \d{1,4}\.$|^Appendix \d{1,3}—figure \d{1,4}—source code \d{1,4}\.$|^Appendix \d{1,3}—figure \d{1,4}—figure supplement \d{1,4}—source code \d{1,4}\.$|^Appendix \d{1,3}—table \d{1,4}—source code \d{1,4}\.$|^Appendix \d{1,3}—video \d{1,4}—source code \d{1,4}\.$|^Audio file \d{1,4}\.$|^Box \d{1,3}—figure \d{1,4}—source data \d{1,4}\.$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(label[1],'^MDAR checklist$|^Transparent reporting form$|^Figure \d{1,4}—source data \d{1,4}\.$|^Figure \d{1,4}—figure supplement \d{1,4}—source data \d{1,4}\.$|^Table \d{1,4}—source data \d{1,4}\.$|^Video \d{1,4}—source data \d{1,4}\.$|^Figure \d{1,4}—source code \d{1,4}\.$|^Figure \d{1,4}—figure supplement \d{1,4}—source code \d{1,4}\.$|^Table \d{1,4}—source code \d{1,4}\.$|^Video \d{1,4}—source code \d{1,4}\.$|^Supplementary file \d{1,4}\.$|^Source data \d{1,4}\.$|^Source code \d{1,4}\.$|^Reporting standard \d{1,4}\.$|^Appendix \d{1,3}—figure \d{1,4}—source data \d{1,4}\.$|^Appendix \d{1,3}—figure \d{1,4}—figure supplement \d{1,4}—source data \d{1,4}\.$|^Appendix \d{1,3}—table \d{1,4}—source data \d{1,4}\.$|^Appendix \d{1,3}—video \d{1,4}—source data \d{1,4}\.$|^Appendix \d{1,3}—figure \d{1,4}—source code \d{1,4}\.$|^Appendix \d{1,3}—figure \d{1,4}—figure supplement \d{1,4}—source code \d{1,4}\.$|^Appendix \d{1,3}—table \d{1,4}—source code \d{1,4}\.$|^Appendix \d{1,3}—video \d{1,4}—source code \d{1,4}\.$|^Audio file \d{1,4}\.$|^Box \d{1,3}—figure \d{1,4}—source data \d{1,4}\.$')">
               <xsl:attribute name="id">supplementary-material-test-6</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/additional-files#supplementary-material-test-6</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[supplementary-material-test-6] supplementary-material label (<xsl:text/>
                  <xsl:value-of select="label"/>
                  <xsl:text/>) does not conform to eLife's usual label format.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="(ancestor::sec[@sec-type='supplementary-material']) and (media[@mimetype='video'])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(ancestor::sec[@sec-type='supplementary-material']) and (media[@mimetype='video'])">
            <xsl:attribute name="id">supplementary-material-test-7</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/additional-files#supplementary-material-test-7</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[supplementary-material-test-7] supplementary-material in additional files sections cannot have a media element with the attribute mimetype='video'. This should be mimetype='application'</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches(label[1],'^MDAR checklist$|^Transparent reporting form$|^Supplementary file \d{1,4}\.$|^Source data \d{1,4}\.$|^Source code \d{1,4}\.$|^Reporting standard \d{1,4}\.$') and not(ancestor::sec[@sec-type='supplementary-material'])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(label[1],'^MDAR checklist$|^Transparent reporting form$|^Supplementary file \d{1,4}\.$|^Source data \d{1,4}\.$|^Source code \d{1,4}\.$|^Reporting standard \d{1,4}\.$') and not(ancestor::sec[@sec-type='supplementary-material'])">
            <xsl:attribute name="id">supplementary-material-test-8</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/additional-files#supplementary-material-test-8</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[supplementary-material-test-8] <xsl:text/>
               <xsl:value-of select="label"/>
               <xsl:text/> has an article level label but it is not captured in the additional files section - This must be incorrect.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="count(media) gt 1">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(media) gt 1">
            <xsl:attribute name="id">supplementary-material-test-9</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/additional-files#supplementary-material-test-9</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[supplementary-material-test-9] <xsl:text/>
               <xsl:value-of select="label"/>
               <xsl:text/> has <xsl:text/>
               <xsl:value-of select="count(media)"/>
               <xsl:text/> media elements which is incorrect.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(label[1],'^Reporting standard \d{1,4}\.$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(label[1],'^Reporting standard \d{1,4}\.$')">
            <xsl:attribute name="id">supplementary-material-test-10</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/additional-files#supplementary-material-test-10</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[supplementary-material-test-10] Article contains <xsl:text/>
               <xsl:value-of select="label"/>
               <xsl:text/> Please check with eLife - is this actually a reporting standard?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="($file = $code-files) and not(matches(label[1],'[Ss]ource code \d{1,4}\.$'))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="($file = $code-files) and not(matches(label[1],'[Ss]ource code \d{1,4}\.$'))">
            <xsl:attribute name="id">source-code-test-1</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/additional-files#source-code-test-1</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[source-code-test-1] <xsl:text/>
               <xsl:value-of select="label"/>
               <xsl:text/> has a file which looks like code - <xsl:text/>
               <xsl:value-of select="$link"/>
               <xsl:text/>, but it's not labelled as code.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(lower-case(caption[1]/title[1]),'key resource')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(lower-case(caption[1]/title[1]),'key resource')">
            <xsl:attribute name="id">supplementary-material-test-11</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/additional-files#supplementary-material-test-11</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[supplementary-material-test-11] <xsl:text/>
               <xsl:value-of select="if (self::*/label) then replace(label,'\.$','') else self::*/local-name()"/>
               <xsl:text/> has a title '<xsl:text/>
               <xsl:value-of select="caption[1]/title[1]"/>
               <xsl:text/>'. Is it a Key resources table? If so, it should be captured as a table in an appendix for the article.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(label[1],'ource code') and not(($file=('tar','gz','zip','tgz','rar')))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(label[1],'ource code') and not(($file=('tar','gz','zip','tgz','rar')))">
            <xsl:attribute name="id">source-code-test-2</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/additional-files#source-code-test-2</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[source-code-test-2] Source code files should always be zipped. The file type for <xsl:text/>
               <xsl:value-of select="if (self::*/label) then replace(label,'\.$','') else self::*/local-name()"/>
               <xsl:text/> is '<xsl:text/>
               <xsl:value-of select="$file"/>
               <xsl:text/>'. Please zip this file, and replace it with the zipped version.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="not(ancestor::article/@article-type='correction') and not(parent::p/parent::caption/parent::*[name()=('fig','table-wrap','media')]         or parent::sec[@sec-type='supplementary-material'])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="not(ancestor::article/@article-type='correction') and not(parent::p/parent::caption/parent::*[name()=('fig','table-wrap','media')] or parent::sec[@sec-type='supplementary-material'])">
            <xsl:attribute name="id">supp-mat-placement</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[supp-mat-placement] supplementary-material must be either a child of a caption p for a fig, table or video, or it must be plaed in the additional files section (sec[@sec-type='supplementary-material']). This one with the label <xsl:text/>
               <xsl:value-of select="label[1]"/>
               <xsl:text/> is not.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M178"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M178"/>
   <xsl:template match="@*|node()" priority="-2" mode="M178">
      <xsl:apply-templates select="*" mode="M178"/>
   </xsl:template>

   <!--PATTERN box-supp-tests-pattern-->


	  <!--RULE box-supp-tests-->
   <xsl:template match="article/body//boxed-text//fig[not(@specific-use='child-fig')]//supplementary-material/label" priority="1000" mode="M179">
      <xsl:variable name="fig-label" select="replace(ancestor::fig[1]/label,'\.$','')"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(.,concat('^',$fig-label,'—(source data \d|source code \d)\.$'))"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,concat('^',$fig-label,'—(source data \d|source code \d)\.$'))">
               <xsl:attribute name="id">box-fig-sup-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[box-fig-sup-test-1] label for supplementary-material for a fig inside boxed-text must begin with the label from its parent fig. '<xsl:text/>
                  <xsl:value-of select="."/>
                  <xsl:text/>' is not in one of the following formats: '<xsl:text/>
                  <xsl:value-of select="concat($fig-label,'—source data 0')"/>
                  <xsl:text/>' or '<xsl:text/>
                  <xsl:value-of select="concat($fig-label,'—source code 0')"/>
                  <xsl:text/>'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M179"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M179"/>
   <xsl:template match="@*|node()" priority="-2" mode="M179">
      <xsl:apply-templates select="*" mode="M179"/>
   </xsl:template>

   <!--PATTERN back-supplementary-file-tests-pattern-->


	  <!--RULE back-supplementary-file-tests-->
   <xsl:template match="sec[@sec-type='supplementary-material']/supplementary-material[contains(label[1],'upplementary file')]" priority="1000" mode="M180">
      <xsl:variable name="pos" select="count(parent::*/supplementary-material[contains(label[1],'upplementary file')]) - count(following::supplementary-material[contains(label[1],'upplementary file')])"/>
      <xsl:variable name="no" select="substring-after(@id,'supp')"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="string($pos) = $no"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="string($pos) = $no">
               <xsl:attribute name="id">back-supplementary-file-position</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/additional-files#back-supplementary-file-position</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[back-supplementary-file-position] <xsl:text/>
                  <xsl:value-of select="replace(label,'\.$','')"/>
                  <xsl:text/> id ends with <xsl:text/>
                  <xsl:value-of select="$no"/>
                  <xsl:text/>, but it is placed <xsl:text/>
                  <xsl:value-of select="e:get-ordinal($pos)"/>
                  <xsl:text/>. Either it is mislabelled, the id is incorrect, or it should be moved to a different position.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(@id,'^supp\d{1,2}$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(@id,'^supp\d{1,2}$')">
               <xsl:attribute name="id">back-supplementary-file-id</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/additional-files#back-supplementary-file-id</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[back-supplementary-file-id] The id (<xsl:text/>
                  <xsl:value-of select="@id"/>
                  <xsl:text/>) for <xsl:text/>
                  <xsl:value-of select="replace(label,'\.$','')"/>
                  <xsl:text/> is not in the correct format. Supplementary files need to have ids in the format 'supp0'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M180"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M180"/>
   <xsl:template match="@*|node()" priority="-2" mode="M180">
      <xsl:apply-templates select="*" mode="M180"/>
   </xsl:template>

   <!--PATTERN back-source-data-tests-pattern-->


	  <!--RULE back-source-data-tests-->
   <xsl:template match="sec[@sec-type='supplementary-material']/supplementary-material[contains(label[1],'ource data')]" priority="1000" mode="M181">
      <xsl:variable name="pos" select="count(parent::*/supplementary-material[contains(label[1],'ource data')]) - count(following-sibling::supplementary-material[contains(label[1],'ource data')])"/>
      <xsl:variable name="no" select="substring-after(@id,'sdata')"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="string($pos) = $no"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="string($pos) = $no">
               <xsl:attribute name="id">back-source-data-position</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/additional-files#back-source-data-position</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[back-source-data-position] <xsl:text/>
                  <xsl:value-of select="replace(label,'\.$','')"/>
                  <xsl:text/> id ends with <xsl:text/>
                  <xsl:value-of select="$no"/>
                  <xsl:text/>, but it is placed <xsl:text/>
                  <xsl:value-of select="e:get-ordinal($pos)"/>
                  <xsl:text/>. Either it is mislabelled, the id is incorrect, or it should be moved to a different position.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(@id,'^sdata\d{1,2}$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(@id,'^sdata\d{1,2}$')">
               <xsl:attribute name="id">back-source-data-id</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/additional-files#back-source-data-id</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[back-source-data-id] The id (<xsl:text/>
                  <xsl:value-of select="@id"/>
                  <xsl:text/>) for <xsl:text/>
                  <xsl:value-of select="replace(label,'\.$','')"/>
                  <xsl:text/> is not in the correct format. Source data need to have ids in the format 'sdata0'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M181"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M181"/>
   <xsl:template match="@*|node()" priority="-2" mode="M181">
      <xsl:apply-templates select="*" mode="M181"/>
   </xsl:template>

   <!--PATTERN back-source-code-tests-pattern-->


	  <!--RULE back-source-code-tests-->
   <xsl:template match="sec[@sec-type='supplementary-material']/supplementary-material[contains(label[1],'ource code')]" priority="1000" mode="M182">
      <xsl:variable name="pos" select="count(parent::*/supplementary-material[contains(label[1],'ource code')]) - count(following-sibling::supplementary-material[contains(label[1],'ource code')])"/>
      <xsl:variable name="no" select="substring-after(@id,'scode')"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="string($pos) = $no"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="string($pos) = $no">
               <xsl:attribute name="id">back-source-code-position</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/additional-files#back-source-code-position</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[back-source-code-position] <xsl:text/>
                  <xsl:value-of select="replace(label,'\.$','')"/>
                  <xsl:text/> id ends with <xsl:text/>
                  <xsl:value-of select="$no"/>
                  <xsl:text/>, but it is placed <xsl:text/>
                  <xsl:value-of select="e:get-ordinal($pos)"/>
                  <xsl:text/>. Either it is mislabelled, the id is incorrect, or it should be moved to a different position.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(@id,'^scode\d{1,2}$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(@id,'^scode\d{1,2}$')">
               <xsl:attribute name="id">back-source-code-id</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/additional-files#back-source-code-id</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[back-source-code-id] The id (<xsl:text/>
                  <xsl:value-of select="@id"/>
                  <xsl:text/>) for <xsl:text/>
                  <xsl:value-of select="replace(label,'\.$','')"/>
                  <xsl:text/> is not in the correct format. Source code needs to have ids in the format 'scode0'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M182"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M182"/>
   <xsl:template match="@*|node()" priority="-2" mode="M182">
      <xsl:apply-templates select="*" mode="M182"/>
   </xsl:template>

   <!--PATTERN source-data-specific-tests-pattern-->


	  <!--RULE source-data-specific-tests-->
   <xsl:template match="supplementary-material[(ancestor::fig) or (ancestor::media) or (ancestor::table-wrap)]" priority="1000" mode="M183">

		<!--REPORT warning-->
      <xsl:if test="matches(label[1],'^Figure \d{1,4}—source data \d{1,4}|^Appendix \d{1,4}—figure \d{1,4}—source data \d{1,4}') and (count(descendant::xref[@ref-type='fig'])=1) and (descendant::xref[(@ref-type='fig') and contains(.,'upplement')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(label[1],'^Figure \d{1,4}—source data \d{1,4}|^Appendix \d{1,4}—figure \d{1,4}—source data \d{1,4}') and (count(descendant::xref[@ref-type='fig'])=1) and (descendant::xref[(@ref-type='fig') and contains(.,'upplement')])">
            <xsl:attribute name="id">fig-data-test-1</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/additional-files#fig-data-test-1</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[fig-data-test-1] <xsl:text/>
               <xsl:value-of select="label"/>
               <xsl:text/> is figure level source data, but contains 1 figure citation which is a link to a figure supplement - should it be figure supplement level source data?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(label[1],'^Figure \d{1,4}—source code \d{1,4}|^Appendix \d{1,4}—figure \d{1,4}—source code \d{1,4}') and (count(descendant::xref[@ref-type='fig'])=1) and (descendant::xref[(@ref-type='fig') and contains(.,'upplement')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(label[1],'^Figure \d{1,4}—source code \d{1,4}|^Appendix \d{1,4}—figure \d{1,4}—source code \d{1,4}') and (count(descendant::xref[@ref-type='fig'])=1) and (descendant::xref[(@ref-type='fig') and contains(.,'upplement')])">
            <xsl:attribute name="id">fig-code-test-1</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/additional-files#fig-code-test-1</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[fig-code-test-1] <xsl:text/>
               <xsl:value-of select="label"/>
               <xsl:text/> is figure level source code, but contains 1 figure citation which is a link to a figure supplement - should it be figure supplement level source code?</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M183"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M183"/>
   <xsl:template match="@*|node()" priority="-2" mode="M183">
      <xsl:apply-templates select="*" mode="M183"/>
   </xsl:template>

   <!--PATTERN fig-source-data-tests-pattern-->


	  <!--RULE fig-source-data-tests-->
   <xsl:template match="fig//supplementary-material[not(ancestor::media) and contains(label[1],' data ')]" priority="1000" mode="M184">
      <xsl:variable name="label" select="label[1]"/>
      <xsl:variable name="fig-id" select="ancestor::fig[1]/@id"/>
      <xsl:variable name="fig-label" select="replace(ancestor::fig[1]/label[1],'\.$','')"/>
      <xsl:variable name="number" select="number(replace(substring-after($label,' data '),'[^\d]',''))"/>
      <xsl:variable name="sibling-count" select="count(ancestor::fig[1]//supplementary-material[contains(label[1],' data ')])"/>
      <xsl:variable name="pos" select="$sibling-count - count(following::supplementary-material[(ancestor::fig[1]/@id=$fig-id) and contains(label[1],' data ')])"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="$number = $pos"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="$number = $pos">
               <xsl:attribute name="id">fig-data-test-2</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/additional-files#fig-data-test-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[fig-data-test-2] '<xsl:text/>
                  <xsl:value-of select="$label"/>
                  <xsl:text/>' ends with <xsl:text/>
                  <xsl:value-of select="$number"/>
                  <xsl:text/>, but it is placed <xsl:text/>
                  <xsl:value-of select="e:get-ordinal($pos)"/>
                  <xsl:text/>. Either it is misnumbered or it should be moved to a different position.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@id=concat($fig-id,'sdata',$pos)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@id=concat($fig-id,'sdata',$pos)">
               <xsl:attribute name="id">fig-data-id</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/additional-files#fig-data-id</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[fig-data-id] The id for figure level source data must be the id of its ancestor fig, followed by 'sdata', followed by its position relative to other source data for the same figure. The id for <xsl:text/>
                  <xsl:value-of select="$label"/>
                  <xsl:text/>, '<xsl:text/>
                  <xsl:value-of select="@id"/>
                  <xsl:text/>' is not in this format. It should be '<xsl:text/>
                  <xsl:value-of select="concat($fig-id,'sdata',$pos)"/>
                  <xsl:text/>' instead.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="$label = concat($fig-label,'—source data ',$pos,'.')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="$label = concat($fig-label,'—source data ',$pos,'.')">
               <xsl:attribute name="id">fig-data-label</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/additional-files#fig-data-label</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[fig-data-label] Figure source data label (<xsl:text/>
                  <xsl:value-of select="$label"/>
                  <xsl:text/>) is incorrect based on its position. Either it has been placed under the wrong figure or the label is incorrect. Should the label be <xsl:text/>
                  <xsl:value-of select="concat($fig-label,'—source data ',$pos,'.')"/>
                  <xsl:text/> instead?</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M184"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M184"/>
   <xsl:template match="@*|node()" priority="-2" mode="M184">
      <xsl:apply-templates select="*" mode="M184"/>
   </xsl:template>

   <!--PATTERN fig-source-code-tests-pattern-->


	  <!--RULE fig-source-code-tests-->
   <xsl:template match="fig//supplementary-material[not(ancestor::media) and contains(label[1],' code ')]" priority="1000" mode="M185">
      <xsl:variable name="label" select="label[1]"/>
      <xsl:variable name="fig-id" select="ancestor::fig[1]/@id"/>
      <xsl:variable name="fig-label" select="replace(ancestor::fig[1]/label[1],'\.$','')"/>
      <xsl:variable name="number" select="number(replace(substring-after($label,' code '),'[^\d]',''))"/>
      <xsl:variable name="sibling-count" select="count(ancestor::fig[1]//supplementary-material[contains(label[1],' code ')])"/>
      <xsl:variable name="pos" select="$sibling-count - count( following::supplementary-material[(ancestor::fig[1]/@id=$fig-id) and contains(label[1],' code ')])"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="$number = $pos"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="$number = $pos">
               <xsl:attribute name="id">fig-code-test-2</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/additional-files#fig-code-test-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[fig-code-test-2] '<xsl:text/>
                  <xsl:value-of select="$label"/>
                  <xsl:text/>' ends with <xsl:text/>
                  <xsl:value-of select="$number"/>
                  <xsl:text/>, but it is placed <xsl:text/>
                  <xsl:value-of select="e:get-ordinal($pos)"/>
                  <xsl:text/>. Either it is misnumbered or it should be moved to a different position.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@id=concat($fig-id,'scode',$pos)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@id=concat($fig-id,'scode',$pos)">
               <xsl:attribute name="id">fig-code-id</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/additional-files#fig-code-id</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[fig-code-id] The id for figure level source code must be the id of its ancestor fig, followed by 'scode', followed by its position relative to other source data for the same figure. The id for <xsl:text/>
                  <xsl:value-of select="$label"/>
                  <xsl:text/>, '<xsl:text/>
                  <xsl:value-of select="@id"/>
                  <xsl:text/>' is not in this format. It should be '<xsl:text/>
                  <xsl:value-of select="concat($fig-id,'scode',$pos)"/>
                  <xsl:text/>' instead.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="$label = concat($fig-label,'—source code ',$pos,'.')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="$label = concat($fig-label,'—source code ',$pos,'.')">
               <xsl:attribute name="id">fig-code-label</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/additional-files#fig-code-label</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[fig-code-label] Figure source data label (<xsl:text/>
                  <xsl:value-of select="$label"/>
                  <xsl:text/>) is incorrect based on its position. Either it has been placed under the wrong figure or the label is incorrect. Should the label be <xsl:text/>
                  <xsl:value-of select="concat($fig-label,'—source code ',$pos,'.')"/>
                  <xsl:text/> instead?</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M185"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M185"/>
   <xsl:template match="@*|node()" priority="-2" mode="M185">
      <xsl:apply-templates select="*" mode="M185"/>
   </xsl:template>

   <!--PATTERN vid-source-data-tests-pattern-->


	  <!--RULE vid-source-data-tests-->
   <xsl:template match="media//supplementary-material[not(ancestor::fig) and contains(label[1],' data ')]" priority="1000" mode="M186">
      <xsl:variable name="label" select="label[1]"/>
      <xsl:variable name="vid-id" select="ancestor::media[1]/@id"/>
      <xsl:variable name="vid-label" select="replace(ancestor::media[1]/label[1],'\.$','')"/>
      <xsl:variable name="number" select="number(replace(substring-after($label,' data '),'[^\d]',''))"/>
      <xsl:variable name="sibling-count" select="count(ancestor::media[1]//supplementary-material[contains(label[1],' data ')])"/>
      <xsl:variable name="pos" select="$sibling-count - count( following::supplementary-material[(ancestor::media[1]/@id=$vid-id) and contains(label[1],' data ')])"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="$number = $pos"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="$number = $pos">
               <xsl:attribute name="id">vid-data-test-2</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/additional-files#vid-data-test-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[vid-data-test-2] '<xsl:text/>
                  <xsl:value-of select="$label"/>
                  <xsl:text/>' ends with <xsl:text/>
                  <xsl:value-of select="$number"/>
                  <xsl:text/>, but it is placed <xsl:text/>
                  <xsl:value-of select="e:get-ordinal($pos)"/>
                  <xsl:text/>. Either it is misnumbered or it should be moved to a different position.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@id=concat($vid-id,'sdata',$pos)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@id=concat($vid-id,'sdata',$pos)">
               <xsl:attribute name="id">vid-data-id</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/additional-files#vid-data-id</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[vid-data-id] The id for video level source data must be the id of its ancestor video, followed by 'sdata', followed by its position relative to other source data for the same video. The id for <xsl:text/>
                  <xsl:value-of select="$label"/>
                  <xsl:text/>, '<xsl:text/>
                  <xsl:value-of select="@id"/>
                  <xsl:text/>' is not in this format. It should be '<xsl:text/>
                  <xsl:value-of select="concat($vid-id,'sdata',$pos)"/>
                  <xsl:text/>' instead.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="$label = concat($vid-label,'—source data ',$pos,'.')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="$label = concat($vid-label,'—source data ',$pos,'.')">
               <xsl:attribute name="id">vid-data-label</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/additional-files#vid-data-label</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[vid-data-label] Video source data label (<xsl:text/>
                  <xsl:value-of select="$label"/>
                  <xsl:text/>) is incorrect based on its position. Either it has been placed under the wrong video or the label is incorrect. Should the label be <xsl:text/>
                  <xsl:value-of select="concat($vid-label,'—source data ',$pos,'.')"/>
                  <xsl:text/> instead?</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M186"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M186"/>
   <xsl:template match="@*|node()" priority="-2" mode="M186">
      <xsl:apply-templates select="*" mode="M186"/>
   </xsl:template>

   <!--PATTERN vid-source-code-tests-pattern-->


	  <!--RULE vid-source-code-tests-->
   <xsl:template match="media//supplementary-material[not(ancestor::fig) and contains(label[1],' code ')]" priority="1000" mode="M187">
      <xsl:variable name="label" select="label[1]"/>
      <xsl:variable name="vid-id" select="ancestor::media[1]/@id"/>
      <xsl:variable name="vid-label" select="replace(ancestor::media[1]/label[1],'\.$','')"/>
      <xsl:variable name="number" select="number(replace(substring-after($label,' code '),'[^\d]',''))"/>
      <xsl:variable name="sibling-count" select="count(ancestor::media[1]//supplementary-material[contains(label[1],' code ')])"/>
      <xsl:variable name="pos" select="$sibling-count - count( following::supplementary-material[(ancestor::media[1]/@id=$vid-id) and contains(label[1],' code ')])"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="$number = $pos"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="$number = $pos">
               <xsl:attribute name="id">vid-code-test-2</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/additional-files#vid-code-test-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[vid-code-test-2] '<xsl:text/>
                  <xsl:value-of select="$label"/>
                  <xsl:text/>' ends with <xsl:text/>
                  <xsl:value-of select="$number"/>
                  <xsl:text/>, but it is placed <xsl:text/>
                  <xsl:value-of select="e:get-ordinal($pos)"/>
                  <xsl:text/>. Either it is misnumbered or it should be moved to a different position.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@id=concat($vid-id,'scode',$pos)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@id=concat($vid-id,'scode',$pos)">
               <xsl:attribute name="id">vid-code-id</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/additional-files#vid-code-id</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[vid-code-id] The id for video level source code must be the id of its ancestor video, followed by 'scode', followed by its position relative to other source data for the same video. The id for <xsl:text/>
                  <xsl:value-of select="$label"/>
                  <xsl:text/>, '<xsl:text/>
                  <xsl:value-of select="@id"/>
                  <xsl:text/>' is not in this format. It should be '<xsl:text/>
                  <xsl:value-of select="concat($vid-id,'scode',$pos)"/>
                  <xsl:text/>' instead.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="$label = concat($vid-label,'—source code ',$pos,'.')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="$label = concat($vid-label,'—source code ',$pos,'.')">
               <xsl:attribute name="id">vid-code-label</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/additional-files#vid-code-label</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[vid-code-label] Video source code label (<xsl:text/>
                  <xsl:value-of select="$label"/>
                  <xsl:text/>) is incorrect based on its position. Either it has been placed under the wrong video or the label is incorrect. Should the label be <xsl:text/>
                  <xsl:value-of select="concat($vid-label,'—source code ',$pos,'.')"/>
                  <xsl:text/> instead?</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M187"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M187"/>
   <xsl:template match="@*|node()" priority="-2" mode="M187">
      <xsl:apply-templates select="*" mode="M187"/>
   </xsl:template>

   <!--PATTERN table-source-data-tests-pattern-->


	  <!--RULE table-source-data-tests-->
   <xsl:template match="table-wrap//supplementary-material[contains(label[1],' data ')]" priority="1000" mode="M188">
      <xsl:variable name="label" select="label[1]"/>
      <xsl:variable name="table-id" select="ancestor::table-wrap[1]/@id"/>
      <xsl:variable name="table-label" select="replace(ancestor::table-wrap[1]/label[1],'\.$','')"/>
      <xsl:variable name="number" select="number(replace(substring-after($label,' data '),'[^\d]',''))"/>
      <xsl:variable name="sibling-count" select="count(ancestor::table-wrap[1]//supplementary-material[contains(label[1],' data ')])"/>
      <xsl:variable name="pos" select="$sibling-count - count( following::supplementary-material[(ancestor::table-wrap[1]/@id=$table-id) and contains(label[1],' data ')])"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="$number = $pos"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="$number = $pos">
               <xsl:attribute name="id">table-data-test-2</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/additional-files#table-data-test-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[table-data-test-2] '<xsl:text/>
                  <xsl:value-of select="$label"/>
                  <xsl:text/>' ends with <xsl:text/>
                  <xsl:value-of select="$number"/>
                  <xsl:text/>, but it is placed <xsl:text/>
                  <xsl:value-of select="e:get-ordinal($pos)"/>
                  <xsl:text/>. Either it is misnumbered or it should be moved to a different position.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@id=concat($table-id,'sdata',$pos)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@id=concat($table-id,'sdata',$pos)">
               <xsl:attribute name="id">table-data-id</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/additional-files#table-data-id</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[table-data-id] The id for table level source data must be the id of its ancestor table-wrap, followed by 'sdata', followed by its position relative to other source data for the same table. The id for <xsl:text/>
                  <xsl:value-of select="$label"/>
                  <xsl:text/>, '<xsl:text/>
                  <xsl:value-of select="@id"/>
                  <xsl:text/>' is not in this format. It should be '<xsl:text/>
                  <xsl:value-of select="concat($table-id,'sdata',$pos)"/>
                  <xsl:text/>' instead.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="$label = concat($table-label,'—source data ',$pos,'.')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="$label = concat($table-label,'—source data ',$pos,'.')">
               <xsl:attribute name="id">table-data-label</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/additional-files#table-data-label</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[table-data-label] Table source data label (<xsl:text/>
                  <xsl:value-of select="$label"/>
                  <xsl:text/>) is incorrect based on its position. Either it has been placed under the wrong table or the label is incorrect. Should the label be <xsl:text/>
                  <xsl:value-of select="concat($table-label,'—source data ',$pos,'.')"/>
                  <xsl:text/> instead?</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M188"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M188"/>
   <xsl:template match="@*|node()" priority="-2" mode="M188">
      <xsl:apply-templates select="*" mode="M188"/>
   </xsl:template>

   <!--PATTERN table-source-code-tests-pattern-->


	  <!--RULE table-source-code-tests-->
   <xsl:template match="table-wrap//supplementary-material[contains(label[1],' code ')]" priority="1000" mode="M189">
      <xsl:variable name="label" select="label[1]"/>
      <xsl:variable name="table-id" select="ancestor::table-wrap[1]/@id"/>
      <xsl:variable name="table-label" select="replace(ancestor::table-wrap[1]/label[1],'\.$','')"/>
      <xsl:variable name="number" select="number(replace(substring-after($label,' code '),'[^\d]',''))"/>
      <xsl:variable name="sibling-count" select="count(ancestor::table-wrap[1]//supplementary-material[contains(label[1],' code ')])"/>
      <xsl:variable name="pos" select="$sibling-count - count( following::supplementary-material[(ancestor::table-wrap[1]/@id=$table-id) and contains(label[1],' code ')])"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="$number = $pos"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="$number = $pos">
               <xsl:attribute name="id">table-code-test-2</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/additional-files#table-code-test-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[table-code-test-2] '<xsl:text/>
                  <xsl:value-of select="$label"/>
                  <xsl:text/>' ends with <xsl:text/>
                  <xsl:value-of select="$number"/>
                  <xsl:text/>, but it is placed <xsl:text/>
                  <xsl:value-of select="e:get-ordinal($pos)"/>
                  <xsl:text/>. Either it is misnumbered or it should be moved to a different position.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@id=concat($table-id,'scode',$pos)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@id=concat($table-id,'scode',$pos)">
               <xsl:attribute name="id">table-code-id</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/additional-files#table-code-id</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[table-code-id] The id for table level source code must be the id of its ancestor table, followed by 'scode', followed by its position relative to other source data for the same table. The id for <xsl:text/>
                  <xsl:value-of select="$label"/>
                  <xsl:text/>, '<xsl:text/>
                  <xsl:value-of select="@id"/>
                  <xsl:text/>' is not in this format. It should be '<xsl:text/>
                  <xsl:value-of select="concat($table-id,'scode',$pos)"/>
                  <xsl:text/>' instead.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="$label = concat($table-label,'—source code ',$pos,'.')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="$label = concat($table-label,'—source code ',$pos,'.')">
               <xsl:attribute name="id">table-code-label</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/additional-files#table-code-label</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[table-code-label] Table source code label (<xsl:text/>
                  <xsl:value-of select="$label"/>
                  <xsl:text/>) is incorrect based on its position. Either it has been placed under the wrong table or the label is incorrect. Should the label be <xsl:text/>
                  <xsl:value-of select="concat($table-label,'—source code ',$pos,'.')"/>
                  <xsl:text/> instead?</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M189"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M189"/>
   <xsl:template match="@*|node()" priority="-2" mode="M189">
      <xsl:apply-templates select="*" mode="M189"/>
   </xsl:template>

   <!--PATTERN disp-formula-tests-pattern-->


	  <!--RULE disp-formula-tests-->
   <xsl:template match="disp-formula" priority="1000" mode="M190">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="mml:math"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="mml:math">
               <xsl:attribute name="id">disp-formula-test-2</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/maths#disp-formula-test-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[disp-formula-test-2] disp-formula must contain an mml:math element.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT warning-->
      <xsl:choose>
         <xsl:when test="parent::p"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="parent::p">
               <xsl:attribute name="id">disp-formula-test-3</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/maths#disp-formula-test-3</xsl:attribute>
               <xsl:attribute name="role">warning</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[disp-formula-test-3] In the vast majority of cases disp-formula should be a child of p. <xsl:text/>
                  <xsl:value-of select="label"/>
                  <xsl:text/> is a child of <xsl:text/>
                  <xsl:value-of select="parent::*/local-name()"/>
                  <xsl:text/>. Is that correct?</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="parent::p[not(parent::boxed-text[label]) and not(preceding-sibling::*[1]/name()='list')] and not(preceding-sibling::*) and (not(preceding-sibling::text()) or normalize-space(preceding-sibling::text()[1])='') and not(ancestor::list)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="parent::p[not(parent::boxed-text[label]) and not(preceding-sibling::*[1]/name()='list')] and not(preceding-sibling::*) and (not(preceding-sibling::text()) or normalize-space(preceding-sibling::text()[1])='') and not(ancestor::list)">
            <xsl:attribute name="id">disp-formula-test-4</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/maths#disp-formula-test-4</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[disp-formula-test-4] disp-formula cannot be placed as the first child of a p element with no content before it (ie. &lt;p&gt;&lt;disp-formula ...). Either capture it at the end of the previous paragraph or capture it as a child of <xsl:text/>
               <xsl:value-of select="parent::p/parent::*/local-name()"/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M190"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M190"/>
   <xsl:template match="@*|node()" priority="-2" mode="M190">
      <xsl:apply-templates select="*" mode="M190"/>
   </xsl:template>

   <!--PATTERN inline-formula-tests-pattern-->


	  <!--RULE inline-formula-tests-->
   <xsl:template match="inline-formula" priority="1000" mode="M191">
      <xsl:variable name="pre-text" select="preceding-sibling::text()[1]"/>
      <xsl:variable name="post-text" select="following-sibling::text()[1]"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="mml:math"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="mml:math">
               <xsl:attribute name="id">inline-formula-test-1</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/maths#inline-formula-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[inline-formula-test-1] inline-formula must contain an mml:math element.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT warning-->
      <xsl:if test="not($pre-text/following-sibling::*[1]/local-name()='disp-formula') and matches($pre-text,'[\p{L}\p{N}\p{M}]$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="not($pre-text/following-sibling::*[1]/local-name()='disp-formula') and matches($pre-text,'[\p{L}\p{N}\p{M}]$')">
            <xsl:attribute name="id">inline-formula-test-2</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/maths#inline-formula-test-2</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[inline-formula-test-2] There is no space between inline-formula and the preceding text - <xsl:text/>
               <xsl:value-of select="concat(substring($pre-text,string-length($pre-text)-15),.)"/>
               <xsl:text/> - Is this correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="not($post-text/preceding-sibling::*[1]/local-name()='disp-formula') and matches($post-text,'^[\p{L}\p{N}\p{M}]')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="not($post-text/preceding-sibling::*[1]/local-name()='disp-formula') and matches($post-text,'^[\p{L}\p{N}\p{M}]')">
            <xsl:attribute name="id">inline-formula-test-3</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/maths#inline-formula-test-3</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[inline-formula-test-3] There is no space between inline-formula and the following text - <xsl:text/>
               <xsl:value-of select="concat(.,substring($post-text,1,15))"/>
               <xsl:text/> - Is this correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="parent::p or parent::td or parent::th or parent::title"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="parent::p or parent::td or parent::th or parent::title">
               <xsl:attribute name="id">inline-formula-test-4</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/maths#inline-formula-test-4</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[inline-formula-test-4] <xsl:text/>
                  <xsl:value-of select="name(.)"/>
                  <xsl:text/> must be a child of p, td, th or title. The formula containing <xsl:text/>
                  <xsl:value-of select="."/>
                  <xsl:text/> is a child of <xsl:text/>
                  <xsl:value-of select="parent::*/local-name()"/>
                  <xsl:text/>
               </svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M191"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M191"/>
   <xsl:template match="@*|node()" priority="-2" mode="M191">
      <xsl:apply-templates select="*" mode="M191"/>
   </xsl:template>

   <!--PATTERN math-tests-pattern-->


	  <!--RULE math-tests-->
   <xsl:template match="mml:math" priority="1000" mode="M192">
      <xsl:variable name="data" select="replace(normalize-space(.),'\p{Zs}','')"/>
      <xsl:variable name="children" select="string-join(for $x in .//*[(local-name()!='mo') and (local-name()!='mn') and (normalize-space(.)!='')] return $x/local-name(),'')"/>

		    <!--REPORT error-->
      <xsl:if test="$data = ''">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="$data = ''">
            <xsl:attribute name="id">math-test-1</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/maths#math-test-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[math-test-1] mml:math must not be empty.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="descendant::mml:merror">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="descendant::mml:merror">
            <xsl:attribute name="id">math-test-2</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/maths#math-test-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[math-test-2] math contains an mml:merror with '<xsl:text/>
               <xsl:value-of select="descendant::mml:merror[1]/*"/>
               <xsl:text/>'. This will almost certainly not render correctly.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="not(matches($data,'^±$|^±[\d]+$|^±[\d]+\.[\d]+$|^×$|^~$|^~[\d]+$|^~[\d]+\.[\d]+$|^%[\d]+$|^%[\d]+\.[\d]+$|^%$|^±\d+%$|^+\d+%$|^-\d+%$|^\d+%$|^±\d+$|^+\d+$|^-\d+$')) and ($children='')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="not(matches($data,'^±$|^±[\d]+$|^±[\d]+\.[\d]+$|^×$|^~$|^~[\d]+$|^~[\d]+\.[\d]+$|^%[\d]+$|^%[\d]+\.[\d]+$|^%$|^±\d+%$|^+\d+%$|^-\d+%$|^\d+%$|^±\d+$|^+\d+$|^-\d+$')) and ($children='')">
            <xsl:attribute name="id">math-test-14</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/maths#math-test-14</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[math-test-14] mml:math only contains numbers and/or operators - '<xsl:text/>
               <xsl:value-of select="$data"/>
               <xsl:text/>'. Is it necessary for this to be set as a formula, or can it be captured with as normal text instead?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="$data = '±'">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="$data = '±'">
            <xsl:attribute name="id">math-test-3</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/maths#math-test-3</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[math-test-3] mml:math only contains '±', which is unnecessary. Capture this as a normal text '±' instead.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches($data,'^±[\d]+$|^±[\d]+\.[\d]+$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($data,'^±[\d]+$|^±[\d]+\.[\d]+$')">
            <xsl:attribute name="id">math-test-4</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/maths#math-test-4</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[math-test-4] mml:math only contains '±' followed by digits, which is unnecessary. Capture this as a normal text instead.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="$data = '×'">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="$data = '×'">
            <xsl:attribute name="id">math-test-5</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/maths#math-test-5</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[math-test-5] mml:math only contains '×', which is unnecessary. Capture this as a normal text '×' instead.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="$data = '~'">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="$data = '~'">
            <xsl:attribute name="id">math-test-6</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/maths#math-test-6</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[math-test-6] mml:math only contains '~', which is unnecessary. Capture this as a normal text '~' instead.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches($data,'^~[\d]+$|^~[\d]+\.[\d]+$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($data,'^~[\d]+$|^~[\d]+\.[\d]+$')">
            <xsl:attribute name="id">math-test-7</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/maths#math-test-7</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[math-test-7] mml:math only contains '~' and digits, which is unnecessary. Capture this as a normal text instead.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="$data = 'μ'">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="$data = 'μ'">
            <xsl:attribute name="id">math-test-8</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/maths#math-test-8</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[math-test-8] mml:math only contains 'μ', which is likely unnecessary. Should this be captured as a normal text 'μ' instead?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches($data,'^[\d]+%$|^[\d]+\.[\d]+%$|^%$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($data,'^[\d]+%$|^[\d]+\.[\d]+%$|^%$')">
            <xsl:attribute name="id">math-test-9</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/maths#math-test-9</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[math-test-9] mml:math only contains '%' and digits, which is unnecessary. Capture this as a normal text instead.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches($data,'^%$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($data,'^%$')">
            <xsl:attribute name="id">math-test-12</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/maths#math-test-12</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[math-test-12] mml:math only contains '%', which is unnecessary. Capture this as a normal text instead.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="$data = '°'">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="$data = '°'">
            <xsl:attribute name="id">math-test-10</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/maths#math-test-10</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[math-test-10] mml:math only contains '°', which is likely unnecessary. This should be captured as a normal text '°' instead.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains($data,'○')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains($data,'○')">
            <xsl:attribute name="id">math-test-11</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/maths#math-test-11</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[math-test-11] mml:math contains '○' (the white circle symbol). Should this be the degree symbol instead - '°', or '∘' (the ring operator symbol)?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="not(descendant::mml:msqrt) and not(descendant::mml:mroot) and not(descendant::mml:mfrac) and matches($data,'^±\d+%$|^+\d+%$|^-\d+%$|^\d+%$|^±\d+$|^+\d+$|^-\d+$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="not(descendant::mml:msqrt) and not(descendant::mml:mroot) and not(descendant::mml:mfrac) and matches($data,'^±\d+%$|^+\d+%$|^-\d+%$|^\d+%$|^±\d+$|^+\d+$|^-\d+$')">
            <xsl:attribute name="id">math-test-13</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/maths#math-test-13</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[math-test-13] mml:math only contains '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>', which is likely unnecessary. Should this be captured as normal text instead?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($data,'^Na[2]?\+$|^Ca2\+$|^K\+$|^Cu[2]?\+$|^Ag\+$|^Hg[2]?\+$|^H\+$|^Mg2\+$|^Ba2\+$|^Pb2\+$|^Fe2\+$|^Co2\+$|^Ni2\+$|^Mn2\+$|^Zn2\+$|^Al3\+$|^Fe3\+$|^Cr3\+$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($data,'^Na[2]?\+$|^Ca2\+$|^K\+$|^Cu[2]?\+$|^Ag\+$|^Hg[2]?\+$|^H\+$|^Mg2\+$|^Ba2\+$|^Pb2\+$|^Fe2\+$|^Co2\+$|^Ni2\+$|^Mn2\+$|^Zn2\+$|^Al3\+$|^Fe3\+$|^Cr3\+$')">
            <xsl:attribute name="id">math-test-15</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/maths#math-test-15</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[math-test-15] mml:math seems to only contain the formula for a cation - '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>' - which is likely unnecessary. Should this be captured as normal text instead?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($data,'^H\-$|^Cl\-$|^Br\-$|^I\-$|^OH\-$|^NO3\-$|^NO2\-$|^HCO3\-$|^HSO4\-$|^CN\-$|^MnO4\-$|^ClO[3]?\-$|^O2\-$|^S2\-$|^SO42\-$|^SO32\-$|^S2O32\-$|^SiO32\-$|^CO32\-$|^CrO42\-$|^Cr2O72\-$|^N3\-$|^P3\-$|^PO43\-$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($data,'^H\-$|^Cl\-$|^Br\-$|^I\-$|^OH\-$|^NO3\-$|^NO2\-$|^HCO3\-$|^HSO4\-$|^CN\-$|^MnO4\-$|^ClO[3]?\-$|^O2\-$|^S2\-$|^SO42\-$|^SO32\-$|^S2O32\-$|^SiO32\-$|^CO32\-$|^CrO42\-$|^Cr2O72\-$|^N3\-$|^P3\-$|^PO43\-$')">
            <xsl:attribute name="id">math-test-16</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/maths#math-test-16</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[math-test-16] mml:math seems to only contain the formula for an anion - '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>' - which is likely unnecessary. Should this be captured as normal text instead?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="child::mml:msqrt and matches($data,'^±\d+%$|^+\d+%$|^-\d+%$|^\d+%$|^±\d+$|^+\d+$|^-\d+$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="child::mml:msqrt and matches($data,'^±\d+%$|^+\d+%$|^-\d+%$|^\d+%$|^±\d+$|^+\d+$|^-\d+$')">
            <xsl:attribute name="id">math-test-17</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/maths#math-test-17</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[math-test-17] mml:math only contains number(s) and square root symbol(s) '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>', which is likely unnecessary. Should this be captured as normal text instead? Such as <xsl:text/>
               <xsl:value-of select="concat('√',.)"/>
               <xsl:text/>?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="ancestor::abstract">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="ancestor::abstract">
            <xsl:attribute name="id">math-test-18</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/maths#math-test-18</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[math-test-18] abstract contains MathML (<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>). Is this necessary? MathML in abstracts may not render downstream, so if it can be represented using normal text/unicode, then please do so instead.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="descendant::mml:mi[(.='') and preceding-sibling::*[1][(local-name() = 'mi') and matches(.,'[A-Za-z]')] and following-sibling::*[1][(local-name() = 'mi') and matches(.,'[A-Za-z]')]]">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="descendant::mml:mi[(.='') and preceding-sibling::*[1][(local-name() = 'mi') and matches(.,'[A-Za-z]')] and following-sibling::*[1][(local-name() = 'mi') and matches(.,'[A-Za-z]')]]">
            <xsl:attribute name="id">math-test-19</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/maths#math-test-19</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[math-test-19] Maths containing '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>' has what looks like words or terms which need separating with a space. With it's current markup the space will not be preserved on the eLife website. Please add in the space(s) using the latext '\;' in the appropriate place(s), so that the space is preserved in the HTML.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches(.,'\p{Zs}\p{Zs}\p{Zs}\p{Zs}+$') and not(matches(.,'\s\s\s\s+$'))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'\p{Zs}\p{Zs}\p{Zs}\p{Zs}+$') and not(matches(.,'\s\s\s\s+$'))">
            <xsl:attribute name="id">math-test-20</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[math-test-20] <xsl:text/>
               <xsl:value-of select="parent::*/name()"/>
               <xsl:text/> ends with 4 or more spaces. These types of spaces may cause the equation to break over numerous lines in the HTML or shift the equation to the left. Please esnure they are removed.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches(.,'^\p{Zs}\p{Zs}\p{Zs}\p{Zs}+') and not(matches(.,'^\s\s\s\s+'))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'^\p{Zs}\p{Zs}\p{Zs}\p{Zs}+') and not(matches(.,'^\s\s\s\s+'))">
            <xsl:attribute name="id">math-test-21</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[math-test-21] <xsl:text/>
               <xsl:value-of select="parent::*/name()"/>
               <xsl:text/> starts with 4 or more spaces. These types of spaces may cause the equation to break over numerous lines in the HTML or shift the equation to the right. Please esnure they are removed.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,'(&amp;|§|§amp;)#x?\d|[^\p{L}\p{N}][gl]t;')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'(&amp;|§|§amp;)#x?\d|[^\p{L}\p{N}][gl]t;')">
            <xsl:attribute name="id">math-broken-unicode-test</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/maths#math-broken-unicode-test</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[math-broken-unicode-test] Equation likely contains a broken unicode - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M192"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M192"/>
   <xsl:template match="@*|node()" priority="-2" mode="M192">
      <xsl:apply-templates select="*" mode="M192"/>
   </xsl:template>

   <!--PATTERN math-descendant-tests-pattern-->


	  <!--RULE math-descendant-tests-->
   <xsl:template match="mml:math//*[contains(@class,'font') and matches(.,'[A-Za-z]')]" priority="1000" mode="M193">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@mathvariant"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@mathvariant">
               <xsl:attribute name="id">math-descendant-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[math-descendant-test-1] Equation has character(s) - <xsl:text/>
                  <xsl:value-of select="."/>
                  <xsl:text/> - which have a font in a class element - <xsl:text/>
                  <xsl:value-of select="@class"/>
                  <xsl:text/> - but the element does not have a mathvariant attribute. This means that while the font will display in the PDF, it will not display on continuum. Either it needs a mathvariant attribute, or the specific unicode for that character in the script/font should be used.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M193"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M193"/>
   <xsl:template match="@*|node()" priority="-2" mode="M193">
      <xsl:apply-templates select="*" mode="M193"/>
   </xsl:template>

   <!--PATTERN disp-formula-child-tests-pattern-->


	  <!--RULE disp-formula-child-tests-->
   <xsl:template match="disp-formula/*" priority="1000" mode="M194">

		<!--REPORT error-->
      <xsl:if test="not(local-name()=('label','math'))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="not(local-name()=('label','math'))">
            <xsl:attribute name="id">disp-formula-child-test-1</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/maths#disp-formula-child-test-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[disp-formula-child-test-1] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element is not allowed as a child of disp-formula.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M194"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M194"/>
   <xsl:template match="@*|node()" priority="-2" mode="M194">
      <xsl:apply-templates select="*" mode="M194"/>
   </xsl:template>

   <!--PATTERN inline-formula-child-tests-pattern-->


	  <!--RULE inline-formula-child-tests-->
   <xsl:template match="inline-formula/*" priority="1000" mode="M195">

		<!--REPORT error-->
      <xsl:if test="local-name()!='math'">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="local-name()!='math'">
            <xsl:attribute name="id">inline-formula-child-test-1</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/maths#inline-formula-child-test-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[inline-formula-child-test-1] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element is not allowed as a child of inline-formula.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M195"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M195"/>
   <xsl:template match="@*|node()" priority="-2" mode="M195">
      <xsl:apply-templates select="*" mode="M195"/>
   </xsl:template>

   <!--PATTERN math-overset-tests-pattern-->


	  <!--RULE math-overset-tests-->
   <xsl:template match="mml:mover" priority="1000" mode="M196">

		<!--REPORT warning-->
      <xsl:if test="mml:mo='−'">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="mml:mo='−'">
            <xsl:attribute name="id">math-overset-bar-test</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[math-overset-bar-test] <xsl:text/>
               <xsl:value-of select="ancestor::*[name()=('disp-formula','inline-formula')]/name()"/>
               <xsl:text/> contains character(s) that are overset by a minus sign (<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>). Has the latex \overset{}{} function been used, and should the \bar{} function (or \overline{} if covering numerous characters) be used instead?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="(mml:mtext or mml:mi) and not(mml:mo or */mml:mo)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(mml:mtext or mml:mi) and not(mml:mo or */mml:mo)">
            <xsl:attribute name="id">math-overset-missing-test</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[math-overset-missing-test] <xsl:text/>
               <xsl:value-of select="ancestor::*[name()=('disp-formula','inline-formula')]/name()"/>
               <xsl:text/> contains character(s) that have possibly missing character(s) directly above them (<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>). Has the \overset{}{} function been used, and if so should the appropriate equivalent latex function be used instead (such as \bar{}, \tilde{}, \dot{}, or \hat{})?</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M196"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M196"/>
   <xsl:template match="@*|node()" priority="-2" mode="M196">
      <xsl:apply-templates select="*" mode="M196"/>
   </xsl:template>

   <!--PATTERN table-wrap-tests-pattern-->


	  <!--RULE table-wrap-tests-->
   <xsl:template match="table-wrap" priority="1000" mode="M197">
      <xsl:variable name="id" select="@id"/>
      <xsl:variable name="lab" select="label[1]"/>
      <xsl:variable name="article-type" select="ancestor::article/@article-type"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="table"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="table">
               <xsl:attribute name="id">table-wrap-test-1</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/tables#table-wrap-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[table-wrap-test-1] table-wrap must have one table.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT warning-->
      <xsl:if test="count(table) &gt; 1">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(table) &gt; 1">
            <xsl:attribute name="id">table-wrap-test-2</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/tables#table-wrap-test-2</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[table-wrap-test-2] table-wrap has more than one table - Is this correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="(contains($id,'inline')) and (normalize-space($lab) != '')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(contains($id,'inline')) and (normalize-space($lab) != '')">
            <xsl:attribute name="id">table-wrap-test-3</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/tables#table-wrap-test-3</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[table-wrap-test-3] table-wrap has an inline id <xsl:text/>
               <xsl:value-of select="$id"/>
               <xsl:text/> but it has a label - <xsl:text/>
               <xsl:value-of select="$lab"/>
               <xsl:text/>, which is not correct.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="(matches($id,'^table[0-9]{1,3}$')) and (normalize-space($lab) = '')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(matches($id,'^table[0-9]{1,3}$')) and (normalize-space($lab) = '')">
            <xsl:attribute name="id">table-wrap-test-4</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/tables#table-wrap-test-4</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[table-wrap-test-4] table-wrap with id <xsl:text/>
               <xsl:value-of select="$id"/>
               <xsl:text/> has no label which is not correct.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="contains($id,'keyresource') and not(matches($lab,'^Key resources table$|^Appendix [0-9]{1,4}—key resources table$'))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains($id,'keyresource') and not(matches($lab,'^Key resources table$|^Appendix [0-9]{1,4}—key resources table$'))">
            <xsl:attribute name="id">kr-table-wrap-test-1</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/tables#kr-table-wrap-test-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[kr-table-wrap-test-1] table-wrap has an id '<xsl:text/>
               <xsl:value-of select="$id"/>
               <xsl:text/>' but its label is not in the format 'Key resources table' or 'Appendix 0—key resources table', which is incorrect.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="if (contains($id,'keyresource')) then ()         else if (contains($id,'inline')) then ()         else if ($article-type = ($features-article-types,$notice-article-types)) then ()         else if (ancestor::app or ancestor::sub-article) then ()         else not(ancestor::article//xref[tokenize(@rid,'\s') = $id])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="if (contains($id,'keyresource')) then () else if (contains($id,'inline')) then () else if ($article-type = ($features-article-types,$notice-article-types)) then () else if (ancestor::app or ancestor::sub-article) then () else not(ancestor::article//xref[tokenize(@rid,'\s') = $id])">
            <xsl:attribute name="id">final-table-wrap-cite-1</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/tables#final-table-wrap-cite-1</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[final-table-wrap-cite-1] There is no citation to <xsl:text/>
               <xsl:value-of select="$lab"/>
               <xsl:text/> Ensure this is added.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="if (contains($id,'inline')) then ()         else if ($article-type = $features-article-types) then (not(ancestor::article//xref[tokenize(@rid,'\s') = $id]))         else ()">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="if (contains($id,'inline')) then () else if ($article-type = $features-article-types) then (not(ancestor::article//xref[tokenize(@rid,'\s') = $id])) else ()">
            <xsl:attribute name="id">feat-table-wrap-cite-1</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/tables#feat-table-wrap-cite-1</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[feat-table-wrap-cite-1] There is no citation to <xsl:text/>
               <xsl:value-of select="if (label) then label else 'table.'"/>
               <xsl:text/> Is this correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="not(matches($id,'keyresource|app[\d]{1,4}keyresource')) and matches(normalize-space(descendant::thead[1]),'[Rr]eagent\s?type\s?\(species\)\s?or resource\s?[Dd]esignation\s?[Ss]ource\s?or\s?reference\s?[Ii]dentifiers\s?[Aa]dditional\s?information')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="not(matches($id,'keyresource|app[\d]{1,4}keyresource')) and matches(normalize-space(descendant::thead[1]),'[Rr]eagent\s?type\s?\(species\)\s?or resource\s?[Dd]esignation\s?[Ss]ource\s?or\s?reference\s?[Ii]dentifiers\s?[Aa]dditional\s?information')">
            <xsl:attribute name="id">kr-table-not-tagged</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/tables#kr-table-not-tagged</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[kr-table-not-tagged] <xsl:text/>
               <xsl:value-of select="$lab"/>
               <xsl:text/> has headings that are for a Key resources table, but it does not have an @id the format 'keyresource' or 'app0keyresource'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(caption/title[1],'[Kk]ey [Rr]esource')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(caption/title[1],'[Kk]ey [Rr]esource')">
            <xsl:attribute name="id">kr-table-not-tagged-2</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/tables#kr-table-not-tagged-2</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[kr-table-not-tagged-2] <xsl:text/>
               <xsl:value-of select="$lab"/>
               <xsl:text/> has the title <xsl:text/>
               <xsl:value-of select="caption/title[1]"/>
               <xsl:text/> but it is not tagged as a key resources table. Is this correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M197"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M197"/>
   <xsl:template match="@*|node()" priority="-2" mode="M197">
      <xsl:apply-templates select="*" mode="M197"/>
   </xsl:template>

   <!--PATTERN table-title-tests-pattern-->


	  <!--RULE table-title-tests-->
   <xsl:template match="table-wrap[not(ancestor::sub-article) and not(contains(@id,'keyresource')) and label]" priority="1000" mode="M198">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="caption/title"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="caption/title">
               <xsl:attribute name="id">final-table-title-test-1</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/tables#final-table-title-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[final-table-title-test-1] <xsl:text/>
                  <xsl:value-of select="replace(label[1],'\.$','')"/>
                  <xsl:text/> does not have a title. Please ensure to query the authors for one.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M198"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M198"/>
   <xsl:template match="@*|node()" priority="-2" mode="M198">
      <xsl:apply-templates select="*" mode="M198"/>
   </xsl:template>

   <!--PATTERN table-title-tests-2-pattern-->


	  <!--RULE table-title-tests-2-->
   <xsl:template match="table-wrap/caption/title" priority="1000" mode="M199">
      <xsl:variable name="sentence-count" select="count(tokenize(replace(replace(lower-case(.),$org-regex,''),'[\p{Zs}]$',''),'\. '))"/>

		    <!--REPORT error-->
      <xsl:if test="not(*) and normalize-space(.)=''">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="not(*) and normalize-space(.)=''">
            <xsl:attribute name="id">table-title-test-2</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/tables#table-title-test-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[table-title-test-2] The title for <xsl:text/>
               <xsl:value-of select="replace(ancestor::table-wrap[1]/label[1],'\.$','')"/>
               <xsl:text/> is empty which is not allowed.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="ends-with(.,'.') or ends-with(.,'?')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="ends-with(.,'.') or ends-with(.,'?')">
               <xsl:attribute name="id">table-title-test-3</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/tables#table-title-test-3</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[table-title-test-3] The title for <xsl:text/>
                  <xsl:value-of select="replace(ancestor::table-wrap[1]/label[1],'\.$','')"/>
                  <xsl:text/> does not end with a full stop which is incorrect - '<xsl:text/>
                  <xsl:value-of select="."/>
                  <xsl:text/>'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT warning-->
      <xsl:if test="ends-with(.,' vs.')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="ends-with(.,' vs.')">
            <xsl:attribute name="id">table-title-test-4</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/tables#table-title-test-4</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[table-title-test-4] title for <xsl:text/>
               <xsl:value-of select="replace(ancestor::table-wrap[1]/label[1],'\.$','')"/>
               <xsl:text/> ends with 'vs.', which indicates that the title sentence may be split across title and caption - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="string-length(.) gt 250">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="string-length(.) gt 250">
            <xsl:attribute name="id">table-title-test-5</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/tables#table-title-test-5</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[table-title-test-5] title for <xsl:text/>
               <xsl:value-of select="replace(ancestor::table-wrap[1]/label[1],'\.$','')"/>
               <xsl:text/> is longer than 250 characters. Is it a caption instead?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="$sentence-count gt 1">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="$sentence-count gt 1">
            <xsl:attribute name="id">table-title-test-6</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/tables#table-title-test-6</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[table-title-test-6] title for <xsl:text/>
               <xsl:value-of select="replace(ancestor::table-wrap[1]/label[1],'\.$','')"/>
               <xsl:text/> contains <xsl:text/>
               <xsl:value-of select="$sentence-count"/>
               <xsl:text/> sentences. Should the sentence(s) after the first be moved into the caption? Or is the title itself a caption (in which case, please ask the authors for a title)?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches(.,'\p{Zs}$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'\p{Zs}$')">
            <xsl:attribute name="id">table-title-test-7</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[table-title-test-7] The title for <xsl:text/>
               <xsl:value-of select="replace(ancestor::table-wrap[1]/label[1],'\.$','')"/>
               <xsl:text/> ends with space(s) which is incorrect - '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M199"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M199"/>
   <xsl:template match="@*|node()" priority="-2" mode="M199">
      <xsl:apply-templates select="*" mode="M199"/>
   </xsl:template>

   <!--PATTERN kr-table-heading-tests-pattern-->


	  <!--RULE kr-table-heading-tests-->
   <xsl:template match="table-wrap[contains(@id,'keyresource')]/table/thead[1]" priority="1000" mode="M200">

		<!--REPORT warning-->
      <xsl:if test="count(tr[1]/th) != 5">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(tr[1]/th) != 5">
            <xsl:attribute name="id">kr-table-header-1</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/tables#kr-table-header-1</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[kr-table-header-1] Key resources tables should have 5 column headings (th elements) but this one has <xsl:text/>
               <xsl:value-of select="count(tr[1]/th)"/>
               <xsl:text/>. Either it is incorrectly typeset or the author will need to be queried in order to provide the table in the correct format.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="count(tr) gt 1">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(tr) gt 1">
            <xsl:attribute name="id">kr-table-header-2</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/tables#kr-table-header-2</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[kr-table-header-2] Key resources table has more than 1 row in its header, which is incorrect.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="count(tr) lt 1">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(tr) lt 1">
            <xsl:attribute name="id">kr-table-header-3</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/tables#kr-table-header-3</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[kr-table-header-3] Key resources table has no rows in its header, which is incorrect.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="tr[1]/th[1] and (normalize-space(tr[1]/th[1]) != 'Reagent type (species) or resource')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="tr[1]/th[1] and (normalize-space(tr[1]/th[1]) != 'Reagent type (species) or resource')">
            <xsl:attribute name="id">kr-table-header-4</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/tables#kr-table-header-4</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[kr-table-header-4] The first column header in a Key resources table is usually 'Reagent type (species) or resource' but this one has '<xsl:text/>
               <xsl:value-of select="tr[1]/th[1]"/>
               <xsl:text/>'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="tr[1]/th[2] and (normalize-space(tr[1]/th[2]) != 'Designation')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="tr[1]/th[2] and (normalize-space(tr[1]/th[2]) != 'Designation')">
            <xsl:attribute name="id">kr-table-header-5</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/tables#kr-table-header-5</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[kr-table-header-5] The second column header in a Key resources table is usually 'Designation' but this one has '<xsl:text/>
               <xsl:value-of select="tr[1]/th[2]"/>
               <xsl:text/>'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="tr[1]/th[3] and (normalize-space(tr[1]/th[3]) != 'Source or reference')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="tr[1]/th[3] and (normalize-space(tr[1]/th[3]) != 'Source or reference')">
            <xsl:attribute name="id">kr-table-header-6</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/tables#kr-table-header-6</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[kr-table-header-6] The third column header in a Key resources table is usually 'Source or reference' but this one has '<xsl:text/>
               <xsl:value-of select="tr[1]/th[3]"/>
               <xsl:text/>'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="tr[1]/th[4] and (normalize-space(tr[1]/th[4]) != 'Identifiers')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="tr[1]/th[4] and (normalize-space(tr[1]/th[4]) != 'Identifiers')">
            <xsl:attribute name="id">kr-table-header-7</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/tables#kr-table-header-7</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[kr-table-header-7] The fourth column header in a Key resources table is usually 'Identifiers' but this one has '<xsl:text/>
               <xsl:value-of select="tr[1]/th[4]"/>
               <xsl:text/>'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="tr[1]/th[5] and (normalize-space(tr[1]/th[5]) != 'Additional information')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="tr[1]/th[5] and (normalize-space(tr[1]/th[5]) != 'Additional information')">
            <xsl:attribute name="id">kr-table-header-8</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/tables#kr-table-header-8</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[kr-table-header-8] The fifth column header in a Key resources table is usually 'Additional information' but this one has '<xsl:text/>
               <xsl:value-of select="tr[1]/th[5]"/>
               <xsl:text/>'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M200"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M200"/>
   <xsl:template match="@*|node()" priority="-2" mode="M200">
      <xsl:apply-templates select="*" mode="M200"/>
   </xsl:template>

   <!--PATTERN kr-table-body-tests-pattern-->


	  <!--RULE kr-table-body-tests-->
   <xsl:template match="table-wrap[contains(@id,'keyresource')]/table/tbody/tr/*" priority="1000" mode="M201">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="local-name()='td'"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="local-name()='td'">
               <xsl:attribute name="id">kr-table-body-1</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/tables#kr-table-body-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[kr-table-body-1] Table cell in KR table containing '<xsl:text/>
                  <xsl:value-of select="."/>
                  <xsl:text/>' is captured as a table header cell (<xsl:text/>
                  <xsl:value-of select="local-name()"/>
                  <xsl:text/>), which is not allowed. Ensure that this is changed to a normal table cell (td).</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M201"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M201"/>
   <xsl:template match="@*|node()" priority="-2" mode="M201">
      <xsl:apply-templates select="*" mode="M201"/>
   </xsl:template>

   <!--PATTERN kr-table-first-column-tests-pattern-->


	  <!--RULE kr-table-first-column-tests-->
   <xsl:template match="table-wrap[contains(@id,'keyresource')]/table/tbody/tr/*[1]" priority="1000" mode="M202">

		<!--ASSERT warning-->
      <xsl:choose>
         <xsl:when test="matches(lower-case(.),'^gene|^strain|^genetic reagent|^cell line|^transfected construct|^biological sample|^antibody|^recombinant dna reagent|^sequence-based reagent|^peptide, recombinant protein|^commercial (assay|kit)|^chemical compound|^drug|^software|^algorithm|^other')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(lower-case(.),'^gene|^strain|^genetic reagent|^cell line|^transfected construct|^biological sample|^antibody|^recombinant dna reagent|^sequence-based reagent|^peptide, recombinant protein|^commercial (assay|kit)|^chemical compound|^drug|^software|^algorithm|^other')">
               <xsl:attribute name="id">kr-table-first-column-1</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/tables#kr-table-first-column-1</xsl:attribute>
               <xsl:attribute name="role">warning</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[kr-table-first-column-1] A cell in the first column of the body of a key resources table should start with one of the standard values. '<xsl:text/>
                  <xsl:value-of select="."/>
                  <xsl:text/>' does not start with one of Gene; Strain, strain background; Genetic reagent; Cell line; Transfected construct; Biological sample; Antibody; Recombinant DNA reagent; Sequence-based reagent; Peptide, recombinant protein; Commercial assay or kit; Chemical compound, drug; Software; Algorithm; Other.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M202"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M202"/>
   <xsl:template match="@*|node()" priority="-2" mode="M202">
      <xsl:apply-templates select="*" mode="M202"/>
   </xsl:template>

   <!--PATTERN kr-table-tests-pattern-->


	  <!--RULE kr-table-tests-->
   <xsl:template match="table-wrap[contains(@id,'keyresource')]" priority="1000" mode="M203">

		<!--REPORT error-->
      <xsl:if test="following::table-wrap[contains(@id,'keyresource') or contains(lower-case(label[1]),'key resources table')]">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="following::table-wrap[contains(@id,'keyresource') or contains(lower-case(label[1]),'key resources table')]">
            <xsl:attribute name="id">final-duplicate-kr-table-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[final-duplicate-kr-table-1] There is more than one key resources table, which is not permitted.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="table/thead"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="table/thead">
               <xsl:attribute name="id">kr-table-head-presence</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[kr-table-head-presence] Key resources table must have a header (thead). This one does not have a header.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M203"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M203"/>
   <xsl:template match="@*|node()" priority="-2" mode="M203">
      <xsl:apply-templates select="*" mode="M203"/>
   </xsl:template>

   <!--PATTERN table-cell-tests-pattern-->


	  <!--RULE table-cell-tests-->
   <xsl:template match="table-wrap/table/tbody/tr/*[xref[@ref-type='bibr'] and matches(.,'[\(\)\[\]]')]|table-wrap/table/thead/tr/*[xref[@ref-type='bibr'] and matches(.,'[\(\)\[\]]')]" priority="1000" mode="M204">
      <xsl:variable name="stripped-text" select="string-join(for $x in self::*/(text()|*)         return if (($x/local-name()='xref') and $x/@ref-type='bibr') then ()         else $x,'')"/>

		    <!--ASSERT warning-->
      <xsl:choose>
         <xsl:when test="matches($stripped-text,'[\p{N}\p{L}]')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($stripped-text,'[\p{N}\p{L}]')">
               <xsl:attribute name="id">table-cell-1</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/funding-information#table-cell-1</xsl:attribute>
               <xsl:attribute name="role">warning</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[table-cell-1] Table cell in <xsl:text/>
                  <xsl:value-of select="replace(ancestor::table-wrap[1]/label[1],'\.$','')"/>
                  <xsl:text/> contains '<xsl:text/>
                  <xsl:value-of select="."/>
                  <xsl:text/>'. Are the brackets around the citation(s) unnecessary?</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M204"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M204"/>
   <xsl:template match="@*|node()" priority="-2" mode="M204">
      <xsl:apply-templates select="*" mode="M204"/>
   </xsl:template>

   <!--PATTERN body-table-label-tests-pattern-->


	  <!--RULE body-table-label-tests-->
   <xsl:template match="body//table-wrap/label" priority="1000" mode="M205">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(.,'^Table \d{1,4}\.$|^Key resources table$|^Author response table \d{1,4}\.$|^Decision letter table \d{1,4}\.$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'^Table \d{1,4}\.$|^Key resources table$|^Author response table \d{1,4}\.$|^Decision letter table \d{1,4}\.$')">
               <xsl:attribute name="id">body-table-label-test-1</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/tables#body-table-label-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[body-table-label-test-1] <xsl:text/>
                  <xsl:value-of select="."/>
                  <xsl:text/> - Table label does not conform to the usual format.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M205"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M205"/>
   <xsl:template match="@*|node()" priority="-2" mode="M205">
      <xsl:apply-templates select="*" mode="M205"/>
   </xsl:template>

   <!--PATTERN app-table-label-tests-pattern-->


	  <!--RULE app-table-label-tests-->
   <xsl:template match="app//table-wrap/label" priority="1000" mode="M206">
      <xsl:variable name="app" select="ancestor::app/title[1]"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(.,'^Appendix \d{1,4}—table \d{1,4}\.$|^Appendix \d{1,4}—key resources table$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'^Appendix \d{1,4}—table \d{1,4}\.$|^Appendix \d{1,4}—key resources table$')">
               <xsl:attribute name="id">app-table-label-test-1</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/tables#app-table-label-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[app-table-label-test-1] <xsl:text/>
                  <xsl:value-of select="."/>
                  <xsl:text/> - Table label does not conform to the usual format.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="starts-with(.,$app)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="starts-with(.,$app)">
               <xsl:attribute name="id">app-table-label-test-2</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/tables#app-table-label-test-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[app-table-label-test-2] <xsl:text/>
                  <xsl:value-of select="."/>
                  <xsl:text/> - Table label does not begin with the title of the appendix it sits in. Either the table is in the incorrect appendix or the table has been labelled incorrectly.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M206"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M206"/>
   <xsl:template match="@*|node()" priority="-2" mode="M206">
      <xsl:apply-templates select="*" mode="M206"/>
   </xsl:template>

   <!--PATTERN table-tests-pattern-->


	  <!--RULE table-tests-->
   <xsl:template match="table" priority="1000" mode="M207">

		<!--REPORT error-->
      <xsl:if test="count(tbody) = 0">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(tbody) = 0">
            <xsl:attribute name="id">table-test-1</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/tables#table-test-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[table-test-1] table must have at least one body (tbody).</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--ASSERT warning-->
      <xsl:choose>
         <xsl:when test="thead"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="thead">
               <xsl:attribute name="id">table-test-2</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/tables#table-test-2</xsl:attribute>
               <xsl:attribute name="role">warning</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[table-test-2] table doesn't have a header (thead). Is this correct?</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT warning-->
      <xsl:if test="thead and tbody/tr/th[not(following-sibling::td)] and count(descendant::tr) gt 45">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="thead and tbody/tr/th[not(following-sibling::td)] and count(descendant::tr) gt 45">
            <xsl:attribute name="id">table-test-3</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/tables#table-test-3</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[table-test-3] <xsl:text/>
               <xsl:value-of select="if (ancestor::table-wrap[1]/label[1]) then replace(ancestor::table-wrap[1]/label[1],'\.$','') else 'Table'"/>
               <xsl:text/> has a main header (thead), but it also has a header or headers in the body and contains 45 or more rows. The main (first) header will as a result appear at the start of any new pages in the PDF. Is this correct? Or should the main header be moved down into the body (but still captured with &lt;th&gt; instead of &lt;td&gt;) so that this header does not appear on the subsequent pages?</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M207"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M207"/>
   <xsl:template match="@*|node()" priority="-2" mode="M207">
      <xsl:apply-templates select="*" mode="M207"/>
   </xsl:template>

   <!--PATTERN tbody-tests-pattern-->


	  <!--RULE tbody-tests-->
   <xsl:template match="table/tbody" priority="1000" mode="M208">

		<!--REPORT error-->
      <xsl:if test="count(tr) = 0">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(tr) = 0">
            <xsl:attribute name="id">tbody-test-1</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/tables#tbody-test-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[tbody-test-1] tbody must have at least one row (tr).</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M208"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M208"/>
   <xsl:template match="@*|node()" priority="-2" mode="M208">
      <xsl:apply-templates select="*" mode="M208"/>
   </xsl:template>

   <!--PATTERN thead-tests-pattern-->


	  <!--RULE thead-tests-->
   <xsl:template match="table/thead" priority="1000" mode="M209">

		<!--REPORT error-->
      <xsl:if test="count(tr) = 0">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(tr) = 0">
            <xsl:attribute name="id">thead-test-1</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/tables#thead-test-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[thead-test-1] thead must have at least one row (tr).</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M209"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M209"/>
   <xsl:template match="@*|node()" priority="-2" mode="M209">
      <xsl:apply-templates select="*" mode="M209"/>
   </xsl:template>

   <!--PATTERN tr-tests-pattern-->


	  <!--RULE tr-tests-->
   <xsl:template match="tr" priority="1000" mode="M210">
      <xsl:variable name="count" select="count(th) + count(td)"/>

		    <!--REPORT error-->
      <xsl:if test="$count = 0">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="$count = 0">
            <xsl:attribute name="id">tr-test-1</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/tables#tr-test-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[tr-test-1] row (tr) must contain at least one heading cell (th) or data cell (td).</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="th and (parent::tbody)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="th and (parent::tbody)">
            <xsl:attribute name="id">tr-test-2</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/tables#tr-test-2</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[tr-test-2] table row in body contains a th element (a header). Please check that this is correct.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="td and (parent::thead)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="td and (parent::thead)">
            <xsl:attribute name="id">tr-test-3</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/tables#tr-test-3</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[tr-test-3] table row in header contains a td element (table data), which is not allowed. Only th elements (table heading cells) are allowed in a row in the table header.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M210"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M210"/>
   <xsl:template match="@*|node()" priority="-2" mode="M210">
      <xsl:apply-templates select="*" mode="M210"/>
   </xsl:template>

   <!--PATTERN td-child-tests-pattern-->


	  <!--RULE td-child-tests-->
   <xsl:template match="td/*" priority="1000" mode="M211">
      <xsl:variable name="allowed-blocks" select="('bold','italic','sup','sub','sc','ext-link','xref', 'break', 'named-content', 'styled-content', 'monospace', 'code','inline-graphic','underline','inline-formula', 'list')"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="self::*/local-name() = $allowed-blocks"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="self::*/local-name() = $allowed-blocks">
               <xsl:attribute name="id">td-child-test</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/tables#td-child-test</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[td-child-test] td cannot contain <xsl:text/>
                  <xsl:value-of select="self::*/local-name()"/>
                  <xsl:text/>. Only the following elements are allowed - 'bold', 'italic', 'sup', 'sub', 'sc', 'ext-link', 'xref', 'break', 'named-content', 'monospace', 'code','inline-graphic','underline', and 'inline-formula'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M211"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M211"/>
   <xsl:template match="@*|node()" priority="-2" mode="M211">
      <xsl:apply-templates select="*" mode="M211"/>
   </xsl:template>

   <!--PATTERN th-child-tests-pattern-->


	  <!--RULE th-child-tests-->
   <xsl:template match="th/*" priority="1000" mode="M212">
      <xsl:variable name="allowed-blocks" select="('bold','italic','sup','sub','sc','ext-link','xref', 'break', 'named-content', 'monospace','inline-formula','inline-graphic', 'list')"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="self::*/local-name() = ($allowed-blocks)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="self::*/local-name() = ($allowed-blocks)">
               <xsl:attribute name="id">th-child-test-1</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/tables#th-child-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[th-child-test-1] th cannot contain <xsl:text/>
                  <xsl:value-of select="self::*/local-name()"/>
                  <xsl:text/>. Only the following elements are allowed - 'bold', 'italic', 'sup', 'sub', 'sc', 'ext-link', 'xref', 'break', 'named-content', 'monospace', 'code', 'inline-graphic', and 'inline-formula'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT warning-->
      <xsl:if test="self::*/local-name() = 'bold'">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="self::*/local-name() = 'bold'">
            <xsl:attribute name="id">th-child-test-2</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/tables#th-child-test-2</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[th-child-test-2] th contains bold. Is this correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M212"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M212"/>
   <xsl:template match="@*|node()" priority="-2" mode="M212">
      <xsl:apply-templates select="*" mode="M212"/>
   </xsl:template>

   <!--PATTERN th-tests-pattern-->


	  <!--RULE th-tests-->
   <xsl:template match="th" priority="1000" mode="M213">

		<!--REPORT warning-->
      <xsl:if test="following-sibling::td or preceding-sibling::td">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="following-sibling::td or preceding-sibling::td">
            <xsl:attribute name="id">th-row-test</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/tables#th-row-test</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[th-row-test] Table header cell containing '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>' has table data (not header) cells next to it on the same row. Is this correct? Should the whole row be header cells, or should this cell extend across the whole row?</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M213"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M213"/>
   <xsl:template match="@*|node()" priority="-2" mode="M213">
      <xsl:apply-templates select="*" mode="M213"/>
   </xsl:template>

   <!--PATTERN table-fn-label-tests-pattern-->


	  <!--RULE table-fn-label-tests-->
   <xsl:template match="table-wrap-foot//fn/p" priority="1000" mode="M214">

		<!--REPORT warning-->
      <xsl:if test="not(matches(.,'^\p{Zs}?[*†‡§¶]')) and matches(.,'^\p{Zs}?[\p{Ps}]?[\da-z][\p{Pe}]?\p{Zs}+[\p{Lu}\d]')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="not(matches(.,'^\p{Zs}?[*†‡§¶]')) and matches(.,'^\p{Zs}?[\p{Ps}]?[\da-z][\p{Pe}]?\p{Zs}+[\p{Lu}\d]')">
            <xsl:attribute name="id">table-fn-label-test-1</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/tables#table-fn-label-test-1</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[table-fn-label-test-1] Footnote starts with what might be a label which is not in line with house style - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>. If it is a label, then it should changed to one of the allowed symbols, so that the order of labels in the footnotes follows this sequence *, †, ‡, §, ¶, **, ††, ‡‡, §§, ¶¶, etc.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M214"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M214"/>
   <xsl:template match="@*|node()" priority="-2" mode="M214">
      <xsl:apply-templates select="*" mode="M214"/>
   </xsl:template>

   <!--PATTERN table-fn-tests-pattern-->


	  <!--RULE table-fn-tests-->
   <xsl:template match="table-wrap-foot//fn" priority="1000" mode="M215">

		<!--REPORT error-->
      <xsl:if test="label and not(@id)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="label and not(@id)">
            <xsl:attribute name="id">table-fn-test-1</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/tables#table-fn-test-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[table-fn-test-1] Table footnote with a label must have an id. This one has the label '<xsl:text/>
               <xsl:value-of select="label"/>
               <xsl:text/>' but no id.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="@id and not(label)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@id and not(label)">
            <xsl:attribute name="id">table-fn-test-2</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/tables#table-fn-test-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[table-fn-test-2] Table footnotes with an id must have a label (or the id should be removed). This one has the id '<xsl:text/>
               <xsl:value-of select="@id"/>
               <xsl:text/>' but no label. If a lable should not be present, then please remove the id.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M215"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M215"/>
   <xsl:template match="@*|node()" priority="-2" mode="M215">
      <xsl:apply-templates select="*" mode="M215"/>
   </xsl:template>

   <!--PATTERN fn-tests-pattern-->


	  <!--RULE fn-tests-->
   <xsl:template match="fn[@id][not(@fn-type='other') and not(ancestor::table-wrap)]" priority="1000" mode="M216">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="ancestor::article//xref/@rid = @id"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="ancestor::article//xref/@rid = @id">
               <xsl:attribute name="id">fn-xref-presence-test</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[fn-xref-presence-test] fn element with an id must have at least one xref element pointing to it.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M216"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M216"/>
   <xsl:template match="@*|node()" priority="-2" mode="M216">
      <xsl:apply-templates select="*" mode="M216"/>
   </xsl:template>

   <!--PATTERN list-tests-pattern-->


	  <!--RULE list-tests-->
   <xsl:template match="list" priority="1000" mode="M217">

		<!--REPORT error-->
      <xsl:if test="@continued-from">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@continued-from">
            <xsl:attribute name="id">continued-from-test-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[continued-from-test-1] The continued-from attribute is not allowed for lists, since this is not supported by Continuum. Please use an alternative method to capture lists which are interrupted.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M217"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M217"/>
   <xsl:template match="@*|node()" priority="-2" mode="M217">
      <xsl:apply-templates select="*" mode="M217"/>
   </xsl:template>

   <!--PATTERN list-item-tests-pattern-->


	  <!--RULE list-item-tests-->
   <xsl:template match="list-item" priority="1000" mode="M218">
      <xsl:variable name="type" select="ancestor::list[1]/@list-type"/>

		    <!--REPORT error-->
      <xsl:if test="($type='bullet') and matches(.,'^\p{Zs}?•')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="($type='bullet') and matches(.,'^\p{Zs}?•')">
            <xsl:attribute name="id">bullet-test-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[bullet-test-1] list-item is part of bullet list, but it also begins with a '•', which means that two will output. Remove the unnecessary '•' from the beginning of the list-item.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="($type='simple') and matches(.,'^\p{Zs}?•')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="($type='simple') and matches(.,'^\p{Zs}?•')">
            <xsl:attribute name="id">bullet-test-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[bullet-test-2] list-item is part of simple list, but it begins with a '•'. Remove the unnecessary '•' and capture the list as a bullet type list.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="($type='order') and matches(.,'^\p{Zs}?\d+')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="($type='order') and matches(.,'^\p{Zs}?\d+')">
            <xsl:attribute name="id">order-test-1</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[order-test-1] list-item is part of an ordered list, but it begins with a number. Is this correct? <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="($type='alpha-lower') and matches(.,'^\p{Zs}?[a-h|j-w|y-z][\.|\)]? ')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="($type='alpha-lower') and matches(.,'^\p{Zs}?[a-h|j-w|y-z][\.|\)]? ')">
            <xsl:attribute name="id">alpha-lower-test-1</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[alpha-lower-test-1] list-item is part of an alpha-lower list, but it begins with a single lower-case letter. Is this correct? <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="($type='alpha-upper') and matches(.,'^\p{Zs}?[A-H|J-W|Y-Z][\.|\)]? ')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="($type='alpha-upper') and matches(.,'^\p{Zs}?[A-H|J-W|Y-Z][\.|\)]? ')">
            <xsl:attribute name="id">alpha-upper-test-1</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[alpha-upper-test-1] list-item is part of an alpha-upper list, but it begins with a single upper-case letter. Is this correct? <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="($type='roman-lower') and matches(.,'^\p{Zs}?(i|ii|iii|iv|v|vi|vii|viii|ix|x)[\.|\)]? ')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="($type='roman-lower') and matches(.,'^\p{Zs}?(i|ii|iii|iv|v|vi|vii|viii|ix|x)[\.|\)]? ')">
            <xsl:attribute name="id">roman-lower-test-1</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[roman-lower-test-1] list-item is part of an roman-lower list, but it begins with a single roman-lower letter. Is this correct? <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="($type='roman-upper') and matches(.,'^\p{Zs}?(I|II|III|IV|V|VI|VII|VIII|IX|X)[\.|\)]? ')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="($type='roman-upper') and matches(.,'^\p{Zs}?(I|II|III|IV|V|VI|VII|VIII|IX|X)[\.|\)]? ')">
            <xsl:attribute name="id">roman-upper-test-1</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[roman-upper-test-1] list-item is part of an roman-upper list, but it begins with a single roman-upper letter. Is this correct? <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="($type='simple') and matches(.,'^\p{Zs}?[1-9][\.|\)]? ')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="($type='simple') and matches(.,'^\p{Zs}?[1-9][\.|\)]? ')">
            <xsl:attribute name="id">simple-test-1</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[simple-test-1] list-item is part of a simple list, but it begins with a number. Should the list-type be updated to ordered and this number removed? <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="($type='simple') and matches(.,'^\p{Zs}?[a-h|j-w|y-z][\.|\)] ')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="($type='simple') and matches(.,'^\p{Zs}?[a-h|j-w|y-z][\.|\)] ')">
            <xsl:attribute name="id">simple-test-2</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[simple-test-2] list-item is part of a simple list, but it begins with a single lower-case letter. Should the list-type be updated to 'alpha-lower' and this first letter removed? <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="($type='simple') and matches(.,'^\p{Zs}?[A-H|J-W|Y-Z][\.|\)] ')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="($type='simple') and matches(.,'^\p{Zs}?[A-H|J-W|Y-Z][\.|\)] ')">
            <xsl:attribute name="id">simple-test-3</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[simple-test-3] list-item is part of a simple list, but it begins with a single upper-case letter. Should the list-type be updated to 'alpha-upper' and this first letter removed? <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="($type='simple') and matches(.,'^\p{Zs}?(i|ii|iii|iv|v|vi|vii|viii|ix|x)[\.|\)]? ')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="($type='simple') and matches(.,'^\p{Zs}?(i|ii|iii|iv|v|vi|vii|viii|ix|x)[\.|\)]? ')">
            <xsl:attribute name="id">simple-test-4</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[simple-test-4] list-item is part of a simple list, but it begins with a single roman-lower letter. Should the list-type be updated to 'roman-lower' and this first letter removed? <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="($type='simple') and matches(.,'^\p{Zs}?(I|II|III|IV|V|VI|VII|VIII|IX|X)[\.|\)]? ')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="($type='simple') and matches(.,'^\p{Zs}?(I|II|III|IV|V|VI|VII|VIII|IX|X)[\.|\)]? ')">
            <xsl:attribute name="id">simple-test-5</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[simple-test-5] list-item is part of a simple list, but it begins with a single roman-upper letter. Should the list-type be updated to 'roman-upper' and this first letter removed? <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,'^\p{Zs}?\p{Ll}[\p{Zs}\)\.]')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'^\p{Zs}?\p{Ll}[\p{Zs}\)\.]')">
            <xsl:attribute name="id">list-item-test-1</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[list-item-test-1] list-item begins with a single lowercase letter, is this correct? - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M218"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M218"/>
   <xsl:template match="@*|node()" priority="-2" mode="M218">
      <xsl:apply-templates select="*" mode="M218"/>
   </xsl:template>

   <!--PATTERN general-video-pattern-->


	  <!--RULE general-video-->
   <xsl:template match="media[@mimetype='video'][matches(@id,'^video[0-9]{1,3}$')]" priority="1000" mode="M219">
      <xsl:variable name="label" select="replace(label,'\.$','')"/>
      <xsl:variable name="id" select="@id"/>
      <xsl:variable name="xrefs" select="e:get-xrefs(ancestor::article,$id,'video')"/>
      <xsl:variable name="sec1" select="ancestor::article/descendant::sec[@id = $xrefs//*/@sec-id][1]"/>
      <xsl:variable name="sec-id" select="ancestor::sec[1]/@id"/>
      <xsl:variable name="xref1" select="ancestor::article/descendant::xref[(@rid = $id) and not(ancestor::caption)][1]"/>
      <xsl:variable name="xref-sib" select="$xref1/parent::*/following-sibling::*[1]/local-name()"/>

		    <!--ASSERT warning-->
      <xsl:choose>
         <xsl:when test="$xrefs//*:match"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="$xrefs//*:match">
               <xsl:attribute name="id">final-video-cite</xsl:attribute>
               <xsl:attribute name="role">warning</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[final-video-cite] There is no citation to <xsl:text/>
                  <xsl:value-of select="$label"/>
                  <xsl:text/>. Ensure this is added.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="($xrefs//*:match) and ($sec-id != $sec1/@id)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="($xrefs//*:match) and ($sec-id != $sec1/@id)">
            <xsl:attribute name="id">final-video-placement-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[final-video-placement-1] <xsl:text/>
               <xsl:value-of select="$label"/>
               <xsl:text/> does not appear in the same section as where it is first cited (sec with title '<xsl:text/>
               <xsl:value-of select="$sec1/title"/>
               <xsl:text/>'), which is incorrect.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="($xref-sib = 'p') and ($xref1//following::media/@id = $id)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="($xref-sib = 'p') and ($xref1//following::media/@id = $id)">
            <xsl:attribute name="id">video-placement-2</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[video-placement-2] <xsl:text/>
               <xsl:value-of select="$label"/>
               <xsl:text/> appears after its first citation but not directly after its first citation. Is this correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M219"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M219"/>
   <xsl:template match="@*|node()" priority="-2" mode="M219">
      <xsl:apply-templates select="*" mode="M219"/>
   </xsl:template>

   <!--PATTERN code-tests-pattern-->


	  <!--RULE code-tests-->
   <xsl:template match="code" priority="1000" mode="M220">

		<!--REPORT error-->
      <xsl:if test="child::*">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="child::*">
            <xsl:attribute name="id">code-child-test</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/code-blocks#code-child-test</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[code-child-test] code contains a child element, which will display in HTML with its tagging, i.e. '&lt;<xsl:text/>
               <xsl:value-of select="child::*[1]/name()"/>
               <xsl:text/>
               <xsl:text/>
               <xsl:value-of select="if (child::*[1]/@*) then for $x in child::*[1]/@* return concat(' ',$x/name(),'=&quot;',$x/string(),'&quot;') else ()"/>
               <xsl:text/>&gt;<xsl:text/>
               <xsl:value-of select="child::*[1]"/>
               <xsl:text/>&lt;/<xsl:text/>
               <xsl:value-of select="child::*[1]/name()"/>
               <xsl:text/>&gt;'. Strip any child elements.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="parent::p"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="parent::p">
               <xsl:attribute name="id">code-parent-test</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/code-blocks#code-parent-test</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[code-parent-test] A code element must be contained in a p element. The code element (containing the content <xsl:text/>
                  <xsl:value-of select="."/>
                  <xsl:text/>) is contained in a <xsl:text/>
                  <xsl:value-of select="parent::*/name()"/>
                  <xsl:text/> element.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M220"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M220"/>
   <xsl:template match="@*|node()" priority="-2" mode="M220">
      <xsl:apply-templates select="*" mode="M220"/>
   </xsl:template>

   <!--PATTERN code-tests-2-pattern-->


	  <!--RULE code-tests-2-->
   <xsl:template match="p[count(code) gt 1]/code[2]" priority="1000" mode="M221">

		<!--REPORT warning-->
      <xsl:if test="normalize-space(preceding-sibling::text()[preceding-sibling::*[1]/local-name()='code'][1])=''">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="normalize-space(preceding-sibling::text()[preceding-sibling::*[1]/local-name()='code'][1])=''">
            <xsl:attribute name="id">code-sibling-test</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/code-blocks#code-sibling-test</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[code-sibling-test] code element (containing the content <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>) is directly preceded by another code element (containing the content <xsl:text/>
               <xsl:value-of select="preceding::*[1]"/>
               <xsl:text/>). If the content is part of the same code block, then it should be captured using only 1 code element and line breaks added in the xml. If these are separate code blocks (uncommon, but possible), then this markup is fine.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M221"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M221"/>
   <xsl:template match="@*|node()" priority="-2" mode="M221">
      <xsl:apply-templates select="*" mode="M221"/>
   </xsl:template>

   <!--PATTERN code-tests-3-pattern-->


	  <!--RULE code-tests-3-->
   <xsl:template match="p[count(code) = 1]/code" priority="1000" mode="M222">
      <xsl:variable name="previous-parent" select="parent::p/preceding-sibling::*[1]"/>

		    <!--REPORT warning-->
      <xsl:if test="$previous-parent/*[last()][(local-name()='code') and not(following-sibling::text())] and not(preceding-sibling::*) and not(preceding-sibling::text())">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="$previous-parent/*[last()][(local-name()='code') and not(following-sibling::text())] and not(preceding-sibling::*) and not(preceding-sibling::text())">
            <xsl:attribute name="id">code-sibling-test-2</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/code-blocks#code-sibling-test-2</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[code-sibling-test-2] code element (containing the content <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>) is directly preceded by another code element (containing the content <xsl:text/>
               <xsl:value-of select="preceding::*[1]"/>
               <xsl:text/>). If the content is part of the same code block, then it should be captured using only 1 code element and line breaks added in the xml. If these are separate code blocks (uncommon, but possible), then this markup is fine.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M222"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M222"/>
   <xsl:template match="@*|node()" priority="-2" mode="M222">
      <xsl:apply-templates select="*" mode="M222"/>
   </xsl:template>

   <!--PATTERN generic-label-tests-pattern-->


	  <!--RULE generic-label-tests-->
   <xsl:template match="fig/label|supplementary-material/label|media/label|table-wrap/label|boxed-text/label" priority="1000" mode="M223">
      <xsl:variable name="label" select="replace(.,'\.$','')"/>
      <xsl:variable name="label-2" select="replace(.,'\p{P}','')"/>

		    <!--REPORT error-->
      <xsl:if test="not(ancestor::fig-group) and parent::fig[@specific-use='child-fig']">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="not(ancestor::fig-group) and parent::fig[@specific-use='child-fig']">
            <xsl:attribute name="id">label-fig-group-conformance-1</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/figures#label-fig-group-conformance-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[label-fig-group-conformance-1] <xsl:text/>
               <xsl:value-of select="$label"/>
               <xsl:text/> is not placed in a &lt;fig-group&gt; element, which is incorrect. Either the label needs updating, or it needs moving into the &lt;fig-group&gt;.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="not(ancestor::fig-group) and parent::media and matches(.,'[Ff]igure')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="not(ancestor::fig-group) and parent::media and matches(.,'[Ff]igure')">
            <xsl:attribute name="id">label-fig-group-conformance-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[label-fig-group-conformance-2] <xsl:text/>
               <xsl:value-of select="$label"/>
               <xsl:text/> contains the string 'Figure' but it's not placed in a &lt;fig-group&gt; element, which is incorrect. Either the label needs updating, or it needs moving into the &lt;fig-group&gt;.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="some $x in preceding::label satisfies (replace($x,'\p{P}','') = $label-2)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="some $x in preceding::label satisfies (replace($x,'\p{P}','') = $label-2)">
            <xsl:attribute name="id">distinct-label-conformance</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[distinct-label-conformance] Duplicated labels - <xsl:text/>
               <xsl:value-of select="$label"/>
               <xsl:text/> is present more than once in the text.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M223"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M223"/>
   <xsl:template match="@*|node()" priority="-2" mode="M223">
      <xsl:apply-templates select="*" mode="M223"/>
   </xsl:template>

   <!--PATTERN equation-label-tests-pattern-->


	  <!--RULE equation-label-tests-->
   <xsl:template match="article[not(@article-type) or @article-type!='correction']//disp-formula/label" priority="1000" mode="M224">
      <xsl:variable name="label-2" select="replace(.,'\p{P}','')"/>
      <xsl:variable name="app-id" select="ancestor::app/@id"/>

		    <!--REPORT error-->
      <xsl:if test="(ancestor::app) and (some $x in preceding::disp-formula/label[ancestor::app[@id=$app-id]] satisfies (replace($x,'\p{P}','') = $label-2))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(ancestor::app) and (some $x in preceding::disp-formula/label[ancestor::app[@id=$app-id]] satisfies (replace($x,'\p{P}','') = $label-2))">
            <xsl:attribute name="id">equation-label-conformance-1</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/maths#equation-label-conformance-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[equation-label-conformance-1] Duplicated display formula labels - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> is present more than once in the same appendix.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="(ancestor::body[parent::article]) and (some $x in preceding::disp-formula/label[ancestor::body[parent::article] and not(ancestor::fig)] satisfies (replace($x,'\p{P}','') = $label-2))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(ancestor::body[parent::article]) and (some $x in preceding::disp-formula/label[ancestor::body[parent::article] and not(ancestor::fig)] satisfies (replace($x,'\p{P}','') = $label-2))">
            <xsl:attribute name="id">equation-label-conformance-2</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/maths#equation-label-conformance-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[equation-label-conformance-2] Duplicated display formula labels - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> is present more than once in the main body of the text.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M224"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M224"/>
   <xsl:template match="@*|node()" priority="-2" mode="M224">
      <xsl:apply-templates select="*" mode="M224"/>
   </xsl:template>

   <!--PATTERN aff-label-tests-pattern-->


	  <!--RULE aff-label-tests-->
   <xsl:template match="aff/label" priority="1000" mode="M225">
      <xsl:variable name="label-2" select="replace(.,'\p{P}','')"/>

		    <!--REPORT error-->
      <xsl:if test="some $x in preceding::aff/label satisfies (replace($x,'\p{P}','') = $label-2)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="some $x in preceding::aff/label satisfies (replace($x,'\p{P}','') = $label-2)">
            <xsl:attribute name="id">aff-label-conformance-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[aff-label-conformance-1] Duplicated affiliation labels - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> is present more than once.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M225"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M225"/>
   <xsl:template match="@*|node()" priority="-2" mode="M225">
      <xsl:apply-templates select="*" mode="M225"/>
   </xsl:template>

   <!--PATTERN disp-quote-tests-pattern-->


	  <!--RULE disp-quote-tests-->
   <xsl:template match="disp-quote" priority="1000" mode="M226">
      <xsl:variable name="subj" select="ancestor::article//subj-group[@subj-group-type='display-channel']/subject[1]"/>

		    <!--REPORT warning-->
      <xsl:if test="ancestor::sub-article[@article-type='decision-letter']">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="ancestor::sub-article[@article-type='decision-letter']">
            <xsl:attribute name="id">disp-quote-test-1</xsl:attribute>
            <xsl:attribute name="flag">dl-ar</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[disp-quote-test-1] Content is tagged as a display quote, which is almost definitely incorrect, since it's in a decision letter - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="not(ancestor::sub-article) and ($subj=$research-subj)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="not(ancestor::sub-article) and ($subj=$research-subj)">
            <xsl:attribute name="id">disp-quote-test-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[disp-quote-test-2] Display quote in a <xsl:text/>
               <xsl:value-of select="$subj"/>
               <xsl:text/> is not allowed. Please capture as paragraph instead - '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>'</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M226"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M226"/>
   <xsl:template match="@*|node()" priority="-2" mode="M226">
      <xsl:apply-templates select="*" mode="M226"/>
   </xsl:template>

   <!--PATTERN bracket-tests-pattern-->


	  <!--RULE bracket-tests-->
   <xsl:template match="p[matches(.,'[\(\)\[\]]')]|th[matches(.,'[\(\)\[\]]')]|td[matches(.,'[\(\)\[\]]')]|title[matches(.,'[\(\)\[\]]')]" priority="1000" mode="M227">
      <xsl:variable name="open-curly" select="string-length(replace(.,'[^\(]',''))"/>
      <xsl:variable name="close-curly" select="string-length(replace(.,'[^\)]',''))"/>
      <xsl:variable name="open-square" select="string-length(replace(.,'[^\[]',''))"/>
      <xsl:variable name="close-square" select="string-length(replace(.,'[^\]]',''))"/>

		    <!--REPORT warning-->
      <xsl:if test="$open-curly gt $close-curly">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="$open-curly gt $close-curly">
            <xsl:attribute name="id">bracket-test-1</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[bracket-test-1] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains more left '(' than right ')' parentheses (<xsl:text/>
               <xsl:value-of select="$open-curly"/>
               <xsl:text/> and <xsl:text/>
               <xsl:value-of select="$close-curly"/>
               <xsl:text/> respectively). Is that correct? Possibly troublesome section(s) are <xsl:text/>
               <xsl:value-of select="string-join(for $sentence in tokenize(.,'\. ') return if (string-length(replace($sentence,'[^\(]','')) gt string-length(replace($sentence,'[^\)]',''))) then $sentence else (),' ---- ')"/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="not(matches(.,'^\p{Zs}?(\d+|[A-Za-z]|[Ii]?[Xx]|[Ii]?[Vv]|[Vv]?[Ii]{1,3})\)')) and ($open-curly lt $close-curly)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="not(matches(.,'^\p{Zs}?(\d+|[A-Za-z]|[Ii]?[Xx]|[Ii]?[Vv]|[Vv]?[Ii]{1,3})\)')) and ($open-curly lt $close-curly)">
            <xsl:attribute name="id">bracket-test-2</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[bracket-test-2] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains more right ')' than left '(' parentheses (<xsl:text/>
               <xsl:value-of select="$close-curly"/>
               <xsl:text/> and <xsl:text/>
               <xsl:value-of select="$open-curly"/>
               <xsl:text/> respectively). Is that correct? Possibly troublesome section(s) are <xsl:text/>
               <xsl:value-of select="string-join(for $sentence in tokenize(.,'\. ') return if (string-length(replace($sentence,'[^\(]','')) lt string-length(replace($sentence,'[^\)]',''))) then $sentence else (),' ---- ')"/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="$open-square gt $close-square">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="$open-square gt $close-square">
            <xsl:attribute name="id">bracket-test-3</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[bracket-test-3] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains more left '[' than right ']' square brackets (<xsl:text/>
               <xsl:value-of select="$open-square"/>
               <xsl:text/> and <xsl:text/>
               <xsl:value-of select="$close-square"/>
               <xsl:text/> respectively). Is that correct? Possibly troublesome section(s) are <xsl:text/>
               <xsl:value-of select="string-join(for $sentence in tokenize(.,'\. ') return if (string-length(replace($sentence,'[^\[]','')) gt string-length(replace($sentence,'[^\]]',''))) then $sentence else (),' ---- ')"/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="not(matches(.,'^\p{Zs}?(\d+|[A-Za-z]|[Ii]?[Xx]|[Ii]?[Vv]|[Vv]?[Ii]{1,3})\]')) and ($open-square lt $close-square)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="not(matches(.,'^\p{Zs}?(\d+|[A-Za-z]|[Ii]?[Xx]|[Ii]?[Vv]|[Vv]?[Ii]{1,3})\]')) and ($open-square lt $close-square)">
            <xsl:attribute name="id">bracket-test-4</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[bracket-test-4] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains more right ']' than left '[' square brackets (<xsl:text/>
               <xsl:value-of select="$close-square"/>
               <xsl:text/> and <xsl:text/>
               <xsl:value-of select="$open-square"/>
               <xsl:text/> respectively). Is that correct? Possibly troublesome section(s) are <xsl:text/>
               <xsl:value-of select="string-join(for $sentence in tokenize(.,'\. ') return if (string-length(replace($sentence,'[^\[]','')) lt string-length(replace($sentence,'[^\]]',''))) then $sentence else (),' ---- ')"/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M227"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M227"/>
   <xsl:template match="@*|node()" priority="-2" mode="M227">
      <xsl:apply-templates select="*" mode="M227"/>
   </xsl:template>

   <!--PATTERN body-box-tests-pattern-->


	  <!--RULE body-box-tests-->
   <xsl:template match="article/body//boxed-text[not(parent::body) or preceding-sibling::*]" priority="1000" mode="M228">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(label[1],'^Box \d{1,2}\.$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(label[1],'^Box \d{1,2}\.$')">
               <xsl:attribute name="id">body-box-label-test</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[body-box-label-test] <xsl:text/>
                  <xsl:value-of select="name(.)"/>
                  <xsl:text/> element must have a label in the format "Box 0.".</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M228"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M228"/>
   <xsl:template match="@*|node()" priority="-2" mode="M228">
      <xsl:apply-templates select="*" mode="M228"/>
   </xsl:template>

   <!--PATTERN app-box-tests-pattern-->


	  <!--RULE app-box-tests-->
   <xsl:template match="app//boxed-text[not((parent::sec[parent::app] or parent::app) and preceding-sibling::*[1]/name()='title' or count(preceding-sibling::*) = (0,1))]" priority="1000" mode="M229">
      <xsl:variable name="app-title" select="ancestor::app[1]/title"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(label[1],'^Appendix \d{1,2}—box \d{1,2}\.$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(label[1],'^Appendix \d{1,2}—box \d{1,2}\.$')">
               <xsl:attribute name="id">app-box-label-test</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[app-box-label-test] <xsl:text/>
                  <xsl:value-of select="name(.)"/>
                  <xsl:text/> element must have a label in the format "Appendix 0—box 0.".</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="starts-with(label[1],$app-title)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="starts-with(label[1],$app-title)">
               <xsl:attribute name="id">app-box-label-test-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[app-box-label-test-2] <xsl:text/>
                  <xsl:value-of select="name(.)"/>
                  <xsl:text/> label must start with the title for the appendix it sits in, <xsl:text/>
                  <xsl:value-of select="$app-title"/>
                  <xsl:text/>. This one does not - "<xsl:text/>
                  <xsl:value-of select="label[1]"/>
                  <xsl:text/>".</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M229"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M229"/>
   <xsl:template match="@*|node()" priority="-2" mode="M229">
      <xsl:apply-templates select="*" mode="M229"/>
   </xsl:template>

   <!--PATTERN app-content-tests-pattern-->


	  <!--RULE app-content-tests-->
   <xsl:template match="app[not(preceding-sibling::app) and not(following-sibling::app) and not(descendant::sec or descendant::table-wrap or descendant::fig or descendant::media[@mimetype='video'] or descendant::disp-formula)]" priority="1000" mode="M230">

		<!--REPORT warning-->
      <xsl:if test="count(descendant::p) = (0,1)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(descendant::p) = (0,1)">
            <xsl:attribute name="id">app-little-content</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[app-little-content] <xsl:text/>
               <xsl:value-of select="title"/>
               <xsl:text/> has no sibling appendices, contains no assets (figures, tables, videos, or display formula), and only has one paragraph. Does it need to be an appendix?</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M230"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M230"/>
   <xsl:template match="@*|node()" priority="-2" mode="M230">
      <xsl:apply-templates select="*" mode="M230"/>
   </xsl:template>

   <!--PATTERN attrib-tests-pattern-->


	  <!--RULE attrib-tests-->
   <xsl:template match="attrib" priority="1000" mode="M231">
      <xsl:variable name="parent" select="parent::*/name()"/>
      <xsl:variable name="allowed-parents" select="('fig','media','table-wrap','boxed-text','disp-quote')"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="$parent=$allowed-parents"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="$parent=$allowed-parents">
               <xsl:attribute name="id">attrib-parent</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[attrib-parent] attrib is a child of <xsl:text/>
                  <xsl:value-of select="$parent"/>
                  <xsl:text/>, which is not allowed. It can only be a child of the following elements: <xsl:text/>
                  <xsl:value-of select="string-join($allowed-parents,'; ')"/>
                  <xsl:text/>
               </svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT warning-->
      <xsl:if test="preceding-sibling::attrib">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="preceding-sibling::attrib">
            <xsl:attribute name="id">attrib-sibling</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[attrib-sibling] attrib has a preceding sibling. Does the <xsl:text/>
               <xsl:value-of select="$parent"/>
               <xsl:text/> really need more than one attrib?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="* or normalize-space(.)!=''"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="* or normalize-space(.)!=''">
               <xsl:attribute name="id">attrib-content</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[attrib-content] attrib cannot be empty.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M231"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M231"/>
   <xsl:template match="@*|node()" priority="-2" mode="M231">
      <xsl:apply-templates select="*" mode="M231"/>
   </xsl:template>

   <!--PATTERN attrib-child-tests-pattern-->


	  <!--RULE attrib-child-tests-->
   <xsl:template match="attrib/*" priority="1000" mode="M232">
      <xsl:variable name="allowed-children" select="('ext-link', 'xref', 'inline-graphic', 'italic', 'sub', 'bold', 'sup')"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="name()=$allowed-children"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="name()=$allowed-children">
               <xsl:attribute name="id">attrib-child</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[attrib-child] <xsl:text/>
                  <xsl:value-of select="name()"/>
                  <xsl:text/> is not permitted as a child of attrib. Only the following elements are: <xsl:text/>
                  <xsl:value-of select="string-join($allowed-children,'; ')"/>
                  <xsl:text/>
               </svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M232"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M232"/>
   <xsl:template match="@*|node()" priority="-2" mode="M232">
      <xsl:apply-templates select="*" mode="M232"/>
   </xsl:template>

   <!--PATTERN body-video-specific-pattern-->


	  <!--RULE body-video-specific-->
   <xsl:template match="article[not(@article-type = $notice-article-types)]/body//media[@mimetype='video']" priority="1000" mode="M233">
      <xsl:variable name="count" select="count(ancestor::body//media[@mimetype='video'][matches(label[1],'^Video [\d]+\.$')])"/>
      <xsl:variable name="pos" select="$count - count(following::media[@mimetype='video'][matches(label[1],'^Video [\d]+\.$')][ancestor::body])"/>
      <xsl:variable name="no" select="substring-after(@id,'video')"/>
      <xsl:variable name="fig-label" select="replace(ancestor::fig-group/fig[1]/label,'\.$','—')"/>
      <xsl:variable name="fig-pos" select="count(ancestor::fig-group//media[@mimetype='video'][starts-with(label[1],$fig-label)]) - count(following::media[@mimetype='video'][starts-with(label[1],$fig-label)])"/>

		    <!--REPORT error-->
      <xsl:if test="not(ancestor::fig-group) and (matches(label[1],'[Vv]ideo')) and ($no != string($pos))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="not(ancestor::fig-group) and (matches(label[1],'[Vv]ideo')) and ($no != string($pos))">
            <xsl:attribute name="id">final-body-video-position-test-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[final-body-video-position-test-1] <xsl:text/>
               <xsl:value-of select="label"/>
               <xsl:text/> does not appear in sequence which is incorrect. Relative to the other videos it is placed in position <xsl:text/>
               <xsl:value-of select="$pos"/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="starts-with(label[1],$fig-label)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="starts-with(label[1],$fig-label)">
               <xsl:attribute name="id">fig-video-label-test</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[fig-video-label-test] <xsl:text/>
                  <xsl:value-of select="label"/>
                  <xsl:text/> does not begin with its parent figure label - <xsl:text/>
                  <xsl:value-of select="$fig-label"/>
                  <xsl:text/> - which is incorrect.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="(ancestor::fig-group) and ($no != string($fig-pos))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(ancestor::fig-group) and ($no != string($fig-pos))">
            <xsl:attribute name="id">fig-video-position-test</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[fig-video-position-test] <xsl:text/>
               <xsl:value-of select="label"/>
               <xsl:text/> does not appear in sequence which is incorrect. Relative to the other fig-level videos it is placed in position <xsl:text/>
               <xsl:value-of select="$fig-pos"/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="(not(ancestor::fig-group)) and (descendant::xref[@ref-type='fig'][contains(.,'igure') and not(contains(.,'supplement'))])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(not(ancestor::fig-group)) and (descendant::xref[@ref-type='fig'][contains(.,'igure') and not(contains(.,'supplement'))])">
            <xsl:attribute name="id">fig-video-check-1</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[fig-video-check-1] <xsl:text/>
               <xsl:value-of select="label"/>
               <xsl:text/> contains a link to <xsl:text/>
               <xsl:value-of select="descendant::xref[@ref-type='fig'][contains(.,'igure') and not(contains(.,'supplement'))][1]"/>
               <xsl:text/>, but it is not a captured as a child of that fig. Should it be captured as <xsl:text/>
               <xsl:value-of select="concat(descendant::xref[@ref-type='fig'][contains(.,'igure') and not(contains(.,'supplement'))][1],'—video x')"/>
               <xsl:text/> instead?</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M233"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M233"/>
   <xsl:template match="@*|node()" priority="-2" mode="M233">
      <xsl:apply-templates select="*" mode="M233"/>
   </xsl:template>

   <!--PATTERN app-video-specific-pattern-->


	  <!--RULE app-video-specific-->
   <xsl:template match="app//media[@mimetype='video']" priority="1000" mode="M234">
      <xsl:variable name="app-id" select="ancestor::app/@id"/>
      <xsl:variable name="count" select="count(ancestor::app//media[@mimetype='video'])"/>
      <xsl:variable name="pos" select="$count - count(following::media[(@mimetype='video') and (ancestor::app/@id = $app-id)])"/>
      <xsl:variable name="no" select="substring-after(@id,'video')"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="$no = string($pos)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="$no = string($pos)">
               <xsl:attribute name="id">final-app-video-position-test</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[final-app-video-position-test] <xsl:text/>
                  <xsl:value-of select="label"/>
                  <xsl:text/> does not appear in sequence which is incorrect. Relative to the other AR videos it is placed in position <xsl:text/>
                  <xsl:value-of select="$pos"/>
                  <xsl:text/>.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M234"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M234"/>
   <xsl:template match="@*|node()" priority="-2" mode="M234">
      <xsl:apply-templates select="*" mode="M234"/>
   </xsl:template>

   <!--PATTERN fig-video-specific-pattern-->


	  <!--RULE fig-video-specific-->
   <xsl:template match="fig-group/media[@mimetype='video']" priority="1000" mode="M235">

		<!--REPORT error-->
      <xsl:if test="following-sibling::fig">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="following-sibling::fig">
            <xsl:attribute name="id">fig-video-position-test-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[fig-video-position-test-2] <xsl:text/>
               <xsl:value-of select="replace(label,'\.$','')"/>
               <xsl:text/> is placed before <xsl:text/>
               <xsl:value-of select="following-sibling::fig[1]/label[1]"/>
               <xsl:text/> Figure level videos should always be placed after figures and figure supplements in their figure group.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M235"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M235"/>
   <xsl:template match="@*|node()" priority="-2" mode="M235">
      <xsl:apply-templates select="*" mode="M235"/>
   </xsl:template>

   <!--PATTERN dl-video-specific-pattern-->


	  <!--RULE dl-video-specific-->
   <xsl:template match="sub-article[@article-type=('decision-letter','referee-report')]/body//media[@mimetype='video']" priority="1000" mode="M236">
      <xsl:variable name="count" select="count(ancestor::body//media[@mimetype='video'])"/>
      <xsl:variable name="pos" select="$count - count(following::media[@mimetype='video' and ancestor::sub-article/@article-type=('decision-letter','referee-report')])"/>
      <xsl:variable name="no" select="substring-after(@id,'video')"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="$no = string($pos)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="$no = string($pos)">
               <xsl:attribute name="id">final-dl-video-position-test</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[final-dl-video-position-test] <xsl:text/>
                  <xsl:value-of select="label"/>
                  <xsl:text/> does not appear in sequence which is incorrect. Relative to the other DL videos it is placed in position <xsl:text/>
                  <xsl:value-of select="$pos"/>
                  <xsl:text/>.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M236"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M236"/>
   <xsl:template match="@*|node()" priority="-2" mode="M236">
      <xsl:apply-templates select="*" mode="M236"/>
   </xsl:template>

   <!--PATTERN ar-video-specific-pattern-->


	  <!--RULE ar-video-specific-->
   <xsl:template match="sub-article[@article-type=('reply','author-comment')]/body//media[@mimetype='video']" priority="1000" mode="M237">
      <xsl:variable name="count" select="count(ancestor::body//media[@mimetype='video'])"/>
      <xsl:variable name="pos" select="$count - count(following::media[@mimetype='video'])"/>
      <xsl:variable name="no" select="substring-after(@id,'video')"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="$no = string($pos)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="$no = string($pos)">
               <xsl:attribute name="id">final-ar-video-position-test</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[final-ar-video-position-test] <xsl:text/>
                  <xsl:value-of select="label"/>
                  <xsl:text/> does not appear in sequence which is incorrect. Relative to the other AR videos it is placed in position <xsl:text/>
                  <xsl:value-of select="$pos"/>
                  <xsl:text/>.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M237"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M237"/>
   <xsl:template match="@*|node()" priority="-2" mode="M237">
      <xsl:apply-templates select="*" mode="M237"/>
   </xsl:template>

   <!--PATTERN body-table-pos-conformance-pattern-->


	  <!--RULE body-table-pos-conformance-->
   <xsl:template match="article[not(@article-type=$notice-article-types)]/body//table-wrap[matches(@id,'^table[\d]+$')]" priority="1000" mode="M238">
      <xsl:variable name="count" select="count(ancestor::body//table-wrap[matches(@id,'^table[\d]+$')])"/>
      <xsl:variable name="pos" select="$count - count(following::table-wrap[(matches(@id,'^table[\d]+$')) and (ancestor::body) and not(ancestor::sub-article)])"/>
      <xsl:variable name="no" select="substring-after(@id,'table')"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="($no = string($pos))"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="($no = string($pos))">
               <xsl:attribute name="id">final-body-table-report</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/tables#final-body-table-report</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[final-body-table-report] <xsl:text/>
                  <xsl:value-of select="label"/>
                  <xsl:text/> does not appear in sequence which is incorrect. Relative to the other numbered tables it is placed in position <xsl:text/>
                  <xsl:value-of select="$pos"/>
                  <xsl:text/>.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M238"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M238"/>
   <xsl:template match="@*|node()" priority="-2" mode="M238">
      <xsl:apply-templates select="*" mode="M238"/>
   </xsl:template>

   <!--PATTERN app-table-pos-conformance-pattern-->


	  <!--RULE app-table-pos-conformance-->
   <xsl:template match="article//app//table-wrap[matches(@id,'^app[\d]+table[\d]+$')]" priority="1000" mode="M239">
      <xsl:variable name="app-id" select="ancestor::app/@id"/>
      <xsl:variable name="app-no" select="substring-after($app-id,'appendix-')"/>
      <xsl:variable name="id-regex" select="concat('^app',$app-no,'table[\d]+$')"/>
      <xsl:variable name="count" select="count(ancestor::app//table-wrap[matches(@id,$id-regex)])"/>
      <xsl:variable name="pos" select="$count - count(following::table-wrap[matches(@id,$id-regex)])"/>
      <xsl:variable name="no" select="substring-after(@id,concat($app-no,'table'))"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="($no = string($pos))"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="($no = string($pos))">
               <xsl:attribute name="id">final-app-table-report</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/tables#final-app-table-report</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[final-app-table-report] <xsl:text/>
                  <xsl:value-of select="label"/>
                  <xsl:text/> does not appear in sequence which is incorrect. Relative to the other numbered tables in the same appendix it is placed in position <xsl:text/>
                  <xsl:value-of select="$pos"/>
                  <xsl:text/>.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M239"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M239"/>
   <xsl:template match="@*|node()" priority="-2" mode="M239">
      <xsl:apply-templates select="*" mode="M239"/>
   </xsl:template>

   <!--PATTERN fig-specific-tests-pattern-->


	  <!--RULE fig-specific-tests-->
   <xsl:template match="article/body//fig[not(@specific-use='child-fig')][not(ancestor::boxed-text)]" priority="1000" mode="M240">
      <xsl:variable name="article-type" select="ancestor::article/@article-type"/>
      <xsl:variable name="id" select="@id"/>
      <xsl:variable name="count" select="count(ancestor::article//fig[matches(label[1],'^Figure \d{1,4}\.$')])"/>
      <xsl:variable name="pos" select="$count - count(following::fig[matches(label[1],'^Figure \d{1,4}\.$')])"/>
      <xsl:variable name="no" select="substring-after($id,'fig')"/>
      <xsl:variable name="pre-sib" select="preceding-sibling::*[1]"/>
      <xsl:variable name="fol-sib" select="following-sibling::*[1]"/>
      <xsl:variable name="lab" select="replace(label[1],'\.','')"/>
      <xsl:variable name="first-cite" select="ancestor::article/body/descendant::xref[parent::p and not(ancestor::caption) and not(ancestor::table-wrap) and (@rid = $id)][1]"/>
      <xsl:variable name="first-cite-parent" select="if ($first-cite/ancestor::list) then $first-cite/ancestor::list[last()] else $first-cite/parent::p"/>
      <xsl:variable name="in-between-elements" select="distinct-values(         $first-cite-parent/following-sibling::*[@id=$id or (child::*[@id=$id] and local-name()='fig-group') or following::*[@id=$id] or following::*/*[@id=$id]]/local-name()         )"/>

		    <!--REPORT error-->
      <xsl:if test="label[contains(lower-case(.),'supplement')]">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="label[contains(lower-case(.),'supplement')]">
            <xsl:attribute name="id">fig-specific-test-1</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/figures#fig-specific-test-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[fig-specific-test-1] fig label contains 'supplement', but it does not have a @specific-use='child-fig'. If it is a figure supplement it needs the attribute, if it isn't then it cannot contain 'supplement' in the label.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="if ($article-type = $notice-article-types) then ()         else if ($count = 0) then ()         else if (not(matches($id,'^fig[0-9]{1,3}$'))) then ()         else $no != string($pos)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="if ($article-type = $notice-article-types) then () else if ($count = 0) then () else if (not(matches($id,'^fig[0-9]{1,3}$'))) then () else $no != string($pos)">
            <xsl:attribute name="id">final-fig-specific-test-2</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/figures#final-fig-specific-test-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[final-fig-specific-test-2] <xsl:text/>
               <xsl:value-of select="$lab"/>
               <xsl:text/> does not appear in sequence which is incorrect. Relative to the other figures it is placed in position <xsl:text/>
               <xsl:value-of select="$pos"/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="not($article-type = $notice-article-types) and ancestor::article//xref[@rid = $id] and  (empty($in-between-elements) or (some $x in $in-between-elements satisfies not($x=('fig-group','fig','media','table-wrap'))))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="not($article-type = $notice-article-types) and ancestor::article//xref[@rid = $id] and (empty($in-between-elements) or (some $x in $in-between-elements satisfies not($x=('fig-group','fig','media','table-wrap'))))">
            <xsl:attribute name="id">fig-specific-test-3</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/figures#fig-specific-test-3</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[fig-specific-test-3] <xsl:text/>
               <xsl:value-of select="$lab"/>
               <xsl:text/> is cited, but does not appear directly after the paragraph citing it. Is that correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="if ($article-type = ($features-article-types,$notice-article-types)) then ()         else if (contains($lab,'Chemical') or contains($lab,'Scheme')) then ()         else not(ancestor::article//xref[@rid = $id])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="if ($article-type = ($features-article-types,$notice-article-types)) then () else if (contains($lab,'Chemical') or contains($lab,'Scheme')) then () else not(ancestor::article//xref[@rid = $id])">
            <xsl:attribute name="id">final-fig-specific-test-4</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/figures#final-fig-specific-test-4</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[final-fig-specific-test-4] There is no citation to <xsl:text/>
               <xsl:value-of select="$lab"/>
               <xsl:text/> Ensure this is added.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="if ($article-type = $features-article-types) then (not(ancestor::article//xref[@rid = $id]))         else ()">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="if ($article-type = $features-article-types) then (not(ancestor::article//xref[@rid = $id])) else ()">
            <xsl:attribute name="id">feat-fig-specific-test-4</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/figures#feat-fig-specific-test-4</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[feat-fig-specific-test-4] There is no citation to <xsl:text/>
               <xsl:value-of select="if (label) then label else 'figure.'"/>
               <xsl:text/> Is this correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="($fol-sib/local-name() = 'p') and ($fol-sib/*/local-name() = 'disp-formula') and (count($fol-sib/*[1]/preceding-sibling::text()) = 0) and (not(matches($pre-sib,'\.\p{Zs}*?$|\?\p{Zs}*?$|!\p{Zs}*?$')))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="($fol-sib/local-name() = 'p') and ($fol-sib/*/local-name() = 'disp-formula') and (count($fol-sib/*[1]/preceding-sibling::text()) = 0) and (not(matches($pre-sib,'\.\p{Zs}*?$|\?\p{Zs}*?$|!\p{Zs}*?$')))">
            <xsl:attribute name="id">fig-specific-test-6</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/figures#fig-specific-test-6</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[fig-specific-test-6] <xsl:text/>
               <xsl:value-of select="$lab"/>
               <xsl:text/> is immediately followed by a display formula, and preceded by a paragraph which does not end with punctuation. Should it should be moved after the display formula or after the para following the display formula?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="($fol-sib/local-name() = 'disp-formula') and (not(matches($pre-sib,'\.\p{Zs}*?$|\?\p{Zs}*?$|!\p{Zs}*?$')))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="($fol-sib/local-name() = 'disp-formula') and (not(matches($pre-sib,'\.\p{Zs}*?$|\?\p{Zs}*?$|!\p{Zs}*?$')))">
            <xsl:attribute name="id">fig-specific-test-5</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/figures#fig-specific-test-5</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[fig-specific-test-5] <xsl:text/>
               <xsl:value-of select="$lab"/>
               <xsl:text/> is immediately followed by a display formula, and preceded by a paragraph which does not end with punctuation. Should it should be moved after the display formula or after the para following the display formula?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="not($article-type = $notice-article-types) and ancestor::article//xref[(ancestor::caption or ancestor::table-wrap) and @rid = $id] and not(ancestor::article//xref[(@rid = $id) and not(ancestor::caption) and not(ancestor::table-wrap)])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="not($article-type = $notice-article-types) and ancestor::article//xref[(ancestor::caption or ancestor::table-wrap) and @rid = $id] and not(ancestor::article//xref[(@rid = $id) and not(ancestor::caption) and not(ancestor::table-wrap)])">
            <xsl:attribute name="id">fig-specific-test-7</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[fig-specific-test-7] <xsl:text/>
               <xsl:value-of select="$lab"/>
               <xsl:text/> is only cited in a table or the caption of an object. Please ask the authors for citation in the main text.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M240"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M240"/>
   <xsl:template match="@*|node()" priority="-2" mode="M240">
      <xsl:apply-templates select="*" mode="M240"/>
   </xsl:template>

   <!--PATTERN fig-label-tests-pattern-->


	  <!--RULE fig-label-tests-->
   <xsl:template match="article/body//fig[not(@specific-use='child-fig')][not(ancestor::boxed-text)]/label" priority="1000" mode="M241">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(.,'^Figure \d{1,4}\.$|^Chemical structure \d{1,4}\.$|^Scheme \d{1,4}\.$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'^Figure \d{1,4}\.$|^Chemical structure \d{1,4}\.$|^Scheme \d{1,4}\.$')">
               <xsl:attribute name="id">fig-label-test-1</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/figures#fig-label-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[fig-label-test-1] fig label must be in the format 'Figure 0.', 'Chemical structure 0.', or 'Scheme 0'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M241"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M241"/>
   <xsl:template match="@*|node()" priority="-2" mode="M241">
      <xsl:apply-templates select="*" mode="M241"/>
   </xsl:template>

   <!--PATTERN fig-sup-tests-pattern-->


	  <!--RULE fig-sup-tests-->
   <xsl:template match="article/body//fig[@specific-use='child-fig']" priority="1000" mode="M242">
      <xsl:variable name="article-type" select="ancestor::article/@article-type"/>
      <xsl:variable name="count" select="count(parent::fig-group/fig[@specific-use='child-fig'])"/>
      <xsl:variable name="pos" select="$count - count(following-sibling::fig[@specific-use='child-fig'])"/>
      <xsl:variable name="label-conforms" select="matches(label[1],'^Figure [\d]+—figure supplement [\d]+')"/>
      <xsl:variable name="no" select="substring-after(@id,'s')"/>
      <xsl:variable name="parent-fig-no" select="substring-after(parent::fig-group/fig[not(@specific-use='child-fig')][1]/@id,'fig')"/>
      <xsl:variable name="label-no" select="replace(substring-after(label[1],'supplement'),'[^\d]','')"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="parent::fig-group"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="parent::fig-group">
               <xsl:attribute name="id">fig-sup-test-1</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/figures#fig-sup-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[fig-sup-test-1] fig supplement is not a child of fig-group. This cannot be correct.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="$label-conforms"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="$label-conforms">
               <xsl:attribute name="id">fig-sup-test-2</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/figures#fig-sup-test-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[fig-sup-test-2] fig in the body of the article which has a @specific-use='child-fig' must have a label in the format 'Figure 0—figure supplement 0.' (where 0 is one or more digits).</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="starts-with(label[1],concat('Figure ',$parent-fig-no))"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="starts-with(label[1],concat('Figure ',$parent-fig-no))">
               <xsl:attribute name="id">fig-sup-test-3</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/figures#fig-sup-test-3</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[fig-sup-test-3] <xsl:text/>
                  <xsl:value-of select="label"/>
                  <xsl:text/> does not start with the main figure number it is associated with - <xsl:text/>
                  <xsl:value-of select="concat('Figure ',$parent-fig-no)"/>
                  <xsl:text/>.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="if ($article-type = $notice-article-types) then ()         else $no != string($pos)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="if ($article-type = $notice-article-types) then () else $no != string($pos)">
            <xsl:attribute name="id">fig-sup-test-4</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/figures#fig-sup-test-4</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[fig-sup-test-4] <xsl:text/>
               <xsl:value-of select="label"/>
               <xsl:text/> does not appear in sequence which is incorrect. Relative to the other figures it is placed in position <xsl:text/>
               <xsl:value-of select="$pos"/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="if ($article-type = $notice-article-types) then ()         else ($label-conforms and ($label-no != string($pos)))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="if ($article-type = $notice-article-types) then () else ($label-conforms and ($label-no != string($pos)))">
            <xsl:attribute name="id">fig-sup-test-5</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/figures#fig-sup-test-5</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[fig-sup-test-5] <xsl:text/>
               <xsl:value-of select="label"/>
               <xsl:text/> is in position <xsl:text/>
               <xsl:value-of select="$pos"/>
               <xsl:text/>, which means either the label or the placement incorrect.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="$label-conforms and ($no != $label-no)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="$label-conforms and ($no != $label-no)">
            <xsl:attribute name="id">fig-sup-test-6</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/figures#fig-sup-test-6</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[fig-sup-test-6] <xsl:text/>
               <xsl:value-of select="label"/>
               <xsl:text/> label ends with <xsl:text/>
               <xsl:value-of select="$label-no"/>
               <xsl:text/>, but the id (<xsl:text/>
               <xsl:value-of select="@id"/>
               <xsl:text/>) ends with <xsl:text/>
               <xsl:value-of select="$no"/>
               <xsl:text/>, so one must be incorrect.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M242"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M242"/>
   <xsl:template match="@*|node()" priority="-2" mode="M242">
      <xsl:apply-templates select="*" mode="M242"/>
   </xsl:template>

   <!--PATTERN rep-fig-tests-pattern-->


	  <!--RULE rep-fig-tests-->
   <xsl:template match="sub-article[@article-type='reply']//fig" priority="1000" mode="M243">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="label"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="label">
               <xsl:attribute name="id">resp-fig-test-2</xsl:attribute>
               <xsl:attribute name="flag">dl-ar</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/figures#resp-fig-test-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[resp-fig-test-2] fig must have a label.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(label[1],'^Author response image [0-9]{1,3}\.$|^Chemical structure \d{1,4}\.$|^Scheme \d{1,4}\.$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(label[1],'^Author response image [0-9]{1,3}\.$|^Chemical structure \d{1,4}\.$|^Scheme \d{1,4}\.$')">
               <xsl:attribute name="id">reply-fig-test-2</xsl:attribute>
               <xsl:attribute name="flag">dl-ar</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/figures#reply-fig-test-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[reply-fig-test-2] fig label in author response must be in the format 'Author response image 1.', or 'Chemical Structure 1.', or 'Scheme 1.'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M243"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M243"/>
   <xsl:template match="@*|node()" priority="-2" mode="M243">
      <xsl:apply-templates select="*" mode="M243"/>
   </xsl:template>

   <!--PATTERN dec-fig-tests-pattern-->


	  <!--RULE dec-fig-tests-->
   <xsl:template match="sub-article[@article-type='decision-letter']//fig" priority="1000" mode="M244">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="label"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="label">
               <xsl:attribute name="id">dec-fig-test-1</xsl:attribute>
               <xsl:attribute name="flag">dl-ar</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/figures#dec-fig-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[dec-fig-test-1] fig must have a label.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(label[1],'^Decision letter image [0-9]{1,3}\.$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(label[1],'^Decision letter image [0-9]{1,3}\.$')">
               <xsl:attribute name="id">dec-fig-test-2</xsl:attribute>
               <xsl:attribute name="flag">dl-ar</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/figures#dec-fig-test-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[dec-fig-test-2] fig label in author response must be in the format 'Decision letter image 1.'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M244"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M244"/>
   <xsl:template match="@*|node()" priority="-2" mode="M244">
      <xsl:apply-templates select="*" mode="M244"/>
   </xsl:template>

   <!--PATTERN box-fig-tests-pattern-->


	  <!--RULE box-fig-tests-->
   <xsl:template match="article/body//boxed-text//fig[not(@specific-use='child-fig')]/label" priority="1000" mode="M245">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(.,'^Box \d{1,4}—figure \d{1,4}\.$|^Chemical structure \d{1,4}\.$|^Scheme \d{1,4}\.$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'^Box \d{1,4}—figure \d{1,4}\.$|^Chemical structure \d{1,4}\.$|^Scheme \d{1,4}\.$')">
               <xsl:attribute name="id">box-fig-test-1</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/figures#box-fig-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[box-fig-test-1] label for fig inside boxed-text must be in the format 'Box 1—figure 1.', or 'Chemical structure 1.', or 'Scheme 1'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M245"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M245"/>
   <xsl:template match="@*|node()" priority="-2" mode="M245">
      <xsl:apply-templates select="*" mode="M245"/>
   </xsl:template>

   <!--PATTERN app-fig-tests-pattern-->


	  <!--RULE app-fig-tests-->
   <xsl:template match="article//app//fig[not(@specific-use='child-fig')]/label" priority="1000" mode="M246">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(.,'^Appendix \d{1,4}—figure \d{1,4}\.$|^Appendix [A-Z]—figure \d{1,4}\.$|^Appendix—figure \d{1,4}\.$|^Appendix \d{1,4}—chemical structure \d{1,4}\.$|^Appendix \d{1,4}—scheme \d{1,4}\.$|^Appendix [A-Z]—chemical structure \d{1,4}\.$|^Appendix [A-Z]—scheme \d{1,4}\.$|^Appendix—chemical structure \d{1,4}\.$|^Appendix—scheme \d{1,4}\.$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'^Appendix \d{1,4}—figure \d{1,4}\.$|^Appendix [A-Z]—figure \d{1,4}\.$|^Appendix—figure \d{1,4}\.$|^Appendix \d{1,4}—chemical structure \d{1,4}\.$|^Appendix \d{1,4}—scheme \d{1,4}\.$|^Appendix [A-Z]—chemical structure \d{1,4}\.$|^Appendix [A-Z]—scheme \d{1,4}\.$|^Appendix—chemical structure \d{1,4}\.$|^Appendix—scheme \d{1,4}\.$')">
               <xsl:attribute name="id">app-fig-test-1</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/figures#app-fig-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[app-fig-test-1] label for fig inside appendix must be in the format 'Appendix 1—figure 1.', 'Appendix A—figure 1.', or 'Appendix 1—chemical structure 1.', or 'Appendix A—scheme 1'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="matches(.,'^Appendix \d{1,4}—figure \d{1,4}\.$|^Appendix—figure \d{1,4}\.$') and not(starts-with(.,ancestor::app/title))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'^Appendix \d{1,4}—figure \d{1,4}\.$|^Appendix—figure \d{1,4}\.$') and not(starts-with(.,ancestor::app/title))">
            <xsl:attribute name="id">app-fig-test-2</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/figures#app-fig-test-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[app-fig-test-2] label for <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> does not start with the correct appendix prefix. Either the figure is placed in the incorrect appendix or the label is incorrect.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M246"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M246"/>
   <xsl:template match="@*|node()" priority="-2" mode="M246">
      <xsl:apply-templates select="*" mode="M246"/>
   </xsl:template>

   <!--PATTERN app-fig-sup-tests-pattern-->


	  <!--RULE app-fig-sup-tests-->
   <xsl:template match="article//app//fig[@specific-use='child-fig']/label" priority="1000" mode="M247">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(.,'^Appendix \d{1,4}—figure \d{1,4}—figure supplement \d{1,4}\.$|^Appendix—figure \d{1,4}—figure supplement \d{1,4}\.$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'^Appendix \d{1,4}—figure \d{1,4}—figure supplement \d{1,4}\.$|^Appendix—figure \d{1,4}—figure supplement \d{1,4}\.$')">
               <xsl:attribute name="id">app-fig-sup-test-1</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/figures#app-fig-sup-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[app-fig-sup-test-1] label for fig inside appendix must be in the format 'Appendix 1—figure 1—figure supplement 1.'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="starts-with(.,ancestor::app/title)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="starts-with(.,ancestor::app/title)">
               <xsl:attribute name="id">app-fig-sup-test-2</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/figures#app-fig-sup-test-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[app-fig-sup-test-2] label for <xsl:text/>
                  <xsl:value-of select="."/>
                  <xsl:text/> does not start with the correct appendix prefix. Either the figure is placed in the incorrect appendix or the label is incorrect.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M247"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M247"/>
   <xsl:template match="@*|node()" priority="-2" mode="M247">
      <xsl:apply-templates select="*" mode="M247"/>
   </xsl:template>

   <!--PATTERN fig-permissions-pattern-->


	  <!--RULE fig-permissions-->
   <xsl:template match="permissions[not(parent::article-meta)]" priority="1000" mode="M248">
      <xsl:variable name="label" select="if (parent::*/label[1]) then replace(parent::*/label[1],'\.$','') else parent::*/local-name()"/>

		    <!--REPORT error-->
      <xsl:if test="copyright-statement and (not(copyright-year) or not(copyright-holder))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="copyright-statement and (not(copyright-year) or not(copyright-holder))">
            <xsl:attribute name="id">fig-permissions-test-1</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/licensing-and-copyright#fig-permissions-test-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[fig-permissions-test-1] permissions for <xsl:text/>
               <xsl:value-of select="$label"/>
               <xsl:text/> has a copyright-statement, but not a copyright-year or copyright-holder which is incorrect.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="copyright-year and (not(copyright-statement) or not(copyright-holder))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="copyright-year and (not(copyright-statement) or not(copyright-holder))">
            <xsl:attribute name="id">fig-permissions-test-2</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/licensing-and-copyright#fig-permissions-test-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[fig-permissions-test-2] permissions for <xsl:text/>
               <xsl:value-of select="$label"/>
               <xsl:text/> has a copyright-year, but not a copyright-statement or copyright-holder which is incorrect.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="copyright-holder and (not(copyright-statement) or not(copyright-year))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="copyright-holder and (not(copyright-statement) or not(copyright-year))">
            <xsl:attribute name="id">fig-permissions-test-3</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/licensing-and-copyright#fig-permissions-test-3</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[fig-permissions-test-3] permissions for <xsl:text/>
               <xsl:value-of select="$label"/>
               <xsl:text/> has a copyright-holder, but not a copyright-statement or copyright-year which is incorrect.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="license/license-p"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="license/license-p">
               <xsl:attribute name="id">fig-permissions-test-4</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/licensing-and-copyright#fig-permissions-test-4</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[fig-permissions-test-4] permissions for <xsl:text/>
                  <xsl:value-of select="$label"/>
                  <xsl:text/> must contain a license-p element.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="count(copyright-statement) gt 1">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(copyright-statement) gt 1">
            <xsl:attribute name="id">fig-permissions-test-5</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/licensing-and-copyright#fig-permissions-test-5</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[fig-permissions-test-5] permissions for <xsl:text/>
               <xsl:value-of select="$label"/>
               <xsl:text/> has <xsl:text/>
               <xsl:value-of select="count(copyright-statement)"/>
               <xsl:text/> &lt;copyright-statement&gt; elements, when there can only be 0 or 1.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="count(copyright-holder) gt 1">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(copyright-holder) gt 1">
            <xsl:attribute name="id">fig-permissions-test-6</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/licensing-and-copyright#fig-permissions-test-6</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[fig-permissions-test-6] permissions for <xsl:text/>
               <xsl:value-of select="$label"/>
               <xsl:text/> has <xsl:text/>
               <xsl:value-of select="count(copyright-holder)"/>
               <xsl:text/> &lt;copyright-holder&gt; elements, when there can only be 0 or 1.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="count(copyright-year) gt 1">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(copyright-year) gt 1">
            <xsl:attribute name="id">fig-permissions-test-7</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/licensing-and-copyright#fig-permissions-test-7</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[fig-permissions-test-7] permissions for <xsl:text/>
               <xsl:value-of select="$label"/>
               <xsl:text/> has <xsl:text/>
               <xsl:value-of select="count(copyright-year)"/>
               <xsl:text/> &lt;copyright-year&gt; elements, when there can only be 0 or 1.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="count(license) gt 1">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(license) gt 1">
            <xsl:attribute name="id">fig-permissions-test-8</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/licensing-and-copyright#fig-permissions-test-8</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[fig-permissions-test-8] permissions for <xsl:text/>
               <xsl:value-of select="$label"/>
               <xsl:text/> has <xsl:text/>
               <xsl:value-of select="count(license)"/>
               <xsl:text/> &lt;license&gt; elements, when there can only be 0 or 1.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="(count(license) = 1) and not(license/license-p)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(count(license) = 1) and not(license/license-p)">
            <xsl:attribute name="id">fig-permissions-test-9</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/licensing-and-copyright#fig-permissions-test-9</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[fig-permissions-test-9] permissions for <xsl:text/>
               <xsl:value-of select="$label"/>
               <xsl:text/> has a &lt;license&gt; element, but not &lt;license-p&gt; element, which is incorrect.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="count(license/license-p) gt 1">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(license/license-p) gt 1">
            <xsl:attribute name="id">fig-permissions-test-10</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/licensing-and-copyright#fig-permissions-test-10</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[fig-permissions-test-10] permissions for <xsl:text/>
               <xsl:value-of select="$label"/>
               <xsl:text/> has <xsl:text/>
               <xsl:value-of select="count(license-p)"/>
               <xsl:text/> &lt;license-p&gt; elements, when there can only be 0 or 1.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="copyright-statement or license"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="copyright-statement or license">
               <xsl:attribute name="id">fig-permissions-test-11</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/licensing-and-copyright#fig-permissions-test-11</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[fig-permissions-test-11] Asset level permissions must either have a &lt;copyright-statement&gt; and/or a &lt;license&gt; element, but those for <xsl:text/>
                  <xsl:value-of select="$label"/>
                  <xsl:text/> have neither.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT info-->
      <xsl:if test=".">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test=".">
            <xsl:attribute name="id">permissions-notification</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/licensing-and-copyright#permissions-notification</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[permissions-notification] <xsl:text/>
               <xsl:value-of select="$label"/>
               <xsl:text/> has permissions - '<xsl:text/>
               <xsl:value-of select="if (license/license-p) then license/license-p else if (copyright-statement) then copyright-statement else ()"/>
               <xsl:text/>'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="parent::*/local-name() = ('fig', 'media', 'table-wrap', 'boxed-text', 'supplementary-material')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="parent::*/local-name() = ('fig', 'media', 'table-wrap', 'boxed-text', 'supplementary-material')">
               <xsl:attribute name="id">permissions-parent</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/licensing-and-copyright#permissions-parent</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[permissions-parent] permissions is not allowed as a child of <xsl:text/>
                  <xsl:value-of select="parent::*/local-name()"/>
                  <xsl:text/>
               </svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT warning-->
      <xsl:choose>
         <xsl:when test="copyright-statement"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="copyright-statement">
               <xsl:attribute name="id">fig-permissions-test-14</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/licensing-and-copyright#fig-permissions-test-14</xsl:attribute>
               <xsl:attribute name="role">warning</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[fig-permissions-test-14] permissions for <xsl:text/>
                  <xsl:value-of select="$label"/>
                  <xsl:text/> does not contain a &lt;copyright-statement&gt; element. Is this correct? This would usually only be the case in CC0 licenses.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M248"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M248"/>
   <xsl:template match="@*|node()" priority="-2" mode="M248">
      <xsl:apply-templates select="*" mode="M248"/>
   </xsl:template>

   <!--PATTERN fig-permissions-2-pattern-->


	  <!--RULE fig-permissions-2-->
   <xsl:template match="permissions[not(parent::article-meta) and copyright-year and copyright-holder]/copyright-statement" priority="1000" mode="M249">
      <xsl:variable name="label" select="if (parent::*/label[1]) then replace(parent::*/label[1],'\.$','') else parent::*/local-name()"/>
      <xsl:variable name="text" select="concat('© ',parent::*/copyright-year[1],', ',parent::*/copyright-holder[1])"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="contains(.,$text)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,$text)">
               <xsl:attribute name="id">fig-permissions-test-15</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/licensing-and-copyright#fig-permissions-test-15</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[fig-permissions-test-15] The &lt;copyright-statement&gt; element in the permissions for <xsl:text/>
                  <xsl:value-of select="$label"/>
                  <xsl:text/> does not contain the text '<xsl:text/>
                  <xsl:value-of select="$text"/>
                  <xsl:text/>' (a concatenation of '© ', copyright-year, a comma and space, and copyright-holder).</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M249"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M249"/>
   <xsl:template match="@*|node()" priority="-2" mode="M249">
      <xsl:apply-templates select="*" mode="M249"/>
   </xsl:template>

   <!--PATTERN permissions-2-pattern-->


	  <!--RULE permissions-2-->
   <xsl:template match="permissions[not(parent::article-meta) and copyright-statement and not(license[1]/ali:license_ref[1][contains(.,'creativecommons.org')]) and not(contains(license[1]/@xlink:href,'creativecommons.org'))]" priority="1000" mode="M250">
      <xsl:variable name="label" select="if (parent::*/label[1]) then replace(parent::*/label[1],'\.$','') else parent::*/local-name()"/>

		    <!--ASSERT warning-->
      <xsl:choose>
         <xsl:when test="matches(license[1]/license-p[1],'[Ff]urther reproduction of (this|these) (panels?|illustrations?) would need permission from the copyright holder\.$|[Ff]urther reproduction of this figure would (need|require) permission from the copyright holder\.$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(license[1]/license-p[1],'[Ff]urther reproduction of (this|these) (panels?|illustrations?) would need permission from the copyright holder\.$|[Ff]urther reproduction of this figure would (need|require) permission from the copyright holder\.$')">
               <xsl:attribute name="id">fig-permissions-test-12</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/licensing-and-copyright#fig-permissions-test-12</xsl:attribute>
               <xsl:attribute name="role">warning</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[fig-permissions-test-12] <xsl:text/>
                  <xsl:value-of select="$label"/>
                  <xsl:text/> permissions - the &lt;license-p&gt; for all rights reserved type permissions should usually end with 'further reproduction of this panel/illustration/figure would need permission from the copyright holder.', but <xsl:text/>
                  <xsl:value-of select="$label"/>
                  <xsl:text/>'s doesn't. Is this correct? (There is no 'https://creativecommons.org/' type link on the license element or in an ali:license_ref so presumed ARR.)</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT warning-->
      <xsl:if test="license//ext-link[contains(@xlink:href,'creativecommons.org')]">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="license//ext-link[contains(@xlink:href,'creativecommons.org')]">
            <xsl:attribute name="id">fig-permissions-test-13</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/licensing-and-copyright#fig-permissions-test-13</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[fig-permissions-test-13] <xsl:text/>
               <xsl:value-of select="$label"/>
               <xsl:text/> permissions - the &lt;license-p&gt; contains a CC link, but the license does not have an ali:license_ref element, which is very likely incorrect.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M250"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M250"/>
   <xsl:template match="@*|node()" priority="-2" mode="M250">
      <xsl:apply-templates select="*" mode="M250"/>
   </xsl:template>

   <!--PATTERN permissions-3a-pattern-->


	  <!--RULE permissions-3a-->
   <xsl:template match="permissions[not(parent::article-meta)]//ali:license_ref" priority="1000" mode="M251">
      <xsl:variable name="article-license" select="ancestor::article//article-meta//permissions//ali:license_ref"/>
      <xsl:variable name="label" select="if (ancestor::permissions[1]/parent::*/label[1]) then replace(ancestor::permissions[1]/parent::*/label[1],'\.$','') else ancestor::permissions[1]/parent::*/local-name()"/>

		    <!--REPORT error-->
      <xsl:if test=".=$article-license">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test=".=$article-license">
            <xsl:attribute name="id">block-permish-ali-license</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[block-permish-ali-license] ali:license_ref in permissions for <xsl:text/>
               <xsl:value-of select="$label"/>
               <xsl:text/> is the same as the license link for the article - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> - which is incorrect.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M251"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M251"/>
   <xsl:template match="@*|node()" priority="-2" mode="M251">
      <xsl:apply-templates select="*" mode="M251"/>
   </xsl:template>

   <!--PATTERN permissions-3b-pattern-->


	  <!--RULE permissions-3b-->
   <xsl:template match="permissions[not(parent::article-meta)]//license-p//ext-link" priority="1000" mode="M252">
      <xsl:variable name="article-license" select="ancestor::article//article-meta//permissions//ali:license_ref"/>
      <xsl:variable name="label" select="if (ancestor::permissions[1]/parent::*/label[1]) then replace(ancestor::permissions[1]/parent::*/label[1],'\.$','') else ancestor::permissions[1]/parent::*/local-name()"/>

		    <!--REPORT error-->
      <xsl:if test=".=$article-license or @xlink:href=$article-license">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test=".=$article-license or @xlink:href=$article-license">
            <xsl:attribute name="id">block-permish-license-p-link</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[block-permish-license-p-link] ext-link in license text in permissions for <xsl:text/>
               <xsl:value-of select="$label"/>
               <xsl:text/> is the same as the license link for the article - <xsl:text/>
               <xsl:value-of select="$article-license"/>
               <xsl:text/> - which is incorrect.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M252"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M252"/>
   <xsl:template match="@*|node()" priority="-2" mode="M252">
      <xsl:apply-templates select="*" mode="M252"/>
   </xsl:template>

   <!--PATTERN permissions-3c-pattern-->


	  <!--RULE permissions-3c-->
   <xsl:template match="permissions[not(parent::article-meta)]//license" priority="1000" mode="M253">
      <xsl:variable name="article-license" select="ancestor::article//article-meta//permissions//ali:license_ref"/>
      <xsl:variable name="label" select="if (ancestor::permissions[1]/parent::*/label[1]) then replace(ancestor::permissions[1]/parent::*/label[1],'\.$','') else ancestor::permissions[1]/parent::*/local-name()"/>

		    <!--REPORT error-->
      <xsl:if test="@xlink:href=$article-license">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@xlink:href=$article-license">
            <xsl:attribute name="id">block-permish-license-link</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[block-permish-license-link] license link (the xlink:href attribute value on the license element) in permissions for <xsl:text/>
               <xsl:value-of select="$label"/>
               <xsl:text/> is the same as the license link for the article - <xsl:text/>
               <xsl:value-of select="$article-license"/>
               <xsl:text/> - which is incorrect.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M253"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M253"/>
   <xsl:template match="@*|node()" priority="-2" mode="M253">
      <xsl:apply-templates select="*" mode="M253"/>
   </xsl:template>

   <!--PATTERN fig-caption-tests-pattern-->


	  <!--RULE fig-caption-tests-->
   <xsl:template match="fig/caption/p[not(child::supplementary-material)]" priority="1000" mode="M254">
      <xsl:variable name="label" select="replace(ancestor::fig[1]/label,'\.$','')"/>
      <xsl:variable name="no-panels" select="replace(.,'\([a-zA-Z]\)|\([a-zA-Z]\-[a-zA-Z]\)','')"/>
      <xsl:variable name="text-tokens" select="for $x in tokenize($no-panels,'\. ') return         if (string-length($x) lt 3) then ()         else if (matches($x,'^\p{Zs}{1,3}?[a-z]')) then $x         else ()"/>
      <xsl:variable name="panel-list" select="e:list-panels(.)"/>

		    <!--ASSERT warning-->
      <xsl:choose>
         <xsl:when test="count($text-tokens) = 0"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count($text-tokens) = 0">
               <xsl:attribute name="id">fig-caption-test-1</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/figures#fig-caption-test-1</xsl:attribute>
               <xsl:attribute name="role">warning</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[fig-caption-test-1] Caption for <xsl:text/>
                  <xsl:value-of select="$label"/>
                  <xsl:text/> contains what looks like a lower case letter at the start of a sentence - <xsl:text/>
                  <xsl:value-of select="string-join($text-tokens,'; ')"/>
                  <xsl:text/>.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT warning-->
      <xsl:if test="contains(lower-case(.),'image credit') and not(parent::caption/parent::fig/attrib)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(lower-case(.),'image credit') and not(parent::caption/parent::fig/attrib)">
            <xsl:attribute name="id">fig-caption-test-2</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/figures#fig-caption-test-2</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[fig-caption-test-2] Caption for <xsl:text/>
               <xsl:value-of select="$label"/>
               <xsl:text/> contains what looks like an image credit. It's quite likely that this should be captured in an &lt;attrib&gt; element instead - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="$panel-list//*:item">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="$panel-list//*:item">
            <xsl:attribute name="id">fig-caption-test-3</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[fig-caption-test-3] Panel indicators at the start of sentences in captions should be surrounded by parentheses. The caption for <xsl:text/>
               <xsl:value-of select="$label"/>
               <xsl:text/> may have some panels without parentheses. Check <xsl:text/>
               <xsl:value-of select="string-join(for $x in $panel-list//*:item return concat('&quot;',$x/@token,'&quot;',' in ','&quot;',$x,'&quot;'),';')"/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M254"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M254"/>
   <xsl:template match="@*|node()" priority="-2" mode="M254">
      <xsl:apply-templates select="*" mode="M254"/>
   </xsl:template>

   <!--PATTERN fig-panel-tests-pattern-->


	  <!--RULE fig-panel-tests-->
   <xsl:template match="fig/caption/p/bold" priority="1000" mode="M255">
      <xsl:variable name="first-character" select="substring(.,1, 1)"/>
      <xsl:variable name="last-character" select="substring(., string-length(.), 1)"/>

		    <!--REPORT warning-->
      <xsl:if test="($first-character= ('(', ')', '.', ',')) or ($last-character = ('(', ')', '.', ','))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="($first-character= ('(', ')', '.', ',')) or ($last-character = ('(', ')', '.', ','))">
            <xsl:attribute name="id">fig-panel-test-1</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/figures#fig-panel-test-1</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[fig-panel-test-1] Bold text in the caption for <xsl:text/>
               <xsl:value-of select="replace(ancestor::fig[1]/label,'\.$','')"/>
               <xsl:text/> starts and/or ends with punctuation - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> - is that correct? Or should the punctuation be unbolded?</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M255"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M255"/>
   <xsl:template match="@*|node()" priority="-2" mode="M255">
      <xsl:apply-templates select="*" mode="M255"/>
   </xsl:template>

   <!--PATTERN ra-body-tests-pattern-->


	  <!--RULE ra-body-tests-->
   <xsl:template match="article[@article-type='research-article']/body" priority="1000" mode="M256">
      <xsl:variable name="type" select="ancestor::article//subj-group[@subj-group-type='display-channel']/subject[1]"/>
      <xsl:variable name="method-count" select="count(sec[@sec-type='materials|methods']) + count(sec[@sec-type='methods']) + count(sec[@sec-type='model'])"/>
      <xsl:variable name="res-disc-count" select="count(sec[@sec-type='results']) + count(sec[@sec-type='discussion'])"/>

		    <!--REPORT error-->
      <xsl:if test="count(sec) = 0">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(sec) = 0">
            <xsl:attribute name="id">ra-sec-test-1</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/article-structure#ra-sec-test-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[ra-sec-test-1] At least one sec should be present in body for research-article content.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="if ($type = ('Short Report','Scientific Correspondence','Feature Article')) then ()         else count(sec[@sec-type='intro']) != 1">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="if ($type = ('Short Report','Scientific Correspondence','Feature Article')) then () else count(sec[@sec-type='intro']) != 1">
            <xsl:attribute name="id">ra-sec-test-2</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/article-structure#ra-sec-test-2</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[ra-sec-test-2] <xsl:text/>
               <xsl:value-of select="$type"/>
               <xsl:text/> doesn't have child sec[@sec-type='intro'] in the main body. Is this correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="if ($type = ('Short Report','Scientific Correspondence','Feature Article')) then ()         else $method-count != 1">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="if ($type = ('Short Report','Scientific Correspondence','Feature Article')) then () else $method-count != 1">
            <xsl:attribute name="id">ra-sec-test-3</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/article-structure#ra-sec-test-3</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[ra-sec-test-3] main body in <xsl:text/>
               <xsl:value-of select="$type"/>
               <xsl:text/> content doesn't have a child sec with @sec-type whose value is either 'materials|methods', 'methods' or 'model'. Is this correct?.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="if ($type = ('Short Report','Scientific Correspondence','Feature Article')) then ()         else if (sec[@sec-type='results|discussion']) then ()         else $res-disc-count != 2">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="if ($type = ('Short Report','Scientific Correspondence','Feature Article')) then () else if (sec[@sec-type='results|discussion']) then () else $res-disc-count != 2">
            <xsl:attribute name="id">ra-sec-test-4</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/article-structure#ra-sec-test-4</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[ra-sec-test-4] main body in <xsl:text/>
               <xsl:value-of select="$type"/>
               <xsl:text/> content doesn't have either a child sec[@sec-type='results|discussion'] or a sec[@sec-type='results'] and a sec[@sec-type='discussion']. Is this correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M256"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M256"/>
   <xsl:template match="@*|node()" priority="-2" mode="M256">
      <xsl:apply-templates select="*" mode="M256"/>
   </xsl:template>

   <!--PATTERN medicine-section-tests-pattern-->


	  <!--RULE medicine-section-tests-->
   <xsl:template match="article[@article-type='research-article' and descendant::article-meta[not(//subj-group[@subj-group-type='display-channel']/subject[lower-case(.)='feature article']) and //subj-group[@subj-group-type='heading']/subject[.=('Medicine','Epidemiology and Global Health')] and history/date[@date-type='received']/@iso-8601-date gt '2021-04-05']]/body/sec" priority="1000" mode="M257">
      <xsl:variable name="pos" select="count(parent::body/sec) - count(following-sibling::sec)"/>

		    <!--REPORT error-->
      <xsl:if test="$pos=1 and title[1]!='Introduction'">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="$pos=1 and title[1]!='Introduction'">
            <xsl:attribute name="id">medicine-introduction</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/article-structure#medicine-introduction</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[medicine-introduction] The first top level section in a Medicine article should be 'Introduction'. This one is '<xsl:text/>
               <xsl:value-of select="title[1]"/>
               <xsl:text/>'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="$pos=2 and not(title[1]=('Methods','Materials and methods'))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="$pos=2 and not(title[1]=('Methods','Materials and methods'))">
            <xsl:attribute name="id">medicine-methods</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/article-structure#medicine-methods</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[medicine-methods] The second top level section in a Medicine article should be 'Methods' or 'Materials and methods', but this one is '<xsl:text/>
               <xsl:value-of select="title[1]"/>
               <xsl:text/>'. Is that correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="$pos=3 and title[1]!='Results'">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="$pos=3 and title[1]!='Results'">
            <xsl:attribute name="id">medicine-results</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/article-structure#medicine-results</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[medicine-results] The third top level section in a Medicine article should be 'Results', but this one is '<xsl:text/>
               <xsl:value-of select="title[1]"/>
               <xsl:text/>'. Is that correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="$pos=4 and title[1]!='Discussion'">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="$pos=4 and title[1]!='Discussion'">
            <xsl:attribute name="id">medicine-discussion</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/article-structure#medicine-discussion</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[medicine-discussion] The fourth top level section in a Medicine article should be 'Discussion', but this one is '<xsl:text/>
               <xsl:value-of select="title[1]"/>
               <xsl:text/>'. Is that correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M257"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M257"/>
   <xsl:template match="@*|node()" priority="-2" mode="M257">
      <xsl:apply-templates select="*" mode="M257"/>
   </xsl:template>

   <!--PATTERN top-level-sec-tests-pattern-->


	  <!--RULE top-level-sec-tests-->
   <xsl:template match="body/sec" priority="1000" mode="M258">
      <xsl:variable name="type" select="ancestor::article//subj-group[@subj-group-type='display-channel']/subject[1]"/>
      <xsl:variable name="pos" select="count(parent::body/sec) - count(following-sibling::sec)"/>
      <xsl:variable name="allowed-titles" select="('Introduction', 'Results', 'Discussion', 'Materials and methods', 'Results and discussion','Methods', 'Model')"/>

		    <!--REPORT warning-->
      <xsl:if test="not($type = ($features-subj,'Review Article',$notice-display-types)) and not(replace(title[1],' ',' ') = $allowed-titles)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="not($type = ($features-subj,'Review Article',$notice-display-types)) and not(replace(title[1],' ',' ') = $allowed-titles)">
            <xsl:attribute name="id">sec-conformity</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/article-structure#sec-conformity</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[sec-conformity] top level sec with title - <xsl:text/>
               <xsl:value-of select="title"/>
               <xsl:text/> - is not a usual title for <xsl:text/>
               <xsl:value-of select="$type"/>
               <xsl:text/> content. Should this be captured as a sub-level of <xsl:text/>
               <xsl:value-of select="preceding-sibling::sec[1]/title"/>
               <xsl:text/>?</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M258"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M258"/>
   <xsl:template match="@*|node()" priority="-2" mode="M258">
      <xsl:apply-templates select="*" mode="M258"/>
   </xsl:template>

   <!--PATTERN conclusion-sec-tests-pattern-->


	  <!--RULE conclusion-sec-tests-->
   <xsl:template match="article[@article-type='research-article' and not(descendant::article-meta//subj-group[@subj-group-type]/subject=('Feature Article','Review Article','Short Report'))]/body/sec/title" priority="1000" mode="M259">
      <xsl:variable name="type" select="ancestor::article//subj-group[@subj-group-type='display-channel']/subject[1]"/>
      <xsl:variable name="title" select="normalize-space(replace(lower-case(.),' ',' '))"/>

		    <!--REPORT error-->
      <xsl:if test="matches($title,'conclusions?')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($title,'conclusions?')">
            <xsl:attribute name="id">conclusion-test-1</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/article-structure#conclusion-test-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[conclusion-test-1] Top level section with title - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> - should be made a level 2 section. Probably as a child of the <xsl:text/>
               <xsl:value-of select="preceding-sibling::sec[1]/title"/>
               <xsl:text/> section.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M259"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M259"/>
   <xsl:template match="@*|node()" priority="-2" mode="M259">
      <xsl:apply-templates select="*" mode="M259"/>
   </xsl:template>

   <!--PATTERN conclusion-lower-sec-tests-pattern-->


	  <!--RULE conclusion-lower-sec-tests-->
   <xsl:template match="article[@article-type='research-article' and not(descendant::article-meta//subj-group[@subj-group-type]/subject=('Feature Article','Review Article','Short Report'))]/body//sec/sec//sec/title" priority="1000" mode="M260">
      <xsl:variable name="type" select="ancestor::article//subj-group[@subj-group-type='display-channel']/subject[1]"/>
      <xsl:variable name="title" select="normalize-space(replace(lower-case(.),' ',' '))"/>

		    <!--REPORT warning-->
      <xsl:if test="matches($title,'conclusions?')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($title,'conclusions?')">
            <xsl:attribute name="id">conclusion-test-2</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/article-structure#conclusion-test-2</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[conclusion-test-2] Level <xsl:text/>
               <xsl:value-of select="count(ancestor::sec) + 1"/>
               <xsl:text/> section with the title '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>' should likely be made a level 2 section.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M260"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M260"/>
   <xsl:template match="@*|node()" priority="-2" mode="M260">
      <xsl:apply-templates select="*" mode="M260"/>
   </xsl:template>

   <!--PATTERN article-title-tests-pattern-->


	  <!--RULE article-title-tests-->
   <xsl:template match="article-meta//article-title" priority="1000" mode="M261">
      <xsl:variable name="type" select="ancestor::article-meta//subj-group[@subj-group-type='display-channel']/subject[1]"/>
      <xsl:variable name="specifics" select="('Replication Study','Registered Report',$notice-display-types)"/>
      <xsl:variable name="count" select="string-length(.)"/>

		    <!--REPORT error-->
      <xsl:if test="($type = $specifics) and not(starts-with(.,e:article-type2title($type)))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="($type = $specifics) and not(starts-with(.,e:article-type2title($type)))">
            <xsl:attribute name="id">article-type-title-test-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[article-type-title-test-1] title of a '<xsl:text/>
               <xsl:value-of select="$type"/>
               <xsl:text/>' must start with '<xsl:text/>
               <xsl:value-of select="e:article-type2title($type)"/>
               <xsl:text/>'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="($type = 'Scientific Correspondence') and not(matches(.,'^Comment on|^Response to comment on'))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="($type = 'Scientific Correspondence') and not(matches(.,'^Comment on|^Response to comment on'))">
            <xsl:attribute name="id">article-type-title-test-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[article-type-title-test-2] title of a '<xsl:text/>
               <xsl:value-of select="$type"/>
               <xsl:text/>' must start with 'Comment on' or 'Response to comment on', but this starts with something else - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="($type = 'Scientific Correspondence') and matches(.,'^Comment on “|^Response to comment on “')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="($type = 'Scientific Correspondence') and matches(.,'^Comment on “|^Response to comment on “')">
            <xsl:attribute name="id">sc-title-test-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[sc-title-test-1] title of a '<xsl:text/>
               <xsl:value-of select="$type"/>
               <xsl:text/>' contains a left double quotation mark. The original article title must be surrounded by a single roman apostrophe - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="($type = 'Scientific Correspondence') and matches(.,'”')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="($type = 'Scientific Correspondence') and matches(.,'”')">
            <xsl:attribute name="id">sc-title-test-2</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[sc-title-test-2] title of a '<xsl:text/>
               <xsl:value-of select="$type"/>
               <xsl:text/>' contains a right double quotation mark. Is this correct? The original article title must be surrounded by a single roman apostrophe - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="not($type = ('Scientific Correspondence','Correction','Retraction')) and ($count gt 140)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="not($type = ('Scientific Correspondence','Correction','Retraction')) and ($count gt 140)">
            <xsl:attribute name="id">final-title-length-restriction</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[final-title-length-restriction] The article title contains <xsl:text/>
               <xsl:value-of select="$count"/>
               <xsl:text/> characters, when the usual upper limit is 140. Article titles with more than 140 characters should be checked with the eLife Editorial team.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M261"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M261"/>
   <xsl:template match="@*|node()" priority="-2" mode="M261">
      <xsl:apply-templates select="*" mode="M261"/>
   </xsl:template>

   <!--PATTERN sec-title-tests-pattern-->


	  <!--RULE sec-title-tests-->
   <xsl:template match="sec[@sec-type]/title" priority="1000" mode="M262">
      <xsl:variable name="title" select="e:sec-type2title(parent::sec/@sec-type)"/>

		    <!--REPORT warning-->
      <xsl:if test="if ($title = 'undefined') then ()         else . != $title">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="if ($title = 'undefined') then () else . != $title">
            <xsl:attribute name="id">sec-type-title-test</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/article-structure#sec-type-title-test</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[sec-type-title-test] title of a sec with an @sec-type='<xsl:text/>
               <xsl:value-of select="parent::sec/@sec-type"/>
               <xsl:text/>' should usually be '<xsl:text/>
               <xsl:value-of select="$title"/>
               <xsl:text/>'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M262"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M262"/>
   <xsl:template match="@*|node()" priority="-2" mode="M262">
      <xsl:apply-templates select="*" mode="M262"/>
   </xsl:template>

   <!--PATTERN fig-title-tests-pattern-->


	  <!--RULE fig-title-tests-->
   <xsl:template match="fig/caption/title" priority="1000" mode="M263">
      <xsl:variable name="label" select="parent::caption/preceding-sibling::label[1]"/>
      <xsl:variable name="sentence-count" select="count(tokenize(replace(replace(lower-case(.),$org-regex,''),'[\p{Zs}]$',''),'\. '))"/>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,'^\([A-Za-z]|^[A-Za-z]\)')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'^\([A-Za-z]|^[A-Za-z]\)')">
            <xsl:attribute name="id">fig-title-test-1</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/figures#fig-title-test-1</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[fig-title-test-1] '<xsl:text/>
               <xsl:value-of select="$label"/>
               <xsl:text/>' appears to have a title which is the beginning of a caption. Is this correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(replace(.,'&quot;',''),'\.$|\?$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(replace(.,'&quot;',''),'\.$|\?$')">
               <xsl:attribute name="id">fig-title-test-2</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/figures#fig-title-test-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[fig-title-test-2] title for <xsl:text/>
                  <xsl:value-of select="$label"/>
                  <xsl:text/> must end with a full stop.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,' vs\.$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,' vs\.$')">
            <xsl:attribute name="id">fig-title-test-3</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/figures#fig-title-test-3</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[fig-title-test-3] title for <xsl:text/>
               <xsl:value-of select="$label"/>
               <xsl:text/> ends with 'vs.', which indicates that the title sentence may be split across title and caption.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches(.,'^\p{Zs}')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'^\p{Zs}')">
            <xsl:attribute name="id">fig-title-test-4</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/figures#fig-title-test-4</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[fig-title-test-4] title for <xsl:text/>
               <xsl:value-of select="$label"/>
               <xsl:text/> begins with a space, which is not allowed.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,'^\p{P}')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'^\p{P}')">
            <xsl:attribute name="id">fig-title-test-5</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/figures#fig-title-test-5</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[fig-title-test-5] title for <xsl:text/>
               <xsl:value-of select="$label"/>
               <xsl:text/> begins with punctuation. Is this correct? - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,'^[Pp]anel ')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'^[Pp]anel ')">
            <xsl:attribute name="id">fig-title-test-6</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/figures#fig-title-test-6</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[fig-title-test-6] title for <xsl:text/>
               <xsl:value-of select="$label"/>
               <xsl:text/> begins with '<xsl:text/>
               <xsl:value-of select="substring-before(.,' ')"/>
               <xsl:text/>' - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>. It is very likely that this requires an overall title instead.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="string-length(.) gt 250">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="string-length(.) gt 250">
            <xsl:attribute name="id">fig-title-test-7</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/figures#fig-title-test-7</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[fig-title-test-7] title for <xsl:text/>
               <xsl:value-of select="$label"/>
               <xsl:text/> is longer than 250 characters. Is it a caption instead?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="$sentence-count gt 1">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="$sentence-count gt 1">
            <xsl:attribute name="id">fig-title-test-8</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/figures#fig-title-test-8</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[fig-title-test-8] title for <xsl:text/>
               <xsl:value-of select="$label"/>
               <xsl:text/> contains <xsl:text/>
               <xsl:value-of select="$sentence-count"/>
               <xsl:text/> sentences. Should the sentence(s) after the first be moved into the caption? Or is the title itself a caption (in which case, please ask the authors for a title)?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches(.,'\p{Zs}$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'\p{Zs}$')">
            <xsl:attribute name="id">fig-title-test-9</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[fig-title-test-9] The title for <xsl:text/>
               <xsl:value-of select="$label"/>
               <xsl:text/> ends with space(s) which is incorrect - '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M263"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M263"/>
   <xsl:template match="@*|node()" priority="-2" mode="M263">
      <xsl:apply-templates select="*" mode="M263"/>
   </xsl:template>

   <!--PATTERN supplementary-material-title-tests-pattern-->


	  <!--RULE supplementary-material-title-tests-->
   <xsl:template match="supplementary-material/caption/title" priority="1000" mode="M264">
      <xsl:variable name="label" select="parent::caption/preceding-sibling::label[1]"/>
      <xsl:variable name="sentence-count" select="count(tokenize(replace(replace(lower-case(.),$org-regex,''),'[\p{Zs}]$',''),'\. '))"/>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,'^\([A-Za-z]|^[A-Za-z]\)')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'^\([A-Za-z]|^[A-Za-z]\)')">
            <xsl:attribute name="id">supplementary-material-title-test-1</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/additional-files#supplementary-material-title-test-1</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[supplementary-material-title-test-1] '<xsl:text/>
               <xsl:value-of select="$label"/>
               <xsl:text/>' appears to have a title which is the beginning of a caption. Is this correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(.,'[\.\?]$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'[\.\?]$')">
               <xsl:attribute name="id">supplementary-material-title-test-2</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/additional-files#supplementary-material-title-test-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[supplementary-material-title-test-2] title for <xsl:text/>
                  <xsl:value-of select="$label"/>
                  <xsl:text/> must end with a full stop.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,' vs\.$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,' vs\.$')">
            <xsl:attribute name="id">supplementary-material-title-test-3</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/additional-files#supplementary-material-title-test-3</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[supplementary-material-title-test-3] title for <xsl:text/>
               <xsl:value-of select="$label"/>
               <xsl:text/> ends with 'vs.', which indicates that the title sentence may be split across title and caption.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches(.,'^\p{Zs}')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'^\p{Zs}')">
            <xsl:attribute name="id">supplementary-material-title-test-4</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/additional-files#supplementary-material-title-test-4</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[supplementary-material-title-test-4] title for <xsl:text/>
               <xsl:value-of select="$label"/>
               <xsl:text/> begins with a space, which is not allowed.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="string-length(.) gt 250">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="string-length(.) gt 250">
            <xsl:attribute name="id">supplementary-material-title-test-7</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/additional-files#supplementary-material-title-test-7</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[supplementary-material-title-test-7] title for <xsl:text/>
               <xsl:value-of select="$label"/>
               <xsl:text/> is longer than 250 characters. Is it a caption instead?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="$sentence-count gt 1">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="$sentence-count gt 1">
            <xsl:attribute name="id">supplementary-material-title-test-8</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/additional-files#supplementary-material-title-test-8</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[supplementary-material-title-test-8] title for <xsl:text/>
               <xsl:value-of select="$label"/>
               <xsl:text/> contains <xsl:text/>
               <xsl:value-of select="$sentence-count"/>
               <xsl:text/> sentences. Should the sentence(s) after the first be moved into the caption? Or is the title itself a caption (in which case, please ask the authors for a title)?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches(.,'\p{Zs}$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'\p{Zs}$')">
            <xsl:attribute name="id">supplementary-material-title-test-9</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[supplementary-material-title-test-9] title for <xsl:text/>
               <xsl:value-of select="$label"/>
               <xsl:text/> ends with space(s), which is not allowed - '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>'</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M264"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M264"/>
   <xsl:template match="@*|node()" priority="-2" mode="M264">
      <xsl:apply-templates select="*" mode="M264"/>
   </xsl:template>

   <!--PATTERN video-title-tests-pattern-->


	  <!--RULE video-title-tests-->
   <xsl:template match="media/caption/title" priority="1000" mode="M265">
      <xsl:variable name="label" select="parent::caption/preceding-sibling::label[1]"/>
      <xsl:variable name="sentence-count" select="count(tokenize(replace(replace(lower-case(.),$org-regex,''),'[\p{Zs}]$',''),'\. '))"/>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,'^\([A-Za-z]|^[A-Za-z]\)')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'^\([A-Za-z]|^[A-Za-z]\)')">
            <xsl:attribute name="id">video-title-test-1</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[video-title-test-1] '<xsl:text/>
               <xsl:value-of select="$label"/>
               <xsl:text/>' appears to have a title which is the beginning of a caption. Is this correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(.,'\.$|\?$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'\.$|\?$')">
               <xsl:attribute name="id">video-title-test-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[video-title-test-2] title for <xsl:text/>
                  <xsl:value-of select="$label"/>
                  <xsl:text/> must end with a full stop.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,' vs\.$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,' vs\.$')">
            <xsl:attribute name="id">video-title-test-3</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[video-title-test-3] title for <xsl:text/>
               <xsl:value-of select="$label"/>
               <xsl:text/> ends with 'vs.', which indicates that the title sentence may be split across title and caption.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches(.,'^\p{Zs}')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'^\p{Zs}')">
            <xsl:attribute name="id">video-title-test-4</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[video-title-test-4] title for <xsl:text/>
               <xsl:value-of select="$label"/>
               <xsl:text/> begins with a space, which is not allowed.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="string-length(.) gt 250">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="string-length(.) gt 250">
            <xsl:attribute name="id">video-title-test-7</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[video-title-test-7] title for <xsl:text/>
               <xsl:value-of select="$label"/>
               <xsl:text/> is longer than 250 characters. Is it a caption instead?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="$sentence-count gt 1">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="$sentence-count gt 1">
            <xsl:attribute name="id">video-title-test-8</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[video-title-test-8] title for <xsl:text/>
               <xsl:value-of select="$label"/>
               <xsl:text/> contains <xsl:text/>
               <xsl:value-of select="$sentence-count"/>
               <xsl:text/> sentences. Should the sentence(s) after the first be moved into the caption? Or is the title itself a caption (in which case, please ask the authors for a title)?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches(.,'\p{Zs}$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'\p{Zs}$')">
            <xsl:attribute name="id">video-title-test-9</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[video-title-test-9] The title for <xsl:text/>
               <xsl:value-of select="$label"/>
               <xsl:text/> ends with space(s) which is incorrect - '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M265"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M265"/>
   <xsl:template match="@*|node()" priority="-2" mode="M265">
      <xsl:apply-templates select="*" mode="M265"/>
   </xsl:template>

   <!--PATTERN ack-title-tests-pattern-->


	  <!--RULE ack-title-tests-->
   <xsl:template match="ack" priority="1000" mode="M266">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="title = 'Acknowledgements'"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="title = 'Acknowledgements'">
               <xsl:attribute name="id">ack-title-test</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[ack-title-test] ack must have a title that contains 'Acknowledgements'. Currently it is '<xsl:text/>
                  <xsl:value-of select="title"/>
                  <xsl:text/>'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="p[* or not(normalize-space(.)='')]"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="p[* or not(normalize-space(.)='')]">
               <xsl:attribute name="id">ack-content-test</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[ack-content-test] An Acknowledgements section must contain content. Either add in the missing content or delete the Acknowledgements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M266"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M266"/>
   <xsl:template match="@*|node()" priority="-2" mode="M266">
      <xsl:apply-templates select="*" mode="M266"/>
   </xsl:template>

   <!--PATTERN ack-content-tests-pattern-->


	  <!--RULE ack-content-tests-->
   <xsl:template match="ack//p" priority="1000" mode="M267">
      <xsl:variable name="hit" select="string-join(for $x in tokenize(.,' ') return         if (matches($x,'^[A-Z]{1}\.$')) then $x         else (),', ')"/>
      <xsl:variable name="hit-count" select="count(for $x in tokenize(.,' ') return         if (matches($x,'^[A-Z]{1}\.$')) then $x         else ())"/>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,' [A-Z]\. |^[A-Z]\. ')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,' [A-Z]\. |^[A-Z]\. ')">
            <xsl:attribute name="id">ack-full-stop-intial-test</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[ack-full-stop-intial-test] p element in Acknowledgements contains what looks like <xsl:text/>
               <xsl:value-of select="$hit-count"/>
               <xsl:text/> initial(s) followed by a full stop. Is it correct? - <xsl:text/>
               <xsl:value-of select="$hit"/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M267"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M267"/>
   <xsl:template match="@*|node()" priority="-2" mode="M267">
      <xsl:apply-templates select="*" mode="M267"/>
   </xsl:template>

   <!--PATTERN ref-list-title-tests-pattern-->


	  <!--RULE ref-list-title-tests-->
   <xsl:template match="ref-list" priority="1000" mode="M268">
      <xsl:variable name="cite-list" select="e:ref-cite-list(.)"/>
      <xsl:variable name="non-distinct" select="e:non-distinct-citations($cite-list)"/>

		    <!--ASSERT warning-->
      <xsl:choose>
         <xsl:when test="title = 'References'"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="title = 'References'">
               <xsl:attribute name="id">ref-list-title-test</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#ref-list-title-test</xsl:attribute>
               <xsl:attribute name="role">warning</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[ref-list-title-test] reference list usually has a title that is 'References', but currently it is '<xsl:text/>
                  <xsl:value-of select="title"/>
                  <xsl:text/>' - is that correct?</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="$non-distinct//*:item">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="$non-distinct//*:item">
            <xsl:attribute name="id">ref-list-distinct-1</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#ref-list-distinct-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[ref-list-distinct-1] In the reference list, each reference must be unique in its citation style (combination of authors and year). If a reference's citation is the same as anothers, a lowercase letter should be suffixed to the year (e.g. Smith et al., 2020a). <xsl:text/>
               <xsl:value-of select="string-join(for $x in $non-distinct//*:item return concat($x,' with the id ',$x/@id),' and ')"/>
               <xsl:text/> does not meet this requirement.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M268"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M268"/>
   <xsl:template match="@*|node()" priority="-2" mode="M268">
      <xsl:apply-templates select="*" mode="M268"/>
   </xsl:template>

   <!--PATTERN app-title-tests-pattern-->


	  <!--RULE app-title-tests-->
   <xsl:template match="app/title" priority="1000" mode="M269">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(.,'^Appendix$|^Appendix [0-9]$|^Appendix [0-9][0-9]$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'^Appendix$|^Appendix [0-9]$|^Appendix [0-9][0-9]$')">
               <xsl:attribute name="id">app-title-test</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[app-title-test] app title must be in the format 'Appendix 1'. Currently it is '<xsl:text/>
                  <xsl:value-of select="."/>
                  <xsl:text/>'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M269"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M269"/>
   <xsl:template match="@*|node()" priority="-2" mode="M269">
      <xsl:apply-templates select="*" mode="M269"/>
   </xsl:template>

   <!--PATTERN fn-group-tests-pattern-->


	  <!--RULE fn-group-tests-->
   <xsl:template match="fn-group" priority="1000" mode="M270">
      <xsl:variable name="allowed-content-types" select="('competing-interest','author-contribution','ethics-information')"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@content-type"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@content-type">
               <xsl:attribute name="id">fn-content-type-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[fn-content-type-1] fn-group that is descendant of back must have a content-type attribute.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="@content-type and not(@content-type=$allowed-content-types)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@content-type and not(@content-type=$allowed-content-types)">
            <xsl:attribute name="id">fn-content-type-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[fn-content-type-2] fn-group with content-type '<xsl:text/>
               <xsl:value-of select="@content-type"/>
               <xsl:text/>' is not permitted. The only permitted fn-group types are <xsl:text/>
               <xsl:value-of select="string-join($allowed-content-types,'; ')"/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="parent::back or parent::sec[@sec-type='additional-information' and parent::back]"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="parent::back or parent::sec[@sec-type='additional-information' and parent::back]">
               <xsl:attribute name="id">fn-parent</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[fn-parent] fn-group is only allowed as a child of back or as a child of sec[@sec-type='additional-information'] (which in turn is in back). This one is placed as a child of <xsl:text/>
                  <xsl:value-of select="parent::*/name()"/>
                  <xsl:text/>
               </svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M270"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M270"/>
   <xsl:template match="@*|node()" priority="-2" mode="M270">
      <xsl:apply-templates select="*" mode="M270"/>
   </xsl:template>

   <!--PATTERN comp-int-title-tests-pattern-->


	  <!--RULE comp-int-title-tests-->
   <xsl:template match="fn-group[@content-type='competing-interest']" priority="1000" mode="M271">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="title = 'Competing interests'"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="title = 'Competing interests'">
               <xsl:attribute name="id">comp-int-title-test</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[comp-int-title-test] fn-group[@content-type='competing-interests'] must have a title that contains 'Competing interests'. Currently it is '<xsl:text/>
                  <xsl:value-of select="title"/>
                  <xsl:text/>'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M271"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M271"/>
   <xsl:template match="@*|node()" priority="-2" mode="M271">
      <xsl:apply-templates select="*" mode="M271"/>
   </xsl:template>

   <!--PATTERN auth-cont-title-tests-pattern-->


	  <!--RULE auth-cont-title-tests-->
   <xsl:template match="fn-group[@content-type='author-contribution']" priority="1000" mode="M272">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="title = 'Author contributions'"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="title = 'Author contributions'">
               <xsl:attribute name="id">auth-cont-title-test</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[auth-cont-title-test] fn-group[@content-type='author-contribution'] must have a title that contains 'Author contributions'. Currently it is '<xsl:text/>
                  <xsl:value-of select="title"/>
                  <xsl:text/>'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M272"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M272"/>
   <xsl:template match="@*|node()" priority="-2" mode="M272">
      <xsl:apply-templates select="*" mode="M272"/>
   </xsl:template>

   <!--PATTERN ethics-title-tests-pattern-->


	  <!--RULE ethics-title-tests-->
   <xsl:template match="fn-group[@content-type='ethics-information']" priority="1000" mode="M273">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="title = 'Ethics'"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="title = 'Ethics'">
               <xsl:attribute name="id">ethics-title-test</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/ethics#ethics-title-test</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[ethics-title-test] fn-group[@content-type='ethics-information'] must have a title that contains 'Ethics'. Currently it is '<xsl:text/>
                  <xsl:value-of select="title"/>
                  <xsl:text/>'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,'&amp;#x\d')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'&amp;#x\d')">
            <xsl:attribute name="id">ethics-broken-unicode-test</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/ethics#ethics-broken-unicode-test</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[ethics-broken-unicode-test] Ethics statement likely contains a broken unicode - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M273"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M273"/>
   <xsl:template match="@*|node()" priority="-2" mode="M273">
      <xsl:apply-templates select="*" mode="M273"/>
   </xsl:template>

   <!--PATTERN ed-eval-title-tests-pattern-->


	  <!--RULE ed-eval-title-tests-->
   <xsl:template match="sub-article[@article-type='editor-report']/front-stub/title-group" priority="1000" mode="M274">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="article-title = &quot;Editor's evaluation&quot;"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="article-title = &quot;Editor's evaluation&quot;">
               <xsl:attribute name="id">ed-eval-title-test</xsl:attribute>
               <xsl:attribute name="flag">dl-ar</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[ed-eval-title-test] title-group must contain article-title which contains "Editor's evaluation". Currently it is <xsl:text/>
                  <xsl:value-of select="article-title"/>
                  <xsl:text/>.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M274"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M274"/>
   <xsl:template match="@*|node()" priority="-2" mode="M274">
      <xsl:apply-templates select="*" mode="M274"/>
   </xsl:template>

   <!--PATTERN dec-letter-title-tests-pattern-->


	  <!--RULE dec-letter-title-tests-->
   <xsl:template match="sub-article[@article-type='decision-letter']/front-stub/title-group" priority="1000" mode="M275">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="article-title = 'Decision letter'"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="article-title = 'Decision letter'">
               <xsl:attribute name="id">dec-letter-title-test</xsl:attribute>
               <xsl:attribute name="flag">dl-ar</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#dec-letter-title-test</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[dec-letter-title-test] title-group must contain article-title which contains 'Decision letter'. Currently it is <xsl:text/>
                  <xsl:value-of select="article-title"/>
                  <xsl:text/>.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M275"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M275"/>
   <xsl:template match="@*|node()" priority="-2" mode="M275">
      <xsl:apply-templates select="*" mode="M275"/>
   </xsl:template>

   <!--PATTERN reply-title-tests-pattern-->


	  <!--RULE reply-title-tests-->
   <xsl:template match="sub-article[@article-type='reply']/front-stub/title-group" priority="1000" mode="M276">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="article-title = 'Author response'"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="article-title = 'Author response'">
               <xsl:attribute name="id">reply-title-test</xsl:attribute>
               <xsl:attribute name="flag">dl-ar</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#reply-title-test</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[reply-title-test] title-group must contain article-title which contains 'Author response'. Currently it is <xsl:text/>
                  <xsl:value-of select="article-title"/>
                  <xsl:text/>.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M276"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M276"/>
   <xsl:template match="@*|node()" priority="-2" mode="M276">
      <xsl:apply-templates select="*" mode="M276"/>
   </xsl:template>

   <!--PATTERN title-child-tests-pattern-->


	  <!--RULE title-child-tests-->
   <xsl:template match="title/*" priority="1000" mode="M277">
      <xsl:variable name="allowed-elems" select="('sub','xref','sup','bold','italic','inline-formula','underline','sc','ext-link','monospace','mml:math')"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="name()=$allowed-elems"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="name()=$allowed-elems">
               <xsl:attribute name="id">title-child-conformance</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[title-child-conformance] <xsl:text/>
                  <xsl:value-of select="name(.)"/>
                  <xsl:text/> is not allowed in a title element. The only permitted elements are <xsl:text/>
                  <xsl:value-of select="string-join($allowed-elems,', ')"/>
                  <xsl:text/>.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M277"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M277"/>
   <xsl:template match="@*|node()" priority="-2" mode="M277">
      <xsl:apply-templates select="*" mode="M277"/>
   </xsl:template>

   <!--PATTERN award-group-ids-pattern-->


	  <!--RULE award-group-ids-->
   <xsl:template match="funding-group/award-group" priority="1000" mode="M278">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(substring-after(@id,'fund'),'^[0-9]{1,2}$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(substring-after(@id,'fund'),'^[0-9]{1,2}$')">
               <xsl:attribute name="id">award-group-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[award-group-test-1] award-group must have an @id, the value of which conforms to the convention 'fund', followed by a digit. <xsl:text/>
                  <xsl:value-of select="@id"/>
                  <xsl:text/> does not conform to this.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M278"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M278"/>
   <xsl:template match="@*|node()" priority="-2" mode="M278">
      <xsl:apply-templates select="*" mode="M278"/>
   </xsl:template>

   <!--PATTERN fig-ids-pattern-->


	  <!--RULE fig-ids-->
   <xsl:template match="article/body//fig[not(@specific-use='child-fig')][not(ancestor::boxed-text)]" priority="1000" mode="M279">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(@id,'^fig[0-9]{1,3}$|^C[0-9]{1,3}$|^S[0-9]{1,3}$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(@id,'^fig[0-9]{1,3}$|^C[0-9]{1,3}$|^S[0-9]{1,3}$')">
               <xsl:attribute name="id">fig-id-test-1</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/figures#fig-id-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[fig-id-test-1] fig must have an @id in the format fig0 (or C0 for chemical structures, or S0 for Schemes). <xsl:text/>
                  <xsl:value-of select="@id"/>
                  <xsl:text/> does not conform to this.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="matches(label[1],'[Ff]igure') and not(matches(@id,'^fig[0-9]{1,3}$'))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(label[1],'[Ff]igure') and not(matches(@id,'^fig[0-9]{1,3}$'))">
            <xsl:attribute name="id">fig-id-test-2</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/figures#fig-id-test-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[fig-id-test-2] fig must have an @id in the format fig0. <xsl:text/>
               <xsl:value-of select="@id"/>
               <xsl:text/> does not conform to this.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M279"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M279"/>
   <xsl:template match="@*|node()" priority="-2" mode="M279">
      <xsl:apply-templates select="*" mode="M279"/>
   </xsl:template>

   <!--PATTERN fig-sup-ids-pattern-->


	  <!--RULE fig-sup-ids-->
   <xsl:template match="article/body//fig[@specific-use='child-fig'][not(ancestor::boxed-text)]" priority="1000" mode="M280">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(@id,'^fig[0-9]{1,3}s[0-9]{1,3}$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(@id,'^fig[0-9]{1,3}s[0-9]{1,3}$')">
               <xsl:attribute name="id">fig-sup-id-test</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/figures#fig-sup-id-test</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[fig-sup-id-test] figure supplement must have an @id in the format fig0s0. <xsl:text/>
                  <xsl:value-of select="@id"/>
                  <xsl:text/> does not conform to this.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M280"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M280"/>
   <xsl:template match="@*|node()" priority="-2" mode="M280">
      <xsl:apply-templates select="*" mode="M280"/>
   </xsl:template>

   <!--PATTERN box-fig-ids-pattern-->


	  <!--RULE box-fig-ids-->
   <xsl:template match="article/body//boxed-text//fig[not(@specific-use='child-fig')]" priority="1000" mode="M281">
      <xsl:variable name="box-id" select="ancestor::boxed-text/@id"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(@id,'^box[0-9]{1,3}fig[0-9]{1,3}$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(@id,'^box[0-9]{1,3}fig[0-9]{1,3}$')">
               <xsl:attribute name="id">box-fig-id-1</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/figures#box-fig-id-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[box-fig-id-1] fig must have @id in the format box0fig0. <xsl:text/>
                  <xsl:value-of select="@id"/>
                  <xsl:text/> does not conform to this.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="contains(@id,$box-id)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(@id,$box-id)">
               <xsl:attribute name="id">box-fig-id-2</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/figures#box-fig-id-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[box-fig-id-2] fig id (<xsl:text/>
                  <xsl:value-of select="@id"/>
                  <xsl:text/>) does not contain its ancestor boxed-text id. Please ensure the first part of the id contains '<xsl:text/>
                  <xsl:value-of select="$box-id"/>
                  <xsl:text/>'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M281"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M281"/>
   <xsl:template match="@*|node()" priority="-2" mode="M281">
      <xsl:apply-templates select="*" mode="M281"/>
   </xsl:template>

   <!--PATTERN app-fig-ids-pattern-->


	  <!--RULE app-fig-ids-->
   <xsl:template match="article/back//app//fig[not(@specific-use='child-fig')]" priority="1000" mode="M282">

		<!--REPORT error-->
      <xsl:if test="matches(label[1],'^Appendix \d{1,4}—figure \d{1,4}\.$|^Appendix [A-Z]—figure \d{1,4}\.$|^Appendix—figure \d{1,4}\.$') and not(matches(@id,'^app[0-9]{1,3}fig[0-9]{1,3}$'))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(label[1],'^Appendix \d{1,4}—figure \d{1,4}\.$|^Appendix [A-Z]—figure \d{1,4}\.$|^Appendix—figure \d{1,4}\.$') and not(matches(@id,'^app[0-9]{1,3}fig[0-9]{1,3}$'))">
            <xsl:attribute name="id">app-fig-id-test-1</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/figures#app-fig-id-test-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[app-fig-id-test-1] figures in appendices must have an @id in the format app0fig0. <xsl:text/>
               <xsl:value-of select="@id"/>
               <xsl:text/> does not conform to this.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(label[1],'[Cc]hemical [Ss]tructure') and not(matches(@id,'^app[0-9]{1,3}chem[0-9]{1,3}$'))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(label[1],'[Cc]hemical [Ss]tructure') and not(matches(@id,'^app[0-9]{1,3}chem[0-9]{1,3}$'))">
            <xsl:attribute name="id">app-fig-id-test-2</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/figures#app-fig-id-test-2</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[app-fig-id-test-2] Chemical structures must have an @id in the format app0chem0. <xsl:text/>
               <xsl:value-of select="@id"/>
               <xsl:text/> does not conform to this.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(label[1],'[Ss]cheme') and not(matches(@id,'^app[0-9]{1,3}scheme[0-9]{1,3}$'))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(label[1],'[Ss]cheme') and not(matches(@id,'^app[0-9]{1,3}scheme[0-9]{1,3}$'))">
            <xsl:attribute name="id">app-fig-id-test-3</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/figures#app-fig-id-test-3</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[app-fig-id-test-3] Schemes must have an @id in the format app0scheme0. <xsl:text/>
               <xsl:value-of select="@id"/>
               <xsl:text/> does not conform to this.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M282"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M282"/>
   <xsl:template match="@*|node()" priority="-2" mode="M282">
      <xsl:apply-templates select="*" mode="M282"/>
   </xsl:template>

   <!--PATTERN app-fig-sup-ids-pattern-->


	  <!--RULE app-fig-sup-ids-->
   <xsl:template match="article/back//app//fig[@specific-use='child-fig']" priority="1000" mode="M283">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(@id,'^app[0-9]{1,3}fig[0-9]{1,3}s[0-9]{1,3}$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(@id,'^app[0-9]{1,3}fig[0-9]{1,3}s[0-9]{1,3}$')">
               <xsl:attribute name="id">app-fig-sup-id-test</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/figures#app-fig-sup-id-test</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[app-fig-sup-id-test] figure supplements in appendices must have an @id in the format app0fig0s0. <xsl:text/>
                  <xsl:value-of select="@id"/>
                  <xsl:text/> does not conform to this.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M283"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M283"/>
   <xsl:template match="@*|node()" priority="-2" mode="M283">
      <xsl:apply-templates select="*" mode="M283"/>
   </xsl:template>

   <!--PATTERN rep-fig-ids-pattern-->


	  <!--RULE rep-fig-ids-->
   <xsl:template match="sub-article//fig[not(@specific-use='child-fig')]" priority="1000" mode="M284">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(@id,'^respfig[0-9]{1,3}$|^sa[0-9]fig[0-9]{1,3}$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(@id,'^respfig[0-9]{1,3}$|^sa[0-9]fig[0-9]{1,3}$')">
               <xsl:attribute name="id">resp-fig-id-test</xsl:attribute>
               <xsl:attribute name="flag">dl-ar</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/figures#resp-fig-id-test</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[resp-fig-id-test] fig in decision letter/author response must have @id in the format respfig0, or sa0fig0. <xsl:text/>
                  <xsl:value-of select="@id"/>
                  <xsl:text/> does not conform to this.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M284"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M284"/>
   <xsl:template match="@*|node()" priority="-2" mode="M284">
      <xsl:apply-templates select="*" mode="M284"/>
   </xsl:template>

   <!--PATTERN rep-fig-sup-ids-pattern-->


	  <!--RULE rep-fig-sup-ids-->
   <xsl:template match="sub-article//fig[@specific-use='child-fig']" priority="1000" mode="M285">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(@id,'^respfig[0-9]{1,3}s[0-9]{1,3}$|^sa[0-9]{1}fig[0-9]{1,3}s[0-9]{1,3}$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(@id,'^respfig[0-9]{1,3}s[0-9]{1,3}$|^sa[0-9]{1}fig[0-9]{1,3}s[0-9]{1,3}$')">
               <xsl:attribute name="id">resp-fig-sup-id-test</xsl:attribute>
               <xsl:attribute name="flag">dl-ar</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/figures#resp-fig-sup-id-test</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[resp-fig-sup-id-test] figure supplement in decision letter/author response must have @id in the format respfig0s0 or sa0fig0s0. <xsl:text/>
                  <xsl:value-of select="@id"/>
                  <xsl:text/> does not conform to this.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M285"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M285"/>
   <xsl:template match="@*|node()" priority="-2" mode="M285">
      <xsl:apply-templates select="*" mode="M285"/>
   </xsl:template>

   <!--PATTERN video-ids-pattern-->


	  <!--RULE video-ids-->
   <xsl:template match="article/body//media[(@mimetype='video') and not(ancestor::boxed-text) and not(parent::fig-group)]" priority="1000" mode="M286">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(@id,'^video[0-9]{1,3}$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(@id,'^video[0-9]{1,3}$')">
               <xsl:attribute name="id">video-id-test</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[video-id-test] main video must have an @id in the format video0.  <xsl:text/>
                  <xsl:value-of select="@id"/>
                  <xsl:text/> does not conform to this.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M286"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M286"/>
   <xsl:template match="@*|node()" priority="-2" mode="M286">
      <xsl:apply-templates select="*" mode="M286"/>
   </xsl:template>

   <!--PATTERN video-sup-ids-pattern-->


	  <!--RULE video-sup-ids-->
   <xsl:template match="article/body//fig-group/media[(@mimetype='video') and not(ancestor::boxed-text)]" priority="1000" mode="M287">
      <xsl:variable name="id-prefix" select="parent::fig-group/fig[1]/@id"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(@id,'^fig[0-9]{1,3}video[0-9]{1,3}$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(@id,'^fig[0-9]{1,3}video[0-9]{1,3}$')">
               <xsl:attribute name="id">video-sup-id-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[video-sup-id-test-1] video supplement must have an @id in the format fig0video0.  <xsl:text/>
                  <xsl:value-of select="@id"/>
                  <xsl:text/> does not conform to this.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="starts-with(@id,$id-prefix)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="starts-with(@id,$id-prefix)">
               <xsl:attribute name="id">video-sup-id-test-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[video-sup-id-test-2] video supplement must have an @id which begins with the id of its parent fig. <xsl:text/>
                  <xsl:value-of select="@id"/>
                  <xsl:text/> does not start with <xsl:text/>
                  <xsl:value-of select="$id-prefix"/>
                  <xsl:text/>.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M287"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M287"/>
   <xsl:template match="@*|node()" priority="-2" mode="M287">
      <xsl:apply-templates select="*" mode="M287"/>
   </xsl:template>

   <!--PATTERN app-video-ids-pattern-->


	  <!--RULE app-video-ids-->
   <xsl:template match="article/back//app//media[(@mimetype='video') and not(parent::fig-group)]" priority="1000" mode="M288">
      <xsl:variable name="id-prefix" select="substring-after(ancestor::app[1]/@id,'-')"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(@id,'^app[0-9]{1,3}video[0-9]{1,3}$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(@id,'^app[0-9]{1,3}video[0-9]{1,3}$')">
               <xsl:attribute name="id">app-video-id-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[app-video-id-test-1] video in appendix must have an @id in the format app0video0. <xsl:text/>
                  <xsl:value-of select="@id"/>
                  <xsl:text/> does not conform to this.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="starts-with(@id,concat('app',$id-prefix))"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="starts-with(@id,concat('app',$id-prefix))">
               <xsl:attribute name="id">app-video-id-test-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[app-video-id-test-2] video supplement must have an @id which begins with the id of its ancestor appendix. <xsl:text/>
                  <xsl:value-of select="@id"/>
                  <xsl:text/> does not start with <xsl:text/>
                  <xsl:value-of select="concat('app',$id-prefix)"/>
                  <xsl:text/>.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M288"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M288"/>
   <xsl:template match="@*|node()" priority="-2" mode="M288">
      <xsl:apply-templates select="*" mode="M288"/>
   </xsl:template>

   <!--PATTERN app-video-sup-ids-pattern-->


	  <!--RULE app-video-sup-ids-->
   <xsl:template match="article/back//app//media[(@mimetype='video') and (parent::fig-group)]" priority="1000" mode="M289">
      <xsl:variable name="id-prefix-1" select="substring-after(ancestor::app[1]/@id,'-')"/>
      <xsl:variable name="id-prefix-2" select="parent::fig-group/fig[1]/@id"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(@id,'^app[0-9]{1,3}fig[0-9]{1,3}video[0-9]{1,3}$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(@id,'^app[0-9]{1,3}fig[0-9]{1,3}video[0-9]{1,3}$')">
               <xsl:attribute name="id">app-video-sup-id-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[app-video-sup-id-test-1] video supplement must have an @id in the format app0fig0video0.  <xsl:text/>
                  <xsl:value-of select="@id"/>
                  <xsl:text/> does not conform to this.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="starts-with(@id,concat('app',$id-prefix-1))"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="starts-with(@id,concat('app',$id-prefix-1))">
               <xsl:attribute name="id">app-video-sup-id-test-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[app-video-sup-id-test-2] video supplement must have an @id which begins with the id of its ancestor appendix. <xsl:text/>
                  <xsl:value-of select="@id"/>
                  <xsl:text/> does not start with <xsl:text/>
                  <xsl:value-of select="concat('app',$id-prefix-1)"/>
                  <xsl:text/>.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="starts-with(@id,$id-prefix-2)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="starts-with(@id,$id-prefix-2)">
               <xsl:attribute name="id">app-video-sup-id-test-3</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[app-video-sup-id-test-3] video supplement must have an @id which begins with the id of its ancestor appendix, followed by id of its parent fig. <xsl:text/>
                  <xsl:value-of select="@id"/>
                  <xsl:text/> does not start with <xsl:text/>
                  <xsl:value-of select="$id-prefix-2"/>
                  <xsl:text/>.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M289"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M289"/>
   <xsl:template match="@*|node()" priority="-2" mode="M289">
      <xsl:apply-templates select="*" mode="M289"/>
   </xsl:template>

   <!--PATTERN box-vid-ids-pattern-->


	  <!--RULE box-vid-ids-->
   <xsl:template match="article/body//boxed-text//media[(@mimetype='video')]" priority="1000" mode="M290">
      <xsl:variable name="box-id" select="ancestor::boxed-text/@id"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(@id,'^box[0-9]{1,3}video[0-9]{1,3}$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(@id,'^box[0-9]{1,3}video[0-9]{1,3}$')">
               <xsl:attribute name="id">box-vid-id-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[box-vid-id-1] video must have @id in the format box0video0.  <xsl:text/>
                  <xsl:value-of select="@id"/>
                  <xsl:text/> does not conform to this.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="starts-with(@id,$box-id)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="starts-with(@id,$box-id)">
               <xsl:attribute name="id">box-vid-id-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[box-vid-id-2] video id does not start with its ancestor boxed-text id. Please ensure the first part of the id contains '<xsl:text/>
                  <xsl:value-of select="$box-id"/>
                  <xsl:text/>'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M290"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M290"/>
   <xsl:template match="@*|node()" priority="-2" mode="M290">
      <xsl:apply-templates select="*" mode="M290"/>
   </xsl:template>

   <!--PATTERN related-articles-ids-pattern-->


	  <!--RULE related-articles-ids-->
   <xsl:template match="related-article" priority="1000" mode="M291">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(@id,'^ra\d$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(@id,'^ra\d$')">
               <xsl:attribute name="id">related-articles-test-7</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[related-articles-test-7] related-article element must contain a @id, the value of which should be in the form ra0.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M291"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M291"/>
   <xsl:template match="@*|node()" priority="-2" mode="M291">
      <xsl:apply-templates select="*" mode="M291"/>
   </xsl:template>

   <!--PATTERN aff-ids-pattern-->


	  <!--RULE aff-ids-->
   <xsl:template match="aff[not(parent::contrib)]" priority="1000" mode="M292">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="if (label) then @id = concat('aff',label[1])         else starts-with(@id,'aff')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="if (label) then @id = concat('aff',label[1]) else starts-with(@id,'aff')">
               <xsl:attribute name="id">aff-id-test</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[aff-id-test] aff @id must be a concatenation of 'aff' and the child label value. In this instance it should be <xsl:text/>
                  <xsl:value-of select="concat('aff',label[1])"/>
                  <xsl:text/>.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M292"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M292"/>
   <xsl:template match="@*|node()" priority="-2" mode="M292">
      <xsl:apply-templates select="*" mode="M292"/>
   </xsl:template>

   <!--PATTERN fn-ids-pattern-->


	  <!--RULE fn-ids-->
   <xsl:template match="fn" priority="1000" mode="M293">
      <xsl:variable name="type" select="@fn-type"/>
      <xsl:variable name="parent" select="self::*/parent::*/local-name()"/>

		    <!--REPORT error-->
      <xsl:if test="if ($parent = 'table-wrap-foot') then ()         else if ($type = 'conflict') then not(matches(@id,'^conf[0-9]{1,3}$'))         else if ($type = 'con') then         if ($parent = 'author-notes') then not(matches(@id,'^equal-contrib[0-9]{1,3}$'))         else not(matches(@id,'^con[0-9]{1,3}$'))         else if ($type = 'present-address') then not(matches(@id,'^pa[0-9]{1,3}$'))         else if ($type = 'COI-statement') then not(matches(@id,'^conf[0-9]{1,3}$'))         else if ($type = 'fn') then not(matches(@id,'^fn[0-9]{1,3}$'))         else ()">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="if ($parent = 'table-wrap-foot') then () else if ($type = 'conflict') then not(matches(@id,'^conf[0-9]{1,3}$')) else if ($type = 'con') then if ($parent = 'author-notes') then not(matches(@id,'^equal-contrib[0-9]{1,3}$')) else not(matches(@id,'^con[0-9]{1,3}$')) else if ($type = 'present-address') then not(matches(@id,'^pa[0-9]{1,3}$')) else if ($type = 'COI-statement') then not(matches(@id,'^conf[0-9]{1,3}$')) else if ($type = 'fn') then not(matches(@id,'^fn[0-9]{1,3}$')) else ()">
            <xsl:attribute name="id">fn-id-test</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[fn-id-test] fn @id is not in the correct format. Refer to eLife kitchen sink for correct format.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M293"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M293"/>
   <xsl:template match="@*|node()" priority="-2" mode="M293">
      <xsl:apply-templates select="*" mode="M293"/>
   </xsl:template>

   <!--PATTERN disp-formula-ids-pattern-->


	  <!--RULE disp-formula-ids-->
   <xsl:template match="disp-formula" priority="1000" mode="M294">

		<!--REPORT error-->
      <xsl:if test="not(ancestor::sub-article) and not(matches(@id,'^equ[0-9]{1,9}$'))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="not(ancestor::sub-article) and not(matches(@id,'^equ[0-9]{1,9}$'))">
            <xsl:attribute name="id">disp-formula-id-test</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/maths#disp-formula-id-test</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[disp-formula-id-test] disp-formula @id must be in the format 'equ0'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="(ancestor::sub-article) and not(matches(@id,'^sa[0-9]equ[0-9]{1,9}$|^equ[0-9]{1,9}$'))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(ancestor::sub-article) and not(matches(@id,'^sa[0-9]equ[0-9]{1,9}$|^equ[0-9]{1,9}$'))">
            <xsl:attribute name="id">sub-disp-formula-id-test</xsl:attribute>
            <xsl:attribute name="flag">dl-ar</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/maths#sub-disp-formula-id-test</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[sub-disp-formula-id-test] disp-formula @id must be in the format 'sa0equ0' when in a sub-article.  <xsl:text/>
               <xsl:value-of select="@id"/>
               <xsl:text/> does not conform to this.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M294"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M294"/>
   <xsl:template match="@*|node()" priority="-2" mode="M294">
      <xsl:apply-templates select="*" mode="M294"/>
   </xsl:template>

   <!--PATTERN mml-math-ids-pattern-->


	  <!--RULE mml-math-ids-->
   <xsl:template match="disp-formula/mml:math" priority="1000" mode="M295">

		<!--REPORT error-->
      <xsl:if test="not(ancestor::sub-article) and not(matches(@id,'^m[0-9]{1,9}$'))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="not(ancestor::sub-article) and not(matches(@id,'^m[0-9]{1,9}$'))">
            <xsl:attribute name="id">mml-math-id-test</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/maths#mml-math-id-test</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[mml-math-id-test] mml:math @id in disp-formula must be in the format 'm0'.  <xsl:text/>
               <xsl:value-of select="@id"/>
               <xsl:text/> does not conform to this.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="(ancestor::sub-article) and not(matches(@id,'^sa[0-9]m[0-9]{1,9}$|^m[0-9]{1,9}$'))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(ancestor::sub-article) and not(matches(@id,'^sa[0-9]m[0-9]{1,9}$|^m[0-9]{1,9}$'))">
            <xsl:attribute name="id">sub-mml-math-id-test</xsl:attribute>
            <xsl:attribute name="flag">dl-ar</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/maths#sub-mml-math-id-test</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[sub-mml-math-id-test] mml:math @id in disp-formula must be in the format 'sa0m0'.  <xsl:text/>
               <xsl:value-of select="@id"/>
               <xsl:text/> does not conform to this.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M295"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M295"/>
   <xsl:template match="@*|node()" priority="-2" mode="M295">
      <xsl:apply-templates select="*" mode="M295"/>
   </xsl:template>

   <!--PATTERN app-table-wrap-ids-pattern-->


	  <!--RULE app-table-wrap-ids-->
   <xsl:template match="app//table-wrap[label]" priority="1000" mode="M296">
      <xsl:variable name="app-no" select="substring-after(ancestor::app[1]/@id,'-')"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(@id, '^app[0-9]{1,3}table[0-9]{1,3}$|^app[0-9]{1,3}keyresource$|^keyresource$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(@id, '^app[0-9]{1,3}table[0-9]{1,3}$|^app[0-9]{1,3}keyresource$|^keyresource$')">
               <xsl:attribute name="id">app-table-wrap-id-test-1</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/tables#app-table-wrap-id-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[app-table-wrap-id-test-1] table-wrap @id in appendix must be in the format 'app0table0' for normal tables, or 'app0keyresource' or 'keyresource' for key resources tables in appendices. <xsl:text/>
                  <xsl:value-of select="@id"/>
                  <xsl:text/> does not conform to this.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="not(@id='keyresource') and not(starts-with(@id, concat('app' , $app-no)))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="not(@id='keyresource') and not(starts-with(@id, concat('app' , $app-no)))">
            <xsl:attribute name="id">app-table-wrap-id-test-2</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/tables#app-table-wrap-id-test-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[app-table-wrap-id-test-2] table-wrap @id must start with <xsl:text/>
               <xsl:value-of select="concat('app' , $app-no)"/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M296"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M296"/>
   <xsl:template match="@*|node()" priority="-2" mode="M296">
      <xsl:apply-templates select="*" mode="M296"/>
   </xsl:template>

   <!--PATTERN resp-table-wrap-ids-pattern-->


	  <!--RULE resp-table-wrap-ids-->
   <xsl:template match="sub-article//table-wrap" priority="1000" mode="M297">

		<!--ASSERT warning-->
      <xsl:choose>
         <xsl:when test="if (label) then matches(@id, '^resptable[0-9]{1,3}$|^sa[0-9]table[0-9]{1,3}$')         else matches(@id, '^respinlinetable[0-9]{1,3}$||^sa[0-9]inlinetable[0-9]{1,3}$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="if (label) then matches(@id, '^resptable[0-9]{1,3}$|^sa[0-9]table[0-9]{1,3}$') else matches(@id, '^respinlinetable[0-9]{1,3}$||^sa[0-9]inlinetable[0-9]{1,3}$')">
               <xsl:attribute name="id">resp-table-wrap-id-test</xsl:attribute>
               <xsl:attribute name="flag">dl-ar</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/tables#resp-table-wrap-id-test</xsl:attribute>
               <xsl:attribute name="role">warning</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[resp-table-wrap-id-test] table-wrap @id in a sub-article must be in the format 'resptable0' or 'sa0table0' if it has a label, or in the format 'respinlinetable0' or 'sa0inlinetable0' if it does not.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M297"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M297"/>
   <xsl:template match="@*|node()" priority="-2" mode="M297">
      <xsl:apply-templates select="*" mode="M297"/>
   </xsl:template>

   <!--PATTERN table-wrap-ids-pattern-->


	  <!--RULE table-wrap-ids-->
   <xsl:template match="article//table-wrap[not(ancestor::app) and not(ancestor::sub-article)]" priority="1000" mode="M298">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="if (label = 'Key resources table') then @id='keyresource'         else if (label) then matches(@id, '^table[0-9]{1,3}$')         else matches(@id, '^inlinetable[0-9]{1,3}$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="if (label = 'Key resources table') then @id='keyresource' else if (label) then matches(@id, '^table[0-9]{1,3}$') else matches(@id, '^inlinetable[0-9]{1,3}$')">
               <xsl:attribute name="id">table-wrap-id-test</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/tables#table-wrap-id-test</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[table-wrap-id-test] table-wrap @id must be in the format 'table0', unless it doesn't have a label, in which case it must be 'inlinetable0' or it is the key resource table which must be 'keyresource'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M298"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M298"/>
   <xsl:template match="@*|node()" priority="-2" mode="M298">
      <xsl:apply-templates select="*" mode="M298"/>
   </xsl:template>

   <!--PATTERN body-top-level-sec-ids-pattern-->


	  <!--RULE body-top-level-sec-ids-->
   <xsl:template match="article/body/sec" priority="1000" mode="M299">
      <xsl:variable name="pos" select="count(parent::body/sec) - count(following-sibling::sec)"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@id = concat('s',$pos)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@id = concat('s',$pos)">
               <xsl:attribute name="id">body-top-level-sec-id-test</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/article-structure#body-top-level-sec-id-test</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[body-top-level-sec-id-test] This sec id must be a concatenation of 's' and this element's position relative to its siblings. It must be <xsl:text/>
                  <xsl:value-of select="concat('s',$pos)"/>
                  <xsl:text/>.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M299"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M299"/>
   <xsl:template match="@*|node()" priority="-2" mode="M299">
      <xsl:apply-templates select="*" mode="M299"/>
   </xsl:template>

   <!--PATTERN back-top-level-sec-ids-pattern-->


	  <!--RULE back-top-level-sec-ids-->
   <xsl:template match="article/back/sec" priority="1000" mode="M300">
      <xsl:variable name="pos" select="count(ancestor::article/body/sec) + count(parent::back/sec) - count(following-sibling::sec)"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@id = concat('s',$pos)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@id = concat('s',$pos)">
               <xsl:attribute name="id">back-top-level-sec-id-test</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[back-top-level-sec-id-test] This sec id must be a concatenation of 's' and this element's position relative to other top level secs. It must be <xsl:text/>
                  <xsl:value-of select="concat('s',$pos)"/>
                  <xsl:text/>.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M300"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M300"/>
   <xsl:template match="@*|node()" priority="-2" mode="M300">
      <xsl:apply-templates select="*" mode="M300"/>
   </xsl:template>

   <!--PATTERN low-level-sec-ids-pattern-->


	  <!--RULE low-level-sec-ids-->
   <xsl:template match="article/body/sec//sec|article/back/sec//sec" priority="1000" mode="M301">
      <xsl:variable name="parent-sec" select="parent::sec/@id"/>
      <xsl:variable name="pos" select="count(parent::sec/sec) - count(following-sibling::sec)"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@id = concat($parent-sec,'-',$pos)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@id = concat($parent-sec,'-',$pos)">
               <xsl:attribute name="id">low-level-sec-id-test</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/article-structure#low-level-sec-id-test</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[low-level-sec-id-test] sec id must be a concatenation of its parent sec id and this element's position relative to its sibling secs. It must be <xsl:text/>
                  <xsl:value-of select="concat($parent-sec,'-',$pos)"/>
                  <xsl:text/>.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M301"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M301"/>
   <xsl:template match="@*|node()" priority="-2" mode="M301">
      <xsl:apply-templates select="*" mode="M301"/>
   </xsl:template>

   <!--PATTERN app-ids-pattern-->


	  <!--RULE app-ids-->
   <xsl:template match="app" priority="1000" mode="M302">
      <xsl:variable name="pos" select="string(count(ancestor::article//app) - count(following::app))"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(@id,'^appendix-[0-9]{1,3}$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(@id,'^appendix-[0-9]{1,3}$')">
               <xsl:attribute name="id">app-id-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[app-id-test-1] app id must be in the format 'appendix-0'. <xsl:text/>
                  <xsl:value-of select="@id"/>
                  <xsl:text/> is not in this format.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="substring-after(@id,'appendix-') = $pos"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="substring-after(@id,'appendix-') = $pos">
               <xsl:attribute name="id">app-id-test-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[app-id-test-2] app id is <xsl:text/>
                  <xsl:value-of select="@id"/>
                  <xsl:text/>, but relative to other appendices it is in position <xsl:text/>
                  <xsl:value-of select="$pos"/>
                  <xsl:text/>.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M302"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M302"/>
   <xsl:template match="@*|node()" priority="-2" mode="M302">
      <xsl:apply-templates select="*" mode="M302"/>
   </xsl:template>

   <!--PATTERN mdar-ids-pattern-->


	  <!--RULE mdar-ids-->
   <xsl:template match="supplementary-material[contains(lower-case(label[1]),'mdar')]" priority="1000" mode="M303">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(@id,'^mdar$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(@id,'^mdar$')">
               <xsl:attribute name="id">mdar-id</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[mdar-id] The id (<xsl:text/>
                  <xsl:value-of select="@id"/>
                  <xsl:text/>) for <xsl:text/>
                  <xsl:value-of select="replace(label,'\.$','')"/>
                  <xsl:text/> is not in the correct format. It must be 'mdar'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M303"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M303"/>
   <xsl:template match="@*|node()" priority="-2" mode="M303">
      <xsl:apply-templates select="*" mode="M303"/>
   </xsl:template>

   <!--PATTERN transrep-ids-pattern-->


	  <!--RULE transrep-ids-->
   <xsl:template match="supplementary-material[contains(lower-case(label[1]),'transparent')]" priority="1000" mode="M304">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(@id,'^transrepform$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(@id,'^transrepform$')">
               <xsl:attribute name="id">transrep-id</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[transrep-id] The id (<xsl:text/>
                  <xsl:value-of select="@id"/>
                  <xsl:text/>) for <xsl:text/>
                  <xsl:value-of select="replace(label,'\.$','')"/>
                  <xsl:text/> is not in the correct format. It must be 'transrepform'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M304"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M304"/>
   <xsl:template match="@*|node()" priority="-2" mode="M304">
      <xsl:apply-templates select="*" mode="M304"/>
   </xsl:template>

   <!--PATTERN fig-children-pattern-->


	  <!--RULE fig-children-->
   <xsl:template match="fig/*" priority="1000" mode="M305">
      <xsl:variable name="allowed-children" select="('label', 'caption', 'graphic', 'permissions', 'attrib')"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="local-name() = $allowed-children"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="local-name() = $allowed-children">
               <xsl:attribute name="id">fig-child-conformance</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[fig-child-conformance] <xsl:text/>
                  <xsl:value-of select="name(.)"/>
                  <xsl:text/> is not allowed as a child of fig.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M305"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M305"/>
   <xsl:template match="@*|node()" priority="-2" mode="M305">
      <xsl:apply-templates select="*" mode="M305"/>
   </xsl:template>

   <!--PATTERN table-wrap-children-pattern-->


	  <!--RULE table-wrap-children-->
   <xsl:template match="table-wrap/*" priority="1000" mode="M306">
      <xsl:variable name="allowed-children" select="('label', 'caption', 'table', 'permissions', 'table-wrap-foot')"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="local-name() = $allowed-children"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="local-name() = $allowed-children">
               <xsl:attribute name="id">table-wrap-child-conformance</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[table-wrap-child-conformance] <xsl:text/>
                  <xsl:value-of select="name(.)"/>
                  <xsl:text/> is not allowed as a child of table-wrap.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M306"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M306"/>
   <xsl:template match="@*|node()" priority="-2" mode="M306">
      <xsl:apply-templates select="*" mode="M306"/>
   </xsl:template>

   <!--PATTERN media-children-pattern-->


	  <!--RULE media-children-->
   <xsl:template match="media/*" priority="1000" mode="M307">
      <xsl:variable name="allowed-children" select="('label', 'caption', 'permissions', 'attrib')"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="local-name() = $allowed-children"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="local-name() = $allowed-children">
               <xsl:attribute name="id">media-child-conformance</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[media-child-conformance] <xsl:text/>
                  <xsl:value-of select="name(.)"/>
                  <xsl:text/> is not allowed as a child of media.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M307"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M307"/>
   <xsl:template match="@*|node()" priority="-2" mode="M307">
      <xsl:apply-templates select="*" mode="M307"/>
   </xsl:template>

   <!--PATTERN supplementary-material-children-pattern-->


	  <!--RULE supplementary-material-children-->
   <xsl:template match="supplementary-material/*" priority="1000" mode="M308">
      <xsl:variable name="allowed-children" select="('label', 'caption', 'media', 'permissions')"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="local-name() = $allowed-children"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="local-name() = $allowed-children">
               <xsl:attribute name="id">supplementary-material-child-conformance</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/additional-files#supplementary-material-child-conformance</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[supplementary-material-child-conformance] <xsl:text/>
                  <xsl:value-of select="name(.)"/>
                  <xsl:text/> is not allowed as a child of supplementary-material.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M308"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M308"/>
   <xsl:template match="@*|node()" priority="-2" mode="M308">
      <xsl:apply-templates select="*" mode="M308"/>
   </xsl:template>

   <!--PATTERN author-notes-children-pattern-->


	  <!--RULE author-notes-children-->
   <xsl:template match="author-notes/*" priority="1000" mode="M309">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="local-name() = 'fn'"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="local-name() = 'fn'">
               <xsl:attribute name="id">author-notes-child-conformance</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[author-notes-child-conformance] <xsl:text/>
                  <xsl:value-of select="name(.)"/>
                  <xsl:text/> is not allowed as a child of author-notes.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M309"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M309"/>
   <xsl:template match="@*|node()" priority="-2" mode="M309">
      <xsl:apply-templates select="*" mode="M309"/>
   </xsl:template>

   <!--PATTERN sec-tests-pattern-->


	  <!--RULE sec-tests-->
   <xsl:template match="sec" priority="1000" mode="M310">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="title"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="title">
               <xsl:attribute name="id">sec-test-1</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/article-structure#sec-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[sec-test-1] sec must have a title</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="p or sec or fig or fig-group or media or table-wrap or boxed-text or list or fn-group or supplementary-material or related-object or code"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="p or sec or fig or fig-group or media or table-wrap or boxed-text or list or fn-group or supplementary-material or related-object or code">
               <xsl:attribute name="id">final-sec-test-2</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/article-structure#final-sec-test-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[final-sec-test-2] sec appears to contain no content. This cannot be correct.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="count(ancestor::sec) ge 5">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(ancestor::sec) ge 5">
            <xsl:attribute name="id">sec-test-5</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/article-structure#sec-test-5</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[sec-test-5] Level <xsl:text/>
               <xsl:value-of select="count(ancestor::sec) + 1"/>
               <xsl:text/> sections are not allowed. Please either make this a level 5 heading, or capture the title as a bolded paragraph in its parent section.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M310"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M310"/>
   <xsl:template match="@*|node()" priority="-2" mode="M310">
      <xsl:apply-templates select="*" mode="M310"/>
   </xsl:template>

   <!--PATTERN res-data-sec-pattern-->


	  <!--RULE res-data-sec-->
   <xsl:template match="article[@article-type='research-article']//sec[not(@sec-type) and not(matches(.,'[Gg]ithub|[Gg]itlab|[Cc]ode[Pp]lex|[Ss]ource[Ff]orge|[Bb]it[Bb]ucket'))]" priority="1000" mode="M311">
      <xsl:variable name="title" select="lower-case(title[1])"/>

		    <!--REPORT warning-->
      <xsl:if test="contains($title,'data') and (contains($title,'availability') or contains($title,'code') or contains($title,'accessib') or contains($title,'statement'))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains($title,'data') and (contains($title,'availability') or contains($title,'code') or contains($title,'accessib') or contains($title,'statement'))">
            <xsl:attribute name="id">sec-test-3</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/data-availability#sec-test-3</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[sec-test-3] Section has a title '<xsl:text/>
               <xsl:value-of select="title[1]"/>
               <xsl:text/>'. Is it a duplicate of the data availability section (and therefore should be removed)?</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M311"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M311"/>
   <xsl:template match="@*|node()" priority="-2" mode="M311">
      <xsl:apply-templates select="*" mode="M311"/>
   </xsl:template>

   <!--PATTERN res-ethics-sec-pattern-->


	  <!--RULE res-ethics-sec-->
   <xsl:template match="article[@article-type='research-article']//sec[not(descendant::xref[@ref-type='bibr'])]" priority="1000" mode="M312">

		<!--REPORT warning-->
      <xsl:if test="matches(lower-case(title[1]),'^ethics| ethics$| ethics ')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(lower-case(title[1]),'^ethics| ethics$| ethics ')">
            <xsl:attribute name="id">sec-test-4</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/ethics#sec-test-4</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[sec-test-4] Section has a title '<xsl:text/>
               <xsl:value-of select="title[1]"/>
               <xsl:text/>'. Is it a duplicate of, or very similar to, the ethics statement (in the article details page)? If so, it should be removed. If not, then which statement is correct? The one in this section or '<xsl:text/>
               <xsl:value-of select="string-join(         ancestor::article//fn-group[@content-type='ethics-information']/fn         ,' '         )"/>
               <xsl:text/>'?</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M312"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M312"/>
   <xsl:template match="@*|node()" priority="-2" mode="M312">
      <xsl:apply-templates select="*" mode="M312"/>
   </xsl:template>

   <!--PATTERN back-tests-pattern-->


	  <!--RULE back-tests-->
   <xsl:template match="back" priority="1000" mode="M313">
      <xsl:variable name="article-type" select="parent::article/@article-type"/>
      <xsl:variable name="subj-type" select="parent::article//subj-group[@subj-group-type='display-channel']/subject"/>
      <xsl:variable name="pub-date" select="e:get-iso-pub-date(self::*)"/>
      <xsl:variable name="version" select="e:get-version(.)"/>

		    <!--REPORT error-->
      <xsl:if test="if ($article-type = ($features-article-types,$notice-article-types)) then ()         else count(sec[@sec-type='additional-information']) != 1">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="if ($article-type = ($features-article-types,$notice-article-types)) then () else count(sec[@sec-type='additional-information']) != 1">
            <xsl:attribute name="id">back-test-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[back-test-1] One and only one sec[@sec-type="additional-information"] must be present in back.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="count(sec[@sec-type='supplementary-material']) gt 1">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(sec[@sec-type='supplementary-material']) gt 1">
            <xsl:attribute name="id">back-test-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[back-test-2] More than one sec[@sec-type="supplementary-material"] cannot be present in back.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="($article-type='research-article') and ($subj-type != 'Scientific Correspondence') and (not($pub-date) or ($pub-date gt '2018-05-31')) and (count(sec[@sec-type='data-availability']) != 1)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="($article-type='research-article') and ($subj-type != 'Scientific Correspondence') and (not($pub-date) or ($pub-date gt '2018-05-31')) and (count(sec[@sec-type='data-availability']) != 1)">
            <xsl:attribute name="id">back-test-3</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/data-availability#back-test-3</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[back-test-3] One and only one Data availability section (sec[@sec-type="data-availability"]) must be present (as a child of back) for '<xsl:text/>
               <xsl:value-of select="$article-type"/>
               <xsl:text/>'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="($article-type='research-article') and ($subj-type != 'Scientific Correspondence') and ($pub-date le '2018-05-31') and (count(sec[@sec-type='data-availability']) != 1)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="($article-type='research-article') and ($subj-type != 'Scientific Correspondence') and ($pub-date le '2018-05-31') and (count(sec[@sec-type='data-availability']) != 1)">
            <xsl:attribute name="id">back-test-10</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[back-test-10] One and only one Data availability section (sec[@sec-type="data-availability"]) should be present (as a child of back) for '<xsl:text/>
               <xsl:value-of select="$article-type"/>
               <xsl:text/>'. Is this a new version which was published first without one? If not, then it certainly needs adding.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="count(ack) gt 1">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(ack) gt 1">
            <xsl:attribute name="id">back-test-4</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[back-test-4] One and only one ack may be present in back.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="if ($article-type = ('research-article','article-commentary')) then (count(ref-list) != 1)         else ()">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="if ($article-type = ('research-article','article-commentary')) then (count(ref-list) != 1) else ()">
            <xsl:attribute name="id">back-test-5</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[back-test-5] One and only one ref-list must be present in <xsl:text/>
               <xsl:value-of select="$article-type"/>
               <xsl:text/> content.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="count(app-group) gt 1">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(app-group) gt 1">
            <xsl:attribute name="id">back-test-6</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[back-test-6] One and only one app-group may be present in back.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="if ($article-type = ($features-article-types,$notice-article-types)) then ()         else if ($subj-type = 'Scientific Correspondence') then ()         else (not(ack))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="if ($article-type = ($features-article-types,$notice-article-types)) then () else if ($subj-type = 'Scientific Correspondence') then () else (not(ack))">
            <xsl:attribute name="id">back-test-8</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[back-test-8] '<xsl:text/>
               <xsl:value-of select="$article-type"/>
               <xsl:text/>' usually have acknowledgement sections, but there isn't one here. Is this correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="($article-type = $features-article-types) and (count(fn-group[@content-type='competing-interest']) != 1)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="($article-type = $features-article-types) and (count(fn-group[@content-type='competing-interest']) != 1)">
            <xsl:attribute name="id">back-test-7</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[back-test-7] An fn-group[@content-type='competing-interest'] must be present as a child of back <xsl:text/>
               <xsl:value-of select="$subj-type"/>
               <xsl:text/> content.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="($article-type = 'research-article') and (count(sec[@sec-type='additional-information']/fn-group[@content-type='competing-interest']) != 1)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="($article-type = 'research-article') and (count(sec[@sec-type='additional-information']/fn-group[@content-type='competing-interest']) != 1)">
            <xsl:attribute name="id">back-test-9</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[back-test-9] One and only one fn-group[@content-type='competing-interest'] must be present in back as a child of sec[@sec-type="additional-information"] in <xsl:text/>
               <xsl:value-of select="$subj-type"/>
               <xsl:text/> content.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="if ($version='1') then ($article-type = 'research-article') and (count(sec[@sec-type='additional-information']/fn-group[@content-type='author-contribution']) != 1)         else ()">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="if ($version='1') then ($article-type = 'research-article') and (count(sec[@sec-type='additional-information']/fn-group[@content-type='author-contribution']) != 1) else ()">
            <xsl:attribute name="id">back-test-12</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[back-test-12] One and only one fn-group[@content-type='author-contribution'] must be present in back as a child of sec[@sec-type="additional-information"] in <xsl:text/>
               <xsl:value-of select="$subj-type"/>
               <xsl:text/> content.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="($article-type = ('article-commentary', 'editorial', 'book-review', 'discussion')) and sec[@sec-type='additional-information']">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="($article-type = ('article-commentary', 'editorial', 'book-review', 'discussion')) and sec[@sec-type='additional-information']">
            <xsl:attribute name="id">back-test-11</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[back-test-11] <xsl:text/>
               <xsl:value-of select="$article-type"/>
               <xsl:text/> type articles cannot contain additional information sections (sec[@sec-type="additional-information"]).</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M313"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M313"/>
   <xsl:template match="@*|node()" priority="-2" mode="M313">
      <xsl:apply-templates select="*" mode="M313"/>
   </xsl:template>

   <!--PATTERN data-content-tests-pattern-->


	  <!--RULE data-content-tests-->
   <xsl:template match="back/sec[@sec-type='data-availability']" priority="1000" mode="M314">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(p) gt 0"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(p) gt 0">
               <xsl:attribute name="id">data-p-presence</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[data-p-presence] At least one p element must be present in sec[@sec-type='data=availability'].</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="count(p[matches(.,'^The following datasets? w(as|ere) generated:\s?$')]) gt 1">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(p[matches(.,'^The following datasets? w(as|ere) generated:\s?$')]) gt 1">
            <xsl:attribute name="id">data-gen-p-presence</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[data-gen-p-presence] Data availabilty section contains more than one p element describing that the datasets were generated. Either the content of one (or more) is incorrect, or the duplicated sentence needs removing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="count(p[matches(.,'^The following previously published datasets? w(as|ere) used:\s?$')]) gt 1">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(p[matches(.,'^The following previously published datasets? w(as|ere) used:\s?$')]) gt 1">
            <xsl:attribute name="id">data-used-p-presence</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[data-used-p-presence] Data availabilty section contains more than one p element describing that previously published datasets were used. Either the content of one (or more) is incorrect, or the duplicated sentence needs removing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M314"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M314"/>
   <xsl:template match="@*|node()" priority="-2" mode="M314">
      <xsl:apply-templates select="*" mode="M314"/>
   </xsl:template>

   <!--PATTERN ack-tests-pattern-->


	  <!--RULE ack-tests-->
   <xsl:template match="back/ack" priority="1000" mode="M315">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(title) = 1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(title) = 1">
               <xsl:attribute name="id">ack-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[ack-test-1] ack must have only 1 title.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M315"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M315"/>
   <xsl:template match="@*|node()" priority="-2" mode="M315">
      <xsl:apply-templates select="*" mode="M315"/>
   </xsl:template>

   <!--PATTERN ack-child-tests-pattern-->


	  <!--RULE ack-child-tests-->
   <xsl:template match="back/ack/*" priority="1000" mode="M316">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="local-name() = ('p','sec','title')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="local-name() = ('p','sec','title')">
               <xsl:attribute name="id">ack-child-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[ack-child-test-1] Only p, sec or title can be children of ack. <xsl:text/>
                  <xsl:value-of select="name(.)"/>
                  <xsl:text/> is not allowed.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M316"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M316"/>
   <xsl:template match="@*|node()" priority="-2" mode="M316">
      <xsl:apply-templates select="*" mode="M316"/>
   </xsl:template>

   <!--PATTERN app-tests-pattern-->


	  <!--RULE app-tests-->
   <xsl:template match="back//app" priority="1000" mode="M317">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="parent::app-group"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="parent::app-group">
               <xsl:attribute name="id">app-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[app-test-1] app must be captured as a child of an app-group element.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(title) = 1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(title) = 1">
               <xsl:attribute name="id">app-test-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[app-test-2] app must have one title.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M317"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M317"/>
   <xsl:template match="@*|node()" priority="-2" mode="M317">
      <xsl:apply-templates select="*" mode="M317"/>
   </xsl:template>

   <!--PATTERN additional-info-tests-pattern-->


	  <!--RULE additional-info-tests-->
   <xsl:template match="sec[@sec-type='additional-information']" priority="1000" mode="M318">
      <xsl:variable name="article-type" select="ancestor::article/@article-type"/>
      <xsl:variable name="author-count" select="count(ancestor::article//article-meta//contrib[@contrib-type='author'])"/>
      <xsl:variable name="non-contribs" select="('article-commentary', 'editorial', 'book-review', $notice-article-types)"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="parent::back"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="parent::back">
               <xsl:attribute name="id">additional-info-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[additional-info-test-1] sec[@sec-type='additional-information'] must be a child of back.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="if ($author-count = 0) then ()         else not(fn-group[@content-type='competing-interest'])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="if ($author-count = 0) then () else not(fn-group[@content-type='competing-interest'])">
            <xsl:attribute name="id">additional-info-test-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[additional-info-test-2] This type of sec must have a child fn-group[@content-type='competing-interest'].</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="if (e:get-version(.)='1' and $article-type = ('research-article','review-article')) then (not(fn-group[@content-type='author-contribution']))         else ()">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="if (e:get-version(.)='1' and $article-type = ('research-article','review-article')) then (not(fn-group[@content-type='author-contribution'])) else ()">
            <xsl:attribute name="id">final-additional-info-test-3</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[final-additional-info-test-3] Missing author contributions. This type of sec in research content must have a child fn-group[@content-type='author-contribution'].</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="$article-type=$non-contribs and fn-group[@content-type='author-contribution']">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="$article-type=$non-contribs and fn-group[@content-type='author-contribution']">
            <xsl:attribute name="id">additional-info-test-4</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[additional-info-test-4] <xsl:text/>
               <xsl:value-of select="$article-type"/>
               <xsl:text/> type articles should not contain author contributions.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M318"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M318"/>
   <xsl:template match="@*|node()" priority="-2" mode="M318">
      <xsl:apply-templates select="*" mode="M318"/>
   </xsl:template>

   <!--PATTERN additional-files-tests-pattern-->


	  <!--RULE additional-files-tests-->
   <xsl:template match="sec[@sec-type='supplementary-material']" priority="1000" mode="M319">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="title = 'Additional files'"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="title = 'Additional files'">
               <xsl:attribute name="id">add-files-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[add-files-1] The additional files section (sec[@sec-type='supplementary-material']) must have a title which is 'Additional files'. This one does not.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M319"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M319"/>
   <xsl:template match="@*|node()" priority="-2" mode="M319">
      <xsl:apply-templates select="*" mode="M319"/>
   </xsl:template>

   <!--PATTERN trf-presence-pattern-->


	  <!--RULE trf-presence-->
   <xsl:template match="article[@article-type='research-article']" priority="1000" mode="M320">

		<!--ASSERT warning-->
      <xsl:choose>
         <xsl:when test="descendant::supplementary-material[matches(lower-case(label[1]),'transparent reporting form|mdar checklist')]"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="descendant::supplementary-material[matches(lower-case(label[1]),'transparent reporting form|mdar checklist')]">
               <xsl:attribute name="id">add-files-2</xsl:attribute>
               <xsl:attribute name="role">warning</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[add-files-2] This article does not have a transparent reporting form or MDAR checklist. Is that correct?</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M320"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M320"/>
   <xsl:template match="@*|node()" priority="-2" mode="M320">
      <xsl:apply-templates select="*" mode="M320"/>
   </xsl:template>

   <!--PATTERN additional-files-child-tests-pattern-->


	  <!--RULE additional-files-child-tests-->
   <xsl:template match="sec[@sec-type='supplementary-material']/*" priority="1000" mode="M321">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="name()=('title','supplementary-material')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="name()=('title','supplementary-material')">
               <xsl:attribute name="id">add-files-3</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[add-files-3] <xsl:text/>
                  <xsl:value-of select="name()"/>
                  <xsl:text/> is not allowed as a child element in the additional files section (sec[@sec-type='supplementary-material']).</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M321"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M321"/>
   <xsl:template match="@*|node()" priority="-2" mode="M321">
      <xsl:apply-templates select="*" mode="M321"/>
   </xsl:template>

   <!--PATTERN comp-int-fn-group-tests-pattern-->


	  <!--RULE comp-int-fn-group-tests-->
   <xsl:template match="fn-group[@content-type='competing-interest']" priority="1000" mode="M322">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(fn) gt 0"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(fn) gt 0">
               <xsl:attribute name="id">comp-int-fn-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[comp-int-fn-test-1] At least one child fn element should be present in fn-group[@content-type='competing-interest'].</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="ancestor::back"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="ancestor::back">
               <xsl:attribute name="id">comp-int-fn-group-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[comp-int-fn-group-test-1] This fn-group must be a descendant of back.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M322"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M322"/>
   <xsl:template match="@*|node()" priority="-2" mode="M322">
      <xsl:apply-templates select="*" mode="M322"/>
   </xsl:template>

   <!--PATTERN comp-int-fn-tests-pattern-->


	  <!--RULE comp-int-fn-tests-->
   <xsl:template match="fn-group[@content-type='competing-interest']/fn" priority="1000" mode="M323">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@fn-type='COI-statement'"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@fn-type='COI-statement'">
               <xsl:attribute name="id">comp-int-fn-test-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[comp-int-fn-test-2] fn element must have an @fn-type='COI-statement' as it is a child of fn-group[@content-type='competing-interest'].</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="contains(lower-case(.),'the other authors')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(lower-case(.),'the other authors')">
            <xsl:attribute name="id">comp-int-fn-test-3</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[comp-int-fn-test-3] Competing interests footnote contains information about other authors - '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>'. These footnotes should only contain information about that specific author.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches(.,'\.\p{Zs}*$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'\.\p{Zs}*$')">
            <xsl:attribute name="id">comp-int-fn-test-4</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[comp-int-fn-test-4] Competing interests footnote ends with full stop - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> - Please remove the full stop.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M323"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M323"/>
   <xsl:template match="@*|node()" priority="-2" mode="M323">
      <xsl:apply-templates select="*" mode="M323"/>
   </xsl:template>

   <!--PATTERN auth-cont-fn-tests-pattern-->


	  <!--RULE auth-cont-fn-tests-->
   <xsl:template match="fn-group[@content-type='author-contribution']/fn" priority="1000" mode="M324">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@fn-type='con'"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@fn-type='con'">
               <xsl:attribute name="id">auth-cont-fn-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[auth-cont-fn-test-1] This fn must have an @fn-type='con'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M324"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M324"/>
   <xsl:template match="@*|node()" priority="-2" mode="M324">
      <xsl:apply-templates select="*" mode="M324"/>
   </xsl:template>

   <!--PATTERN ethics-tests-pattern-->


	  <!--RULE ethics-tests-->
   <xsl:template match="fn-group[@content-type='ethics-information']" priority="1000" mode="M325">

		<!--REPORT error-->
      <xsl:if test="ancestor::article[not(@article-type='discussion')] and not(parent::sec[@sec-type='additional-information'])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="ancestor::article[not(@article-type='discussion')] and not(parent::sec[@sec-type='additional-information'])">
            <xsl:attribute name="id">ethics-test-1</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/ethics#ethics-test-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[ethics-test-1] Ethics fn-group can only be captured as a child of a sec [@sec-type='additional-information']</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="count(fn) gt 3">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(fn) gt 3">
            <xsl:attribute name="id">ethics-test-2</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/ethics#ethics-test-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[ethics-test-2] Ethics fn-group may not have more than 3 fn elements. Currently there are <xsl:text/>
               <xsl:value-of select="count(fn)"/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="count(fn) = 0">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(fn) = 0">
            <xsl:attribute name="id">ethics-test-3</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/ethics#ethics-test-3</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[ethics-test-3] Ethics fn-group must have at least one fn element.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M325"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M325"/>
   <xsl:template match="@*|node()" priority="-2" mode="M325">
      <xsl:apply-templates select="*" mode="M325"/>
   </xsl:template>

   <!--PATTERN ethics-fn-tests-pattern-->


	  <!--RULE ethics-fn-tests-->
   <xsl:template match="fn-group[@content-type='ethics-information']/fn" priority="1000" mode="M326">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@fn-type='other'"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@fn-type='other'">
               <xsl:attribute name="id">ethics-test-4</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/ethics#ethics-test-4</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[ethics-test-4] This fn must have an @fn-type='other'</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M326"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M326"/>
   <xsl:template match="@*|node()" priority="-2" mode="M326">
      <xsl:apply-templates select="*" mode="M326"/>
   </xsl:template>

   <!--PATTERN dec-letter-reply-tests-pattern-->


	  <!--RULE dec-letter-reply-tests-->
   <xsl:template match="article/sub-article" priority="1000" mode="M327">
      <xsl:variable name="version" select="e:get-version(.)"/>
      <xsl:variable name="id-convention" select="if (@article-type='editor-report') then 'sa0'         else if (@article-type=('decision-letter','referee-report')) then 'sa1'         else if (@article-type=('reply','author-comment')) then 'sa2'         else 'unknown'"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@article-type=('editor-report','referee-report','author-comment','decision-letter','reply')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@article-type=('editor-report','referee-report','author-comment','decision-letter','reply')">
               <xsl:attribute name="id">dec-letter-reply-test-1</xsl:attribute>
               <xsl:attribute name="flag">dl-ar</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#dec-letter-reply-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[dec-letter-reply-test-1] sub-article must must have an article-type which is equal to one of the following values: 'editor-report','decision-letter', or 'reply'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@id = $id-convention"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@id = $id-convention">
               <xsl:attribute name="id">dec-letter-reply-test-2</xsl:attribute>
               <xsl:attribute name="flag">dl-ar</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#dec-letter-reply-test-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[dec-letter-reply-test-2] sub-article id is <xsl:text/>
                  <xsl:value-of select="@id"/>
                  <xsl:text/> when based on it's article-type it should be <xsl:text/>
                  <xsl:value-of select="$id-convention"/>
                  <xsl:text/>.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(front-stub) = 1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(front-stub) = 1">
               <xsl:attribute name="id">dec-letter-reply-test-3</xsl:attribute>
               <xsl:attribute name="flag">dl-ar</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#dec-letter-reply-test-3</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[dec-letter-reply-test-3] sub-article must contain one and only one front-stub.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(body) = 1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(body) = 1">
               <xsl:attribute name="id">dec-letter-reply-test-4</xsl:attribute>
               <xsl:attribute name="flag">dl-ar</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#dec-letter-reply-test-4</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[dec-letter-reply-test-4] sub-article must contain one and only one body.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT warning-->
      <xsl:if test="$version='1' and @article-type='referee-report'">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="$version='1' and @article-type='referee-report'">
            <xsl:attribute name="id">sub-article-1</xsl:attribute>
            <xsl:attribute name="flag">dl-ar</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[sub-article-1] '<xsl:text/>
               <xsl:value-of select="@article-type"/>
               <xsl:text/>' is not permitted as the article-type for a sub-article in version 1 xml. Either, this needs to be made version 2 xml, or 'decision-letter' should be used in place of <xsl:text/>
               <xsl:value-of select="@article-type"/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="$version='1' and @article-type='author-comment'">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="$version='1' and @article-type='author-comment'">
            <xsl:attribute name="id">sub-article-2</xsl:attribute>
            <xsl:attribute name="flag">dl-ar</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[sub-article-2] '<xsl:text/>
               <xsl:value-of select="@article-type"/>
               <xsl:text/>' is not permitted as the article-type for a sub-article in version 1 xml. Either, this needs to be made version 2 xml, or 'reply' should be used in place of '<xsl:text/>
               <xsl:value-of select="@article-type"/>
               <xsl:text/>'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="$version!='1' and @article-type='decision-letter'">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="$version!='1' and @article-type='decision-letter'">
            <xsl:attribute name="id">sub-article-3</xsl:attribute>
            <xsl:attribute name="flag">dl-ar</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[sub-article-3] '<xsl:text/>
               <xsl:value-of select="@article-type"/>
               <xsl:text/>' is not permitted as the article-type for a sub-article in version 2 xml. Either, this needs to be made version 1 xml, or 'referee-report' should be used in place of <xsl:text/>
               <xsl:value-of select="@article-type"/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="$version!='1' and @article-type='reply'">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="$version!='1' and @article-type='reply'">
            <xsl:attribute name="id">sub-article-4</xsl:attribute>
            <xsl:attribute name="flag">dl-ar</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[sub-article-4] '<xsl:text/>
               <xsl:value-of select="@article-type"/>
               <xsl:text/>' is not permitted as the article-type for a sub-article in version 2 xml. Either, this needs to be made version 1 xml, or 'author-comment' should be used in place of <xsl:text/>
               <xsl:value-of select="@article-type"/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M327"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M327"/>
   <xsl:template match="@*|node()" priority="-2" mode="M327">
      <xsl:apply-templates select="*" mode="M327"/>
   </xsl:template>

   <!--PATTERN dec-letter-reply-content-tests-pattern-->


	  <!--RULE dec-letter-reply-content-tests-->
   <xsl:template match="article/sub-article//p" priority="1000" mode="M328">

		<!--REPORT error-->
      <xsl:if test="matches(.,'&lt;[/]?[Aa]uthor response')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'&lt;[/]?[Aa]uthor response')">
            <xsl:attribute name="id">dec-letter-reply-test-5</xsl:attribute>
            <xsl:attribute name="flag">dl-ar</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#dec-letter-reply-test-5</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[dec-letter-reply-test-5] <xsl:text/>
               <xsl:value-of select="ancestor::sub-article/@article-type"/>
               <xsl:text/> paragraph contains what looks like pseudo-code - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,'&lt;\p{Zs}?/?\p{Zs}?[a-z]*\p{Zs}?/?\p{Zs}?&gt;')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'&lt;\p{Zs}?/?\p{Zs}?[a-z]*\p{Zs}?/?\p{Zs}?&gt;')">
            <xsl:attribute name="id">dec-letter-reply-test-6</xsl:attribute>
            <xsl:attribute name="flag">dl-ar</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#dec-letter-reply-test-6</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[dec-letter-reply-test-6] <xsl:text/>
               <xsl:value-of select="ancestor::sub-article/@article-type"/>
               <xsl:text/> paragraph contains what might be pseudo-code or tags which should likely be removed - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M328"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M328"/>
   <xsl:template match="@*|node()" priority="-2" mode="M328">
      <xsl:apply-templates select="*" mode="M328"/>
   </xsl:template>

   <!--PATTERN dec-letter-reply-content-tests-2-pattern-->


	  <!--RULE dec-letter-reply-content-tests-2-->
   <xsl:template match="article/sub-article//p[not(ancestor::disp-quote)]" priority="1000" mode="M329">
      <xsl:variable name="regex" select="'\p{Zs}([Oo]ffensive|[Oo]ffended|[Uu]nproff?essional|[Rr]ude|[Cc]onflict\p{Zs}[Oo]f\p{Zs}[Ii]nterest|([Aa]re|[Aa]m)\p{Zs}[Ss]hocked|[Ss]trongly\p{Zs}[Dd]isagree)[^\p{L}]'"/>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,$regex)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,$regex)">
            <xsl:attribute name="id">dec-letter-reply-test-7</xsl:attribute>
            <xsl:attribute name="flag">dl-ar</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#dec-letter-reply-test-7</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[dec-letter-reply-test-7] <xsl:text/>
               <xsl:value-of select="ancestor::sub-article/@article-type"/>
               <xsl:text/> paragraph contains what might be inflammatory or offensive language. eLife: please check it to see if it is language that should be removed. This paragraph was flagged because of the phrase(s) <xsl:text/>
               <xsl:value-of select="string-join(tokenize(.,'\p{Zs}')[matches(.,concat('^',substring-before(substring-after($regex,'\p{Zs}'),'[^\p{L}]')))],'; ')"/>
               <xsl:text/> in <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M329"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M329"/>
   <xsl:template match="@*|node()" priority="-2" mode="M329">
      <xsl:apply-templates select="*" mode="M329"/>
   </xsl:template>

   <!--PATTERN ed-eval-front-tests-pattern-->


	  <!--RULE ed-eval-front-tests-->
   <xsl:template match="sub-article[@article-type='editor-report']/front-stub" priority="1000" mode="M330">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(article-id[@pub-id-type='doi']) = 1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(article-id[@pub-id-type='doi']) = 1">
               <xsl:attribute name="id">ed-eval-front-test-1</xsl:attribute>
               <xsl:attribute name="flag">dl-ar</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[ed-eval-front-test-1] sub-article front-stub must contain article-id[@pub-id-type='doi'].</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(contrib-group) = 1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(contrib-group) = 1">
               <xsl:attribute name="id">ed-eval-front-test-2</xsl:attribute>
               <xsl:attribute name="flag">dl-ar</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[ed-eval-front-test-2] editor evaluation front-stub must contain 1 (and only 1) contrib-group element. This one has <xsl:text/>
                  <xsl:value-of select="count(contrib-group)"/>
                  <xsl:text/>.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="count(related-object) gt 1">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(related-object) gt 1">
            <xsl:attribute name="id">ed-eval-front-test-3</xsl:attribute>
            <xsl:attribute name="flag">dl-ar</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[ed-eval-front-test-3] editor evaluation front-stub must contain 1 or 0 related-object elements. This one has <xsl:text/>
               <xsl:value-of select="count(related-object)"/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M330"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M330"/>
   <xsl:template match="@*|node()" priority="-2" mode="M330">
      <xsl:apply-templates select="*" mode="M330"/>
   </xsl:template>

   <!--PATTERN ed-eval-front-child-tests-pattern-->


	  <!--RULE ed-eval-front-child-tests-->
   <xsl:template match="sub-article[@article-type='editor-report']/front-stub/*" priority="1000" mode="M331">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="name()=('article-id','title-group','contrib-group','related-object')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="name()=('article-id','title-group','contrib-group','related-object')">
               <xsl:attribute name="id">ed-eval-front-child-test-1</xsl:attribute>
               <xsl:attribute name="flag">dl-ar</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[ed-eval-front-child-test-1] <xsl:text/>
                  <xsl:value-of select="name(.)"/>
                  <xsl:text/> element is not allowed in the front-stub for an Editor's evaluation. Only the following elements are permitted: article-id, title-group, contrib-group, related-object.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M331"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M331"/>
   <xsl:template match="@*|node()" priority="-2" mode="M331">
      <xsl:apply-templates select="*" mode="M331"/>
   </xsl:template>

   <!--PATTERN ed-eval-contrib-group-tests-pattern-->


	  <!--RULE ed-eval-contrib-group-tests-->
   <xsl:template match="sub-article[@article-type='editor-report']/front-stub/contrib-group" priority="1000" mode="M332">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(contrib[@contrib-type='author']) = 1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(contrib[@contrib-type='author']) = 1">
               <xsl:attribute name="id">ed-eval-contrib-group-test-1</xsl:attribute>
               <xsl:attribute name="flag">dl-ar</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[ed-eval-contrib-group-test-1] editor evaluation contrib-group must contain 1 contrib[@contrib-type='author'].</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M332"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M332"/>
   <xsl:template match="@*|node()" priority="-2" mode="M332">
      <xsl:apply-templates select="*" mode="M332"/>
   </xsl:template>

   <!--PATTERN ed-eval-author-tests-pattern-->


	  <!--RULE ed-eval-author-tests-->
   <xsl:template match="sub-article[@article-type='editor-report']/front-stub/contrib-group/contrib[@contrib-type='author' and name]" priority="1000" mode="M333">
      <xsl:variable name="rev-ed-name" select="e:get-name(ancestor::article//article-meta/contrib-group[@content-type='section'][1]/contrib[@contrib-type='editor'][1]/name[1])"/>
      <xsl:variable name="name" select="e:get-name(name[1])"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="$name = $rev-ed-name"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="$name = $rev-ed-name">
               <xsl:attribute name="id">ed-eval-author-test-1</xsl:attribute>
               <xsl:attribute name="flag">dl-ar</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[ed-eval-author-test-1] The author of the editor evaluation must be the same as the Reviewing editor for the article. The Reviewing editor is <xsl:text/>
                  <xsl:value-of select="$rev-ed-name"/>
                  <xsl:text/>, but the editor evaluation author is <xsl:text/>
                  <xsl:value-of select="$name"/>
                  <xsl:text/>.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M333"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M333"/>
   <xsl:template match="@*|node()" priority="-2" mode="M333">
      <xsl:apply-templates select="*" mode="M333"/>
   </xsl:template>

   <!--PATTERN ed-eval-rel-obj-tests-pattern-->


	  <!--RULE ed-eval-rel-obj-tests-->
   <xsl:template match="sub-article[@article-type='editor-report']/front-stub/related-object" priority="1000" mode="M334">
      <xsl:variable name="event-preprint-doi" select="for $x in ancestor::article//article-meta/pub-history/event[1]/self-uri[@content-type='preprint'][1]/@xlink:href                                         return substring-after($x,'.org/')"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(@id,'^sa0ro\d$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(@id,'^sa0ro\d$')">
               <xsl:attribute name="id">ed-eval-rel-obj-test-1</xsl:attribute>
               <xsl:attribute name="flag">dl-ar</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[ed-eval-rel-obj-test-1] related-object in editor's evaluation must have an id in the format sa0ro1. <xsl:text/>
                  <xsl:value-of select="@id"/>
                  <xsl:text/> does not meet this convention.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@object-id-type='id'"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@object-id-type='id'">
               <xsl:attribute name="id">ed-eval-rel-obj-test-2</xsl:attribute>
               <xsl:attribute name="flag">dl-ar</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[ed-eval-rel-obj-test-2] related-object in editor's evaluation must have an object-id-type="id" attribute.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@link-type='continued-by'"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@link-type='continued-by'">
               <xsl:attribute name="id">ed-eval-rel-obj-test-3</xsl:attribute>
               <xsl:attribute name="flag">dl-ar</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[ed-eval-rel-obj-test-3] related-object in editor's evaluation must have a link-type="continued-by" attribute.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(@object-id,'^10\.\d{4,9}/[-._;\+()#/:A-Za-z0-9&lt;&gt;\[\]]+$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(@object-id,'^10\.\d{4,9}/[-._;\+()#/:A-Za-z0-9&lt;&gt;\[\]]+$')">
               <xsl:attribute name="id">ed-eval-rel-obj-test-4</xsl:attribute>
               <xsl:attribute name="flag">dl-ar</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[ed-eval-rel-obj-test-4] related-object in editor's evaluation must have an object-id attribute which is a doi. '<xsl:text/>
                  <xsl:value-of select="@object-id"/>
                  <xsl:text/>' is not a valid doi.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@object-id = $event-preprint-doi"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@object-id = $event-preprint-doi">
               <xsl:attribute name="id">ed-eval-rel-obj-test-5</xsl:attribute>
               <xsl:attribute name="flag">dl-ar</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[ed-eval-rel-obj-test-5] related-object in editor's evaluation must have an object-id attribute whose value is the same as the preprint doi in the article's pub-history. object-id '<xsl:text/>
                  <xsl:value-of select="@object-id"/>
                  <xsl:text/>' is not the same as the preprint doi in the event history, '<xsl:text/>
                  <xsl:value-of select="$event-preprint-doi"/>
                  <xsl:text/>'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@xlink:href = concat('https://sciety.org/articles/activity/',@object-id)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@xlink:href = concat('https://sciety.org/articles/activity/',@object-id)">
               <xsl:attribute name="id">ed-eval-rel-obj-test-6</xsl:attribute>
               <xsl:attribute name="flag">dl-ar</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[ed-eval-rel-obj-test-6] related-object in editor's evaluation must have an xlink:href attribute whose value is 'https://sciety.org/articles/activity/' followed by the object-id attribute value (which must be a doi). '<xsl:text/>
                  <xsl:value-of select="@xlink:href"/>
                  <xsl:text/>' is not equal to <xsl:text/>
                  <xsl:value-of select="concat('https://sciety.org/articles/activity/',@object-id)"/>
                  <xsl:text/>. Which is correct?</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@xlink:href = concat('https://sciety.org/articles/activity/',$event-preprint-doi)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@xlink:href = concat('https://sciety.org/articles/activity/',$event-preprint-doi)">
               <xsl:attribute name="id">ed-eval-rel-obj-test-7</xsl:attribute>
               <xsl:attribute name="flag">dl-ar</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[ed-eval-rel-obj-test-7] related-object in editor's evaluation must have an xlink:href attribute whose value is 'https://sciety.org/articles/activity/' followed by the preprint doi in the article's pub-history. xlink:href '<xsl:text/>
                  <xsl:value-of select="@xlink:href"/>
                  <xsl:text/>' is not the same as '<xsl:text/>
                  <xsl:value-of select="concat('https://sciety.org/articles/activity/',$event-preprint-doi)"/>
                  <xsl:text/>'. Which is correct?</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M334"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M334"/>
   <xsl:template match="@*|node()" priority="-2" mode="M334">
      <xsl:apply-templates select="*" mode="M334"/>
   </xsl:template>

   <!--PATTERN dec-letter-front-tests-pattern-->


	  <!--RULE dec-letter-front-tests-->
   <xsl:template match="sub-article[@article-type='decision-letter']/front-stub" priority="1000" mode="M335">
      <xsl:variable name="count" select="count(contrib-group)"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(article-id[@pub-id-type='doi']) = 1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(article-id[@pub-id-type='doi']) = 1">
               <xsl:attribute name="id">dec-letter-front-test-1</xsl:attribute>
               <xsl:attribute name="flag">dl-ar</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#dec-letter-front-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[dec-letter-front-test-1] sub-article front-stub must contain article-id[@pub-id-type='doi'].</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="$count gt 0"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="$count gt 0">
               <xsl:attribute name="id">dec-letter-front-test-2</xsl:attribute>
               <xsl:attribute name="flag">dl-ar</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#dec-letter-front-test-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[dec-letter-front-test-2] decision letter front-stub must contain at least 1 contrib-group element.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="$count gt 2">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="$count gt 2">
            <xsl:attribute name="id">dec-letter-front-test-3</xsl:attribute>
            <xsl:attribute name="flag">dl-ar</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#dec-letter-front-test-3</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[dec-letter-front-test-3] decision letter front-stub contains more than 2 contrib-group elements.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="($count = 1) and not(matches(parent::sub-article[1]/body[1],'(All|The) reviewers have opted to remain anonymous|The reviewer has opted to remain anonymous')) and not(parent::sub-article[1]/body[1]//ext-link[matches(@xlink:href,'http[s]?://www.reviewcommons.org/|doi.org/10.24072/pci.evolbiol')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="($count = 1) and not(matches(parent::sub-article[1]/body[1],'(All|The) reviewers have opted to remain anonymous|The reviewer has opted to remain anonymous')) and not(parent::sub-article[1]/body[1]//ext-link[matches(@xlink:href,'http[s]?://www.reviewcommons.org/|doi.org/10.24072/pci.evolbiol')])">
            <xsl:attribute name="id">dec-letter-front-test-4</xsl:attribute>
            <xsl:attribute name="flag">dl-ar</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#dec-letter-front-test-4</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[dec-letter-front-test-4] decision letter front-stub has only 1 contrib-group element. Is this correct? i.e. were all of the reviewers (aside from the reviewing editor) anonymous? The text 'The reviewers have opted to remain anonymous' or 'The reviewer has opted to remain anonymous' is not present and there is no link to Review commons or a Peer Community in Evolutionary Biology doi in the decision letter.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M335"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M335"/>
   <xsl:template match="@*|node()" priority="-2" mode="M335">
      <xsl:apply-templates select="*" mode="M335"/>
   </xsl:template>

   <!--PATTERN dec-letter-editor-tests-pattern-->


	  <!--RULE dec-letter-editor-tests-->
   <xsl:template match="sub-article[@article-type='decision-letter']/front-stub/contrib-group[1]" priority="1000" mode="M336">

		<!--ASSERT warning-->
      <xsl:choose>
         <xsl:when test="count(contrib[@contrib-type='editor']) = 1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(contrib[@contrib-type='editor']) = 1">
               <xsl:attribute name="id">dec-letter-editor-test-1</xsl:attribute>
               <xsl:attribute name="flag">dl-ar</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#dec-letter-editor-test-1</xsl:attribute>
               <xsl:attribute name="role">warning</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[dec-letter-editor-test-1] First contrib-group in decision letter must contain 1 and only 1 editor (contrib[@contrib-type='editor']).</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT warning-->
      <xsl:if test="contrib[not(@contrib-type) or @contrib-type!='editor']">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contrib[not(@contrib-type) or @contrib-type!='editor']">
            <xsl:attribute name="id">dec-letter-editor-test-2</xsl:attribute>
            <xsl:attribute name="flag">dl-ar</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#dec-letter-editor-test-2</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[dec-letter-editor-test-2] First contrib-group in decision letter contains a contrib which is not marked up as an editor (contrib[@contrib-type='editor']).</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M336"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M336"/>
   <xsl:template match="@*|node()" priority="-2" mode="M336">
      <xsl:apply-templates select="*" mode="M336"/>
   </xsl:template>

   <!--PATTERN dec-letter-editor-tests-2-pattern-->


	  <!--RULE dec-letter-editor-tests-2-->
   <xsl:template match="sub-article[@article-type='decision-letter']/front-stub/contrib-group[1]/contrib[@contrib-type='editor']" priority="1000" mode="M337">
      <xsl:variable name="name" select="e:get-name(name[1])"/>
      <xsl:variable name="role" select="role[1]"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="$role=('Reviewing Editor','Senior and Reviewing Editor')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="$role=('Reviewing Editor','Senior and Reviewing Editor')">
               <xsl:attribute name="id">dec-letter-editor-test-3</xsl:attribute>
               <xsl:attribute name="flag">dl-ar</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#dec-letter-editor-test-3</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[dec-letter-editor-test-3] Editor in decision letter front-stub must have the role 'Reviewing Editor' or 'Senior and Reviewing Editor'. <xsl:text/>
                  <xsl:value-of select="$name"/>
                  <xsl:text/> has '<xsl:text/>
                  <xsl:value-of select="$role"/>
                  <xsl:text/>'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M337"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M337"/>
   <xsl:template match="@*|node()" priority="-2" mode="M337">
      <xsl:apply-templates select="*" mode="M337"/>
   </xsl:template>

   <!--PATTERN dec-letter-reviewer-tests-pattern-->


	  <!--RULE dec-letter-reviewer-tests-->
   <xsl:template match="sub-article[@article-type='decision-letter']/front-stub/contrib-group[2]" priority="1000" mode="M338">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(contrib[@contrib-type='reviewer']) gt 0"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(contrib[@contrib-type='reviewer']) gt 0">
               <xsl:attribute name="id">dec-letter-reviewer-test-1</xsl:attribute>
               <xsl:attribute name="flag">dl-ar</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#dec-letter-reviewer-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[dec-letter-reviewer-test-1] Second contrib-group in decision letter must contain a reviewer (contrib[@contrib-type='reviewer']).</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="contrib[not(@contrib-type) or @contrib-type!='reviewer']">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contrib[not(@contrib-type) or @contrib-type!='reviewer']">
            <xsl:attribute name="id">dec-letter-reviewer-test-2</xsl:attribute>
            <xsl:attribute name="flag">dl-ar</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#dec-letter-reviewer-test-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[dec-letter-reviewer-test-2] Second contrib-group in decision letter contains a contrib which is not marked up as a reviewer (contrib[@contrib-type='reviewer']).</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="count(contrib[@contrib-type='reviewer']) gt 5">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(contrib[@contrib-type='reviewer']) gt 5">
            <xsl:attribute name="id">dec-letter-reviewer-test-6</xsl:attribute>
            <xsl:attribute name="flag">dl-ar</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#dec-letter-reviewer-test-6</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[dec-letter-reviewer-test-6] Second contrib-group in decision letter contains more than five reviewers. Is this correct? Exeter: Please check with eLife. eLife: check eJP to ensure this is correct.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M338"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M338"/>
   <xsl:template match="@*|node()" priority="-2" mode="M338">
      <xsl:apply-templates select="*" mode="M338"/>
   </xsl:template>

   <!--PATTERN dec-letter-reviewer-tests-2-pattern-->


	  <!--RULE dec-letter-reviewer-tests-2-->
   <xsl:template match="sub-article[@article-type='decision-letter']/front-stub/contrib-group[2]/contrib[@contrib-type='reviewer']" priority="1000" mode="M339">
      <xsl:variable name="name" select="e:get-name(name[1])"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="role='Reviewer'"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="role='Reviewer'">
               <xsl:attribute name="id">dec-letter-reviewer-test-3</xsl:attribute>
               <xsl:attribute name="flag">dl-ar</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#dec-letter-reviewer-test-3</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[dec-letter-reviewer-test-3] Reviewer in decision letter front-stub must have the role 'Reviewer'. <xsl:text/>
                  <xsl:value-of select="$name"/>
                  <xsl:text/> has '<xsl:text/>
                  <xsl:value-of select="role"/>
                  <xsl:text/>'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M339"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M339"/>
   <xsl:template match="@*|node()" priority="-2" mode="M339">
      <xsl:apply-templates select="*" mode="M339"/>
   </xsl:template>

   <!--PATTERN dec-letter-body-tests-pattern-->


	  <!--RULE dec-letter-body-tests-->
   <xsl:template match="sub-article[@article-type='decision-letter']/body" priority="1000" mode="M340">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="child::*[1]/local-name() = 'boxed-text'"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="child::*[1]/local-name() = 'boxed-text'">
               <xsl:attribute name="id">dec-letter-body-test-1</xsl:attribute>
               <xsl:attribute name="flag">dl-ar</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#dec-letter-body-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[dec-letter-body-test-1] First child element in decision letter is not boxed-text. This is certainly incorrect.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M340"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M340"/>
   <xsl:template match="@*|node()" priority="-2" mode="M340">
      <xsl:apply-templates select="*" mode="M340"/>
   </xsl:template>

   <!--PATTERN dec-letter-body-p-tests-pattern-->


	  <!--RULE dec-letter-body-p-tests-->
   <xsl:template match="sub-article[@article-type=('decision-letter','referee-report')]/body//p" priority="1000" mode="M341">

		<!--REPORT error-->
      <xsl:if test="contains(lower-case(.),'this paper was reviewed by review commons') and not(child::ext-link[matches(@xlink:href,'http[s]?://www.reviewcommons.org/') and (lower-case(.)='review commons')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(lower-case(.),'this paper was reviewed by review commons') and not(child::ext-link[matches(@xlink:href,'http[s]?://www.reviewcommons.org/') and (lower-case(.)='review commons')])">
            <xsl:attribute name="id">dec-letter-body-test-2</xsl:attribute>
            <xsl:attribute name="flag">dl-ar</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#dec-letter-body-test-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[dec-letter-body-test-2] The text 'Review Commons' in '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>' must contain an embedded link pointing to https://www.reviewcommons.org/.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="contains(lower-case(.),'reviewed and recommended by peer community in evolutionary biology') and not(child::ext-link[matches(@xlink:href,'doi.org/10.24072/pci.evolbiol')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(lower-case(.),'reviewed and recommended by peer community in evolutionary biology') and not(child::ext-link[matches(@xlink:href,'doi.org/10.24072/pci.evolbiol')])">
            <xsl:attribute name="id">dec-letter-body-test-3</xsl:attribute>
            <xsl:attribute name="flag">dl-ar</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#dec-letter-body-test-3</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[dec-letter-body-test-3] The decision letter indicates that this article was reviewed by PCI evol bio, but there is no doi link with the prefix '10.24072/pci.evolbiol' which must be incorrect.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M341"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M341"/>
   <xsl:template match="@*|node()" priority="-2" mode="M341">
      <xsl:apply-templates select="*" mode="M341"/>
   </xsl:template>

   <!--PATTERN dec-letter-box-tests-pattern-->


	  <!--RULE dec-letter-box-tests-->
   <xsl:template match="sub-article[@article-type='decision-letter']/body/boxed-text[1]" priority="1000" mode="M342">
      <xsl:variable name="permitted-text-1" select="'^Our editorial process produces two outputs: \(?i\) public reviews designed to be posted alongside the preprint for the benefit of readers; \(?ii\) feedback on the manuscript for the authors, including requests for revisions, shown below.$'"/>
      <xsl:variable name="permitted-text-2" select="'^Our editorial process produces two outputs: \(?i\) public reviews designed to be posted alongside the preprint for the benefit of readers; \(?ii\) feedback on the manuscript for the authors, including requests for revisions, shown below. We also include an acceptance summary that explains what the editors found interesting or important about the work.$'"/>
      <xsl:variable name="permitted-text-3" select="'^In the interests of transparency, eLife publishes the most substantive revision requests and the accompanying author responses.$'"/>

		    <!--ASSERT warning-->
      <xsl:choose>
         <xsl:when test="matches(.,concat($permitted-text-1,'|',$permitted-text-2,'|',$permitted-text-3))"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,concat($permitted-text-1,'|',$permitted-text-2,'|',$permitted-text-3))">
               <xsl:attribute name="id">dec-letter-box-test-1</xsl:attribute>
               <xsl:attribute name="flag">dl-ar</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#dec-letter-box-test-1</xsl:attribute>
               <xsl:attribute name="role">warning</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[dec-letter-box-test-1] The text at the top of the decision letter is not correct - '<xsl:text/>
                  <xsl:value-of select="."/>
                  <xsl:text/>'. It has to be one of the three paragraphs which are permitted (see the GitBook page for these paragraphs).</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="matches(.,concat($permitted-text-1,'|',$permitted-text-2)) and not(descendant::ext-link[contains(@xlink:href,'sciety.org/') and .='public reviews'])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,concat($permitted-text-1,'|',$permitted-text-2)) and not(descendant::ext-link[contains(@xlink:href,'sciety.org/') and .='public reviews'])">
            <xsl:attribute name="id">dec-letter-box-test-2</xsl:attribute>
            <xsl:attribute name="flag">dl-ar</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#dec-letter-box-test-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[dec-letter-box-test-2] At the top of the decision letter, the text 'public reviews' must contain an embedded link to Sciety where the public review for this article's preprint is located.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches(.,concat($permitted-text-1,'|',$permitted-text-2)) and not(descendant::ext-link[.='the preprint'])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,concat($permitted-text-1,'|',$permitted-text-2)) and not(descendant::ext-link[.='the preprint'])">
            <xsl:attribute name="id">dec-letter-box-test-3</xsl:attribute>
            <xsl:attribute name="flag">dl-ar</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#dec-letter-box-test-3</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[dec-letter-box-test-3] At the top of the decision letter, the text 'the preprint' must contain an embedded link to this article's preprint.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M342"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M342"/>
   <xsl:template match="@*|node()" priority="-2" mode="M342">
      <xsl:apply-templates select="*" mode="M342"/>
   </xsl:template>

   <!--PATTERN decision-missing-table-tests-pattern-->


	  <!--RULE decision-missing-table-tests-->
   <xsl:template match="sub-article[@article-type='decision-letter']" priority="1000" mode="M343">

		<!--REPORT warning-->
      <xsl:if test="contains(.,'letter table') and not(descendant::table-wrap[label])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'letter table') and not(descendant::table-wrap[label])">
            <xsl:attribute name="id">decision-missing-table-test</xsl:attribute>
            <xsl:attribute name="flag">dl-ar</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#decision-missing-table-test</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[decision-missing-table-test] A decision letter table is referred to in the text, but there is no table in the decision letter with a label.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M343"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M343"/>
   <xsl:template match="@*|node()" priority="-2" mode="M343">
      <xsl:apply-templates select="*" mode="M343"/>
   </xsl:template>

   <!--PATTERN reply-front-tests-pattern-->


	  <!--RULE reply-front-tests-->
   <xsl:template match="sub-article[@article-type='reply']/front-stub" priority="1000" mode="M344">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(article-id[@pub-id-type='doi']) = 1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(article-id[@pub-id-type='doi']) = 1">
               <xsl:attribute name="id">reply-front-test-1</xsl:attribute>
               <xsl:attribute name="flag">dl-ar</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#reply-front-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[reply-front-test-1] sub-article front-stub must contain article-id[@pub-id-type='doi'].</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M344"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M344"/>
   <xsl:template match="@*|node()" priority="-2" mode="M344">
      <xsl:apply-templates select="*" mode="M344"/>
   </xsl:template>

   <!--PATTERN reply-body-tests-pattern-->


	  <!--RULE reply-body-tests-->
   <xsl:template match="sub-article[@article-type='reply']/body" priority="1000" mode="M345">

		<!--REPORT warning-->
      <xsl:if test="count(disp-quote[@content-type='editor-comment']) = 0">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(disp-quote[@content-type='editor-comment']) = 0">
            <xsl:attribute name="id">reply-body-test-1</xsl:attribute>
            <xsl:attribute name="flag">dl-ar</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#reply-body-test-1</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[reply-body-test-1] author response doesn't contain a disp-quote. This is very likely to be incorrect. Please check the original file.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="count(p) = 0">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(p) = 0">
            <xsl:attribute name="id">reply-body-test-2</xsl:attribute>
            <xsl:attribute name="flag">dl-ar</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#reply-body-test-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[reply-body-test-2] author response doesn't contain a p. This has to be incorrect.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M345"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M345"/>
   <xsl:template match="@*|node()" priority="-2" mode="M345">
      <xsl:apply-templates select="*" mode="M345"/>
   </xsl:template>

   <!--PATTERN reply-disp-quote-tests-pattern-->


	  <!--RULE reply-disp-quote-tests-->
   <xsl:template match="sub-article[@article-type='reply']/body//disp-quote" priority="1000" mode="M346">

		<!--ASSERT warning-->
      <xsl:choose>
         <xsl:when test="@content-type='editor-comment'"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@content-type='editor-comment'">
               <xsl:attribute name="id">reply-disp-quote-test-1</xsl:attribute>
               <xsl:attribute name="flag">dl-ar</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#reply-disp-quote-test-1</xsl:attribute>
               <xsl:attribute name="role">warning</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[reply-disp-quote-test-1] disp-quote in author reply does not have @content-type='editor-comment'. This is almost certainly incorrect.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M346"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M346"/>
   <xsl:template match="@*|node()" priority="-2" mode="M346">
      <xsl:apply-templates select="*" mode="M346"/>
   </xsl:template>

   <!--PATTERN reply-missing-disp-quote-tests-pattern-->


	  <!--RULE reply-missing-disp-quote-tests-->
   <xsl:template match="sub-article[@article-type='reply']/body//p[not(ancestor::disp-quote)]" priority="1000" mode="M347">
      <xsl:variable name="free-text" select="replace(         normalize-space(string-join(for $x in self::*/text() return $x,''))         ,' ','')"/>

		    <!--REPORT warning-->
      <xsl:if test="(count(*)=1) and (child::italic) and ($free-text='')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(count(*)=1) and (child::italic) and ($free-text='')">
            <xsl:attribute name="id">reply-missing-disp-quote-test-1</xsl:attribute>
            <xsl:attribute name="flag">dl-ar</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#reply-missing-disp-quote-test-1</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[reply-missing-disp-quote-test-1] para in author response is entirely in italics, but not in a display quote. Is this a quote which has been processed incorrectly?</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M347"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M347"/>
   <xsl:template match="@*|node()" priority="-2" mode="M347">
      <xsl:apply-templates select="*" mode="M347"/>
   </xsl:template>

   <!--PATTERN reply-missing-disp-quote-tests-2-pattern-->


	  <!--RULE reply-missing-disp-quote-tests-2-->
   <xsl:template match="sub-article[@article-type='reply']//italic[not(ancestor::disp-quote)]" priority="1000" mode="M348">

		<!--REPORT warning-->
      <xsl:if test="string-length(.) ge 50">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="string-length(.) ge 50">
            <xsl:attribute name="id">reply-missing-disp-quote-test-2</xsl:attribute>
            <xsl:attribute name="flag">dl-ar</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#reply-missing-disp-quote-test-2</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[reply-missing-disp-quote-test-2] A long piece of text is in italics in an Author response paragraph. Should it be captured as a display quote in a separate paragraph? '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>' in '<xsl:text/>
               <xsl:value-of select="ancestor::*[local-name()='p'][1]"/>
               <xsl:text/>'</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M348"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M348"/>
   <xsl:template match="@*|node()" priority="-2" mode="M348">
      <xsl:apply-templates select="*" mode="M348"/>
   </xsl:template>

   <!--PATTERN reply-missing-table-tests-pattern-->


	  <!--RULE reply-missing-table-tests-->
   <xsl:template match="sub-article[@article-type='reply']" priority="1000" mode="M349">

		<!--REPORT warning-->
      <xsl:if test="contains(.,'response table') and not(descendant::table-wrap[label])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'response table') and not(descendant::table-wrap[label])">
            <xsl:attribute name="id">reply-missing-table-test</xsl:attribute>
            <xsl:attribute name="flag">dl-ar</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#reply-missing-table-test</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[reply-missing-table-test] An author response table is referred to in the text, but there is no table in the response with a label.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M349"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M349"/>
   <xsl:template match="@*|node()" priority="-2" mode="M349">
      <xsl:apply-templates select="*" mode="M349"/>
   </xsl:template>

   <!--PATTERN sub-article-ext-link-tests-pattern-->


	  <!--RULE sub-article-ext-link-tests-->
   <xsl:template match="sub-article//ext-link" priority="1000" mode="M350">

		<!--REPORT error-->
      <xsl:if test="contains(@xlink:href,'paperpile.com')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(@xlink:href,'paperpile.com')">
            <xsl:attribute name="id">paper-pile-test</xsl:attribute>
            <xsl:attribute name="flag">dl-ar</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#paper-pile-test</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[paper-pile-test] In the <xsl:text/>
               <xsl:value-of select="if (ancestor::sub-article[@article-type='reply']) then 'author response' else 'decision letter'"/>
               <xsl:text/> the text '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>' has an embedded hyperlink to <xsl:text/>
               <xsl:value-of select="@xlink:href"/>
               <xsl:text/>. The hyperlink should be removed (but the text retained).</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M350"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M350"/>
   <xsl:template match="@*|node()" priority="-2" mode="M350">
      <xsl:apply-templates select="*" mode="M350"/>
   </xsl:template>

   <!--PATTERN sub-article-ref-p-tests-pattern-->


	  <!--RULE sub-article-ref-p-tests-->
   <xsl:template match="sub-article[@article-type='reply']/body/*[last()][name()='p']" priority="1000" mode="M351">

		<!--REPORT warning-->
      <xsl:if test="count(tokenize(lower-case(.),'doi\p{Zs}?:')) gt 2">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(tokenize(lower-case(.),'doi\p{Zs}?:')) gt 2">
            <xsl:attribute name="id">sub-article-ref-p-test</xsl:attribute>
            <xsl:attribute name="flag">dl-ar</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#sub-article-ref-p-test</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[sub-article-ref-p-test] The last paragraph of the author response looks like it contains various references. Should each reference be split out into its own paragraph? <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M351"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M351"/>
   <xsl:template match="@*|node()" priority="-2" mode="M351">
      <xsl:apply-templates select="*" mode="M351"/>
   </xsl:template>

   <!--PATTERN ref-report-front-pattern-->


	  <!--RULE ref-report-front-->
   <xsl:template match="sub-article[@article-type='referee-report']/front-stub" priority="1000" mode="M352">
      <xsl:variable name="count" select="count(contrib-group)"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(article-id[@pub-id-type='doi']) = 1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(article-id[@pub-id-type='doi']) = 1">
               <xsl:attribute name="id">ref-report-front-1</xsl:attribute>
               <xsl:attribute name="flag">dl-ar</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#dec-letter-front-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[ref-report-front-1] sub-article front-stub must contain article-id[@pub-id-type='doi'].</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="$count = 2"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="$count = 2">
               <xsl:attribute name="id">ref-report-front-2</xsl:attribute>
               <xsl:attribute name="flag">dl-ar</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[ref-report-front-2] sub-article front-stub must contain 2 contrib-group elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M352"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M352"/>
   <xsl:template match="@*|node()" priority="-2" mode="M352">
      <xsl:apply-templates select="*" mode="M352"/>
   </xsl:template>

   <!--PATTERN sub-article-contrib-tests-pattern-->


	  <!--RULE sub-article-contrib-tests-->
   <xsl:template match="sub-article[@article-type=('editor-report','referee-report','author-comment')]/front-stub/contrib-group/contrib" priority="1000" mode="M353">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@contrib-type='author'"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@contrib-type='author'">
               <xsl:attribute name="id">sub-article-contrib-test-1</xsl:attribute>
               <xsl:attribute name="flag">dl-ar</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[sub-article-contrib-test-1] contrib inside sub-article with article-type '<xsl:text/>
                  <xsl:value-of select="ancestor::sub-article/@article-type"/>
                  <xsl:text/>' must have the attribute contrib-type='author'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="name or anonymous or collab"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="name or anonymous or collab">
               <xsl:attribute name="id">sub-article-contrib-test-2</xsl:attribute>
               <xsl:attribute name="flag">dl-ar</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[sub-article-contrib-test-2] sub-article contrib must have either a child name or a child anonymous element.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="(name and anonymous) or (collab and anonymous) or (name and collab)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(name and anonymous) or (collab and anonymous) or (name and collab)">
            <xsl:attribute name="id">sub-article-contrib-test-3</xsl:attribute>
            <xsl:attribute name="flag">dl-ar</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[sub-article-contrib-test-3] sub-article contrib can only have a child name element or a child anonymous element or a child collab element (with descendant group members as required), it cannot have more than one of these elements. This has <xsl:text/>
               <xsl:value-of select="string-join(for $x in *[name()=('name','anonymous','collab')] return concat('a ',$x/name()),' and ')"/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="role"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="role">
               <xsl:attribute name="id">sub-article-contrib-test-4</xsl:attribute>
               <xsl:attribute name="flag">dl-ar</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[sub-article-contrib-test-4] contrib inside sub-article with article-type '<xsl:text/>
                  <xsl:value-of select="ancestor::sub-article/@article-type"/>
                  <xsl:text/>' must have a child role element.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M353"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M353"/>
   <xsl:template match="@*|node()" priority="-2" mode="M353">
      <xsl:apply-templates select="*" mode="M353"/>
   </xsl:template>

   <!--PATTERN sub-article-role-tests-pattern-->


	  <!--RULE sub-article-role-tests-->
   <xsl:template match="sub-article/front-stub/contrib-group/contrib/role" priority="1000" mode="M354">
      <xsl:variable name="sub-article-type" select="ancestor::sub-article[1]/@article-type"/>

		    <!--REPORT error-->
      <xsl:if test="$sub-article-type='referee-report' and parent::contrib/parent::contrib-group[not(preceding-sibling::contrib-group)] and not(@specific-use='editor')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="$sub-article-type='referee-report' and parent::contrib/parent::contrib-group[not(preceding-sibling::contrib-group)] and not(@specific-use='editor')">
            <xsl:attribute name="id">sub-article-role-test-1</xsl:attribute>
            <xsl:attribute name="flag">dl-ar</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[sub-article-role-test-1] The role element for contributors in the first contrib-group in the decision letter must have the attribute specific-use='editor'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="$sub-article-type='referee-report' and parent::contrib/parent::contrib-group[not(following-sibling::contrib-group)] and not(@specific-use='referee')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="$sub-article-type='referee-report' and parent::contrib/parent::contrib-group[not(following-sibling::contrib-group)] and not(@specific-use='referee')">
            <xsl:attribute name="id">sub-article-role-test-2</xsl:attribute>
            <xsl:attribute name="flag">dl-ar</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[sub-article-role-test-2] The role element for contributors in the second contrib-group in the decision letter must have the attribute specific-use='referee'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="$sub-article-type='author-comment' and not(@specific-use='author')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="$sub-article-type='author-comment' and not(@specific-use='author')">
            <xsl:attribute name="id">sub-article-role-test-3</xsl:attribute>
            <xsl:attribute name="flag">dl-ar</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[sub-article-role-test-3] The role element for contributors in the author response must have the attribute specific-use='author'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="@specific-use='author' and .!='Author'">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@specific-use='author' and .!='Author'">
            <xsl:attribute name="id">sub-article-role-test-4</xsl:attribute>
            <xsl:attribute name="flag">dl-ar</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[sub-article-role-test-4] A role element with the attribute specific-use='author' must contain the text 'Author'. This one has '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="@specific-use='editor' and not(.=('Senior and Reviewing Editor','Reviewing Editor'))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@specific-use='editor' and not(.=('Senior and Reviewing Editor','Reviewing Editor'))">
            <xsl:attribute name="id">sub-article-role-test-5</xsl:attribute>
            <xsl:attribute name="flag">dl-ar</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[sub-article-role-test-5] A role element with the attribute specific-use='editor' must contain the text 'Senior and Reviewing Editor' or 'Reviewing Editor'. This one has '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="@specific-use='referee' and .!='Reviewer'">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@specific-use='referee' and .!='Reviewer'">
            <xsl:attribute name="id">sub-article-role-test-6</xsl:attribute>
            <xsl:attribute name="flag">dl-ar</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[sub-article-role-test-6] A role element with the attribute specific-use='referee' must contain the text 'Reviewer'. This one has '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M354"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M354"/>
   <xsl:template match="@*|node()" priority="-2" mode="M354">
      <xsl:apply-templates select="*" mode="M354"/>
   </xsl:template>

   <!--PATTERN ref-report-editor-tests-pattern-->


	  <!--RULE ref-report-editor-tests-->
   <xsl:template match="sub-article[@article-type='referee-report']/front-stub/contrib-group[1]" priority="1000" mode="M355">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(contrib[role[@specific-use='editor']]) = 1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(contrib[role[@specific-use='editor']]) = 1">
               <xsl:attribute name="id">ref-report-editor-1</xsl:attribute>
               <xsl:attribute name="flag">dl-ar</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[ref-report-editor-1] First contrib-group in decision letter must contain 1 and only 1 editor (a contrib with a role[@specific-use='editor']).</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M355"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M355"/>
   <xsl:template match="@*|node()" priority="-2" mode="M355">
      <xsl:apply-templates select="*" mode="M355"/>
   </xsl:template>

   <!--PATTERN ref-report-editor-tests-2-pattern-->


	  <!--RULE ref-report-editor-tests-2-->
   <xsl:template match="sub-article[@article-type='referee-report']/front-stub/contrib-group[1]/contrib[role[@specific-use='editor']]" priority="1000" mode="M356">
      <xsl:variable name="name" select="e:get-name(name[1])"/>
      <xsl:variable name="role" select="role[1]"/>
      <xsl:variable name="top-contrib" select="ancestor::article//article-meta/contrib-group[2]/contrib[lower-case(role[1])=lower-case($role)]"/>
      <xsl:variable name="top-name" select="if ($top-contrib) then e:get-name($top-contrib/name[1]) else ''"/>

		    <!--REPORT error-->
      <xsl:if test="($top-name!='') and ($top-name!=$name)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="($top-name!='') and ($top-name!=$name)">
            <xsl:attribute name="id">ref-report-editor-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[ref-report-editor-2] In decision letter '<xsl:text/>
               <xsl:value-of select="$name"/>
               <xsl:text/>' is a '<xsl:text/>
               <xsl:value-of select="$role"/>
               <xsl:text/>', but in the top-level article details '<xsl:text/>
               <xsl:value-of select="$top-name"/>
               <xsl:text/>' is the '<xsl:text/>
               <xsl:value-of select="$top-contrib/role[1]"/>
               <xsl:text/>'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M356"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M356"/>
   <xsl:template match="@*|node()" priority="-2" mode="M356">
      <xsl:apply-templates select="*" mode="M356"/>
   </xsl:template>

   <!--PATTERN ref-report-reviewer-tests-pattern-->


	  <!--RULE ref-report-reviewer-tests-->
   <xsl:template match="sub-article[@article-type='referee-report']/front-stub/contrib-group[2]" priority="1000" mode="M357">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(contrib[role[@specific-use='referee']]) gt 0"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(contrib[role[@specific-use='referee']]) gt 0">
               <xsl:attribute name="id">ref-report-reviewer-test-1</xsl:attribute>
               <xsl:attribute name="flag">dl-ar</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[ref-report-reviewer-test-1] Second contrib-group in decision letter must contain a reviewer (a contrib with a child role[@specific-use='referee']).</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT warning-->
      <xsl:if test="count(contrib[role[@specific-use='referee']]) gt 5">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(contrib[role[@specific-use='referee']]) gt 5">
            <xsl:attribute name="id">ref-report-reviewer-test-6</xsl:attribute>
            <xsl:attribute name="flag">dl-ar</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[ref-report-reviewer-test-6] Second contrib-group in decision letter contains more than five reviewers. Is this correct? Exeter: Please check with eLife. eLife: check eJP to ensure this is correct.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M357"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M357"/>
   <xsl:template match="@*|node()" priority="-2" mode="M357">
      <xsl:apply-templates select="*" mode="M357"/>
   </xsl:template>

   <!--PATTERN anonymous-tests-pattern-->


	  <!--RULE anonymous-tests-->
   <xsl:template match="anonymous" priority="1000" mode="M358">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="parent::contrib[role[@specific-use='referee']]"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="parent::contrib[role[@specific-use='referee']]">
               <xsl:attribute name="id">anonymous-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[anonymous-test-1] The anonymous element can only be used for a reviewer who has opted not to reveal their name. It cannot be placed as a child of <xsl:text/>
                  <xsl:value-of select="if (parent::contrib) then 'a non-reviewer contrib' else parent::*/name()"/>
                  <xsl:text/>.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M358"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M358"/>
   <xsl:template match="@*|node()" priority="-2" mode="M358">
      <xsl:apply-templates select="*" mode="M358"/>
   </xsl:template>

   <!--PATTERN research-advance-test-pattern-->


	  <!--RULE research-advance-test-->
   <xsl:template match="article[descendant::article-meta/article-categories/subj-group[@subj-group-type='display-channel']/subject = 'Research Advance']//article-meta" priority="1000" mode="M359">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(related-article[@related-article-type='article-reference']) gt 0"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(related-article[@related-article-type='article-reference']) gt 0">
               <xsl:attribute name="id">related-articles-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[related-articles-test-1] Research Advance must contain an article-reference link to the original article it is building upon.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M359"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M359"/>
   <xsl:template match="@*|node()" priority="-2" mode="M359">
      <xsl:apply-templates select="*" mode="M359"/>
   </xsl:template>

   <!--PATTERN insight-test-pattern-->


	  <!--RULE insight-test-->
   <xsl:template match="article[descendant::article-meta/article-categories/subj-group[@subj-group-type='display-channel']/subject = 'Insight']//article-meta" priority="1000" mode="M360">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(related-article[@related-article-type='commentary-article']) gt 0"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(related-article[@related-article-type='commentary-article']) gt 0">
               <xsl:attribute name="id">related-articles-test-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[related-articles-test-2] Insight must contain an article-reference link (related-article[@related-article-type='commentary-article']) to the original article it is discussing.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M360"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M360"/>
   <xsl:template match="@*|node()" priority="-2" mode="M360">
      <xsl:apply-templates select="*" mode="M360"/>
   </xsl:template>

   <!--PATTERN correction-test-pattern-->


	  <!--RULE correction-test-->
   <xsl:template match="article[@article-type='correction']//article-meta" priority="1000" mode="M361">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(related-article[@related-article-type='corrected-article']) gt 0"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(related-article[@related-article-type='corrected-article']) gt 0">
               <xsl:attribute name="id">related-articles-test-8</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[related-articles-test-8] Corrections must contain at least 1 related-article link with the attribute related-article-type='corrected-article'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M361"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M361"/>
   <xsl:template match="@*|node()" priority="-2" mode="M361">
      <xsl:apply-templates select="*" mode="M361"/>
   </xsl:template>

   <!--PATTERN retraction-test-pattern-->


	  <!--RULE retraction-test-->
   <xsl:template match="article[@article-type='retraction']//article-meta" priority="1000" mode="M362">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(related-article[@related-article-type='retracted-article']) gt 0"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(related-article[@related-article-type='retracted-article']) gt 0">
               <xsl:attribute name="id">related-articles-test-9</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[related-articles-test-9] Retractions must contain at least 1 related-article link with the attribute related-article-type='retracted-article'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M362"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M362"/>
   <xsl:template match="@*|node()" priority="-2" mode="M362">
      <xsl:apply-templates select="*" mode="M362"/>
   </xsl:template>

   <!--PATTERN eoc-test-pattern-->


	  <!--RULE eoc-test-->
   <xsl:template match="article[@article-type='expression-of-concern']//article-meta" priority="1000" mode="M363">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(related-article[@related-article-type='object-of-concern']) gt 0"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(related-article[@related-article-type='object-of-concern']) gt 0">
               <xsl:attribute name="id">related-articles-test-13</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[related-articles-test-13] Expressions of Concern must contain at least 1 related-article link with the attribute related-article-type='object-of-concern'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M363"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M363"/>
   <xsl:template match="@*|node()" priority="-2" mode="M363">
      <xsl:apply-templates select="*" mode="M363"/>
   </xsl:template>

   <!--PATTERN research-article-ra-test-pattern-->


	  <!--RULE research-article-ra-test-->
   <xsl:template match="article[@article-type='research-article']//related-article" priority="1000" mode="M364">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@related-article-type=('article-reference', 'commentary', 'corrected-article', 'retracted-article')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@related-article-type=('article-reference', 'commentary', 'corrected-article', 'retracted-article')">
               <xsl:attribute name="id">related-articles-test-12</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[related-articles-test-12] The only types of related-article link allowed in a research article are 'article-reference' (link to another research article), 'commentary' (link to an insight), 'corrected-article' (link to a correction notice) or 'retracted-article' (link to retraction notice). The link to <xsl:text/>
                  <xsl:value-of select="@xlink:href"/>
                  <xsl:text/> is a <xsl:text/>
                  <xsl:value-of select="@related-article-type"/>
                  <xsl:text/> type link.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M364"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M364"/>
   <xsl:template match="@*|node()" priority="-2" mode="M364">
      <xsl:apply-templates select="*" mode="M364"/>
   </xsl:template>

   <!--PATTERN related-articles-conformance-pattern-->


	  <!--RULE related-articles-conformance-->
   <xsl:template match="related-article" priority="1000" mode="M365">
      <xsl:variable name="allowed-values" select="('article-reference', 'commentary', 'commentary-article', 'corrected-article', 'retracted-article', 'object-of-concern')"/>
      <xsl:variable name="article-doi" select="parent::article-meta/article-id[@pub-id-type='doi']"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@related-article-type"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@related-article-type">
               <xsl:attribute name="id">related-articles-test-3</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[related-articles-test-3] related-article element must contain a @related-article-type.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@related-article-type = $allowed-values"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@related-article-type = $allowed-values">
               <xsl:attribute name="id">related-articles-test-4</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[related-articles-test-4] @related-article-type must be equal to one of the allowed values, ('article-reference', 'commentary', 'commentary-article', 'corrected-article', 'retracted-article', and 'object-of-concern').</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@ext-link-type='doi'"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@ext-link-type='doi'">
               <xsl:attribute name="id">related-articles-test-5</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[related-articles-test-5] related-article element must contain a @ext-link-type='doi'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(@xlink:href,'^10\.7554/e[lL]ife\.[\d]{5}$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(@xlink:href,'^10\.7554/e[lL]ife\.[\d]{5}$')">
               <xsl:attribute name="id">related-articles-test-6</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[related-articles-test-6] related-article element must contain a @xlink:href, the value of which should be in the form 10.7554/eLife.00000.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="@xlink:href = preceding::related-article/@xlink:href">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@xlink:href = preceding::related-article/@xlink:href">
            <xsl:attribute name="id">related-articles-test-10</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[related-articles-test-10] related-article elements must contain a distinct @xlink:href. There is more than 1 related article link for <xsl:text/>
               <xsl:value-of select="@xlink:href"/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="contains(@xlink:href,$article-doi)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(@xlink:href,$article-doi)">
            <xsl:attribute name="id">related-articles-test-11</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[related-articles-test-11] An article cannot contain a related-article link to itself - please delete the related article link to <xsl:text/>
               <xsl:value-of select="@xlink:href"/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M365"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M365"/>
   <xsl:template match="@*|node()" priority="-2" mode="M365">
      <xsl:apply-templates select="*" mode="M365"/>
   </xsl:template>

   <!--PATTERN video-parent-conformance-pattern-->


	  <!--RULE video-parent-conformance-->
   <xsl:template match="media[@mimetype='video']" priority="1000" mode="M366">
      <xsl:variable name="parent" select="name(..)"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="$parent = ('sec','fig-group','body','boxed-text','app')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="$parent = ('sec','fig-group','body','boxed-text','app')">
               <xsl:attribute name="id">video-parent-test</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[video-parent-test] <xsl:text/>
                  <xsl:value-of select="replace(label[1],'\.$','')"/>
                  <xsl:text/> is a child of a &lt;<xsl:text/>
                  <xsl:value-of select="$parent"/>
                  <xsl:text/>&gt; element. It can only be a child of sec, fig-group, body, boxed-text, or app.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M366"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M366"/>
   <xsl:template match="@*|node()" priority="-2" mode="M366">
      <xsl:apply-templates select="*" mode="M366"/>
   </xsl:template>

   <!--PATTERN elem-citation-general-pattern-->


	  <!--RULE elem-citation-general-->
   <xsl:template match="element-citation" priority="1000" mode="M367">

		<!--REPORT error-->
      <xsl:if test="descendant::etal">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="descendant::etal">
            <xsl:attribute name="id">err-elem-cit-gen-name-5</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#err-elem-cit-gen-name-5</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[err-elem-cit-gen-name-5] The &lt;etal&gt; element in a reference is not allowed. Reference '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' contains it.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="count(year) &gt; 1 ">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(year) &gt; 1">
            <xsl:attribute name="id">err-elem-cit-gen-date-1-9</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#err-elem-cit-gen-date-1-9</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[err-elem-cit-gen-date-1-9] There may be at most one &lt;year&gt; element. Reference '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has <xsl:text/>
               <xsl:value-of select="count(year)"/>
               <xsl:text/> &lt;year&gt; elements.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="(fpage) and not(lpage)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(fpage) and not(lpage)">
            <xsl:attribute name="id">fpage-lpage-test-1</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#fpage-lpage-test-1</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[fpage-lpage-test-1] <xsl:text/>
               <xsl:value-of select="e:citation-format1(.)"/>
               <xsl:text/> has a first page <xsl:text/>
               <xsl:value-of select="fpage"/>
               <xsl:text/>, but no last page. Is this correct? Should it be an elocation-id instead?</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M367"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M367"/>
   <xsl:template match="@*|node()" priority="-2" mode="M367">
      <xsl:apply-templates select="*" mode="M367"/>
   </xsl:template>

   <!--PATTERN elem-citation-gen-name-3-1-pattern-->


	  <!--RULE elem-citation-gen-name-3-1-->
   <xsl:template match="element-citation/person-group" priority="1000" mode="M368">

		<!--REPORT error-->
      <xsl:if test=".[not (name or collab)]">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test=".[not (name or collab)]">
            <xsl:attribute name="id">err-elem-cit-gen-name-3-1</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#err-elem-cit-gen-name-3-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[err-elem-cit-gen-name-3-1]
        Each &lt;person-group&gt; element in a reference must contain at least one
        &lt;name&gt; or, if allowed, &lt;collab&gt; element. 
        Reference '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' does not.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M368"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M368"/>
   <xsl:template match="@*|node()" priority="-2" mode="M368">
      <xsl:apply-templates select="*" mode="M368"/>
   </xsl:template>

   <!--PATTERN elem-citation-gen-name-3-2-pattern-->


	  <!--RULE elem-citation-gen-name-3-2-->
   <xsl:template match="element-citation/person-group/collab" priority="1000" mode="M369">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(*) = count(italic | sub | sup)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(*) = count(italic | sub | sup)">
               <xsl:attribute name="id">err-elem-cit-gen-name-3-2</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#err-elem-cit-gen-name-3-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-gen-name-3-2]
        A &lt;collab&gt; element in a reference may contain characters and &lt;italic&gt;, &lt;sub&gt;, and &lt;sup&gt;. 
        No other elements are allowed.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' contains additional elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M369"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M369"/>
   <xsl:template match="@*|node()" priority="-2" mode="M369">
      <xsl:apply-templates select="*" mode="M369"/>
   </xsl:template>

   <!--PATTERN elem-citation-gen-name-4-pattern-->


	  <!--RULE elem-citation-gen-name-4-->
   <xsl:template match="element-citation/person-group/name/suffix" priority="1000" mode="M370">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test=".=('Jr','Jnr', 'Sr','Snr', 'I', 'II', 'III', 'VI', 'V', 'VI', 'VII', 'VIII', 'IX', 'X')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test=".=('Jr','Jnr', 'Sr','Snr', 'I', 'II', 'III', 'VI', 'V', 'VI', 'VII', 'VIII', 'IX', 'X')">
               <xsl:attribute name="id">err-elem-cit-gen-name-4</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#err-elem-cit-gen-name-4</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-gen-name-4]
        The &lt;suffix&gt; element in a reference may only contain one of the specified values
        Jnr, Snr, I, II, III, VI, V, VI, VII, VIII, IX, X.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' does not meet this requirement
        as it contains the value '<xsl:text/>
                  <xsl:value-of select="suffix"/>
                  <xsl:text/>'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M370"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M370"/>
   <xsl:template match="@*|node()" priority="-2" mode="M370">
      <xsl:apply-templates select="*" mode="M370"/>
   </xsl:template>

   <!--PATTERN elem-citation-year-pattern-->


	  <!--RULE elem-citation-year-->
   <xsl:template match="ref/element-citation/year" priority="1000" mode="M371">
      <xsl:variable name="YYYY" select="substring(normalize-space(.), 1, 4)"/>
      <xsl:variable name="current-year" select="year-from-date(current-date())"/>
      <xsl:variable name="citation" select="e:citation-format1(parent::element-citation)"/>

		    <!--ASSERT warning-->
      <xsl:choose>
         <xsl:when test="(1700 le number($YYYY)) and (number($YYYY) le ($current-year + 5))"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(1700 le number($YYYY)) and (number($YYYY) le ($current-year + 5))">
               <xsl:attribute name="id">err-elem-cit-gen-date-1-2</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#err-elem-cit-gen-date-1-2</xsl:attribute>
               <xsl:attribute name="role">warning</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-gen-date-1-2] The numeric value of the 4 digits in the &lt;year&gt; element must be between 1700 and the current year + 5 years (inclusive). Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' does not meet this requirement as it contains the value '<xsl:text/>
                  <xsl:value-of select="."/>
                  <xsl:text/>'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="./@iso-8601-date"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="./@iso-8601-date">
               <xsl:attribute name="id">err-elem-cit-gen-date-1-3</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#err-elem-cit-gen-date-1-3</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-gen-date-1-3] All &lt;year&gt; elements must have @iso-8601-date attributes. Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' does not.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT warning-->
      <xsl:choose>
         <xsl:when test="not(./@iso-8601-date) or (1700 le number(substring(normalize-space(@iso-8601-date),1,4)) and number(substring(normalize-space(@iso-8601-date),1,4)) le ($current-year + 5))"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="not(./@iso-8601-date) or (1700 le number(substring(normalize-space(@iso-8601-date),1,4)) and number(substring(normalize-space(@iso-8601-date),1,4)) le ($current-year + 5))">
               <xsl:attribute name="id">err-elem-cit-gen-date-1-4</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#err-elem-cit-gen-date-1-4</xsl:attribute>
               <xsl:attribute name="role">warning</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-gen-date-1-4] The numeric value of the 4 digits in the @iso-8601-date attribute on the &lt;year&gt; element must be between 1700 and the current year + 5 years (inclusive). Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' does not meet this requirement as the attribute contains the value '<xsl:text/>
                  <xsl:value-of select="./@iso-8601-date"/>
                  <xsl:text/>'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="not(./@iso-8601-date) or substring(normalize-space(./@iso-8601-date),1,4) = $YYYY"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="not(./@iso-8601-date) or substring(normalize-space(./@iso-8601-date),1,4) = $YYYY">
               <xsl:attribute name="id">final-err-elem-cit-gen-date-1-5</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#final-err-elem-cit-gen-date-1-5</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[final-err-elem-cit-gen-date-1-5] The numeric value of the 4 digits in the @iso-8601-date attribute must match the first 4 digits on the &lt;year&gt; element. Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' does not meet this requirement as the element contains the value '<xsl:text/>
                  <xsl:value-of select="."/>
                  <xsl:text/>' and the attribute contains the value '<xsl:text/>
                  <xsl:value-of select="./@iso-8601-date"/>
                  <xsl:text/>'. If there is no year, and you are unable to determine this, please query with the authors.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="not(concat($YYYY, 'a')=.) or (concat($YYYY, 'a')=. and         (some $y in //element-citation/descendant::year         satisfies (normalize-space($y) = concat($YYYY,'b'))         and (ancestor::element-citation/person-group[1]/name[1]/surname = $y/ancestor::element-citation/person-group[1]/name[1]/surname         or ancestor::element-citation/person-group[1]/collab[1] = $y/ancestor::element-citation/person-group[1]/collab[1]         )))"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="not(concat($YYYY, 'a')=.) or (concat($YYYY, 'a')=. and (some $y in //element-citation/descendant::year satisfies (normalize-space($y) = concat($YYYY,'b')) and (ancestor::element-citation/person-group[1]/name[1]/surname = $y/ancestor::element-citation/person-group[1]/name[1]/surname or ancestor::element-citation/person-group[1]/collab[1] = $y/ancestor::element-citation/person-group[1]/collab[1] )))">
               <xsl:attribute name="id">err-elem-cit-gen-date-1-6</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#err-elem-cit-gen-date-1-6</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-gen-date-1-6] If the &lt;year&gt; element contains the letter 'a' after the digits, there must be another reference with the same first author surname (or collab) with a letter "b" after the year. Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' does not fulfill this requirement.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="not(starts-with(.,$YYYY) and matches(normalize-space(.),('\d{4}[b-z]'))) or         (some $y in //element-citation/descendant::year         satisfies (normalize-space($y) = concat($YYYY,translate(substring(normalize-space(.),5,1),'bcdefghijklmnopqrstuvwxyz',         'abcdefghijklmnopqrstuvwxy')))         and (ancestor::element-citation/person-group[1]/name[1]/surname = $y/ancestor::element-citation/person-group[1]/name[1]/surname         or ancestor::element-citation/person-group[1]/collab[1] = $y/ancestor::element-citation/person-group[1]/collab[1]         ))"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="not(starts-with(.,$YYYY) and matches(normalize-space(.),('\d{4}[b-z]'))) or (some $y in //element-citation/descendant::year satisfies (normalize-space($y) = concat($YYYY,translate(substring(normalize-space(.),5,1),'bcdefghijklmnopqrstuvwxyz', 'abcdefghijklmnopqrstuvwxy'))) and (ancestor::element-citation/person-group[1]/name[1]/surname = $y/ancestor::element-citation/person-group[1]/name[1]/surname or ancestor::element-citation/person-group[1]/collab[1] = $y/ancestor::element-citation/person-group[1]/collab[1] ))">
               <xsl:attribute name="id">err-elem-cit-gen-date-1-7</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#err-elem-cit-gen-date-1-7</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-gen-date-1-7]
        If the &lt;year&gt; element contains any letter other than 'a' after the digits, there must be another 
        reference with the same first author surname (or collab) with the preceding letter after the year. 
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' does not fulfill this requirement.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M371"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M371"/>
   <xsl:template match="@*|node()" priority="-2" mode="M371">
      <xsl:apply-templates select="*" mode="M371"/>
   </xsl:template>

   <!--PATTERN elem-citation-source-pattern-->


	  <!--RULE elem-citation-source-->
   <xsl:template match="ref/element-citation/source" priority="1000" mode="M372">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="string-length(normalize-space(.)) ge 2"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="string-length(normalize-space(.)) ge 2">
               <xsl:attribute name="id">elem-cit-source</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#elem-cit-source</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[elem-cit-source] A  &lt;source&gt; element within a <xsl:text/>
                  <xsl:value-of select="parent::element-citation/@publication-type"/>
                  <xsl:text/> type &lt;element-citation&gt; must contain at least two characters. - <xsl:text/>
                  <xsl:value-of select="."/>
                  <xsl:text/>. See Ref '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M372"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M372"/>
   <xsl:template match="@*|node()" priority="-2" mode="M372">
      <xsl:apply-templates select="*" mode="M372"/>
   </xsl:template>

   <!--PATTERN elem-citation-ext-link-pattern-->


	  <!--RULE elem-citation-ext-link-->
   <xsl:template match="ref/element-citation/ext-link" priority="1000" mode="M373">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="(normalize-space(@xlink:href)=normalize-space(.)) and (normalize-space(.)!='')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(normalize-space(@xlink:href)=normalize-space(.)) and (normalize-space(.)!='')">
               <xsl:attribute name="id">ext-link-attribute-content-match</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#ext-link-attribute-content-match</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[ext-link-attribute-content-match] &lt;ext-link&gt; must contain content and have an @xlink:href, the value of which must be the same as the content of &lt;ext-link&gt;. The &lt;ext-link&gt; element in Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has @xlink:href='<xsl:text/>
                  <xsl:value-of select="@xlink:href"/>
                  <xsl:text/>' and content '<xsl:text/>
                  <xsl:value-of select="."/>
                  <xsl:text/>'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(@xlink:href,'^https?://|^s?ftp://')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(@xlink:href,'^https?://|^s?ftp://')">
               <xsl:attribute name="id">link-href-conformance</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#link-href-conformance</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[link-href-conformance] @xlink:href must start with either "http://", "https://", "sftp://" or "ftp://". The &lt;ext-link&gt; element in Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' is '<xsl:text/>
                  <xsl:value-of select="@xlink:href"/>
                  <xsl:text/>', which does not.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M373"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M373"/>
   <xsl:template match="@*|node()" priority="-2" mode="M373">
      <xsl:apply-templates select="*" mode="M373"/>
   </xsl:template>

   <!--PATTERN collab-content-pattern-->


	  <!--RULE collab-content-->
   <xsl:template match="ref/element-citation//collab" priority="1000" mode="M374">

		<!--REPORT warning-->
      <xsl:if test="matches(.,'[\[\]\(\)]')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'[\[\]\(\)]')">
            <xsl:attribute name="id">collab-brackets</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[collab-brackets] collab in reference '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' contains brackets - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>. Are the brackets necessary?</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M374"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M374"/>
   <xsl:template match="@*|node()" priority="-2" mode="M374">
      <xsl:apply-templates select="*" mode="M374"/>
   </xsl:template>

   <!--PATTERN ref-list-ordering-pattern-->


	  <!--RULE ref-list-ordering-->
   <xsl:template match="ref[preceding-sibling::ref]" priority="1000" mode="M375">
      <xsl:variable name="order-value" select="e:ref-list-string(self::*)"/>
      <xsl:variable name="preceding-ref-order-value" select="e:ref-list-string(preceding-sibling::ref[1])"/>
      <xsl:variable name="kriya1-order-value" select="e:ref-list-string2(self::*)"/>
      <xsl:variable name="preceding-ref-kriya1-order-value" select="e:ref-list-string2(preceding-sibling::ref[1])"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="($order-value gt $preceding-ref-order-value) or ($kriya1-order-value gt $preceding-ref-kriya1-order-value)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="($order-value gt $preceding-ref-order-value) or ($kriya1-order-value gt $preceding-ref-kriya1-order-value)">
               <xsl:attribute name="id">err-elem-cit-high-2-2</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#err-elem-cit-high-2-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-high-2-2] The order of &lt;element-citation&gt;s in the reference list should be name and date, arranged alphabetically by the first author’s surname, or by the value of the first &lt;collab&gt; element. In the case of two authors, the sequence should be arranged by both authors' surnames, then date. For three or more authors, the sequence should be the first author's surname, then date. Reference '<xsl:text/>
                  <xsl:value-of select="@id"/>
                  <xsl:text/>' appears to be in a different order.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M375"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M375"/>
   <xsl:template match="@*|node()" priority="-2" mode="M375">
      <xsl:apply-templates select="*" mode="M375"/>
   </xsl:template>

   <!--PATTERN ref-pattern-->


	  <!--RULE ref-->
   <xsl:template match="ref" priority="1000" mode="M376">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(*) = count(element-citation)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(*) = count(element-citation)">
               <xsl:attribute name="id">err-elem-cit-high-1</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#err-elem-cit-high-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-high-1] The only element that is allowed as a child of &lt;ref&gt; is &lt;element-citation&gt;. Reference '<xsl:text/>
                  <xsl:value-of select="@id"/>
                  <xsl:text/>' has other elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@id"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@id">
               <xsl:attribute name="id">err-elem-cit-high-3-1</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#err-elem-cit-high-3-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-high-3-1] Each &lt;ref&gt; element must have an @id attribute.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(normalize-space(@id) ,'^bib\d+$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(normalize-space(@id) ,'^bib\d+$')">
               <xsl:attribute name="id">err-elem-cit-high-3-2</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#err-elem-cit-high-3-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-high-3-2] Each &lt;ref&gt; element must have an @id attribute that starts with 'bib' and ends with a number. Reference '<xsl:text/>
                  <xsl:value-of select="@id"/>
                  <xsl:text/>' has the value '<xsl:text/>
                  <xsl:value-of select="@id"/>
                  <xsl:text/>', which is incorrect.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(preceding-sibling::ref)=0 or number(substring(@id,4)) gt number(substring(preceding-sibling::ref[1]/@id,4))"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(preceding-sibling::ref)=0 or number(substring(@id,4)) gt number(substring(preceding-sibling::ref[1]/@id,4))">
               <xsl:attribute name="id">err-elem-cit-high-3-3</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#err-elem-cit-high-3-3</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-high-3-3] The sequence of ids in the &lt;ref&gt; elements must increase monotonically (e.g. 1,2,3,4,5, . . . ,50,51,52,53, . . . etc). Reference '<xsl:text/>
                  <xsl:value-of select="@id"/>
                  <xsl:text/>' has the value  '<xsl:text/>
                  <xsl:value-of select="@id"/>
                  <xsl:text/>', which does not fit this pattern.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M376"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M376"/>
   <xsl:template match="@*|node()" priority="-2" mode="M376">
      <xsl:apply-templates select="*" mode="M376"/>
   </xsl:template>

   <!--PATTERN xref-pattern-->


	  <!--RULE xref-->
   <xsl:template match="xref[@ref-type='bibr' and matches(normalize-space(.),'[b-z]$')]" priority="1000" mode="M377">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="some $x in preceding::xref satisfies (substring(normalize-space(.),string-length(.)) gt substring(normalize-space($x),string-length(.)))"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="some $x in preceding::xref satisfies (substring(normalize-space(.),string-length(.)) gt substring(normalize-space($x),string-length(.)))">
               <xsl:attribute name="id">err-xref-high-2-1</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#err-xref-high-2-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-xref-high-2-1] Citations in the text to references with the same author(s) in the same year must be arranged in the same order as the reference list. The xref with the value '<xsl:text/>
                  <xsl:value-of select="."/>
                  <xsl:text/>' is in the wrong order in the text. Check all the references to citations for the same authors to determine which need to be changed.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M377"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M377"/>
   <xsl:template match="@*|node()" priority="-2" mode="M377">
      <xsl:apply-templates select="*" mode="M377"/>
   </xsl:template>

   <!--PATTERN elem-citation-pattern-->


	  <!--RULE elem-citation-->
   <xsl:template match="element-citation" priority="1000" mode="M378">
      <xsl:variable name="article-doi" select="lower-case(ancestor::article/descendant::article-meta[1]/article-id[@pub-id-type='doi'][1])"/>
      <xsl:variable name="title" select="lower-case(ancestor::article/descendant::article-meta[1]/descendant::article-title[1])"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@publication-type = ('journal', 'book', 'data', 'patent', 'software', 'preprint', 'web', 'report', 'confproc', 'thesis')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@publication-type = ('journal', 'book', 'data', 'patent', 'software', 'preprint', 'web', 'report', 'confproc', 'thesis')">
               <xsl:attribute name="id">err-elem-cit-high-6-2</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#err-elem-cit-high-6-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-high-6-2] element-citation must have a publication-type attribute with one of these values: 'journal', 'book', 'data', 'patent', 'software', 'preprint', 'web', 'report', 'confproc', or 'thesis'. Reference '<xsl:text/>
                  <xsl:value-of select="../@id"/>
                  <xsl:text/>' has '<xsl:text/>
                  <xsl:value-of select="if (@publication-type) then concat('a @publication-type with the value ',@publication-type) else ('no @publication-type')"/>
                  <xsl:text/>'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="not(year)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="not(year)">
            <xsl:attribute name="id">final-element-cite-year</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#final-element-cite-year</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[final-element-cite-year] '<xsl:text/>
               <xsl:value-of select="@publication-type"/>
               <xsl:text/>' type references must have a year. Reference '<xsl:text/>
               <xsl:value-of select="../@id"/>
               <xsl:text/>' does not. If you are unable to determine this, please ensure to query the authors for the year of publication.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="lower-case(pub-id[@pub-id-type='doi'][1]) = $article-doi">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="lower-case(pub-id[@pub-id-type='doi'][1]) = $article-doi">
            <xsl:attribute name="id">self-cite-1</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#self-cite-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[self-cite-1] '<xsl:text/>
               <xsl:value-of select="@publication-type"/>
               <xsl:text/>' type reference has a doi which is the same as this article - <xsl:text/>
               <xsl:value-of select="pub-id[@pub-id-type='doi']"/>
               <xsl:text/>. Is the reference correct? If it is intentional, please remove the reference, and replace citations in the text with the text 'current work' or similar.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="(lower-case(pub-id[@pub-id-type='doi']) != $article-doi) and                (lower-case(source[1]) = 'elife') and                ((lower-case(article-title[1]) = $title) or (lower-case(chapter-title[1]) = $title)) ">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(lower-case(pub-id[@pub-id-type='doi']) != $article-doi) and (lower-case(source[1]) = 'elife') and ((lower-case(article-title[1]) = $title) or (lower-case(chapter-title[1]) = $title))">
            <xsl:attribute name="id">self-cite-2</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#self-cite-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[self-cite-2] '<xsl:text/>
               <xsl:value-of select="@publication-type"/>
               <xsl:text/>' type reference looks to possibly be citing itself. If that's the case (and this isn't an error within the reference), please delete the reference and replace any citations in the text with the text 'current work'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M378"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M378"/>
   <xsl:template match="@*|node()" priority="-2" mode="M378">
      <xsl:apply-templates select="*" mode="M378"/>
   </xsl:template>

   <!--PATTERN element-citation-descendants-pattern-->


	  <!--RULE element-citation-descendants-->
   <xsl:template match="element-citation//*" priority="1000" mode="M379">

		<!--REPORT error-->
      <xsl:if test="not(*) and (normalize-space(.)='')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="not(*) and (normalize-space(.)='')">
            <xsl:attribute name="id">final-empty-elem-cit-des</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#final-empty-elem-cit-des</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[final-empty-elem-cit-des] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element is empty - this is not allowed. It must contain content.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches(.,'&lt;/?[a-z]*/?&gt;')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'&lt;/?[a-z]*/?&gt;')">
            <xsl:attribute name="id">tagging-elem-cit-des</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#tagging-elem-cit-des</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[tagging-elem-cit-des] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains tagging, which should be removed - '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M379"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M379"/>
   <xsl:template match="@*|node()" priority="-2" mode="M379">
      <xsl:apply-templates select="*" mode="M379"/>
   </xsl:template>

   <!--PATTERN elem-citation-journal-pattern-->


	  <!--RULE elem-citation-journal-->
   <xsl:template match="element-citation[@publication-type='journal']" priority="1000" mode="M380">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(person-group)=1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(person-group)=1">
               <xsl:attribute name="id">final-err-elem-cit-journal-2-1</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/journal-references#final-err-elem-cit-journal-2-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[final-err-elem-cit-journal-2-1] Each  &lt;element-citation&gt; of type 'journal' must contain one and only one &lt;person-group&gt; element. Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has <xsl:text/>
                  <xsl:value-of select="count(person-group)"/>
                  <xsl:text/> &lt;person-group&gt; elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="person-group[@person-group-type='author']"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="person-group[@person-group-type='author']">
               <xsl:attribute name="id">final-err-elem-cit-journal-2-2</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/journal-references#final-err-elem-cit-journal-2-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[final-err-elem-cit-journal-2-2] Each  &lt;element-citation&gt; of type 'journal' must contain one &lt;person-group&gt;  with the attribute person-group-type 'author'. Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has a  &lt;person-group&gt; type of '<xsl:text/>
                  <xsl:value-of select="person-group/@person-group-type"/>
                  <xsl:text/>'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(article-title)=1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(article-title)=1">
               <xsl:attribute name="id">final-err-elem-cit-journal-3-1</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/journal-referencesn#final-err-elem-cit-journal-3-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[final-err-elem-cit-journal-3-1] Each  &lt;element-citation&gt; of type 'journal' must contain one and only one &lt;article-title&gt; element. Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has <xsl:text/>
                  <xsl:value-of select="count(article-title)"/>
                  <xsl:text/> &lt;article-title&gt; elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(source)=1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(source)=1">
               <xsl:attribute name="id">final-err-elem-cit-journal-4-1</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/journal-references#final-err-elem-cit-journal-4-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[final-err-elem-cit-journal-4-1] Each  &lt;element-citation&gt; of type 'journal' must contain one and only one &lt;source&gt; element. Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has <xsl:text/>
                  <xsl:value-of select="count(source)"/>
                  <xsl:text/> &lt;source&gt; elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="count(source)=1 and count(source/*)!=0">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(source)=1 and count(source/*)!=0">
            <xsl:attribute name="id">err-elem-cit-journal-4-2-2</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/journal-references#err-elem-cit-journal-4-2-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[err-elem-cit-journal-4-2-2] A  &lt;source&gt; element within a &lt;element-citation&gt; of type 'journal' may not contain child elements. Reference '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has disallowed child elements.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(volume) le 1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(volume) le 1">
               <xsl:attribute name="id">err-elem-cit-journal-5-1-3</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/journal-references#err-elem-cit-journal-5-1-3</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-journal-5-1-3] There may be no more than one  &lt;volume&gt; element within a &lt;element-citation&gt; of type 'journal'. Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has <xsl:text/>
                  <xsl:value-of select="count(volume)"/>
                  <xsl:text/> &lt;volume&gt; elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="lpage and not(fpage)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="lpage and not(fpage)">
            <xsl:attribute name="id">err-elem-cit-journal-6-5-1</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/journal-references#err-elem-cit-journal-6-5-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[err-elem-cit-journal-6-5-1] &lt;lpage&gt; is only allowed if &lt;fpage&gt; is present. Reference '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has &lt;lpage&gt; but no &lt;fpage&gt;.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="lpage and (number(fpage[1]) ge number(lpage[1]))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="lpage and (number(fpage[1]) ge number(lpage[1]))">
            <xsl:attribute name="id">err-elem-cit-journal-6-5-2</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/journal-references#err-elem-cit-journal-6-5-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[err-elem-cit-journal-6-5-2] &lt;lpage&gt; must be larger than &lt;fpage&gt;, if present. Reference '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has first page &lt;fpage&gt; = '<xsl:text/>
               <xsl:value-of select="fpage"/>
               <xsl:text/>' but last page &lt;lpage&gt; = '<xsl:text/>
               <xsl:value-of select="lpage"/>
               <xsl:text/>'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="count(fpage) gt 1 or count(lpage) gt 1 or count(elocation-id) gt 1 or count(comment) gt 1">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(fpage) gt 1 or count(lpage) gt 1 or count(elocation-id) gt 1 or count(comment) gt 1">
            <xsl:attribute name="id">err-elem-cit-journal-6-7</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/journal-references#err-elem-cit-journal-6-7</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[err-elem-cit-journal-6-7] The following elements may not occur more than once in an &lt;element-citation&gt;: &lt;fpage&gt;, &lt;lpage&gt;, &lt;elocation-id&gt;, and &lt;comment&gt;In press&lt;/comment&gt;. Reference '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has <xsl:text/>
               <xsl:value-of select="count(fpage)"/>
               <xsl:text/> &lt;fpage&gt;, <xsl:text/>
               <xsl:value-of select="count(lpage)"/>
               <xsl:text/> &lt;lpage&gt;, <xsl:text/>
               <xsl:value-of select="count(elocation-id)"/>
               <xsl:text/> &lt;elocation-id&gt;, and <xsl:text/>
               <xsl:value-of select="count(comment)"/>
               <xsl:text/> &lt;comment&gt; elements.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(*) = count(person-group| year| article-title| source| volume| fpage| lpage| elocation-id| comment| pub-id)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(*) = count(person-group| year| article-title| source| volume| fpage| lpage| elocation-id| comment| pub-id)">
               <xsl:attribute name="id">err-elem-cit-journal-12</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/journal-references#err-elem-cit-journal-12</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-journal-12] The only elements allowed as children of &lt;element-citation&gt; with the publication-type="journal" are: &lt;person-group&gt;, &lt;year&gt;, &lt;article-title&gt;, &lt;source&gt;, &lt;volume&gt;, &lt;fpage&gt;, &lt;lpage&gt;, &lt;elocation-id&gt;, &lt;comment&gt;, and &lt;pub-id&gt;. Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has other elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M380"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M380"/>
   <xsl:template match="@*|node()" priority="-2" mode="M380">
      <xsl:apply-templates select="*" mode="M380"/>
   </xsl:template>

   <!--PATTERN elem-citation-journal-article-title-pattern-->


	  <!--RULE elem-citation-journal-article-title-->
   <xsl:template match="element-citation[@publication-type='journal']/article-title" priority="1000" mode="M381">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(*) = count(sub|sup|italic)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(*) = count(sub|sup|italic)">
               <xsl:attribute name="id">err-elem-cit-journal-3-2</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/journal-references#err-elem-cit-journal-3-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-journal-3-2] An &lt;article-title&gt; element in a reference may contain characters and &lt;italic&gt;, &lt;sub&gt;, and &lt;sup&gt;. No other elements are allowed. Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' does not meet this requirement.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M381"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M381"/>
   <xsl:template match="@*|node()" priority="-2" mode="M381">
      <xsl:apply-templates select="*" mode="M381"/>
   </xsl:template>

   <!--PATTERN elem-citation-journal-volume-pattern-->


	  <!--RULE elem-citation-journal-volume-->
   <xsl:template match="element-citation[@publication-type='journal']/volume" priority="1000" mode="M382">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(*)=0 and (string-length(text()) ge 1)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(*)=0 and (string-length(text()) ge 1)">
               <xsl:attribute name="id">err-elem-cit-journal-5-1-2</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/journal-references#err-elem-cit-journal-5-1-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-journal-5-1-2] A &lt;volume&gt; element within a &lt;element-citation&gt; of type 'journal' must contain at least one character and may not contain child elements. Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has too few characters and/or child elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M382"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M382"/>
   <xsl:template match="@*|node()" priority="-2" mode="M382">
      <xsl:apply-templates select="*" mode="M382"/>
   </xsl:template>

   <!--PATTERN elem-citation-journal-fpage-pattern-->


	  <!--RULE elem-citation-journal-fpage-->
   <xsl:template match="element-citation[@publication-type='journal']/fpage" priority="1000" mode="M383">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(../elocation-id) eq 0 and count(../comment) eq 0"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(../elocation-id) eq 0 and count(../comment) eq 0">
               <xsl:attribute name="id">err-elem-cit-journal-6-2</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/journal-references#err-elem-cit-journal-6-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-journal-6-2] If &lt;fpage&gt; is present, neither &lt;elocation-id&gt; nor &lt;comment&gt;In press&lt;/comment&gt; may be present. Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has &lt;fpage&gt; and one of those elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="matches(normalize-space(.),'^\D\d') and ../lpage and not(starts-with(../lpage[1],substring(.,1,1)))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(normalize-space(.),'^\D\d') and ../lpage and not(starts-with(../lpage[1],substring(.,1,1)))">
            <xsl:attribute name="id">err-elem-cit-journal-6-6</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/journal-references#err-elem-cit-journal-6-6</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[err-elem-cit-journal-6-6] If the content of &lt;fpage&gt; begins with a letter and digit, then the content of  &lt;lpage&gt; must begin with the same letter. Reference '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' does not.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M383"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M383"/>
   <xsl:template match="@*|node()" priority="-2" mode="M383">
      <xsl:apply-templates select="*" mode="M383"/>
   </xsl:template>

   <!--PATTERN elem-citation-journal-elocation-id-pattern-->


	  <!--RULE elem-citation-journal-elocation-id-->
   <xsl:template match="element-citation[@publication-type='journal']/elocation-id" priority="1000" mode="M384">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(../fpage) eq 0 and count(../comment) eq 0"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(../fpage) eq 0 and count(../comment) eq 0">
               <xsl:attribute name="id">err-elem-cit-journal-6-3</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-journal-6-3] If &lt;elocation-id&gt; is present, neither &lt;fpage&gt; nor &lt;comment&gt;In press&lt;/comment&gt; may be present. Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has &lt;elocation-id&gt; and one of those elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M384"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M384"/>
   <xsl:template match="@*|node()" priority="-2" mode="M384">
      <xsl:apply-templates select="*" mode="M384"/>
   </xsl:template>

   <!--PATTERN elem-citation-journal-comment-pattern-->


	  <!--RULE elem-citation-journal-comment-->
   <xsl:template match="element-citation[@publication-type='journal']/comment" priority="1000" mode="M385">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(../fpage) eq 0 and count(../elocation-id) eq 0"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(../fpage) eq 0 and count(../elocation-id) eq 0">
               <xsl:attribute name="id">err-elem-cit-journal-6-4</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-journal-6-4] If &lt;comment&gt;In press&lt;/comment&gt; is present, neither &lt;fpage&gt; nor &lt;elocation-id&gt; may be present. Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has one of those elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="text() = 'In press'"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="text() = 'In press'">
               <xsl:attribute name="id">err-elem-cit-journal-13</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-journal-13] Comment elements with content other than 'In press' are not allowed. Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has such a &lt;comment&gt; element.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M385"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M385"/>
   <xsl:template match="@*|node()" priority="-2" mode="M385">
      <xsl:apply-templates select="*" mode="M385"/>
   </xsl:template>

   <!--PATTERN elem-citation-journal-pub-id-pattern-->


	  <!--RULE elem-citation-journal-pub-id-->
   <xsl:template match="element-citation[@publication-type='journal']/pub-id" priority="1000" mode="M386">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@pub-id-type=('doi','pmid')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@pub-id-type=('doi','pmid')">
               <xsl:attribute name="id">err-elem-cit-journal-9-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-journal-9-1] Each &lt;pub-id&gt;, if present in a journal reference, must have a @pub-id-type of either "doi" or "pmid". The pub-id-type attribute on &lt;pub-id&gt; in Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' is <xsl:text/>
                  <xsl:value-of select="@pub-id-type"/>
                  <xsl:text/>.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M386"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M386"/>
   <xsl:template match="@*|node()" priority="-2" mode="M386">
      <xsl:apply-templates select="*" mode="M386"/>
   </xsl:template>

   <!--PATTERN elem-citation-book-pattern-->


	  <!--RULE elem-citation-book-->
   <xsl:template match="element-citation[@publication-type='book']" priority="1000" mode="M387">
      <xsl:variable name="publisher-locations" select="'publisher-locations.xml'"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="(count(person-group[@person-group-type='author']) + count(person-group[@person-group-type='editor'])) = count(person-group)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(count(person-group[@person-group-type='author']) + count(person-group[@person-group-type='editor'])) = count(person-group)">
               <xsl:attribute name="id">err-elem-cit-book-2-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-book-2-2] The only values allowed for @person-group-type in book references are "author" and "editor". Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has a &lt;person-group&gt; type of '<xsl:text/>
                  <xsl:value-of select="person-group/@person-group-type"/>
                  <xsl:text/>'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(person-group)=1 or (count(person-group[@person-group-type='author'])=1 and count(person-group[@person-group-type='editor'])=1)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(person-group)=1 or (count(person-group[@person-group-type='author'])=1 and count(person-group[@person-group-type='editor'])=1)">
               <xsl:attribute name="id">final-err-elem-cit-book-2-3</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[final-err-elem-cit-book-2-3] In a book reference, there should be a single person-group element (either author or editor) or one person-group with @person-group-type="author" and one person-group with @person-group-type=editor. Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has <xsl:text/>
                  <xsl:value-of select="count(person-group)"/>
                  <xsl:text/> &lt;person-group&gt; elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(source)=1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(source)=1">
               <xsl:attribute name="id">final-err-elem-cit-book-10-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[final-err-elem-cit-book-10-1] Each  &lt;element-citation&gt; of type 'book' must contain one and only one &lt;source&gt; element. Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has <xsl:text/>
                  <xsl:value-of select="count(source)"/>
                  <xsl:text/> &lt;source&gt; elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(source)=1 and count(source/*)=count(source/(italic | sub | sup))"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(source)=1 and count(source/*)=count(source/(italic | sub | sup))">
               <xsl:attribute name="id">err-elem-cit-book-10-2-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-book-10-2-2] A  &lt;source&gt; element within a &lt;element-citation&gt; of type 'book' may only contain the child elements &lt;italic&gt;, &lt;sub&gt;, and &lt;sup&gt;. No other elements are allowed. Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has child elements that are not allowed.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(publisher-name)=1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(publisher-name)=1">
               <xsl:attribute name="id">final-err-elem-cit-book-13-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[final-err-elem-cit-book-13-1] One and only one &lt;publisher-name&gt; is required in a book reference. Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has <xsl:text/>
                  <xsl:value-of select="count(publisher-name)"/>
                  <xsl:text/> &lt;publisher-name&gt; elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT warning-->
      <xsl:if test="some $p in document($publisher-locations)/locations/location/text()         satisfies ends-with(publisher-name[1],$p)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="some $p in document($publisher-locations)/locations/location/text() satisfies ends-with(publisher-name[1],$p)">
            <xsl:attribute name="id">warning-elem-cit-book-13-3</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[warning-elem-cit-book-13-3] The content of &lt;publisher-name&gt; should not end with a publisher location. Reference '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' contains the string <xsl:text/>
               <xsl:value-of select="publisher-name"/>
               <xsl:text/>, which ends with a publisher location.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="(lpage or fpage) and not(chapter-title)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(lpage or fpage) and not(chapter-title)">
            <xsl:attribute name="id">err-elem-cit-book-16</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[err-elem-cit-book-16] Book reference '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has first and/or last pages, but no chapter title. Is this correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="(lpage and fpage) and (number(fpage[1]) &gt;= number(lpage[1]))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(lpage and fpage) and (number(fpage[1]) &gt;= number(lpage[1]))">
            <xsl:attribute name="id">err-elem-cit-book-36</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[err-elem-cit-book-36] If both &lt;lpage&gt; and &lt;fpage&gt; are present, the value of &lt;fpage&gt; must be less than the value of &lt;lpage&gt;. Reference '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has &lt;lpage&gt; <xsl:text/>
               <xsl:value-of select="lpage"/>
               <xsl:text/>, which is less than or equal to &lt;fpage&gt; <xsl:text/>
               <xsl:value-of select="fpage"/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="lpage and not (fpage)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="lpage and not (fpage)">
            <xsl:attribute name="id">err-elem-cit-book-36-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[err-elem-cit-book-36-2] If &lt;lpage&gt; is present, &lt;fpage&gt; must also be present. Reference '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has &lt;lpage&gt; but not &lt;fpage&gt;.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="count(lpage) &gt; 1 or count(fpage) &gt; 1">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(lpage) &gt; 1 or count(fpage) &gt; 1">
            <xsl:attribute name="id">err-elem-cit-book-36-6</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[err-elem-cit-book-36-6] At most one &lt;lpage&gt; and one &lt;fpage&gt; are allowed. Reference '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has <xsl:text/>
               <xsl:value-of select="count(lpage)"/>
               <xsl:text/> &lt;lpage&gt; elements and <xsl:text/>
               <xsl:value-of select="count(fpage)"/>
               <xsl:text/> &lt;fpage&gt; elements.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(*) = count(person-group| year| source| chapter-title| publisher-loc|publisher-name|volume|         edition| fpage| lpage| pub-id | comment)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(*) = count(person-group| year| source| chapter-title| publisher-loc|publisher-name|volume| edition| fpage| lpage| pub-id | comment)">
               <xsl:attribute name="id">err-elem-cit-book-40</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-book-40] The only tags that are allowed as children of &lt;element-citation&gt; with the publication-type="book" are: &lt;person-group&gt;, &lt;year&gt;, &lt;source&gt;, &lt;chapter-title&gt;, &lt;publisher-loc&gt;, &lt;publisher-name&gt;, &lt;volume&gt;, &lt;edition&gt;, &lt;fpage&gt;, &lt;lpage&gt;, &lt;pub-id&gt;, and &lt;comment&gt;. Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has other elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M387"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M387"/>
   <xsl:template match="@*|node()" priority="-2" mode="M387">
      <xsl:apply-templates select="*" mode="M387"/>
   </xsl:template>

   <!--PATTERN elem-citation-book-person-group-pattern-->


	  <!--RULE elem-citation-book-person-group-->
   <xsl:template match="element-citation[@publication-type='book']/person-group" priority="1000" mode="M388">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@person-group-type"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@person-group-type">
               <xsl:attribute name="id">err-elem-cit-book-2-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-book-2-1] Each &lt;person-group&gt; must have a @person-group-type attribute. Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has a &lt;person-group&gt; element with no @person-group-type attribute.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M388"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M388"/>
   <xsl:template match="@*|node()" priority="-2" mode="M388">
      <xsl:apply-templates select="*" mode="M388"/>
   </xsl:template>

   <!--PATTERN elem-citation-book-chapter-title-pattern-->


	  <!--RULE elem-citation-book-chapter-title-->
   <xsl:template match="element-citation[@publication-type='book']/chapter-title" priority="1000" mode="M389">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(../person-group[@person-group-type='author'])=1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(../person-group[@person-group-type='author'])=1">
               <xsl:attribute name="id">final-err-elem-cit-book-22</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[final-err-elem-cit-book-22] If there is a &lt;chapter-title&gt; element there must be one and only one &lt;person-group person-group-type="author"&gt;. Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' does not meet this requirement.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(../person-group[@person-group-type='editor']) le 1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(../person-group[@person-group-type='editor']) le 1">
               <xsl:attribute name="id">err-elem-cit-book-28-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-book-28-1] If there is a &lt;chapter-title&gt; element there may be a maximum of one &lt;person-group person-group-type="editor"&gt;. Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' does not meet this requirement.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(*) = count(sub|sup|italic)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(*) = count(sub|sup|italic)">
               <xsl:attribute name="id">err-elem-cit-book-31</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-book-31] A &lt;chapter-title&gt; element in a reference may contain characters and &lt;italic&gt;, &lt;sub&gt;, and &lt;sup&gt;. No other elements are allowed. Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' does not meet this requirement.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M389"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M389"/>
   <xsl:template match="@*|node()" priority="-2" mode="M389">
      <xsl:apply-templates select="*" mode="M389"/>
   </xsl:template>

   <!--PATTERN elem-citation-book-publisher-name-pattern-->


	  <!--RULE elem-citation-book-publisher-name-->
   <xsl:template match="element-citation[@publication-type='book']/publisher-name" priority="1000" mode="M390">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(*)=0"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(*)=0">
               <xsl:attribute name="id">err-elem-cit-book-13-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-book-13-2] No elements are allowed inside &lt;publisher-name&gt;. Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has child elements within the &lt;publisher-name&gt; element.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M390"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M390"/>
   <xsl:template match="@*|node()" priority="-2" mode="M390">
      <xsl:apply-templates select="*" mode="M390"/>
   </xsl:template>

   <!--PATTERN elem-citation-book-edition-pattern-->


	  <!--RULE elem-citation-book-edition-->
   <xsl:template match="element-citation[@publication-type='book']/edition" priority="1000" mode="M391">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(*)=0"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(*)=0">
               <xsl:attribute name="id">err-elem-cit-book-15</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-book-15] No elements are allowed inside &lt;edition&gt;. Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has child elements within the &lt;edition&gt; element.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M391"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M391"/>
   <xsl:template match="@*|node()" priority="-2" mode="M391">
      <xsl:apply-templates select="*" mode="M391"/>
   </xsl:template>

   <!--PATTERN elem-citation-book-pub-id-pattern-->


	  <!--RULE elem-citation-book-pub-id-->
   <xsl:template match="element-citation[@publication-type='book']/pub-id" priority="1000" mode="M392">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@pub-id-type=('doi','pmid','isbn')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@pub-id-type=('doi','pmid','isbn')">
               <xsl:attribute name="id">err-elem-cit-book-17</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-book-17] Each &lt;pub-id&gt;, if present in a book reference, must have a @pub-id-type of one of these values: doi, pmid, isbn. The pub-id-type attribute on &lt;pub-id&gt; in Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' is <xsl:text/>
                  <xsl:value-of select="@pub-id-type"/>
                  <xsl:text/>.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M392"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M392"/>
   <xsl:template match="@*|node()" priority="-2" mode="M392">
      <xsl:apply-templates select="*" mode="M392"/>
   </xsl:template>

   <!--PATTERN elem-citation-book-comment-pattern-->


	  <!--RULE elem-citation-book-comment-->
   <xsl:template match="element-citation[@publication-type='book']/comment" priority="1000" mode="M393">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(../fpage) eq 0 and count(../elocation-id) eq 0"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(../fpage) eq 0 and count(../elocation-id) eq 0">
               <xsl:attribute name="id">err-elem-cit-book-6-4</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-book-6-4] If &lt;comment&gt;In press&lt;/comment&gt; is present, neither &lt;fpage&gt; nor &lt;elocation-id&gt; may be present. Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has one of those elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="text() = 'In press'"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="text() = 'In press'">
               <xsl:attribute name="id">err-elem-cit-book-13</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-book-13] Comment elements with content other than 'In press' are not allowed. Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has such a &lt;comment&gt; element.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M393"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M393"/>
   <xsl:template match="@*|node()" priority="-2" mode="M393">
      <xsl:apply-templates select="*" mode="M393"/>
   </xsl:template>

   <!--PATTERN elem-citation-data-pattern-->


	  <!--RULE elem-citation-data-->
   <xsl:template match="ref/element-citation[@publication-type='data']" priority="1000" mode="M394">

		<!--REPORT error-->
      <xsl:if test="count(person-group[@person-group-type='author']) gt 1">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(person-group[@person-group-type='author']) gt 1">
            <xsl:attribute name="id">err-elem-cit-data-3-1</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references/data-references#err-elem-cit-data-3-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[err-elem-cit-data-3-1] Data references must have one and only one &lt;person-group person-group-type='author'&gt;. Reference '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has <xsl:text/>
               <xsl:value-of select="count(person-group[@person-group-type='author'])"/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="count(person-group) lt 1">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(person-group) lt 1">
            <xsl:attribute name="id">final-err-elem-cit-data-3-2</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references/data-references#final-err-elem-cit-data-3-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[final-err-elem-cit-data-3-2] Data references must have one and only one &lt;person-group person-group-type='author'&gt;. Reference '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has 0.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(data-title)=1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(data-title)=1">
               <xsl:attribute name="id">final-err-elem-cit-data-10</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references/data-references#final-err-elem-cit-data-10</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[final-err-elem-cit-data-10] Data reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has <xsl:text/>
                  <xsl:value-of select="count(source)"/>
                  <xsl:text/> data-title elements. It must contain one (and only one).</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(source)=1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(source)=1">
               <xsl:attribute name="id">final-err-elem-cit-data-11-2</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references/data-references#final-err-elem-cit-data-11-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[final-err-elem-cit-data-11-2] Data reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has <xsl:text/>
                  <xsl:value-of select="count(source)"/>
                  <xsl:text/> source elements. It must contain one (and only one).</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(source)=1 and count(source/*)=count(source/(italic | sub | sup))"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(source)=1 and count(source/*)=count(source/(italic | sub | sup))">
               <xsl:attribute name="id">err-elem-cit-data-11-3-2</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references/data-references#err-elem-cit-data-11-3-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-data-11-3-2] A  &lt;source&gt; element within a &lt;element-citation&gt; of type 'data' may only contain the child elements &lt;italic&gt;, &lt;sub&gt;, and &lt;sup&gt;. No other elements are allowed. Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has disallowed child elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="(count(pub-id) = 1) or count(ext-link) = 1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(count(pub-id) = 1) or count(ext-link) = 1">
               <xsl:attribute name="id">final-err-elem-cit-data-13-1</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references/data-references#final-err-elem-cit-data-13-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[final-err-elem-cit-data-13-1] There must be one (and only one) pub-id or one (and only one) ext-link. Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has <xsl:text/>
                  <xsl:value-of select="count(pub-id)"/>
                  <xsl:text/> &lt;pub-id&gt; elements and <xsl:text/>
                  <xsl:value-of select="count(ext-link)"/>
                  <xsl:text/> &lt;ext-link&gt; elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="pub-id and ext-link">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="pub-id and ext-link">
            <xsl:attribute name="id">elem-cit-data-pub-id-ext-link</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references/data-references#elem-cit-data-pub-id-ext-link</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[elem-cit-data-pub-id-ext-link] Dataset reference '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has both &lt;pub-id&gt; &lt;ext-link&gt; elements. There can only be one or the other, not both.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(*) = count(person-group| data-title| source| year| pub-id| version| ext-link)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(*) = count(person-group| data-title| source| year| pub-id| version| ext-link)">
               <xsl:attribute name="id">err-elem-cit-data-18</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references/data-references#err-elem-cit-data-18</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-data-18] The only tags that are allowed as children of &lt;element-citation&gt; with the publication-type="data" are: &lt;person-group&gt;, &lt;data-title&gt;, &lt;source&gt;, &lt;year&gt;, &lt;pub-id&gt;, &lt;ext-link&gt; and &lt;version&gt;. Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has other elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M394"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M394"/>
   <xsl:template match="@*|node()" priority="-2" mode="M394">
      <xsl:apply-templates select="*" mode="M394"/>
   </xsl:template>

   <!--PATTERN elem-citation-data-v2-pattern-->


	  <!--RULE elem-citation-data-v2-->
   <xsl:template match="article[e:get-version(.)!='1']//element-citation[@publication-type='data']" priority="1000" mode="M395">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@specific-use=('generated','analyzed')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@specific-use=('generated','analyzed')">
               <xsl:attribute name="id">err-elem-cit-data-1-v2</xsl:attribute>
               <xsl:attribute name="flag">version-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-data-1-v2] element-citation[@publication-type='data'] must have a specific-use attribute is either 'generated' or 'analyzed'. Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' does not have this attribute or the value is incorrect.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M395"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M395"/>
   <xsl:template match="@*|node()" priority="-2" mode="M395">
      <xsl:apply-templates select="*" mode="M395"/>
   </xsl:template>

   <!--PATTERN elem-citation-data-person-group-pattern-->


	  <!--RULE elem-citation-data-person-group-->
   <xsl:template match="element-citation[@publication-type='data']/person-group" priority="1000" mode="M396">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@person-group-type='author'"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@person-group-type='author'">
               <xsl:attribute name="id">data-cite-person-group</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references/data-references#data-cite-person-group</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[data-cite-person-group] The person-group for a data reference must have the attribute person-group-type="author". This one in reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has either no person-group attribute or the value is incorrect (<xsl:text/>
                  <xsl:value-of select="@person-group-type"/>
                  <xsl:text/>).</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M396"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M396"/>
   <xsl:template match="@*|node()" priority="-2" mode="M396">
      <xsl:apply-templates select="*" mode="M396"/>
   </xsl:template>

   <!--PATTERN elem-citation-data-pub-id-doi-pattern-->


	  <!--RULE elem-citation-data-pub-id-doi-->
   <xsl:template match="ref/element-citation[@publication-type='data']/pub-id[@pub-id-type='doi']" priority="1000" mode="M397">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="not(@xlink:href)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="not(@xlink:href)">
               <xsl:attribute name="id">err-elem-cit-data-14-2</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references/data-references#err-elem-cit-data-14-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-data-14-2] If the pub-id is of pub-id-type doi, it may not have an @xlink:href. Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has a &lt;pub-id element with type doi and an @link-href with value '<xsl:text/>
                  <xsl:value-of select="@link-href"/>
                  <xsl:text/>'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M397"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M397"/>
   <xsl:template match="@*|node()" priority="-2" mode="M397">
      <xsl:apply-templates select="*" mode="M397"/>
   </xsl:template>

   <!--PATTERN elem-citation-data-pub-id-pattern-->


	  <!--RULE elem-citation-data-pub-id-->
   <xsl:template match="ref/element-citation[@publication-type='data']/pub-id" priority="1000" mode="M398">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@pub-id-type=('accession','doi')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@pub-id-type=('accession','doi')">
               <xsl:attribute name="id">err-elem-cit-data-13-2</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references/data-references#err-elem-cit-data-13-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-data-13-2] Each pub-id element must have a pub-id-type which is either accession or doi. Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has a &lt;pub-id element with the type '<xsl:text/>
                  <xsl:value-of select="@pub-id-type"/>
                  <xsl:text/>'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="if (@pub-id-type != 'doi') then not(@xlink:href) else ()">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="if (@pub-id-type != 'doi') then not(@xlink:href) else ()">
            <xsl:attribute name="id">err-elem-cit-data-14-1</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references/data-references#err-elem-cit-data-14-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[err-elem-cit-data-14-1] If the pub-id is of any pub-id-type except doi, it must have an @xlink:href. Reference '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has a &lt;pub-id element with type '<xsl:text/>
               <xsl:value-of select="@pub-id-type"/>
               <xsl:text/>' but no @xlink-href.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M398"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M398"/>
   <xsl:template match="@*|node()" priority="-2" mode="M398">
      <xsl:apply-templates select="*" mode="M398"/>
   </xsl:template>

   <!--PATTERN elem-citation-data-gend-pattern-->


	  <!--RULE elem-citation-data-gend-->
   <xsl:template match="element-citation[@publication-type='data' and year and @specific-use=('generated','isSupplementedBy')]" priority="1000" mode="M399">
      <xsl:variable name="year" select="replace(year[1],'[^\d]','')"/>
      <xsl:variable name="current-year" select="year-from-date(current-date())"/>
      <xsl:variable name="diff" select="number($current-year) - number($year)"/>

		    <!--REPORT warning-->
      <xsl:if test="($diff gt 1) or ($diff lt -1)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="($diff gt 1) or ($diff lt -1)">
            <xsl:attribute name="id">data-old-and-gend</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[data-old-and-gend] Dataset reference <xsl:text/>
               <xsl:value-of select="if (parent::ref) then parent::ref/@id else 'in data availability section'"/>
               <xsl:text/> is marked as generated but the year is <xsl:text/>
               <xsl:value-of select="$year"/>
               <xsl:text/>. Is this correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M399"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M399"/>
   <xsl:template match="@*|node()" priority="-2" mode="M399">
      <xsl:apply-templates select="*" mode="M399"/>
   </xsl:template>

   <!--PATTERN elem-citation-patent-pattern-->


	  <!--RULE elem-citation-patent-->
   <xsl:template match="element-citation[@publication-type='patent']" priority="1000" mode="M400">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(person-group[@person-group-type='inventor'])=1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(person-group[@person-group-type='inventor'])=1">
               <xsl:attribute name="id">final-err-elem-cit-patent-2-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[final-err-elem-cit-patent-2-1] There must be one person-group with @person-group-type="inventor". Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has <xsl:text/>
                  <xsl:value-of select="count(person-group[@person-group-type='inventor'])"/>
                  <xsl:text/> &lt;person-group&gt; elements of type 'inventor'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="every $type in person-group/@person-group-type         satisfies $type = ('assignee','inventor')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="every $type in person-group/@person-group-type satisfies $type = ('assignee','inventor')">
               <xsl:attribute name="id">err-elem-cit-patent-2-3</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-patent-2-3] The only allowed types of person-group elements are "assignee" and "inventor". Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has &lt;person-group&gt; elements of other types.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(person-group[@person-group-type='assignee']) le 1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(person-group[@person-group-type='assignee']) le 1">
               <xsl:attribute name="id">err-elem-cit-patent-2A</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-patent-2A] There may be zero or one person-group elements with @person-group-type="assignee". Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has <xsl:text/>
                  <xsl:value-of select="count(person-group[@person-group-type='assignee'])"/>
                  <xsl:text/> &lt;person-group&gt; elements of type 'assignee'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(article-title)=1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(article-title)=1">
               <xsl:attribute name="id">final-err-elem-cit-patent-8-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[final-err-elem-cit-patent-8-1] Each  &lt;element-citation&gt; of type 'patent' must contain one and only one &lt;article-title&gt; element. Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has <xsl:text/>
                  <xsl:value-of select="count(article-title)"/>
                  <xsl:text/> &lt;article-title&gt; elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(source)=1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(source)=1">
               <xsl:attribute name="id">final-err-elem-cit-patent-9-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[final-err-elem-cit-patent-9-1] Each &lt;element-citation&gt; of type 'patent' must contain one and only one &lt;source&gt; elements. Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has <xsl:text/>
                  <xsl:value-of select="count(source)"/>
                  <xsl:text/> &lt;source&gt; elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="patent"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="patent">
               <xsl:attribute name="id">final-err-elem-cit-patent-10-1-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[final-err-elem-cit-patent-10-1-1] The  &lt;patent&gt; element is required. Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has no &lt;patent&gt; elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="ext-link"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="ext-link">
               <xsl:attribute name="id">final-err-elem-cit-patent-11-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[final-err-elem-cit-patent-11-1] The &lt;ext-link&gt; element is required in a patent reference. Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has no &lt;ext-link&gt; elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(*) = count(person-group| article-title| source| year| patent| ext-link)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(*) = count(person-group| article-title| source| year| patent| ext-link)">
               <xsl:attribute name="id">err-elem-cit-patent-18</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-patent-18] The only tags that are allowed as children of &lt;element-citation&gt; with the publication-type="patent" are: &lt;person-group&gt;, &lt;article-title&gt;, &lt;source&gt;, &lt;year&gt;, &lt;patent&gt;, and &lt;ext-link&gt;. Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has other elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M400"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M400"/>
   <xsl:template match="@*|node()" priority="-2" mode="M400">
      <xsl:apply-templates select="*" mode="M400"/>
   </xsl:template>

   <!--PATTERN elem-citation-patent-article-title-pattern-->


	  <!--RULE elem-citation-patent-article-title-->
   <xsl:template match="element-citation[@publication-type='patent']/article-title" priority="1000" mode="M401">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="./string-length() + sum(*/string-length()) ge 2"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="./string-length() + sum(*/string-length()) ge 2">
               <xsl:attribute name="id">err-elem-cit-patent-8-2-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-patent-8-2-1] A  &lt;article-title&gt; element within a &lt;element-citation&gt; of type 'patent' must contain at least two characters. Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has too few characters.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(*)=count(italic | sub | sup)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(*)=count(italic | sub | sup)">
               <xsl:attribute name="id">err-elem-cit-patent-8-2-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-patent-8-2-2] A &lt;article-title&gt; element within a &lt;element-citation&gt; of type 'patent' may only contain the child elements &lt;italic&gt;, &lt;sub&gt;, and &lt;sup&gt;. No other elements are allowed. Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has disallowed child elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M401"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M401"/>
   <xsl:template match="@*|node()" priority="-2" mode="M401">
      <xsl:apply-templates select="*" mode="M401"/>
   </xsl:template>

   <!--PATTERN elem-citation-patent-source-pattern-->


	  <!--RULE elem-citation-patent-source-->
   <xsl:template match="element-citation[@publication-type='patent']/source" priority="1000" mode="M402">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(*)=count(italic | sub | sup)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(*)=count(italic | sub | sup)">
               <xsl:attribute name="id">err-elem-cit-patent-9-2-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-patent-9-2-2] A &lt;source&gt; element within a &lt;element-citation&gt; of type 'patent' may only contain the child elements &lt;italic&gt;, &lt;sub&gt;, and &lt;sup&gt;. No other elements are allowed. Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has disallowed child elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M402"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M402"/>
   <xsl:template match="@*|node()" priority="-2" mode="M402">
      <xsl:apply-templates select="*" mode="M402"/>
   </xsl:template>

   <!--PATTERN elem-citation-patent-patent-pattern-->


	  <!--RULE elem-citation-patent-patent-->
   <xsl:template match="element-citation[@publication-type='patent']/patent" priority="1000" mode="M403">
      <xsl:variable name="countries" select="'countries.xml'"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(*)=0"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(*)=0">
               <xsl:attribute name="id">err-elem-cit-patent-10-1-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-patent-10-1-2] The &lt;patent&gt; element may not have child elements. Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has child elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="some $x in document($countries)/countries/country satisfies ($x=@country)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="some $x in document($countries)/countries/country satisfies ($x=@country)">
               <xsl:attribute name="id">err-elem-cit-patent-10-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-patent-10-2] The &lt;patent&gt; element must have a country attribute, the value of which must be an allowed value. Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has a patent/@country attribute with the value '<xsl:text/>
                  <xsl:value-of select="@country"/>
                  <xsl:text/>', which is not in the list.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M403"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M403"/>
   <xsl:template match="@*|node()" priority="-2" mode="M403">
      <xsl:apply-templates select="*" mode="M403"/>
   </xsl:template>

   <!--PATTERN elem-citation-software-pattern-->


	  <!--RULE elem-citation-software-->
   <xsl:template match="element-citation[@publication-type = 'software']" priority="1000" mode="M404">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(person-group[@person-group-type='author']) = 1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(person-group[@person-group-type='author']) = 1">
               <xsl:attribute name="id">err-elem-cit-software-2-1</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references/software-references#err-elem-cit-software-2-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-software-2-1] Each &lt;element-citation&gt; of type 'software' must contain one &lt;person-group&gt; element with attribute person-group-type = author. Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has <xsl:text/>
                  <xsl:value-of select="count(person-group[@person-group-type='author'])"/>
                  <xsl:text/> &lt;person-group&gt; elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="person-group[@person-group-type='author']"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="person-group[@person-group-type='author']">
               <xsl:attribute name="id">err-elem-cit-software-2-2</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references/software-references#err-elem-cit-software-2-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-software-2-2] The &lt;person-group&gt; in a software reference must have the attribute person-group-type set to 'author'. Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has a &lt;person-group&gt; type of '<xsl:text/>
                  <xsl:value-of select="person-group/@person-group-type"/>
                  <xsl:text/>'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="count(data-title) &gt; 1">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(data-title) &gt; 1">
            <xsl:attribute name="id">err-elem-cit-software-10-1</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references/software-references#err-elem-cit-software-10-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[err-elem-cit-software-10-1] Each &lt;element-citation&gt; of type 'software' may contain one and only one &lt;data-title&gt; element. Reference '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has <xsl:text/>
               <xsl:value-of select="count(data-title)"/>
               <xsl:text/> &lt;data-title&gt; elements.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(*) = count(person-group | year | data-title | source | version | publisher-name | publisher-loc | ext-link)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(*) = count(person-group | year | data-title | source | version | publisher-name | publisher-loc | ext-link)">
               <xsl:attribute name="id">err-elem-cit-software-16</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references/software-references#err-elem-cit-software-16</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-software-16] The only tags that are allowed as children of &lt;element-citation&gt; with the publication-type="software" are: &lt;person-group&gt;, &lt;year&gt;, &lt;data-title&gt;, &lt;source&gt;, &lt;version&gt;, &lt;publisher-name&gt;, &lt;publisher-loc&gt;, and &lt;ext-link&gt; Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has other elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M404"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M404"/>
   <xsl:template match="@*|node()" priority="-2" mode="M404">
      <xsl:apply-templates select="*" mode="M404"/>
   </xsl:template>

   <!--PATTERN elem-citation-software-data-title-pattern-->


	  <!--RULE elem-citation-software-data-title-->
   <xsl:template match="element-citation[@publication-type = 'software']/data-title" priority="1000" mode="M405">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(*) = count(sub | sup | italic)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(*) = count(sub | sup | italic)">
               <xsl:attribute name="id">err-elem-cit-software-10-2</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references/software-references#err-elem-cit-software-10-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-software-10-2] An &lt;data-title&gt; element in a reference may contain characters and &lt;italic&gt;, &lt;sub&gt;, and &lt;sup&gt;. No other elements are allowed. Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' does not meet this requirement.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M405"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M405"/>
   <xsl:template match="@*|node()" priority="-2" mode="M405">
      <xsl:apply-templates select="*" mode="M405"/>
   </xsl:template>

   <!--PATTERN elem-citation-preprint-pattern-->


	  <!--RULE elem-citation-preprint-->
   <xsl:template match="element-citation[@publication-type='preprint']" priority="1000" mode="M406">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(person-group)=1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(person-group)=1">
               <xsl:attribute name="id">err-elem-cit-preprint-2-1</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references/preprint-references#err-elem-cit-preprint-2-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-preprint-2-1] There must be one and only one person-group. <xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has <xsl:text/>
                  <xsl:value-of select="count(person-group)"/>
                  <xsl:text/> &lt;person-group&gt; elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(article-title)=1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(article-title)=1">
               <xsl:attribute name="id">err-elem-cit-preprint-8-1</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references/preprint-references#err-elem-cit-preprint-8-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-preprint-8-1] Each  &lt;element-citation&gt; of type 'preprint' must contain one and only one &lt;article-title&gt; element. Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has <xsl:text/>
                  <xsl:value-of select="count(article-title)"/>
                  <xsl:text/> &lt;article-title&gt; elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(source) = 1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(source) = 1">
               <xsl:attribute name="id">err-elem-cit-preprint-9-1</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references/preprint-references#err-elem-cit-preprint-9-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-preprint-9-1] Each  &lt;element-citation&gt; of type 'preprint' must contain one and only one &lt;source&gt; element. Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has <xsl:text/>
                  <xsl:value-of select="count(source)"/>
                  <xsl:text/> &lt;source&gt; elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(pub-id) le 1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(pub-id) le 1">
               <xsl:attribute name="id">err-elem-cit-preprint-10-1</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references/preprint-references#err-elem-cit-preprint-10-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-preprint-10-1] One &lt;pub-id&gt; element is allowed. Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has <xsl:text/>
                  <xsl:value-of select="count(pub-id)"/>
                  <xsl:text/> &lt;pub-id&gt; elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(pub-id)=1 or count(ext-link)=1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(pub-id)=1 or count(ext-link)=1">
               <xsl:attribute name="id">err-elem-cit-preprint-10-3</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references/preprint-references#err-elem-cit-preprint-10-3</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-preprint-10-3] Either one &lt;pub-id&gt; or one &lt;ext-link&gt; element is required in a preprint reference. Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has <xsl:text/>
                  <xsl:value-of select="count(pub-id)"/>
                  <xsl:text/> &lt;pub-id&gt; elements and <xsl:text/>
                  <xsl:value-of select="count(ext-link)"/>
                  <xsl:text/> &lt;ext-link&gt; elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(*) = count(person-group| article-title| source| year| pub-id| ext-link)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(*) = count(person-group| article-title| source| year| pub-id| ext-link)">
               <xsl:attribute name="id">err-elem-cit-preprint-13</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references/preprint-references#err-elem-cit-preprint-13</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-preprint-13] The only tags that are allowed as children of &lt;element-citation&gt; with the publication-type="preprint" are: &lt;person-group&gt;, &lt;article-title&gt;, &lt;source&gt;, &lt;year&gt;, &lt;pub-id&gt;, and &lt;ext-link&gt;. Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has other elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M406"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M406"/>
   <xsl:template match="@*|node()" priority="-2" mode="M406">
      <xsl:apply-templates select="*" mode="M406"/>
   </xsl:template>

   <!--PATTERN elem-citation-preprint-person-group-pattern-->


	  <!--RULE elem-citation-preprint-person-group-->
   <xsl:template match="element-citation[@publication-type='preprint']/person-group" priority="1000" mode="M407">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@person-group-type='author'"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@person-group-type='author'">
               <xsl:attribute name="id">err-elem-cit-preprint-2-2</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references/preprint-references#err-elem-cit-preprint-2-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-preprint-2-2] The &lt;person-group&gt; element must contain @person-group-type='author'. The &lt;person-group&gt; element in Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' contains @person-group-type='<xsl:text/>
                  <xsl:value-of select="@person-group-type"/>
                  <xsl:text/>'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M407"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M407"/>
   <xsl:template match="@*|node()" priority="-2" mode="M407">
      <xsl:apply-templates select="*" mode="M407"/>
   </xsl:template>

   <!--PATTERN elem-citation-preprint-pub-id-pattern-->


	  <!--RULE elem-citation-preprint-pub-id-->
   <xsl:template match="element-citation[@publication-type='preprint']/pub-id" priority="1000" mode="M408">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@pub-id-type='doi'"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@pub-id-type='doi'">
               <xsl:attribute name="id">err-elem-cit-preprint-10-2</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references/preprint-references#err-elem-cit-preprint-10-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-preprint-10-2] If present, the &lt;pub-id&gt; element must contain @pub-id-type='doi'. The &lt;pub-id&gt; element in Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' contains @pub-id-type='<xsl:text/>
                  <xsl:value-of select="@pub-id-type"/>
                  <xsl:text/>'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M408"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M408"/>
   <xsl:template match="@*|node()" priority="-2" mode="M408">
      <xsl:apply-templates select="*" mode="M408"/>
   </xsl:template>

   <!--PATTERN elem-citation-preprint-article-title-pattern-->


	  <!--RULE elem-citation-preprint-article-title-->
   <xsl:template match="element-citation[@publication-type='preprint']/article-title" priority="1000" mode="M409">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="./string-length() + sum(*/string-length()) ge 2"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="./string-length() + sum(*/string-length()) ge 2">
               <xsl:attribute name="id">err-elem-cit-preprint-8-2-1</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references/preprint-references#err-elem-cit-preprint-8-2-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-preprint-8-2-1] A &lt;article-title&gt; element within a &lt;element-citation&gt; of type 'preprint' must contain at least two characters. Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has too few characters.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(*)=count(italic | sub | sup)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(*)=count(italic | sub | sup)">
               <xsl:attribute name="id">err-elem-cit-preprint-8-2-2</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references/preprint-references#err-elem-cit-preprint-8-2-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-preprint-8-2-2] A &lt;article-title&gt; element within a &lt;element-citation&gt; of type 'preprint' may only contain the child elements &lt;italic&gt;, &lt;sub&gt;, and &lt;sup&gt;. No other elements are allowed. Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has disallowed child elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M409"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M409"/>
   <xsl:template match="@*|node()" priority="-2" mode="M409">
      <xsl:apply-templates select="*" mode="M409"/>
   </xsl:template>

   <!--PATTERN elem-citation-preprint-source-pattern-->


	  <!--RULE elem-citation-preprint-source-->
   <xsl:template match="element-citation[@publication-type='preprint']/source" priority="1000" mode="M410">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(*)=count(italic | sub | sup)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(*)=count(italic | sub | sup)">
               <xsl:attribute name="id">err-elem-cit-preprint-9-2-2</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references/preprint-references#err-elem-cit-preprint-9-2-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-preprint-9-2-2] A &lt;source&gt; element within a &lt;element-citation&gt; of type 'preprint' may only contain the child elements &lt;italic&gt;, &lt;sub&gt;, and &lt;sup&gt;. No other elements are allowed. Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has disallowed child elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M410"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M410"/>
   <xsl:template match="@*|node()" priority="-2" mode="M410">
      <xsl:apply-templates select="*" mode="M410"/>
   </xsl:template>

   <!--PATTERN elem-citation-web-pattern-->


	  <!--RULE elem-citation-web-->
   <xsl:template match="element-citation[@publication-type='web']" priority="1000" mode="M411">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(person-group)=1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(person-group)=1">
               <xsl:attribute name="id">err-elem-cit-web-2-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-web-2-1] There must be one and only one person-group. Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has <xsl:text/>
                  <xsl:value-of select="count(person-group)"/>
                  <xsl:text/> &lt;person-group&gt; elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(article-title)=1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(article-title)=1">
               <xsl:attribute name="id">final-err-elem-cit-web-8-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[final-err-elem-cit-web-8-1] Each  &lt;element-citation&gt; of type 'web' must contain one and only one &lt;article-title&gt; element. Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has <xsl:text/>
                  <xsl:value-of select="count(article-title)"/>
                  <xsl:text/> &lt;article-title&gt; elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="count(source) &gt; 1">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(source) &gt; 1">
            <xsl:attribute name="id">err-elem-cit-web-9-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[err-elem-cit-web-9-1] Each  &lt;element-citation&gt; of type 'web' may contain one and only one &lt;source&gt; element. Reference '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has <xsl:text/>
               <xsl:value-of select="count(source)"/>
               <xsl:text/> &lt;source&gt; elements.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(ext-link)=1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(ext-link)=1">
               <xsl:attribute name="id">err-elem-cit-web-10-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-web-10-1] One and only one &lt;ext-link&gt; element is required. Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has <xsl:text/>
                  <xsl:value-of select="count(ext-link)"/>
                  <xsl:text/> &lt;ext-link&gt; elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="count(date-in-citation) lt 1">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(date-in-citation) lt 1">
            <xsl:attribute name="id">final-err-elem-cit-web-11-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[final-err-elem-cit-web-11-1] Web Reference '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has no accessed date (&lt;date-in-citation&gt; element) which is required.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="count(date-in-citation) gt 1">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(date-in-citation) gt 1">
            <xsl:attribute name="id">err-elem-cit-web-11-1-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[err-elem-cit-web-11-1-1] Web Reference '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has <xsl:text/>
               <xsl:value-of select="count(date-in-citation)"/>
               <xsl:text/> &lt;date-in-citation&gt; elements. One and only one &lt;date-in-citation&gt; element is required.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(*) = count(person-group|article-title|source|year|ext-link|date-in-citation)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(*) = count(person-group|article-title|source|year|ext-link|date-in-citation)">
               <xsl:attribute name="id">err-elem-cit-web-12</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-web-12] The only tags that are allowed as children of &lt;element-citation&gt; with the publication-type="web" are: &lt;person-group&gt;, &lt;article-title&gt;, &lt;source&gt;, &lt;year&gt;, &lt;ext-link&gt; and &lt;date-in-citation&gt;. Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has other elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M411"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M411"/>
   <xsl:template match="@*|node()" priority="-2" mode="M411">
      <xsl:apply-templates select="*" mode="M411"/>
   </xsl:template>

   <!--PATTERN elem-citation-web-person-group-pattern-->


	  <!--RULE elem-citation-web-person-group-->
   <xsl:template match="element-citation[@publication-type='web']/person-group" priority="1000" mode="M412">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@person-group-type='author'"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@person-group-type='author'">
               <xsl:attribute name="id">err-elem-cit-web-2-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-web-2-2] The &lt;person-group&gt; element must contain @person-group-type='author'. The &lt;person-group&gt; element in Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' contains @person-group-type='<xsl:text/>
                  <xsl:value-of select="@person-group-type"/>
                  <xsl:text/>'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M412"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M412"/>
   <xsl:template match="@*|node()" priority="-2" mode="M412">
      <xsl:apply-templates select="*" mode="M412"/>
   </xsl:template>

   <!--PATTERN elem-citation-web-article-title-pattern-->


	  <!--RULE elem-citation-web-article-title-->
   <xsl:template match="element-citation[@publication-type='web']/article-title" priority="1000" mode="M413">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="./string-length() + sum(*/string-length()) ge 2"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="./string-length() + sum(*/string-length()) ge 2">
               <xsl:attribute name="id">err-elem-cit-web-8-2-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-web-8-2-1] A  &lt;article-title&gt; element within a &lt;element-citation&gt; of type 'web' must contain 
        at least two characters. Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has too few characters.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(*)=count(italic | sub | sup)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(*)=count(italic | sub | sup)">
               <xsl:attribute name="id">err-elem-cit-web-8-2-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-web-8-2-2] A  &lt;article-title&gt; element within a &lt;element-citation&gt; of type 'web' may only contain the child elements &lt;italic&gt;, &lt;sub&gt;, and &lt;sup&gt;. No other elements are allowed. Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has disallowed child elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M413"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M413"/>
   <xsl:template match="@*|node()" priority="-2" mode="M413">
      <xsl:apply-templates select="*" mode="M413"/>
   </xsl:template>

   <!--PATTERN elem-citation-web-source-pattern-->


	  <!--RULE elem-citation-web-source-->
   <xsl:template match="element-citation[@publication-type='web']/source" priority="1000" mode="M414">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(*)=count(italic | sub | sup)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(*)=count(italic | sub | sup)">
               <xsl:attribute name="id">err-elem-cit-web-9-2-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-web-9-2-2] A  &lt;source&gt; element within a &lt;element-citation&gt; of type 'web' may only contain the child elements &lt;italic&gt;, &lt;sub&gt;, and &lt;sup&gt;. No other elements are allowed. Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has disallowed child elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M414"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M414"/>
   <xsl:template match="@*|node()" priority="-2" mode="M414">
      <xsl:apply-templates select="*" mode="M414"/>
   </xsl:template>

   <!--PATTERN elem-citation-web-date-in-citation-pattern-->


	  <!--RULE elem-citation-web-date-in-citation-->
   <xsl:template match="element-citation[@publication-type='web']/date-in-citation" priority="1000" mode="M415">
      <xsl:variable name="date-regex" select="'^[12][0-9][0-9][0-9]\-0[13578]\-[12][0-9]$|         ^[12][0-9][0-9][0-9]\-0[13578]\-0[1-9]$|         ^[12][0-9][0-9][0-9]\-0[13578]\-3[01]$|         ^[12][0-9][0-9][0-9]\-02\-[12][0-9]$|         ^[12][0-9][0-9][0-9]\-02\-0[1-9]$|         ^[12][0-9][0-9][0-9]\-0[469]\-0[1-9]$|         ^[12][0-9][0-9][0-9]\-0[469]\-[12][0-9]$|         ^[12][0-9][0-9][0-9]\-0[469]\-30$|         ^[12][0-9][0-9][0-9]\-[1-2][02]\-[12][0-9]$|         ^[12][0-9][0-9][0-9]\-[1-2][02]\-0[1-9]$|         ^[12][0-9][0-9][0-9]\-[1-2][02]\-3[01]$|         ^[12][0-9][0-9][0-9]\-11\-0[1-9]$|         ^[12][0-9][0-9][0-9]\-11\-[12][0-9]$|         ^[12][0-9][0-9][0-9]\-11\-30$'"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="./@iso-8601-date"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="./@iso-8601-date">
               <xsl:attribute name="id">err-elem-cit-web-11-2-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-web-11-2-1]
        The &lt;date-in-citation&gt; element must have an @iso-8601-date attribute.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' does not.
      </svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(./@iso-8601-date,'^\d{4}-\d{2}-\d{2}$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(./@iso-8601-date,'^\d{4}-\d{2}-\d{2}$')">
               <xsl:attribute name="id">err-elem-cit-web-11-2-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-web-11-2-2]
        The &lt;date-in-citation&gt; element's @iso-8601-date attribute must have the format
        'YYYY-MM-DD'.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has '<xsl:text/>
                  <xsl:value-of select="@iso-8601-date"/>
                  <xsl:text/>',
        which does not have that format.
      </svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(normalize-space(.),'^(January|February|March|April|May|June|July|August|September|October|November|December) \d{1,2}, \d{4}')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(normalize-space(.),'^(January|February|March|April|May|June|July|August|September|October|November|December) \d{1,2}, \d{4}')">
               <xsl:attribute name="id">err-elem-cit-web-11-3</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-web-11-3]
        The format of the element content must match month, space, day, comma, year.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has <xsl:text/>
                  <xsl:value-of select="."/>
                  <xsl:text/>.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="(matches(@iso-8601-date,replace($date-regex,'\p{Zs}','')))"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(matches(@iso-8601-date,replace($date-regex,'\p{Zs}','')))">
               <xsl:attribute name="id">err-elem-cit-web-11-5</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-web-11-5] 
        The @iso-8601-date value on accessed date must be a valid date value. <xsl:text/>
                  <xsl:value-of select="@iso-8601-date"/>
                  <xsl:text/> in reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' is not valid.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="if (matches(@iso-8601-date,replace($date-regex,'\p{Zs}',''))) then format-date(xs:date(@iso-8601-date), '[MNn] [D], [Y]')!=.         else ()">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="if (matches(@iso-8601-date,replace($date-regex,'\p{Zs}',''))) then format-date(xs:date(@iso-8601-date), '[MNn] [D], [Y]')!=. else ()">
            <xsl:attribute name="id">err-elem-cit-web-11-4</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[err-elem-cit-web-11-4] 
        The Accessed date value must match the @iso-8601-date value in the format 'January 1, 2020'.
        Reference '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has element content of 
        <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> but an @iso-8601-date value of 
        <xsl:text/>
               <xsl:value-of select="@iso-8601-date"/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M415"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M415"/>
   <xsl:template match="@*|node()" priority="-2" mode="M415">
      <xsl:apply-templates select="*" mode="M415"/>
   </xsl:template>

   <!--PATTERN elem-citation-report-pattern-->


	  <!--RULE elem-citation-report-->
   <xsl:template match="element-citation[@publication-type='report']" priority="1000" mode="M416">
      <xsl:variable name="publisher-locations" select="'publisher-locations.xml'"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(person-group)=1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(person-group)=1">
               <xsl:attribute name="id">err-elem-cit-report-2-1</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references/report-references#err-elem-cit-report-2-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-report-2-1]
        One and only one person-group element is allowed.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has 
        <xsl:text/>
                  <xsl:value-of select="count(person-group)"/>
                  <xsl:text/> &lt;person-group&gt; elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(source)=1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(source)=1">
               <xsl:attribute name="id">err-elem-cit-report-9-1</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references/report-references#err-elem-cit-report-9-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-report-9-1] [err-elem-report-report-9-1]
        Each  &lt;element-citation&gt; of type 'report' must contain one and
        only one &lt;source&gt; element.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has 
        <xsl:text/>
                  <xsl:value-of select="count(source)"/>
                  <xsl:text/> &lt;source&gt; elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(publisher-name)=1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(publisher-name)=1">
               <xsl:attribute name="id">err-elem-cit-report-11-1</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references/report-references#err-elem-cit-report-11-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-report-11-1]
        &lt;publisher-name&gt; is required.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has <xsl:text/>
                  <xsl:value-of select="count(publisher-name)"/>
                  <xsl:text/>
        &lt;publisher-name&gt; elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT warning-->
      <xsl:if test="some $p in document($publisher-locations)/locations/location/text()         satisfies ends-with(publisher-name[1],$p)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="some $p in document($publisher-locations)/locations/location/text() satisfies ends-with(publisher-name[1],$p)">
            <xsl:attribute name="id">warning-elem-cit-report-11-3</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references/report-references#warning-elem-cit-report-11-3</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[warning-elem-cit-report-11-3]
        The content of &lt;publisher-name&gt; may not end with a publisher location. 
        Reference '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' contains the string <xsl:text/>
               <xsl:value-of select="publisher-name"/>
               <xsl:text/>,
        which ends with a publisher location.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(*) = count(person-group| year| source| publisher-loc|publisher-name| ext-link| pub-id)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(*) = count(person-group| year| source| publisher-loc|publisher-name| ext-link| pub-id)">
               <xsl:attribute name="id">err-elem-cit-report-15</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references/report-references#err-elem-cit-report-15</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-report-15]
        The only tags that are allowed as children of &lt;element-citation&gt; with the publication-type="report" are:
        &lt;person-group&gt;, &lt;year&gt;, &lt;source&gt;, &lt;publisher-loc&gt;, &lt;publisher-name&gt;, &lt;ext-link&gt;, and &lt;pub-id&gt;.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has other elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="ext-link and pub-id[@pub-id-type='doi']">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="ext-link and pub-id[@pub-id-type='doi']">
            <xsl:attribute name="id">err-elem-cit-report-14</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references/report-references#err-elem-cit-report-14</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[err-elem-cit-report-14] Report reference cannot have both a doi and a URL. Reference '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has a doi (<xsl:text/>
               <xsl:value-of select="pub-id[@pub-id-type='doi']"/>
               <xsl:text/>) and a URL (<xsl:text/>
               <xsl:value-of select="ext-link"/>
               <xsl:text/>).</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M416"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M416"/>
   <xsl:template match="@*|node()" priority="-2" mode="M416">
      <xsl:apply-templates select="*" mode="M416"/>
   </xsl:template>

   <!--PATTERN elem-citation-report-preson-group-pattern-->


	  <!--RULE elem-citation-report-preson-group-->
   <xsl:template match="element-citation[@publication-type='report']/person-group" priority="1000" mode="M417">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@person-group-type='author'"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@person-group-type='author'">
               <xsl:attribute name="id">err-elem-cit-report-2-2</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references/report-references#err-elem-cit-report-2-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-report-2-2]
        Each &lt;person-group&gt; must have a @person-group-type attribute of type 'author'.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has a &lt;person-group&gt; 
        element with @person-group-type attribute '<xsl:text/>
                  <xsl:value-of select="@person-group-type"/>
                  <xsl:text/>'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M417"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M417"/>
   <xsl:template match="@*|node()" priority="-2" mode="M417">
      <xsl:apply-templates select="*" mode="M417"/>
   </xsl:template>

   <!--PATTERN elem-citation-report-source-pattern-->


	  <!--RULE elem-citation-report-source-->
   <xsl:template match="element-citation[@publication-type='report']/source" priority="1000" mode="M418">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(*)=count(italic | sub | sup)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(*)=count(italic | sub | sup)">
               <xsl:attribute name="id">err-elem-cit-report-9-2-2</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references/report-references#err-elem-cit-report-9-2-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-report-9-2-2]
        A  &lt;source&gt; element within a &lt;element-citation&gt; of type 'report' may only contain the child 
        elements: &lt;italic&gt;, &lt;sub&gt;, and &lt;sup&gt;. No other elements are allowed.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has child elements that are not allowed.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M418"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M418"/>
   <xsl:template match="@*|node()" priority="-2" mode="M418">
      <xsl:apply-templates select="*" mode="M418"/>
   </xsl:template>

   <!--PATTERN elem-citation-report-publisher-name-pattern-->


	  <!--RULE elem-citation-report-publisher-name-->
   <xsl:template match="element-citation[@publication-type='report']/publisher-name" priority="1000" mode="M419">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(*)=0"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(*)=0">
               <xsl:attribute name="id">err-elem-cit-report-11-2</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references/report-references#err-elem-cit-report-11-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-report-11-2]
        No elements are allowed inside &lt;publisher-name&gt;.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has child elements within the
        &lt;publisher-name&gt; element.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M419"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M419"/>
   <xsl:template match="@*|node()" priority="-2" mode="M419">
      <xsl:apply-templates select="*" mode="M419"/>
   </xsl:template>

   <!--PATTERN elem-citation-report-pub-id-pattern-->


	  <!--RULE elem-citation-report-pub-id-->
   <xsl:template match="element-citation[@publication-type='report']/pub-id" priority="1000" mode="M420">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@pub-id-type='doi' or @pub-id-type='isbn'"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@pub-id-type='doi' or @pub-id-type='isbn'">
               <xsl:attribute name="id">err-elem-cit-report-12-2</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references/report-references#err-elem-cit-report-12-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-report-12-2]
        The only allowed pub-id types are 'doi' and 'isbn'.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has a pub-id type of 
        '<xsl:text/>
                  <xsl:value-of select="@pub-id-type"/>
                  <xsl:text/>'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M420"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M420"/>
   <xsl:template match="@*|node()" priority="-2" mode="M420">
      <xsl:apply-templates select="*" mode="M420"/>
   </xsl:template>

   <!--PATTERN elem-citation-confproc-pattern-->


	  <!--RULE elem-citation-confproc-->
   <xsl:template match="element-citation[@publication-type='confproc']" priority="1000" mode="M421">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(person-group)=1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(person-group)=1">
               <xsl:attribute name="id">err-elem-cit-confproc-2-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-confproc-2-1]
        One and only one person-group element is allowed.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has 
        <xsl:text/>
                  <xsl:value-of select="count(person-group)"/>
                  <xsl:text/> &lt;person-group&gt; elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(article-title)=1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(article-title)=1">
               <xsl:attribute name="id">err-elem-cit-confproc-8-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-confproc-8-1]
        Each  &lt;element-citation&gt; of type 'confproc' must contain one and
        only one &lt;article-title&gt; element.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has 
        <xsl:text/>
                  <xsl:value-of select="count(article-title)"/>
                  <xsl:text/> &lt;article-title&gt; elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(conf-name)=1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(conf-name)=1">
               <xsl:attribute name="id">err-elem-cit-confproc-10-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-confproc-10-1]
        &lt;conf-name&gt; is required.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has <xsl:text/>
                  <xsl:value-of select="count(conf-name)"/>
                  <xsl:text/>
        &lt;conf-name&gt; elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="(fpage and elocation-id) or (lpage and elocation-id)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(fpage and elocation-id) or (lpage and elocation-id)">
            <xsl:attribute name="id">err-elem-cit-confproc-12-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[err-elem-cit-confproc-12-1]
        The citation may contain &lt;fpage&gt; and &lt;lpage&gt;, only &lt;fpage&gt;, or only &lt;elocation-id&gt; elements, but not a mixture.
        Reference '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has <xsl:text/>
               <xsl:value-of select="count(fpage)"/>
               <xsl:text/>
        &lt;fpage&gt; elements,  <xsl:text/>
               <xsl:value-of select="count(lpage)"/>
               <xsl:text/> &lt;lpage&gt; elements, and 
        <xsl:text/>
               <xsl:value-of select="count(elocation-id)"/>
               <xsl:text/> &lt;elocation-id&gt; elements.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="count(fpage) gt 1 or count(lpage) gt 1 or count(elocation-id) gt 1">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(fpage) gt 1 or count(lpage) gt 1 or count(elocation-id) gt 1">
            <xsl:attribute name="id">err-elem-cit-confproc-12-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[err-elem-cit-confproc-12-2]
        The citation may contain no more than one of any of &lt;fpage&gt;, &lt;lpage&gt;, and &lt;elocation-id&gt; elements.
        Reference '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has <xsl:text/>
               <xsl:value-of select="count(fpage)"/>
               <xsl:text/>
        &lt;fpage&gt; elements,  <xsl:text/>
               <xsl:value-of select="count(lpage)"/>
               <xsl:text/> &lt;lpage&gt; elements, and 
        <xsl:text/>
               <xsl:value-of select="count(elocation-id)"/>
               <xsl:text/> &lt;elocation-id&gt; elements.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="(lpage and fpage) and (number(replace(fpage[1],'[^\d]','')) ge number(replace(lpage[1],'[^\d]','')))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(lpage and fpage) and (number(replace(fpage[1],'[^\d]','')) ge number(replace(lpage[1],'[^\d]','')))">
            <xsl:attribute name="id">err-elem-cit-confproc-12-3</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[err-elem-cit-confproc-12-3]
        If both &lt;lpage&gt; and &lt;fpage&gt; are present, the value of &lt;fpage&gt; must be less than the value of &lt;lpage&gt;. 
        Reference '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has &lt;lpage&gt; <xsl:text/>
               <xsl:value-of select="lpage"/>
               <xsl:text/>, which is 
        less than or equal to &lt;fpage&gt; <xsl:text/>
               <xsl:value-of select="fpage"/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(fpage/*)=0 and count(lpage/*)=0"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(fpage/*)=0 and count(lpage/*)=0">
               <xsl:attribute name="id">err-elem-cit-confproc-12-4</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-confproc-12-4]
        The content of the &lt;fpage&gt; and &lt;lpage&gt; elements can contain any alpha numeric value but no child elements are allowed.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has <xsl:text/>
                  <xsl:value-of select="count(fpage/*)"/>
                  <xsl:text/> child elements in
        &lt;fpage&gt; and  <xsl:text/>
                  <xsl:value-of select="count(lpage/*)"/>
                  <xsl:text/> child elements in &lt;lpage&gt;.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(pub-id) le 1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(pub-id) le 1">
               <xsl:attribute name="id">err-elem-cit-confproc-16-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-confproc-16-1]
        A maximum of one &lt;pub-id&gt; element is allowed.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has <xsl:text/>
                  <xsl:value-of select="count(pub-id)"/>
                  <xsl:text/>
        &lt;pub-id&gt; elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(*) = count(person-group | article-title | year | conf-loc | conf-name | lpage |         fpage | elocation-id | ext-link | pub-id)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(*) = count(person-group | article-title | year | conf-loc | conf-name | lpage | fpage | elocation-id | ext-link | pub-id)">
               <xsl:attribute name="id">err-elem-cit-confproc-17</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-confproc-17] The only tags that are allowed as children of &lt;element-citation&gt; with the publication-type="confproc" are: &lt;person-group&gt;, &lt;year&gt;, &lt;article-title&gt;, &lt;conf-loc&gt;, &lt;conf-name&gt;, &lt;fpage&gt;, &lt;lpage&gt;, &lt;elocation-id&gt;, &lt;ext-link&gt;, and &lt;pub-id&gt;. Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has other elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M421"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M421"/>
   <xsl:template match="@*|node()" priority="-2" mode="M421">
      <xsl:apply-templates select="*" mode="M421"/>
   </xsl:template>

   <!--PATTERN elem-citation-confproc-preson-group-pattern-->


	  <!--RULE elem-citation-confproc-preson-group-->
   <xsl:template match="element-citation[@publication-type='confproc']/person-group" priority="1000" mode="M422">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@person-group-type='author'"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@person-group-type='author'">
               <xsl:attribute name="id">err-elem-cit-confproc-2-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-confproc-2-2]
        Each &lt;person-group&gt; must have a @person-group-type attribute of type 'author'.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has a &lt;person-group&gt; 
        element with @person-group-type attribute '<xsl:text/>
                  <xsl:value-of select="@person-group-type"/>
                  <xsl:text/>'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M422"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M422"/>
   <xsl:template match="@*|node()" priority="-2" mode="M422">
      <xsl:apply-templates select="*" mode="M422"/>
   </xsl:template>

   <!--PATTERN elem-citation-confproc-article-title-pattern-->


	  <!--RULE elem-citation-confproc-article-title-->
   <xsl:template match="element-citation[@publication-type='confproc']/article-title" priority="1000" mode="M423">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(*) = count(sub|sup|italic)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(*) = count(sub|sup|italic)">
               <xsl:attribute name="id">err-elem-cit-confproc-8-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-confproc-8-2]
        An &lt;article-title&gt; element in a reference may contain characters and &lt;italic&gt;, &lt;sub&gt;, and &lt;sup&gt;. 
        No other elements are allowed.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' does not meet this requirement.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M423"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M423"/>
   <xsl:template match="@*|node()" priority="-2" mode="M423">
      <xsl:apply-templates select="*" mode="M423"/>
   </xsl:template>

   <!--PATTERN elem-citation-confproc-conf-name-pattern-->


	  <!--RULE elem-citation-confproc-conf-name-->
   <xsl:template match="element-citation[@publication-type='confproc']/conf-name" priority="1000" mode="M424">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(*)=0"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(*)=0">
               <xsl:attribute name="id">err-elem-cit-confproc-10-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-confproc-10-2]
        No elements are allowed inside &lt;conf-name&gt;.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has child elements within the
        &lt;conf-name&gt; element.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M424"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M424"/>
   <xsl:template match="@*|node()" priority="-2" mode="M424">
      <xsl:apply-templates select="*" mode="M424"/>
   </xsl:template>

   <!--PATTERN elem-citation-confproc-conf-loc-pattern-->


	  <!--RULE elem-citation-confproc-conf-loc-->
   <xsl:template match="element-citation[@publication-type='confproc']/conf-loc" priority="1000" mode="M425">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(*)=0"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(*)=0">
               <xsl:attribute name="id">err-elem-cit-confproc-11-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-confproc-11-2]
        No elements are allowed inside &lt;conf-loc&gt;.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has child elements within the
        &lt;conf-loc&gt; element.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M425"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M425"/>
   <xsl:template match="@*|node()" priority="-2" mode="M425">
      <xsl:apply-templates select="*" mode="M425"/>
   </xsl:template>

   <!--PATTERN elem-citation-confproc-fpage-pattern-->


	  <!--RULE elem-citation-confproc-fpage-->
   <xsl:template match="element-citation[@publication-type='confproc']/fpage" priority="1000" mode="M426">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(normalize-space(.),'^\d.*') or (substring(normalize-space(../lpage[1]),1,1) = substring(normalize-space(.),1,1))"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(normalize-space(.),'^\d.*') or (substring(normalize-space(../lpage[1]),1,1) = substring(normalize-space(.),1,1))">
               <xsl:attribute name="id">err-elem-cit-confproc-12-5</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-confproc-12-5]
        If the content of &lt;fpage&gt; begins with a letter, then the content of &lt;lpage&gt; must begin with 
        the same letter. 
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has &lt;fpage&gt;='<xsl:text/>
                  <xsl:value-of select="."/>
                  <xsl:text/>'
        and &lt;lpage&gt;='<xsl:text/>
                  <xsl:value-of select="../lpage"/>
                  <xsl:text/>'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M426"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M426"/>
   <xsl:template match="@*|node()" priority="-2" mode="M426">
      <xsl:apply-templates select="*" mode="M426"/>
   </xsl:template>

   <!--PATTERN elem-citation-confproc-pub-id-pattern-->


	  <!--RULE elem-citation-confproc-pub-id-->
   <xsl:template match="element-citation[@publication-type='confproc']/pub-id" priority="1000" mode="M427">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@pub-id-type='doi' or @pub-id-type='pmid'"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@pub-id-type='doi' or @pub-id-type='pmid'">
               <xsl:attribute name="id">err-elem-cit-confproc-16-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-confproc-16-2]
        The only allowed pub-id types are 'doi' or 'pmid'.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has a pub-id type of 
        '<xsl:text/>
                  <xsl:value-of select="@pub-id-type"/>
                  <xsl:text/>'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M427"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M427"/>
   <xsl:template match="@*|node()" priority="-2" mode="M427">
      <xsl:apply-templates select="*" mode="M427"/>
   </xsl:template>

   <!--PATTERN elem-citation-thesis-pattern-->


	  <!--RULE elem-citation-thesis-->
   <xsl:template match="element-citation[@publication-type='thesis']" priority="1000" mode="M428">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(person-group)=1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(person-group)=1">
               <xsl:attribute name="id">err-elem-cit-thesis-2-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-thesis-2-1]
        One and only one person-group element is allowed.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has 
        <xsl:text/>
                  <xsl:value-of select="count(person-group)"/>
                  <xsl:text/> &lt;person-group&gt; elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(descendant::collab)=0"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(descendant::collab)=0">
               <xsl:attribute name="id">err-elem-cit-thesis-3</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-thesis-3]
        No &lt;collab&gt; elements are allowed in thesis citations.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has 
        <xsl:text/>
                  <xsl:value-of select="count(collab)"/>
                  <xsl:text/> &lt;collab&gt; elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(descendant::etal)=0"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(descendant::etal)=0">
               <xsl:attribute name="id">err-elem-cit-thesis-6</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-thesis-6]
        No &lt;etal&gt; elements are allowed in thesis citations.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has 
        <xsl:text/>
                  <xsl:value-of select="count(etal)"/>
                  <xsl:text/> &lt;etal&gt; elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(article-title)=1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(article-title)=1">
               <xsl:attribute name="id">err-elem-cit-thesis-8-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-thesis-8-1]
        Each  &lt;element-citation&gt; of type 'thesis' must contain one and
        only one &lt;article-title&gt; element.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has 
        <xsl:text/>
                  <xsl:value-of select="count(article-title)"/>
                  <xsl:text/> &lt;article-title&gt; elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(publisher-name)=1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(publisher-name)=1">
               <xsl:attribute name="id">err-elem-cit-thesis-9-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-thesis-9-1]
        &lt;publisher-name&gt; is required.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has <xsl:text/>
                  <xsl:value-of select="count(publisher-name)"/>
                  <xsl:text/>
        &lt;publisher-name&gt; elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(pub-id) le 1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(pub-id) le 1">
               <xsl:attribute name="id">err-elem-cit-thesis-11-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-thesis-11-1]
        A maximum of one &lt;pub-id&gt; element is allowed.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has <xsl:text/>
                  <xsl:value-of select="count(pub-id)"/>
                  <xsl:text/>
        &lt;pub-id&gt; elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(*) = count(person-group | article-title | year| source | publisher-loc | publisher-name | ext-link | pub-id)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(*) = count(person-group | article-title | year| source | publisher-loc | publisher-name | ext-link | pub-id)">
               <xsl:attribute name="id">err-elem-cit-thesis-13</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-thesis-13]
        The only tags that are allowed as children of &lt;element-citation&gt; with the publication-type="thesis" are:
        &lt;person-group&gt;, &lt;year&gt;, &lt;article-title&gt;, &lt;source&gt;, &lt;publisher-loc&gt;, &lt;publisher-name&gt;, 
        &lt;ext-link&gt;, and &lt;pub-id&gt;.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has other elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M428"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M428"/>
   <xsl:template match="@*|node()" priority="-2" mode="M428">
      <xsl:apply-templates select="*" mode="M428"/>
   </xsl:template>

   <!--PATTERN elem-citation-thesis-preson-group-pattern-->


	  <!--RULE elem-citation-thesis-preson-group-->
   <xsl:template match="element-citation[@publication-type='thesis']/person-group" priority="1000" mode="M429">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@person-group-type='author'"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@person-group-type='author'">
               <xsl:attribute name="id">err-elem-cit-thesis-2-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-thesis-2-2]
        Each &lt;person-group&gt; must have a @person-group-type attribute of type 'author'.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has a &lt;person-group&gt; 
        element with @person-group-type attribute '<xsl:text/>
                  <xsl:value-of select="@person-group-type"/>
                  <xsl:text/>'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(name)=1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(name)=1">
               <xsl:attribute name="id">err-elem-cit-thesis-2-3</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-thesis-2-3]
        Each thesis citation must have one and only one author.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has a thesis citation 
        with <xsl:text/>
                  <xsl:value-of select="count(name)"/>
                  <xsl:text/> authors.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M429"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M429"/>
   <xsl:template match="@*|node()" priority="-2" mode="M429">
      <xsl:apply-templates select="*" mode="M429"/>
   </xsl:template>

   <!--PATTERN elem-citation-thesis-article-title-pattern-->


	  <!--RULE elem-citation-thesis-article-title-->
   <xsl:template match="element-citation[@publication-type='thesis']/article-title" priority="1000" mode="M430">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(*) = count(sub|sup|italic)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(*) = count(sub|sup|italic)">
               <xsl:attribute name="id">err-elem-cit-thesis-8-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-thesis-8-2]
        An &lt;article-title&gt; element in a reference may contain characters and &lt;italic&gt;, &lt;sub&gt;, and &lt;sup&gt;. 
        No other elements are allowed.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' does not meet this requirement.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M430"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M430"/>
   <xsl:template match="@*|node()" priority="-2" mode="M430">
      <xsl:apply-templates select="*" mode="M430"/>
   </xsl:template>

   <!--PATTERN elem-citation-thesis-publisher-name-pattern-->


	  <!--RULE elem-citation-thesis-publisher-name-->
   <xsl:template match="element-citation[@publication-type='thesis']/publisher-name" priority="1000" mode="M431">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(*)=0"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(*)=0">
               <xsl:attribute name="id">err-elem-cit-thesis-9-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-thesis-9-2]
        No elements are allowed inside &lt;publisher-name&gt;.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has child elements within the
        &lt;publisher-name&gt; element.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M431"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M431"/>
   <xsl:template match="@*|node()" priority="-2" mode="M431">
      <xsl:apply-templates select="*" mode="M431"/>
   </xsl:template>

   <!--PATTERN elem-citation-thesis-publisher-loc-pattern-->


	  <!--RULE elem-citation-thesis-publisher-loc-->
   <xsl:template match="element-citation[@publication-type='thesis']/publisher-loc" priority="1000" mode="M432">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(*)=0"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(*)=0">
               <xsl:attribute name="id">err-elem-cit-thesis-10-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-thesis-10-2]
        No elements are allowed inside &lt;publisher-loc&gt;.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has child elements within the
        &lt;publisher-loc&gt; element.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M432"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M432"/>
   <xsl:template match="@*|node()" priority="-2" mode="M432">
      <xsl:apply-templates select="*" mode="M432"/>
   </xsl:template>

   <!--PATTERN elem-citation-thesis-pub-id-pattern-->


	  <!--RULE elem-citation-thesis-pub-id-->
   <xsl:template match="element-citation[@publication-type='thesis']/pub-id" priority="1000" mode="M433">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@pub-id-type='doi'"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@pub-id-type='doi'">
               <xsl:attribute name="id">err-elem-cit-thesis-11-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-thesis-11-2]
        The only allowed pub-id type is 'doi'.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has a pub-id type of 
        '<xsl:text/>
                  <xsl:value-of select="@pub-id-type"/>
                  <xsl:text/>'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M433"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M433"/>
   <xsl:template match="@*|node()" priority="-2" mode="M433">
      <xsl:apply-templates select="*" mode="M433"/>
   </xsl:template>

   <!--PATTERN gen-das-tests-pattern-->


	  <!--RULE gen-das-tests-->
   <xsl:template match="sec[@sec-type='data-availability']//element-citation[@publication-type='data']" priority="1000" mode="M434">
      <xsl:variable name="pos" select="count(ancestor::sec[@sec-type='data-availability']//element-citation[@publication-type='data']) - count(following::element-citation[@publication-type='data' and ancestor::sec[@sec-type='data-availability']])"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(person-group[@person-group-type='author'])=1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(person-group[@person-group-type='author'])=1">
               <xsl:attribute name="id">final-das-elem-person-group-1</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/data-availability#final-das-elem-person-group-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[final-das-elem-person-group-1] The reference in position <xsl:text/>
                  <xsl:value-of select="$pos"/>
                  <xsl:text/> of the data availability section does not have any authors (no person-group[@person-group-type='author']). Please ensure to add them.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="count(person-group) gt 1">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(person-group) gt 1">
            <xsl:attribute name="id">das-elem-person-group-2</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/data-availability#das-elem-person-group-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[das-elem-person-group-2] The reference in position <xsl:text/>
               <xsl:value-of select="$pos"/>
               <xsl:text/> of the data availability has <xsl:text/>
               <xsl:value-of select="count(person-group)"/>
               <xsl:text/> person-group elements, which is incorrect.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="(count(person-group[@person-group-type='author']/name)=0) and (count(person-group[@person-group-type='author']/collab)=0)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(count(person-group[@person-group-type='author']/name)=0) and (count(person-group[@person-group-type='author']/collab)=0)">
            <xsl:attribute name="id">final-das-elem-person-1</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/data-availability#final-das-elem-person-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[final-das-elem-person-1] The reference in position <xsl:text/>
               <xsl:value-of select="$pos"/>
               <xsl:text/> of the data availability section does not have any authors (person-group[@person-group-type='author']). Please ensure to add them in.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(data-title)=1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(data-title)=1">
               <xsl:attribute name="id">final-das-elem-data-title-1</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/data-availability#final-das-elem-data-title-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[final-das-elem-data-title-1] The reference in position <xsl:text/>
                  <xsl:value-of select="$pos"/>
                  <xsl:text/> of the data availability section does not have a title (no data-title). Please ensure to add it in.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(source)=1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(source)=1">
               <xsl:attribute name="id">final-das-elem-source-1</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/data-availability#final-das-elem-source-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[final-das-elem-source-1] The reference in position <xsl:text/>
                  <xsl:value-of select="$pos"/>
                  <xsl:text/> of the data availability section does not have a database name (no source). Please ensure to add it in.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(pub-id)=1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(pub-id)=1">
               <xsl:attribute name="id">final-das-elem-pub-id-1</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/data-availability#final-das-elem-pub-id-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[final-das-elem-pub-id-1] The reference in position <xsl:text/>
                  <xsl:value-of select="$pos"/>
                  <xsl:text/> of the data availability section does not have an identifier (no pub-id). Please ensure to add it in.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="normalize-space(pub-id)=''">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="normalize-space(pub-id)=''">
            <xsl:attribute name="id">final-das-elem-pub-id-2</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/data-availability#final-das-elem-pub-id-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[final-das-elem-pub-id-2] The reference in position <xsl:text/>
               <xsl:value-of select="$pos"/>
               <xsl:text/> of the data availability section does not have an id (pub-id is empty). Please ensure to add it in.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(year)=1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(year)=1">
               <xsl:attribute name="id">final-das-elem-year-1</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/data-availability#final-das-elem-year-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[final-das-elem-year-1] The reference in position <xsl:text/>
                  <xsl:value-of select="$pos"/>
                  <xsl:text/> of the data availability section does not have a year. Please ensure to add it in.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@specific-use"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@specific-use">
               <xsl:attribute name="id">das-elem-cit-1</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/data-availability#das-elem-cit-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[das-elem-cit-1] Every reference in the data availability section must have an @specific-use. The reference in position <xsl:text/>
                  <xsl:value-of select="$pos"/>
                  <xsl:text/> does not.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="@specific-use and not(@specific-use=('isSupplementedBy','references'))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@specific-use and not(@specific-use=('isSupplementedBy','references'))">
            <xsl:attribute name="id">das-elem-cit-2</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/data-availability#das-elem-cit-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[das-elem-cit-2] The reference in position <xsl:text/>
               <xsl:value-of select="$pos"/>
               <xsl:text/> of the data availability section has a @specific-use value of <xsl:text/>
               <xsl:value-of select="@specific-use"/>
               <xsl:text/>, which is not allowed. It must be 'isSupplementedBy' or 'references'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="pub-id[1]/@xlink:href = preceding::element-citation[(@publication-type='data') and ancestor::sec[@sec-type='data-availability']]/pub-id[1]/@xlink:href">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="pub-id[1]/@xlink:href = preceding::element-citation[(@publication-type='data') and ancestor::sec[@sec-type='data-availability']]/pub-id[1]/@xlink:href">
            <xsl:attribute name="id">final-das-elem-cit-3</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/data-availability#final-das-elem-cit-3</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[final-das-elem-cit-3] The reference in position <xsl:text/>
               <xsl:value-of select="$pos"/>
               <xsl:text/> of the data availability section has a link (<xsl:text/>
               <xsl:value-of select="pub-id[1]/@xlink:href"/>
               <xsl:text/>) which is the same as another dataset reference in that section. Dataset reference links should be distinct.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="pub-id[1] = preceding::element-citation[(@publication-type='data') and ancestor::sec[@sec-type='data-availability']]/pub-id[1]">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="pub-id[1] = preceding::element-citation[(@publication-type='data') and ancestor::sec[@sec-type='data-availability']]/pub-id[1]">
            <xsl:attribute name="id">das-elem-cit-4</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/data-availability#das-elem-cit-4</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[das-elem-cit-4] The reference in position <xsl:text/>
               <xsl:value-of select="$pos"/>
               <xsl:text/> of the data availability section has a pub-id (<xsl:text/>
               <xsl:value-of select="pub-id[1]"/>
               <xsl:text/>) which is the same as another dataset reference in that section. This is very likely incorrect. Dataset reference pub-id should be distinct.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="pub-id[1] = following::element-citation[ancestor::ref-list]/pub-id[1]">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="pub-id[1] = following::element-citation[ancestor::ref-list]/pub-id[1]">
            <xsl:attribute name="id">das-elem-cit-5</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/data-availability#das-elem-cit-5</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[das-elem-cit-5] The reference in position <xsl:text/>
               <xsl:value-of select="$pos"/>
               <xsl:text/> of the data availability section has a pub-id (<xsl:text/>
               <xsl:value-of select="pub-id[1]"/>
               <xsl:text/>) which is the same as in another reference in the reference list. Is the same reference in both the reference list and data availability section?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="pub-id and ext-link">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="pub-id and ext-link">
            <xsl:attribute name="id">das-elem-cit-6</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[das-elem-cit-6] The reference in position <xsl:text/>
               <xsl:value-of select="$pos"/>
               <xsl:text/> of the data availability section has both a pub-id (<xsl:text/>
               <xsl:value-of select="pub-id[1]"/>
               <xsl:text/>) and an ext-link (<xsl:text/>
               <xsl:value-of select="ext-link[1]"/>
               <xsl:text/>), which is not allowed.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M434"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M434"/>
   <xsl:template match="@*|node()" priority="-2" mode="M434">
      <xsl:apply-templates select="*" mode="M434"/>
   </xsl:template>

   <!--PATTERN das-elem-citation-data-pub-id-pattern-->


	  <!--RULE das-elem-citation-data-pub-id-->
   <xsl:template match="sec[@sec-type='data-availability']//element-citation[@publication-type='data']/pub-id" priority="1000" mode="M435">

		<!--REPORT error-->
      <xsl:if test="normalize-space(.)!='' and not(@pub-id-type=('accession', 'doi'))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="normalize-space(.)!='' and not(@pub-id-type=('accession', 'doi'))">
            <xsl:attribute name="id">final-das-pub-id-1</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/data-availability#final-das-pub-id-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[final-das-pub-id-1] Each pub-id element must have an @pub-id-type which is either accession or doi.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="@pub-id-type!='doi' and normalize-space(.)!='' and (not(@xlink:href) or (normalize-space(@xlink:href)=''))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@pub-id-type!='doi' and normalize-space(.)!='' and (not(@xlink:href) or (normalize-space(@xlink:href)=''))">
            <xsl:attribute name="id">final-das-pub-id-2</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/data-availability#final-das-pub-id-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[final-das-pub-id-2] Each pub-id element which is not a doi must have an @xlink-href (which is not empty).</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="@pub-id-type='doi' and (@xlink:href)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@pub-id-type='doi' and (@xlink:href)">
            <xsl:attribute name="id">das-pub-id-3</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[das-pub-id-3] A pub-id with the type doi does not need an xlink:href attribute. <xsl:text/>
               <xsl:value-of select="concat('xlink:href=&quot;',.,'&quot;')"/>
               <xsl:text/> should be removed from the pub-id containing <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M435"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M435"/>
   <xsl:template match="@*|node()" priority="-2" mode="M435">
      <xsl:apply-templates select="*" mode="M435"/>
   </xsl:template>

   <!--PATTERN das-elem-citation-children-pattern-->


	  <!--RULE das-elem-citation-children-->
   <xsl:template match="sec[@sec-type='data-availability']//element-citation[@publication-type='data']/source/*|sec[@sec-type='data-availability']//element-citation[@publication-type='data']/data-title/*" priority="1000" mode="M436">
      <xsl:variable name="allowed-elems" select="('sup','sub','italic')"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="name()=$allowed-elems"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="name()=$allowed-elems">
               <xsl:attribute name="id">das-elem-citation-child-1</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/data-availability#das-elem-citation-child-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[das-elem-citation-child-1] Reference in the data availability section has a <xsl:text/>
                  <xsl:value-of select="name()"/>
                  <xsl:text/> element in a <xsl:text/>
                  <xsl:value-of select="parent::*/name()"/>
                  <xsl:text/> element which is not allowed.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M436"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M436"/>
   <xsl:template match="@*|node()" priority="-2" mode="M436">
      <xsl:apply-templates select="*" mode="M436"/>
   </xsl:template>

   <!--PATTERN das-elem-citation-year-tests-pattern-->


	  <!--RULE das-elem-citation-year-tests-->
   <xsl:template match="sec[@sec-type='data-availability']//element-citation[@publication-type='data']/year" priority="1000" mode="M437">
      <xsl:variable name="digits" select="replace(.,'[^\d]','')"/>

		    <!--REPORT error-->
      <xsl:if test="(.!='') and (@iso-8601-date!=$digits)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(.!='') and (@iso-8601-date!=$digits)">
            <xsl:attribute name="id">das-elem-citation-year-1</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/data-availability#das-elem-citation-year-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[das-elem-citation-year-1] Every year in a reference must have an @iso-8601-date attribute equal to the numbers in the year. Reference with id <xsl:text/>
               <xsl:value-of select="parent::*/@id"/>
               <xsl:text/> has a year '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>' but an @iso-8601-date '<xsl:text/>
               <xsl:value-of select="@iso-8601-date"/>
               <xsl:text/>'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="normalize-space(.)=''">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="normalize-space(.)=''">
            <xsl:attribute name="id">final-das-elem-citation-year-2</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/data-availability#final-das-elem-citation-year-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[final-das-elem-citation-year-2] Reference with id <xsl:text/>
               <xsl:value-of select="parent::*/@id"/>
               <xsl:text/> has an empty year. Please ensure to add it in.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M437"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M437"/>
   <xsl:template match="@*|node()" priority="-2" mode="M437">
      <xsl:apply-templates select="*" mode="M437"/>
   </xsl:template>

   <!--PATTERN pub-id-tests-pattern-->


	  <!--RULE pub-id-tests-->
   <xsl:template match="element-citation/pub-id" priority="1000" mode="M438">

		<!--REPORT error-->
      <xsl:if test="(@xlink:href) and not(matches(@xlink:href,'^http[s]?://|^s?ftp://'))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(@xlink:href) and not(matches(@xlink:href,'^http[s]?://|^s?ftp://'))">
            <xsl:attribute name="id">final-pub-id-test-1</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#final-pub-id-test-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[final-pub-id-test-1] @xlink:href must start with an http:// or ftp:// protocol. - <xsl:text/>
               <xsl:value-of select="@xlink:href"/>
               <xsl:text/> does not.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="(@pub-id-type='doi') and not(matches(.,'^10\.\d{4,9}/[-._;\+()#/:A-Za-z0-9&lt;&gt;\[\]]+$'))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(@pub-id-type='doi') and not(matches(.,'^10\.\d{4,9}/[-._;\+()#/:A-Za-z0-9&lt;&gt;\[\]]+$'))">
            <xsl:attribute name="id">final-pub-id-test-2</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#final-pub-id-test-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[final-pub-id-test-2] pub-id is tagged as a doi, but it is not one - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="(@pub-id-type='pmid') and not(matches(.,'^\d{3,10}$'))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(@pub-id-type='pmid') and not(matches(.,'^\d{3,10}$'))">
            <xsl:attribute name="id">pub-id-test-3</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#pub-id-test-3</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[pub-id-test-3] pub-id is tagged as a pmid, but it is not a number made up of between 3 and 10 digits - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="(@pub-id-type != 'doi') and matches(@xlink:href,'https?://(dx.doi.org|doi.org)/')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(@pub-id-type != 'doi') and matches(@xlink:href,'https?://(dx.doi.org|doi.org)/')">
            <xsl:attribute name="id">pub-id-doi-test-1</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#pub-id-doi-test-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[pub-id-doi-test-1] pub-id has a doi link - <xsl:text/>
               <xsl:value-of select="@xlink:href"/>
               <xsl:text/> - but its pub-id-type is <xsl:text/>
               <xsl:value-of select="@pub-id-type"/>
               <xsl:text/> instead of doi.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(.,' ')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,' ')">
            <xsl:attribute name="id">pub-id-test-4</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#pub-id-test-4</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[pub-id-test-4] pub id contains whitespace - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> - which is very likely to be incorrect.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="ends-with(.,'.')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="ends-with(.,'.')">
            <xsl:attribute name="id">pub-id-test-5</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#pub-id-test-5</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[pub-id-test-5] <xsl:text/>
               <xsl:value-of select="@pub-id-type"/>
               <xsl:text/> pub-id ends with a full stop - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> - which is not correct. Please remove the full stop.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches(.,'\p{Zs}$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'\p{Zs}$')">
            <xsl:attribute name="id">pub-id-test-6</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[pub-id-test-6] <xsl:text/>
               <xsl:value-of select="@pub-id-type"/>
               <xsl:text/> pub-id ends with space(s) which is incorrect - '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M438"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M438"/>
   <xsl:template match="@*|node()" priority="-2" mode="M438">
      <xsl:apply-templates select="*" mode="M438"/>
   </xsl:template>

   <!--PATTERN pub-id-xlink-href-tests-pattern-->


	  <!--RULE pub-id-xlink-href-tests-->
   <xsl:template match="pub-id[@xlink:href]" priority="1000" mode="M439">

		<!--ASSERT warning-->
      <xsl:choose>
         <xsl:when test="matches(@xlink:href,'^https?:..(www\.)?[-a-zA-Z0-9@:%.,_\+~#=!]{2,256}\.[a-z]{2,6}([-a-zA-Z0-9@:;%,_\\(\)+.~#?!&amp;//=]*)$|^ftp://.')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(@xlink:href,'^https?:..(www\.)?[-a-zA-Z0-9@:%.,_\+~#=!]{2,256}\.[a-z]{2,6}([-a-zA-Z0-9@:;%,_\\(\)+.~#?!&amp;//=]*)$|^ftp://.')">
               <xsl:attribute name="id">pub-id-url-conformance-test</xsl:attribute>
               <xsl:attribute name="role">warning</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[pub-id-url-conformance-test] @xlink:href doesn't look like a URL - '<xsl:text/>
                  <xsl:value-of select="@xlink:href"/>
                  <xsl:text/>'. Is this correct?</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT warning-->
      <xsl:if test="matches(@xlink:href,'^(ftp|sftp)://\S+:\S+@')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(@xlink:href,'^(ftp|sftp)://\S+:\S+@')">
            <xsl:attribute name="id">ftp-credentials-flag-2</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[ftp-credentials-flag-2] @xlink:href contains what looks like a link to an FTP site which contains credentials (username and password) - '<xsl:text/>
               <xsl:value-of select="@xlink:href"/>
               <xsl:text/>'. If the link without credentials works (<xsl:text/>
               <xsl:value-of select="concat(substring-before(@xlink:href,'://'),'://',substring-after(@xlink:href,'@'))"/>
               <xsl:text/>), then please replace it with that and notify the authors that you have done so. If the link without credentials does not work, please query with the authors in order to obtain a link without credentials.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches(@xlink:href,'\.$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(@xlink:href,'\.$')">
            <xsl:attribute name="id">pub-id-url-fullstop-report</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[pub-id-url-fullstop-report] '<xsl:text/>
               <xsl:value-of select="@xlink:href"/>
               <xsl:text/>' - Link ends in a full stop which is incorrect.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches(@xlink:href,'[\p{Zs}]')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(@xlink:href,'[\p{Zs}]')">
            <xsl:attribute name="id">pub-id-url-space-report</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[pub-id-url-space-report] '<xsl:text/>
               <xsl:value-of select="@xlink:href"/>
               <xsl:text/>' - Link contains a space which is incorrect.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M439"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M439"/>
   <xsl:template match="@*|node()" priority="-2" mode="M439">
      <xsl:apply-templates select="*" mode="M439"/>
   </xsl:template>

   <!--PATTERN feature-title-tests-pattern-->


	  <!--RULE feature-title-tests-->
   <xsl:template match="article-meta[descendant::subj-group[@subj-group-type='display-channel']/subject = $features-subj]//title-group/article-title" priority="1000" mode="M440">
      <xsl:variable name="sub-disp-channel" select="ancestor::article-meta/article-categories/subj-group[@subj-group-type='sub-display-channel']/subject[1]"/>

		    <!--REPORT error-->
      <xsl:if test="(count(ancestor::article-meta/article-categories/subj-group[@subj-group-type='sub-display-channel']/subject) = 1) and starts-with(.,$sub-disp-channel)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(count(ancestor::article-meta/article-categories/subj-group[@subj-group-type='sub-display-channel']/subject) = 1) and starts-with(.,$sub-disp-channel)">
            <xsl:attribute name="id">feature-title-test-1</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/feature-content#feature-title-test-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[feature-title-test-1] title starts with the sub-display-channel. This is certainly incorrect.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M440"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M440"/>
   <xsl:template match="@*|node()" priority="-2" mode="M440">
      <xsl:apply-templates select="*" mode="M440"/>
   </xsl:template>

   <!--PATTERN feature-abstract-tests-pattern-->


	  <!--RULE feature-abstract-tests-->
   <xsl:template match="front//abstract[@abstract-type='executive-summary']" priority="1000" mode="M441">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(title) = 1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(title) = 1">
               <xsl:attribute name="id">feature-abstract-test-1</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/article-structure/abstract-digest-impact-statement#feature-abstract-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[feature-abstract-test-1] abstract must contain one and only one title.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="title = 'eLife digest'"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="title = 'eLife digest'">
               <xsl:attribute name="id">feature-abstract-test-2</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/article-structure/abstract-digest-impact-statement#feature-abstract-test-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[feature-abstract-test-2] abstract title must contain 'eLife digest'. Possible superfluous characters - <xsl:text/>
                  <xsl:value-of select="replace(title,'eLife digest','')"/>
                  <xsl:text/>
               </svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M441"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M441"/>
   <xsl:template match="@*|node()" priority="-2" mode="M441">
      <xsl:apply-templates select="*" mode="M441"/>
   </xsl:template>

   <!--PATTERN digest-tests-pattern-->


	  <!--RULE digest-tests-->
   <xsl:template match="front//abstract[@abstract-type='executive-summary']/p" priority="1000" mode="M442">

		<!--REPORT warning-->
      <xsl:if test="matches(.,'^\p{Ll}')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'^\p{Ll}')">
            <xsl:attribute name="id">digest-test-1</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/article-structure/abstract-digest-impact-statement#digest-test-1</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[digest-test-1] digest paragraph starts with a lowercase letter. Is that correct? Or has a paragraph been incorrectly split into two?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches(.,'\[[Oo][Kk]\??\]')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'\[[Oo][Kk]\??\]')">
            <xsl:attribute name="id">final-digest-test-2</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/article-structure/abstract-digest-impact-statement#final-digest-test-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[final-digest-test-2] digest paragraph contains [OK] or [OK?] which should be removed - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches(.,'\[[Qq][Uu][Ee][Rr][Yy]')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'\[[Qq][Uu][Ee][Rr][Yy]')">
            <xsl:attribute name="id">final-digest-query-test</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[final-digest-query-test] <xsl:text/>
               <xsl:value-of select="name()"/>
               <xsl:text/> element contains [Query] or [QUERY] which should be removed - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M442"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M442"/>
   <xsl:template match="@*|node()" priority="-2" mode="M442">
      <xsl:apply-templates select="*" mode="M442"/>
   </xsl:template>

   <!--PATTERN feature-subj-tests-pattern-->


	  <!--RULE feature-subj-tests-->
   <xsl:template match="subj-group[@subj-group-type='sub-display-channel']/subject" priority="1000" mode="M443">
      <xsl:variable name="token1" select="substring-before(.,' ')"/>
      <xsl:variable name="token2" select="substring-after(.,$token1)"/>

		    <!--REPORT error-->
      <xsl:if test=". != e:titleCase(.)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test=". != e:titleCase(.)">
            <xsl:attribute name="id">feature-subj-test-2</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/feature-content#feature-subj-test-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[feature-subj-test-2] The content of the sub-display-channel should be in title case - <xsl:text/>
               <xsl:value-of select="e:titleCase(.)"/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="ends-with(.,':')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="ends-with(.,':')">
            <xsl:attribute name="id">feature-subj-test-3</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/feature-content#feature-subj-test-3</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[feature-subj-test-3] sub-display-channel ends with a colon. This is incorrect.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="preceding-sibling::subject">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="preceding-sibling::subject">
            <xsl:attribute name="id">feature-subj-test-4</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/feature-content#feature-subj-test-4</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[feature-subj-test-4] There is more than one sub-display-channel subject. This is incorrect.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M443"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M443"/>
   <xsl:template match="@*|node()" priority="-2" mode="M443">
      <xsl:apply-templates select="*" mode="M443"/>
   </xsl:template>

   <!--PATTERN feature-article-category-tests-pattern-->


	  <!--RULE feature-article-category-tests-->
   <xsl:template match="article-categories[subj-group[@subj-group-type='display-channel']/subject = $features-subj]" priority="1000" mode="M444">
      <xsl:variable name="count" select="count(subj-group[@subj-group-type='sub-display-channel'])"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="$count = 1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="$count = 1">
               <xsl:attribute name="id">feature-article-category-test-1</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/feature-content#feature-article-category-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[feature-article-category-test-1] article categories for <xsl:text/>
                  <xsl:value-of select="subj-group[@subj-group-type='display-channel']/subject"/>
                  <xsl:text/>s must contain one, and only one, subj-group[@subj-group-type='sub-display-channel']</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M444"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M444"/>
   <xsl:template match="@*|node()" priority="-2" mode="M444">
      <xsl:apply-templates select="*" mode="M444"/>
   </xsl:template>

   <!--PATTERN feature-author-tests-pattern-->


	  <!--RULE feature-author-tests-->
   <xsl:template match="article//article-meta[article-categories//subj-group[@subj-group-type='display-channel']/subject=$features-subj]//contrib[@contrib-type='author']" priority="1000" mode="M445">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="collab or ancestor::collab or bio"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="collab or ancestor::collab or bio">
               <xsl:attribute name="id">feature-author-test-1</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/feature-content#feature-author-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[feature-author-test-1] Author must contain child bio in feature content.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M445"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M445"/>
   <xsl:template match="@*|node()" priority="-2" mode="M445">
      <xsl:apply-templates select="*" mode="M445"/>
   </xsl:template>

   <!--PATTERN feature-bio-tests-pattern-->


	  <!--RULE feature-bio-tests-->
   <xsl:template match="article//article-meta[article-categories//subj-group[@subj-group-type='display-channel']/subject=$features-subj]//contrib[@contrib-type='author']/bio" priority="1000" mode="M446">
      <xsl:variable name="name" select="e:get-name(parent::contrib/name[1])"/>
      <xsl:variable name="xref-rid" select="parent::contrib/xref[@ref-type='aff']/@rid"/>
      <xsl:variable name="aff" select="if (parent::contrib/aff) then parent::contrib/aff[1]/institution[not(@content-type)][1]/normalize-space(.)        else ancestor::contrib-group/aff[@id/string() = $xref-rid]/institution[not(@content-type)][1]/normalize-space(.)"/>
      <xsl:variable name="aff-tokens" select="for $y in $aff return tokenize($y,', ')"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="p[1]/bold = $name"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="p[1]/bold = $name">
               <xsl:attribute name="id">feature-bio-test-1</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/feature-content#feature-bio-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[feature-bio-test-1] bio must contain a bold element that contains the name of the author - <xsl:text/>
                  <xsl:value-of select="$name"/>
                  <xsl:text/>.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT warning-->
      <xsl:if test="if (count($aff) &gt; 1) then ()        else not(contains(.,$aff))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="if (count($aff) &gt; 1) then () else not(contains(.,$aff))">
            <xsl:attribute name="id">feature-bio-test-2</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/feature-content#feature-bio-test-2</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[feature-bio-test-2] bio does not contain the institution text as it appears in their affiliation ('<xsl:text/>
               <xsl:value-of select="$aff"/>
               <xsl:text/>'). Is this correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="(count($aff) &gt; 1) and (some $x in $aff-tokens satisfies not(contains(.,$x)))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(count($aff) &gt; 1) and (some $x in $aff-tokens satisfies not(contains(.,$x)))">
            <xsl:attribute name="id">feature-bio-test-6</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/feature-content#feature-bio-test-6</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[feature-bio-test-6] Some of the text from <xsl:text/>
               <xsl:value-of select="$name"/>
               <xsl:text/>'s affiliations does not appear in their bio - <xsl:text/>
               <xsl:value-of select="string-join(for $x in $aff-tokens return if (contains(.,$x)) then () else concat('&quot;',$x,'&quot;'),' and ')"/>
               <xsl:text/>. Is this correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches(p[1],'\.$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(p[1],'\.$')">
            <xsl:attribute name="id">feature-bio-test-3</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/feature-content#feature-bio-test-3</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[feature-bio-test-3] bio cannot end  with a full stop - '<xsl:text/>
               <xsl:value-of select="p[1]"/>
               <xsl:text/>'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="(count(p) = 1)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(count(p) = 1)">
               <xsl:attribute name="id">feature-bio-test-4</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/feature-content#feature-bio-test-4</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[feature-bio-test-4] One and only 1 &lt;p&gt; is allowed as a child of bio. <xsl:text/>
                  <xsl:value-of select="."/>
                  <xsl:text/>
               </svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="*[local-name()!='p']">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="*[local-name()!='p']">
            <xsl:attribute name="id">feature-bio-test-5</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/feature-content#feature-bio-test-5</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[feature-bio-test-5] <xsl:text/>
               <xsl:value-of select="*[local-name()!='p'][1]/local-name()"/>
               <xsl:text/> is not allowed as a child of &lt;bio&gt;. - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M446"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M446"/>
   <xsl:template match="@*|node()" priority="-2" mode="M446">
      <xsl:apply-templates select="*" mode="M446"/>
   </xsl:template>

   <!--PATTERN feature-template-tests-pattern-->


	  <!--RULE feature-template-tests-->
   <xsl:template match="article[descendant::article-meta/article-categories/subj-group[@subj-group-type='display-channel']/subject = $features-subj]" priority="1000" mode="M447">
      <xsl:variable name="template" select="descendant::article-meta/custom-meta-group/custom-meta[meta-name='Template']/meta-value[1]"/>
      <xsl:variable name="type" select="descendant::article-meta/article-categories/subj-group[@subj-group-type='display-channel']/subject[1]"/>

		    <!--REPORT error-->
      <xsl:if test="($template = ('1','2','3')) and child::sub-article">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="($template = ('1','2','3')) and child::sub-article">
            <xsl:attribute name="id">feature-template-test-1</xsl:attribute>
            <xsl:attribute name="flag">dl-ar</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/feature-content#feature-template-test-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[feature-template-test-1] <xsl:text/>
               <xsl:value-of select="$type"/>
               <xsl:text/> is a template <xsl:text/>
               <xsl:value-of select="$template"/>
               <xsl:text/> but it has a decision letter or author response, which cannot be correct, as only template 5s are allowed these.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="($template = '5') and not(@article-type='research-article')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="($template = '5') and not(@article-type='research-article')">
            <xsl:attribute name="id">feature-template-test-2</xsl:attribute>
            <xsl:attribute name="flag">dl-ar</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/feature-content#feature-template-test-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[feature-template-test-2] <xsl:text/>
               <xsl:value-of select="$type"/>
               <xsl:text/> is a template <xsl:text/>
               <xsl:value-of select="$template"/>
               <xsl:text/> so the article element must have a @article-type="research-article". Instead the @article-type="<xsl:text/>
               <xsl:value-of select="@article-type"/>
               <xsl:text/>".</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="($template = '5') and not(child::sub-article[@article-type='decision-letter'])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="($template = '5') and not(child::sub-article[@article-type='decision-letter'])">
            <xsl:attribute name="id">feature-template-test-3</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/feature-content#feature-template-test-3</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[feature-template-test-3] <xsl:text/>
               <xsl:value-of select="$type"/>
               <xsl:text/> is a template <xsl:text/>
               <xsl:value-of select="$template"/>
               <xsl:text/> but it does not (currently) have a decision letter. Is that OK?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="($template = '5') and not(child::sub-article[@article-type='reply'])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="($template = '5') and not(child::sub-article[@article-type='reply'])">
            <xsl:attribute name="id">feature-template-test-4</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/feature-content#feature-template-test-4</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[feature-template-test-4] <xsl:text/>
               <xsl:value-of select="$type"/>
               <xsl:text/> is a template <xsl:text/>
               <xsl:value-of select="$template"/>
               <xsl:text/> but it does not (currently) have an author response. Is that OK?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="front/article-meta/contrib-group[@content-type='section'] and ($template != '5')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="front/article-meta/contrib-group[@content-type='section'] and ($template != '5')">
            <xsl:attribute name="id">feature-templates-no-bre</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/feature-content#feature-templates-no-bre</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[feature-templates-no-bre] <xsl:text/>
               <xsl:value-of select="$type"/>
               <xsl:text/> is a template <xsl:text/>
               <xsl:value-of select="$template"/>
               <xsl:text/>, which means that it should not have any BREs. This <xsl:text/>
               <xsl:value-of select="$type"/>
               <xsl:text/> has <xsl:text/>
               <xsl:value-of select="           string-join(           for $x in front/article-meta/contrib-group[@content-type='section']/contrib           return concat(e:get-name($x/name[1]),' as ',$x/role[1])           ,           ' and '           )           "/>
               <xsl:text/>. Please remove any senior/reviewing editors.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="back/fn-group[@content-type='author-contribution'] and $template = '1'">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="back/fn-group[@content-type='author-contribution'] and $template = '1'">
            <xsl:attribute name="id">feature-templates-author-cont</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/feature-content#feature-templates-author-cont</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[feature-templates-author-cont] <xsl:text/>
               <xsl:value-of select="$type"/>
               <xsl:text/> articles should not have any Author contributions. This <xsl:text/>
               <xsl:value-of select="$type"/>
               <xsl:text/> has <xsl:text/>
               <xsl:value-of select="           string-join(for $x in back/fn-group[@content-type='author-contribution']/fn           return concat('&quot;', $x,'&quot;')           ,           '; '           )           "/>
               <xsl:text/>. Please remove the author contributions.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="back/fn-group[@content-type='author-contribution'] and $template = '2'">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="back/fn-group[@content-type='author-contribution'] and $template = '2'">
            <xsl:attribute name="id">feature-templates-author-cont-3</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/feature-content#feature-templates-author-cont</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[feature-templates-author-cont-3] <xsl:text/>
               <xsl:value-of select="$type"/>
               <xsl:text/> articles should not usually have any Author contributions. This <xsl:text/>
               <xsl:value-of select="$type"/>
               <xsl:text/> has <xsl:text/>
               <xsl:value-of select="          string-join(for $x in back/fn-group[@content-type='author-contribution']/fn          return concat('&quot;', $x,'&quot;')          ,          '; '          )          "/>
               <xsl:text/>. Are they required?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="$template = ('3','4') and not(back/fn-group[@content-type='author-contribution'])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="$template = ('3','4') and not(back/fn-group[@content-type='author-contribution'])">
            <xsl:attribute name="id">final-feature-templates-author-cont-2</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/feature-content#final-feature-templates-author-cont-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[final-feature-templates-author-cont-2] <xsl:text/>
               <xsl:value-of select="$type"/>
               <xsl:text/>s should have Author contributions. This one does not. Exeter please check with the Production team who will check with the Features team.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M447"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M447"/>
   <xsl:template match="@*|node()" priority="-2" mode="M447">
      <xsl:apply-templates select="*" mode="M447"/>
   </xsl:template>

   <!--PATTERN insight-asbtract-tests-pattern-->


	  <!--RULE insight-asbtract-tests-->
   <xsl:template match="article[@article-type='article-commentary']//article-meta/abstract" priority="1000" mode="M448">
      <xsl:variable name="impact-statement" select="parent::article-meta//custom-meta[meta-name='Author impact statement']/meta-value[1]"/>
      <xsl:variable name="impact-statement-element-count" select="count(parent::article-meta//custom-meta[meta-name='Author impact statement']/meta-value[1]/*)"/>

		    <!--ASSERT warning-->
      <xsl:choose>
         <xsl:when test=". = $impact-statement"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test=". = $impact-statement">
               <xsl:attribute name="id">insight-abstract-impact-test-1</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/article-structure/abstract-digest-impact-statement#insight-abstract-impact-test-1</xsl:attribute>
               <xsl:attribute name="role">warning</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[insight-abstract-impact-test-1] In insights, abstracts must be the same as impact statements. Here the abstract reads "<xsl:text/>
                  <xsl:value-of select="."/>
                  <xsl:text/>", whereas the impact statement reads "<xsl:text/>
                  <xsl:value-of select="$impact-statement"/>
                  <xsl:text/>".</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT warning-->
      <xsl:choose>
         <xsl:when test="count(p/*) = $impact-statement-element-count"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(p/*) = $impact-statement-element-count">
               <xsl:attribute name="id">insight-abstract-impact-test-2</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/article-structure/abstract-digest-impact-statement#insight-abstract-impact-test-2</xsl:attribute>
               <xsl:attribute name="role">warning</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[insight-abstract-impact-test-2] In insights, abstracts must be the same as impact statements. Here the abstract has <xsl:text/>
                  <xsl:value-of select="count(*)"/>
                  <xsl:text/> child element(s), whereas the impact statement has <xsl:text/>
                  <xsl:value-of select="$impact-statement-element-count"/>
                  <xsl:text/> child element(s). Check for possible missing formatting.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M448"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M448"/>
   <xsl:template match="@*|node()" priority="-2" mode="M448">
      <xsl:apply-templates select="*" mode="M448"/>
   </xsl:template>

   <!--PATTERN insight-related-article-tests-pattern-->


	  <!--RULE insight-related-article-tests-->
   <xsl:template match="article[@article-type='article-commentary']//article-meta/related-article" priority="1000" mode="M449">
      <xsl:variable name="doi" select="@xlink:href"/>
      <xsl:variable name="text" select="replace(ancestor::article/body/boxed-text[1],' ',' ')"/>
      <xsl:variable name="citation" select="for $x in ancestor::article//ref-list//element-citation[pub-id[@pub-id-type='doi']=$doi][1]        return replace(concat(        string-join(        for $y in $x/person-group[@person-group-type='author']/*        return if ($y/name()='name') then concat($y/surname,' ', $y/given-names)        else $y        ,', '),        '. ',        replace($x/year,'[^\d]',''),        '. ',        $x/article-title,        '. eLife ',        $x/volume,        ':',        $x/elocation-id,        '. doi: ',        $x/pub-id[@pub-id-type='doi']),' ',' ')"/>

		    <!--ASSERT warning-->
      <xsl:choose>
         <xsl:when test="contains($text,$citation)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains($text,$citation)">
               <xsl:attribute name="id">insight-box-test-1</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/feature-content#insight-box-test-1</xsl:attribute>
               <xsl:attribute name="role">warning</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[insight-box-test-1] A citation for related article <xsl:text/>
                  <xsl:value-of select="$doi"/>
                  <xsl:text/> is not included in the related-article box text in the body of the article. '<xsl:text/>
                  <xsl:value-of select="$citation"/>
                  <xsl:text/>' is not present (or is different to the relevant passage) in '<xsl:text/>
                  <xsl:value-of select="$text"/>
                  <xsl:text/>'. The following word(s) are in the boxed text but not in the citation: <xsl:text/>
                  <xsl:value-of select="string-join(e:insight-box($text,$citation)//*:item[@type='cite'],'; ')"/>
                  <xsl:text/>. The following word(s) are in the citation but not in the boxed text: <xsl:text/>
                  <xsl:value-of select="string-join(e:insight-box($text,$citation)//*:item[@type='box'],'; ')"/>
                  <xsl:text/>.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@related-article-type='commentary-article'"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@related-article-type='commentary-article'">
               <xsl:attribute name="id">insight-related-article-test-1</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/feature-content#insight-related-article-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[insight-related-article-test-1] Insight related article links must have the related-article-type 'commentary-article'. The link for <xsl:text/>
                  <xsl:value-of select="$doi"/>
                  <xsl:text/> has '<xsl:text/>
                  <xsl:value-of select="@related-article-type"/>
                  <xsl:text/>'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M449"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M449"/>
   <xsl:template match="@*|node()" priority="-2" mode="M449">
      <xsl:apply-templates select="*" mode="M449"/>
   </xsl:template>

   <!--PATTERN feature-comment-tests-pattern-->


	  <!--RULE feature-comment-tests-->
   <xsl:template match="article[descendant::article-meta[descendant::subj-group[@subj-group-type='display-channel']/subject = $features-subj]]//p|      article[descendant::article-meta[descendant::subj-group[@subj-group-type='display-channel']/subject = $features-subj]]//td|      article[descendant::article-meta[descendant::subj-group[@subj-group-type='display-channel']/subject = $features-subj]]//th" priority="1000" mode="M450">

		<!--REPORT error-->
      <xsl:if test="matches(.,'\[[Oo][Kk]\??\]')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'\[[Oo][Kk]\??\]')">
            <xsl:attribute name="id">final-feat-ok-test</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/feature-content#final-feat-ok-test</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[final-feat-ok-test] <xsl:text/>
               <xsl:value-of select="name()"/>
               <xsl:text/> element contains [OK] or [OK?] which should be removed - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches(.,'\[[Qq][Uu][Ee][Rr][Yy]')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'\[[Qq][Uu][Ee][Rr][Yy]')">
            <xsl:attribute name="id">final-feat-query-test</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/production-checklist#final-feat-query-test</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[final-feat-query-test] <xsl:text/>
               <xsl:value-of select="name()"/>
               <xsl:text/> element contains [Query] or [QUERY] which should be removed - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M450"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M450"/>
   <xsl:template match="@*|node()" priority="-2" mode="M450">
      <xsl:apply-templates select="*" mode="M450"/>
   </xsl:template>

   <!--PATTERN correction-tests-pattern-->


	  <!--RULE correction-tests-->
   <xsl:template match="article[@article-type = 'correction']" priority="1000" mode="M451">

		<!--REPORT error-->
      <xsl:if test="descendant::article-meta//aff">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="descendant::article-meta//aff">
            <xsl:attribute name="id">corr-aff-presence</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[corr-aff-presence] Correction notices should not contain affiliations.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="descendant::fn-group[@content-type='competing-interest']">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="descendant::fn-group[@content-type='competing-interest']">
            <xsl:attribute name="id">corr-COI-presence</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[corr-COI-presence] Correction notices should not contain competing interests.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="descendant::self-uri">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="descendant::self-uri">
            <xsl:attribute name="id">corr-self-uri-presence</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[corr-self-uri-presence] Correction notices should not contain a self-uri element (as the PDF is not published).</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="descendant::abstract">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="descendant::abstract">
            <xsl:attribute name="id">corr-abstract-presence</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/article-structure/abstract-digest-impact-statement#corr-abstract-presence</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[corr-abstract-presence] Correction notices should not contain abstracts.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="(back/sec[not(@sec-type='supplementary-material')]) or (count(back/sec) gt 1)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(back/sec[not(@sec-type='supplementary-material')]) or (count(back/sec) gt 1)">
            <xsl:attribute name="id">corr-back-sec</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[corr-back-sec] Correction notices should not contain any sections in the backmatter which are not for supplementary files.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="descendant::meta-name[text() = 'Author impact statement']">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="descendant::meta-name[text() = 'Author impact statement']">
            <xsl:attribute name="id">corr-impact-statement</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[corr-impact-statement] Correction notices should not contain an impact statement.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="descendant::contrib-group[@content-type='section']">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="descendant::contrib-group[@content-type='section']">
            <xsl:attribute name="id">corr-SE-BRE</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[corr-SE-BRE] Correction notices must not contain any Senior or Reviewing Editors.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M451"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M451"/>
   <xsl:template match="@*|node()" priority="-2" mode="M451">
      <xsl:apply-templates select="*" mode="M451"/>
   </xsl:template>

   <!--PATTERN retraction-tests-pattern-->


	  <!--RULE retraction-tests-->
   <xsl:template match="article[@article-type = ('retraction','expression-of-concern')]" priority="1000" mode="M452">
      <xsl:variable name="display-subject" select="article-meta//subj-group[@subj-group-type='display-channel']/subject[1]"/>

		    <!--REPORT error-->
      <xsl:if test="descendant::article-meta//aff">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="descendant::article-meta//aff">
            <xsl:attribute name="id">retr-aff-presence</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[retr-aff-presence] <xsl:text/>
               <xsl:value-of select="$display-subject"/>
               <xsl:text/> notices should not contain affiliations.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="descendant::fn-group[@content-type='competing-interest']">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="descendant::fn-group[@content-type='competing-interest']">
            <xsl:attribute name="id">retr-COI-presence</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[retr-COI-presence] <xsl:text/>
               <xsl:value-of select="$display-subject"/>
               <xsl:text/> notices should not contain competing interests.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="descendant::self-uri">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="descendant::self-uri">
            <xsl:attribute name="id">retr-self-uri-presence</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[retr-self-uri-presence] <xsl:text/>
               <xsl:value-of select="$display-subject"/>
               <xsl:text/> notices should not contain a self-uri element (as the PDF is not published).</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="descendant::abstract">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="descendant::abstract">
            <xsl:attribute name="id">retr-abstract-presence</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/article-structure/abstract-digest-impact-statement#retr-abstract-presence</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[retr-abstract-presence] <xsl:text/>
               <xsl:value-of select="$display-subject"/>
               <xsl:text/> notices should not contain abstracts.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="back/*">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="back/*">
            <xsl:attribute name="id">retr-back</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[retr-back] <xsl:text/>
               <xsl:value-of select="$display-subject"/>
               <xsl:text/> notices should not contain any content in the back.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="descendant::meta-name[text() = 'Author impact statement']">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="descendant::meta-name[text() = 'Author impact statement']">
            <xsl:attribute name="id">retr-impact-statement</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[retr-impact-statement] <xsl:text/>
               <xsl:value-of select="$display-subject"/>
               <xsl:text/> notices should not contain an impact statement.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="descendant::contrib-group[@content-type='section']">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="descendant::contrib-group[@content-type='section']">
            <xsl:attribute name="id">retr-SE-BRE</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[retr-SE-BRE] <xsl:text/>
               <xsl:value-of select="$display-subject"/>
               <xsl:text/> notices must not contain any Senior or Reviewing Editors.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M452"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M452"/>
   <xsl:template match="@*|node()" priority="-2" mode="M452">
      <xsl:apply-templates select="*" mode="M452"/>
   </xsl:template>

   <!--PATTERN gene-primer-sequence-pattern-->


	  <!--RULE gene-primer-sequence-->
   <xsl:template match="p[not(child::table-wrap)]" priority="1000" mode="M453">
      <xsl:variable name="count" select="count(descendant::named-content[@content-type='sequence'])"/>
      <xsl:variable name="text-tokens" select="for $x in tokenize(.,' ') return if (matches($x,'[ACGTacgt]{15,}')) then $x else ()"/>
      <xsl:variable name="text-count" select="count($text-tokens)"/>

		    <!--ASSERT warning-->
      <xsl:choose>
         <xsl:when test="($text-count le $count)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="($text-count le $count)">
               <xsl:attribute name="id">gene-primer-sequence-test</xsl:attribute>
               <xsl:attribute name="role">warning</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[gene-primer-sequence-test] p element contains what looks like an untagged primer or gene sequence - <xsl:text/>
                  <xsl:value-of select="string-join($text-tokens,', ')"/>
                  <xsl:text/>.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M453"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M453"/>
   <xsl:template match="@*|node()" priority="-2" mode="M453">
      <xsl:apply-templates select="*" mode="M453"/>
   </xsl:template>

   <!--PATTERN rrid-org-code-pattern-->


	  <!--RULE rrid-org-code-->
   <xsl:template match="p|td|th" priority="1000" mode="M454">
      <xsl:variable name="count" select="count(descendant::ext-link[matches(@xlink:href,'identifiers\.org/RRID/.*')])"/>
      <xsl:variable name="lc" select="lower-case(.)"/>
      <xsl:variable name="text-count" select="number(count(         for $x in tokenize(.,'RRID\p{Zs}?#?\p{Zs}?:|RRID AB_[\d]+|RRID CVCL_[\d]+|RRID SCR_[\d]+|RRID ISMR_JAX')         return $x)) -1"/>
      <xsl:variable name="t" select="replace($lc,'drosophila genetic resource center|bloomington drosophila stock center|drosophila genomics resource center','')"/>
      <xsl:variable name="code-text" select="string-join(for $x in tokenize(.,' ') return if (matches($x,'^--[a-z]+')) then $x else (),'; ')"/>
      <xsl:variable name="unequal-equal-text" select="string-join(for $x in tokenize(replace(.,'[&gt;&lt;]',''),' | ') return if (matches($x,'=$|^=') and not(matches($x,'^=$'))) then $x else (),'; ')"/>
      <xsl:variable name="link-strip-text" select="string-join(for $x in (*[not(matches(local-name(),'^ext-link$|^contrib-id$|^license_ref$|^institution-id$|^email$|^xref$|^monospace$'))]|text()) return $x,'')"/>
      <xsl:variable name="url-text" select="string-join(for $x in tokenize($link-strip-text,' ')         return   if (matches($x,'^https?:..(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}([-a-zA-Z0-9@:%_\+.~#?&amp;//=]*)|^ftp://.|^git://.|^tel:.|^mailto:.|\.org[\p{Zs}]?|\.com[\p{Zs}]?|\.co.uk[\p{Zs}]?|\.us[\p{Zs}]?|\.net[\p{Zs}]?|\.edu[\p{Zs}]?|\.gov[\p{Zs}]?|\.io[\p{Zs}]?')) then $x         else (),'; ')"/>

		    <!--REPORT warning-->
      <xsl:if test="($text-count gt $count)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="($text-count gt $count)">
            <xsl:attribute name="id">rrid-test</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/rrids#rrid-test</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[rrid-test] '<xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/>' element contains what looks like <xsl:text/>
               <xsl:value-of select="$text-count - $count"/>
               <xsl:text/> unlinked RRID(s). These should always be linked using 'https://identifiers.org/RRID/RRID:'. Element begins with <xsl:text/>
               <xsl:value-of select="substring(.,1,15)"/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($t,$org-regex) and not(descendant::italic[contains(.,e:org-conform($t))]) and not(descendant::element-citation)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($t,$org-regex) and not(descendant::italic[contains(.,e:org-conform($t))]) and not(descendant::element-citation)">
            <xsl:attribute name="id">org-test</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[org-test] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains an organism - <xsl:text/>
               <xsl:value-of select="e:org-conform($t)"/>
               <xsl:text/> - but there is no italic element with that correct capitalisation or spacing. Is this correct? <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element begins with <xsl:text/>
               <xsl:value-of select="concat(.,substring(.,1,15))"/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="not(descendant::monospace) and not(descendant::code) and ($code-text != '')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="not(descendant::monospace) and not(descendant::code) and ($code-text != '')">
            <xsl:attribute name="id">code-test</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/code-blocks#code-test</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[code-test] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains what looks like unformatted code - '<xsl:text/>
               <xsl:value-of select="$code-text"/>
               <xsl:text/>' - does this need tagging with &lt;monospace/&gt; or &lt;code/&gt;?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="($unequal-equal-text != '') and not(disp-formula[contains(.,'=')]) and not(inline-formula[contains(.,'=')]) and not(child::code) and not(child::monospace)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="($unequal-equal-text != '') and not(disp-formula[contains(.,'=')]) and not(inline-formula[contains(.,'=')]) and not(child::code) and not(child::monospace)">
            <xsl:attribute name="id">cell-spacing-test</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[cell-spacing-test] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains an equal sign with content directly next to one side, but a space on the other, is this correct? - <xsl:text/>
               <xsl:value-of select="$unequal-equal-text"/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,'\+cell[s]?|±cell[s]?') and not(descendant::p[matches(.,'\+cell[s]?|±cell[s]?')]) and not(descendant::td[matches(.,'\+cell[s]?|±cell[s]?')]) and not(descendant::th[matches(.,'\+cell[s]?|±cell[s]?')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'\+cell[s]?|±cell[s]?') and not(descendant::p[matches(.,'\+cell[s]?|±cell[s]?')]) and not(descendant::td[matches(.,'\+cell[s]?|±cell[s]?')]) and not(descendant::th[matches(.,'\+cell[s]?|±cell[s]?')])">
            <xsl:attribute name="id">equal-spacing-test</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[equal-spacing-test] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains the text '+cells' or '±cells' which is very likely to be incorrect spacing - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,'˚') and not(descendant::p[matches(.,'˚')]) and not(descendant::td[matches(.,'˚')]) and not(descendant::th[matches(.,'˚')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'˚') and not(descendant::p[matches(.,'˚')]) and not(descendant::td[matches(.,'˚')]) and not(descendant::th[matches(.,'˚')])">
            <xsl:attribute name="id">ring-diacritic-symbol-test</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[ring-diacritic-symbol-test] '<xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/>' element contains the ring above symbol, '∘'. Should this be a (non-superscript) degree symbol - ° - instead?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches(.,'[Tt]ype\p{Zs}?[Oo]ne\p{Zs}?[Dd]iabetes') and not(descendant::p[matches(.,'[Tt]ype\p{Zs}?[Oo]ne\p{Zs}?[Dd]iabetes')]) and not(descendant::td[matches(.,'[Tt]ype\p{Zs}?[Oo]ne\p{Zs}?[Dd]iabetes')]) and not(descendant::th[matches(.,'[Tt]ype\p{Zs}?[Oo]ne\p{Zs}?[Dd]iabetes')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'[Tt]ype\p{Zs}?[Oo]ne\p{Zs}?[Dd]iabetes') and not(descendant::p[matches(.,'[Tt]ype\p{Zs}?[Oo]ne\p{Zs}?[Dd]iabetes')]) and not(descendant::td[matches(.,'[Tt]ype\p{Zs}?[Oo]ne\p{Zs}?[Dd]iabetes')]) and not(descendant::th[matches(.,'[Tt]ype\p{Zs}?[Oo]ne\p{Zs}?[Dd]iabetes')])">
            <xsl:attribute name="id">diabetes-1-test</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[diabetes-1-test] '<xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/>' element contains the phrase 'Type one diabetes'. The number should not be spelled out, this should be 'Type 1 diabetes'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches(.,'[Tt]ype\p{Zs}?[Tt]wo\p{Zs}?[Dd]iabetes') and not(descendant::p[matches(.,'[Tt]ype\p{Zs}?[Tt]wo\p{Zs}?[Dd]iabetes')]) and not(descendant::td[matches(.,'[Tt]ype\p{Zs}?[Tt]wo\p{Zs}?[Dd]iabetes')]) and not(descendant::th[matches(.,'[Tt]ype\p{Zs}?[Tt]wo\p{Zs}?[Dd]iabetes')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'[Tt]ype\p{Zs}?[Tt]wo\p{Zs}?[Dd]iabetes') and not(descendant::p[matches(.,'[Tt]ype\p{Zs}?[Tt]wo\p{Zs}?[Dd]iabetes')]) and not(descendant::td[matches(.,'[Tt]ype\p{Zs}?[Tt]wo\p{Zs}?[Dd]iabetes')]) and not(descendant::th[matches(.,'[Tt]ype\p{Zs}?[Tt]wo\p{Zs}?[Dd]iabetes')])">
            <xsl:attribute name="id">diabetes-2-test</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[diabetes-2-test] '<xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/>' element contains the phrase 'Type two diabetes'. The number should not be spelled out, this should be 'Type 2 diabetes'</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="not(descendant::p or descendant::td or descendant::th or descendant::title) and not(ancestor::sub-article or child::element-citation) and not(ancestor::fn-group[@content-type='ethics-information']) and not($url-text = '')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="not(descendant::p or descendant::td or descendant::th or descendant::title) and not(ancestor::sub-article or child::element-citation) and not(ancestor::fn-group[@content-type='ethics-information']) and not($url-text = '')">
            <xsl:attribute name="id">unlinked-url</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[unlinked-url] '<xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/>' element contains possible unlinked urls. Check - <xsl:text/>
               <xsl:value-of select="$url-text"/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,'\p{Zs}[1-2][0-9][0-9]0\p{Zs}s[\p{Zs}\.]') and not(descendant::p[matches(.,'\p{Zs}[1-2][0-9][0-9]0\p{Zs}s[\p{Zs}\.]')]) and not(descendant::td) and not(descendant::th)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'\p{Zs}[1-2][0-9][0-9]0\p{Zs}s[\p{Zs}\.]') and not(descendant::p[matches(.,'\p{Zs}[1-2][0-9][0-9]0\p{Zs}s[\p{Zs}\.]')]) and not(descendant::td) and not(descendant::th)">
            <xsl:attribute name="id">year-style-test</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[year-style-test] '<xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/>' element contains the following string(s) - <xsl:text/>
               <xsl:value-of select="string-join(for $x in tokenize(.,' ')[matches(.,'^[1-2][0-9][0-9]0$')] return concat($x,' s'),'; ')"/>
               <xsl:text/>. If this refers to years, then the space should be removed after the number, i.e. <xsl:text/>
               <xsl:value-of select="string-join(for $x in tokenize(.,' ')[matches(.,'^[1-2][0-9][0-9]0$')] return concat($x,'s'),'; ')"/>
               <xsl:text/>. If the text is referring to a unit then this is fine.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="contains(lower-case(.),'url to be added')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(lower-case(.),'url to be added')">
            <xsl:attribute name="id">final-missing-url-test</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/toolkit/archiving-code#final-missing-url-test</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[final-missing-url-test] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains the text 'URL to be added' - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>. If this is a software heritage link, then please ensure that it is added. If it is a different URL, then the eLife team should check with the authors to determine what needs to be added.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="contains(.,'git://')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'git://')">
            <xsl:attribute name="id">git-protocol</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[git-protocol] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains the git:// protocol - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>. This is no longer widely supported, and should be replaced with the appropriate https:// protocol (or similar) equivalent.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M454"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M454"/>
   <xsl:template match="@*|node()" priority="-2" mode="M454">
      <xsl:apply-templates select="*" mode="M454"/>
   </xsl:template>

   <!--PATTERN duplicate-ref-pattern-->


	  <!--RULE duplicate-ref-->
   <xsl:template match="ref-list//ref" priority="1000" mode="M455">
      <xsl:variable name="doi" select="element-citation/pub-id[@pub-id-type='doi']"/>
      <xsl:variable name="a-title" select="element-citation/article-title[1]"/>
      <xsl:variable name="c-title" select="element-citation/chapter-title[1]"/>
      <xsl:variable name="source" select="element-citation/source[1]"/>
      <xsl:variable name="top-doi" select="ancestor::article//article-meta/article-id[@pub-id-type='doi'][1]"/>

		    <!--REPORT error-->
      <xsl:if test="(element-citation/@publication-type != 'book') and ($doi = preceding-sibling::ref/element-citation/pub-id[@pub-id-type='doi'])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(element-citation/@publication-type != 'book') and ($doi = preceding-sibling::ref/element-citation/pub-id[@pub-id-type='doi'])">
            <xsl:attribute name="id">duplicate-ref-test-1</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#duplicate-ref-test-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[duplicate-ref-test-1] ref '<xsl:text/>
               <xsl:value-of select="@id"/>
               <xsl:text/>' has the same doi as another reference, which is incorrect. Is it a duplicate?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="(element-citation/@publication-type = 'book') and  ($doi = preceding-sibling::ref/element-citation/pub-id[@pub-id-type='doi'])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(element-citation/@publication-type = 'book') and ($doi = preceding-sibling::ref/element-citation/pub-id[@pub-id-type='doi'])">
            <xsl:attribute name="id">duplicate-ref-test-2</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#duplicate-ref-test-2</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[duplicate-ref-test-2] ref '<xsl:text/>
               <xsl:value-of select="@id"/>
               <xsl:text/>' has the same doi as another reference, which might be incorrect. If they are not different chapters from the same book, then this is incorrect.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="some $x in preceding-sibling::ref/element-citation satisfies (         (($x/article-title = $a-title) and ($x/source = $source))         or         (($x/chapter-title = $c-title) and ($x/source = $source))         )">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="some $x in preceding-sibling::ref/element-citation satisfies ( (($x/article-title = $a-title) and ($x/source = $source)) or (($x/chapter-title = $c-title) and ($x/source = $source)) )">
            <xsl:attribute name="id">duplicate-ref-test-3</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#duplicate-ref-test-3</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[duplicate-ref-test-3] ref '<xsl:text/>
               <xsl:value-of select="@id"/>
               <xsl:text/>' has the same title and source as another reference, which is almost certainly incorrect - '<xsl:text/>
               <xsl:value-of select="$a-title"/>
               <xsl:text/>', '<xsl:text/>
               <xsl:value-of select="$source"/>
               <xsl:text/>'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="some $x in preceding-sibling::ref/element-citation satisfies (         (($x/article-title = $a-title) and not($x/source = $source))         or         (($x/chapter-title = $c-title) and not($x/source = $source))         )">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="some $x in preceding-sibling::ref/element-citation satisfies ( (($x/article-title = $a-title) and not($x/source = $source)) or (($x/chapter-title = $c-title) and not($x/source = $source)) )">
            <xsl:attribute name="id">duplicate-ref-test-4</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#duplicate-ref-test-4</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[duplicate-ref-test-4] ref '<xsl:text/>
               <xsl:value-of select="@id"/>
               <xsl:text/>' has the same title as another reference, but a different source. Is this correct? - '<xsl:text/>
               <xsl:value-of select="$a-title"/>
               <xsl:text/>'</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="$top-doi = $doi">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="$top-doi = $doi">
            <xsl:attribute name="id">duplicate-ref-test-6</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#duplicate-ref-test-6</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[duplicate-ref-test-6] ref '<xsl:text/>
               <xsl:value-of select="@id"/>
               <xsl:text/>' has a doi which is the same as the article itself '<xsl:text/>
               <xsl:value-of select="$top-doi"/>
               <xsl:text/>' which must be incorrect.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M455"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M455"/>
   <xsl:template match="@*|node()" priority="-2" mode="M455">
      <xsl:apply-templates select="*" mode="M455"/>
   </xsl:template>

   <!--PATTERN ref-xref-conformance-pattern-->


	  <!--RULE ref-xref-conformance-->
   <xsl:template match="xref[@ref-type='bibr']" priority="1000" mode="M456">
      <xsl:variable name="rid" select="@rid"/>
      <xsl:variable name="ref" select="ancestor::article/descendant::ref-list[1]/ref[@id = $rid][1]"/>
      <xsl:variable name="cite1" select="e:citation-format1($ref/descendant::element-citation[1])"/>
      <xsl:variable name="cite2" select="e:citation-format2($ref/descendant::element-citation[1])"/>
      <xsl:variable name="cite3" select="normalize-space(replace($cite1,'\p{P}|\p{N}',''))"/>
      <xsl:variable name="pre-text" select="replace(replace(replace(replace(preceding-sibling::text()[1],' ',' '),' et al\. ',' et al '),'e\.g\.','eg '),'i\.e\. ','ie ')"/>
      <xsl:variable name="post-text" select="replace(replace(replace(replace(following-sibling::text()[1],' ',' '),' et al\. ',' et al '),'e\.g\.','eg '),'i\.e\. ','ie ')"/>
      <xsl:variable name="pre-sentence" select="tokenize($pre-text,'\. ')[position() = last()]"/>
      <xsl:variable name="post-sentence" select="tokenize($post-text,'\. ')[position() = 1]"/>
      <xsl:variable name="open" select="string-length(replace($pre-sentence,'[^\(]',''))"/>
      <xsl:variable name="close" select="string-length(replace($pre-sentence,'[^\)]',''))"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="replace(.,' ',' ') = ($cite1,$cite2)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="replace(.,' ',' ') = ($cite1,$cite2)">
               <xsl:attribute name="id">final-ref-xref-test-1</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/reference-citations#final-ref-xref-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[final-ref-xref-test-1] <xsl:text/>
                  <xsl:value-of select="."/>
                  <xsl:text/> - citation does not conform to house style. It should be '<xsl:text/>
                  <xsl:value-of select="$cite1"/>
                  <xsl:text/>' or '<xsl:text/>
                  <xsl:value-of select="$cite2"/>
                  <xsl:text/>'. Preceding text = '<xsl:text/>
                  <xsl:value-of select="substring(preceding-sibling::text()[1],string-length(preceding-sibling::text()[1])-25)"/>
                  <xsl:text/>'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT warning-->
      <xsl:if test="matches($pre-text,'[\p{L}\p{N}\p{M}\p{Pe},;]$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($pre-text,'[\p{L}\p{N}\p{M}\p{Pe},;]$')">
            <xsl:attribute name="id">ref-xref-test-2</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/reference-citations#ref-xref-test-2</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[ref-xref-test-2] There is no space between citation and the preceding text - <xsl:text/>
               <xsl:value-of select="concat(substring($pre-text,string-length($pre-text)-15),.)"/>
               <xsl:text/> - Is this correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($post-text,'^[\p{L}\p{N}\p{M}\p{Ps}]')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($post-text,'^[\p{L}\p{N}\p{M}\p{Ps}]')">
            <xsl:attribute name="id">ref-xref-test-3</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/reference-citations#ref-xref-test-3</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[ref-xref-test-3] There is no space between citation and the following text - <xsl:text/>
               <xsl:value-of select="concat(.,substring($post-text,1,15))"/>
               <xsl:text/> - Is this correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(normalize-space(.),'\p{N}')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(normalize-space(.),'\p{N}')">
               <xsl:attribute name="id">final-ref-xref-test-4</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/reference-citations#final-ref-xref-test-4</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[final-ref-xref-test-4] citation doesn't contain numbers, which must be incorrect - <xsl:text/>
                  <xsl:value-of select="."/>
                  <xsl:text/>. If there is no year for this reference, and you are unable to determine this yourself, please query the authors.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(normalize-space(.),'\p{L}')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(normalize-space(.),'\p{L}')">
               <xsl:attribute name="id">ref-xref-test-5</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/reference-citations#ref-xref-test-5</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[ref-xref-test-5] citation doesn't contain letters, which must be incorrect - <xsl:text/>
                  <xsl:value-of select="."/>
                  <xsl:text/>.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT warning-->
      <xsl:if test="($open - $close) gt 1">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="($open - $close) gt 1">
            <xsl:attribute name="id">ref-xref-test-7</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/reference-citations#ref-xref-test-7</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[ref-xref-test-7] citation is preceded by text containing 2 or more open brackets, '('. eLife style is that parenthetical citations already in brackets should be contained in square brackets, '['. Either there is a superfluous '(' in the preceding text, or the '(' needs changing to a '['  - <xsl:text/>
               <xsl:value-of select="concat(substring($pre-text,string-length($pre-text)-10),.,substring($post-text,1,10))"/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($pre-sentence,' from\p{Zs}*[\(]+$| in\p{Zs}*[\(]+$| by\p{Zs}*[\(]+$| of\p{Zs}*[\(]+$| on\p{Zs}*[\(]+$| to\p{Zs}*[\(]+$| see\p{Zs}*[\(]+$| see also\p{Zs}*[\(]+$| at\p{Zs}*[\(]+$| per\p{Zs}*[\(]+$| follows\p{Zs}*[\(]+$| following\p{Zs}*[\(]+$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($pre-sentence,' from\p{Zs}*[\(]+$| in\p{Zs}*[\(]+$| by\p{Zs}*[\(]+$| of\p{Zs}*[\(]+$| on\p{Zs}*[\(]+$| to\p{Zs}*[\(]+$| see\p{Zs}*[\(]+$| see also\p{Zs}*[\(]+$| at\p{Zs}*[\(]+$| per\p{Zs}*[\(]+$| follows\p{Zs}*[\(]+$| following\p{Zs}*[\(]+$')">
            <xsl:attribute name="id">ref-xref-test-11</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/reference-citations#ref-xref-test-11</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[ref-xref-test-11] '<xsl:text/>
               <xsl:value-of select="concat(substring($pre-text,string-length($pre-text)-10),.)"/>
               <xsl:text/>' - citation is preceded by text ending with a possessive, preposition or verb and bracket which suggests the bracket should be removed.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($post-text,'^[\)]+\p{Zs}*who|^[\)]+\p{Zs}*have|^[\)]+\p{Zs}*found|^[\)]+\p{Zs}*used|^[\)]+\p{Zs}*demonstrate|^[\)]+\p{Zs}*follow[s]?|^[\)]+\p{Zs}*followed')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($post-text,'^[\)]+\p{Zs}*who|^[\)]+\p{Zs}*have|^[\)]+\p{Zs}*found|^[\)]+\p{Zs}*used|^[\)]+\p{Zs}*demonstrate|^[\)]+\p{Zs}*follow[s]?|^[\)]+\p{Zs}*followed')">
            <xsl:attribute name="id">ref-xref-test-12</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/reference-citations#ref-xref-test-12</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[ref-xref-test-12] '<xsl:text/>
               <xsl:value-of select="concat(.,substring($post-text,1,10))"/>
               <xsl:text/>' - citation is followed by a bracket and a possessive, preposition or verb which suggests the bracket is unnecessary.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($pre-sentence,$cite3)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($pre-sentence,$cite3)">
            <xsl:attribute name="id">ref-xref-test-14</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/reference-citations#ref-xref-test-14</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[ref-xref-test-14] citation is preceded by text containing much of the citation text which is possibly unnecessary - <xsl:text/>
               <xsl:value-of select="concat($pre-sentence,.)"/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($post-sentence,$cite3)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($post-sentence,$cite3)">
            <xsl:attribute name="id">ref-xref-test-15</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/reference-citations#ref-xref-test-15</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[ref-xref-test-15] citation is followed by text containing much of the citation text. Is this correct? - '<xsl:text/>
               <xsl:value-of select="concat(.,$post-sentence)"/>
               <xsl:text/>'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($pre-sentence,'\(\[\p{Zs}?$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($pre-sentence,'\(\[\p{Zs}?$')">
            <xsl:attribute name="id">ref-xref-test-13</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/reference-citations#ref-xref-test-13</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[ref-xref-test-13] citation is preceded by '(['. Is the square bracket unnecessary? - <xsl:text/>
               <xsl:value-of select="concat($pre-sentence,.)"/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches($post-sentence,'^\p{Zs}?\)\)')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($post-sentence,'^\p{Zs}?\)\)')">
            <xsl:attribute name="id">ref-xref-test-16</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/reference-citations#ref-xref-test-16</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[ref-xref-test-16] citation is followed by '))'. Either one of the brackets is unnecessary or the reference needs to be placed in square brackets - <xsl:text/>
               <xsl:value-of select="concat(.,$post-sentence)"/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches($pre-sentence,'\(\(\p{Zs}?$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($pre-sentence,'\(\(\p{Zs}?$')">
            <xsl:attribute name="id">ref-xref-test-17</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/reference-citations#ref-xref-test-17</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[ref-xref-test-17] citation is preceded by '(('. Either one of the brackets is unnecessary or the reference needs to be placed in square brackets - <xsl:text/>
               <xsl:value-of select="concat($pre-sentence,.)"/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($pre-sentence,'\(\p{Zs}?$') and ((string-length(replace($pre-sentence,'[^\(]','')) - string-length(replace($pre-sentence,'[^\)]',''))) gt 1)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($pre-sentence,'\(\p{Zs}?$') and ((string-length(replace($pre-sentence,'[^\(]','')) - string-length(replace($pre-sentence,'[^\)]',''))) gt 1)">
            <xsl:attribute name="id">ref-xref-test-10</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/reference-citations#ref-xref-test-10</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[ref-xref-test-10] citation is preceded by '(', and appears to already be in a brackets. Should the bracket(s) around the citation be removed? Or replaced with square brackets? - <xsl:text/>
               <xsl:value-of select="concat($pre-sentence,.,$post-sentence)"/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($pre-sentence,'\(\p{Zs}?$') and matches($post-sentence,'^\p{Zs}?\);') and (following-sibling::*[1]/name()='xref')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($pre-sentence,'\(\p{Zs}?$') and matches($post-sentence,'^\p{Zs}?\);') and (following-sibling::*[1]/name()='xref')">
            <xsl:attribute name="id">ref-xref-test-18</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/reference-citations#ref-xref-test-18</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[ref-xref-test-18] citation is preceded by '(', and followed by ');'. Should the brackets be removed? - <xsl:text/>
               <xsl:value-of select="concat($pre-sentence,.,$post-sentence)"/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches(.,'^et al|^ and|^\(\d|^,')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'^et al|^ and|^\(\d|^,')">
            <xsl:attribute name="id">final-ref-xref-test-19</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/reference-citations#final-ref-xref-test-19</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[final-ref-xref-test-19] <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> - citation doesn't start with an author's name which is incorrect.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches($post-text,'^\);\p{Zs}?$') and (following-sibling::*[1]/local-name() = 'xref')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($post-text,'^\);\p{Zs}?$') and (following-sibling::*[1]/local-name() = 'xref')">
            <xsl:attribute name="id">ref-xref-test-20</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/reference-citations#ref-xref-test-20</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[ref-xref-test-20] citation is followed by ');', which in turn is followed by another link. This must be incorrect (the bracket should be removed) - '<xsl:text/>
               <xsl:value-of select="concat(.,$post-sentence,following-sibling::*[1])"/>
               <xsl:text/>'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($pre-sentence,'[A-Za-z0-9]\($')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($pre-sentence,'[A-Za-z0-9]\($')">
            <xsl:attribute name="id">ref-xref-test-21</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/reference-citations#ref-xref-test-21</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[ref-xref-test-21] citation is preceded by a letter or number immediately followed by '('. Is there a space missing before the '('?  - '<xsl:text/>
               <xsl:value-of select="concat($pre-sentence,.)"/>
               <xsl:text/>'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($post-sentence,'^\)[A-Za-z0-9]')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($post-sentence,'^\)[A-Za-z0-9]')">
            <xsl:attribute name="id">ref-xref-test-22</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/reference-citations#ref-xref-test-22</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[ref-xref-test-22] citation is followed by a ')' which in turn is immediately followed by a letter or number. Is there a space missing after the ')'?  - '<xsl:text/>
               <xsl:value-of select="concat(.,$post-sentence)"/>
               <xsl:text/>'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($pre-text,'; \[$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($pre-text,'; \[$')">
            <xsl:attribute name="id">ref-xref-test-26</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/reference-citations#ref-xref-test-26</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[ref-xref-test-26] citation is preceded by '; [' - '<xsl:text/>
               <xsl:value-of select="concat(substring($pre-text,string-length($pre-text)-10),.,substring($post-text,1,1))"/>
               <xsl:text/>' - Are the square bracket(s) surrounding the citation required? If this citation is already in a bracketed sentence, then it's very likely they can be removed.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($post-text,'^\)\p{Zs}?\($') and (following-sibling::*[1]/local-name() = 'xref')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($post-text,'^\)\p{Zs}?\($') and (following-sibling::*[1]/local-name() = 'xref')">
            <xsl:attribute name="id">ref-xref-test-27</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/reference-citations#ref-xref-test-27</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[ref-xref-test-27] citation is followed by ') (', which in turn is followed by another link - '<xsl:text/>
               <xsl:value-of select="concat(.,$post-sentence,following-sibling::*[1])"/>
               <xsl:text/>'. Should the closing and opening brackets be replaced with a '; '? i.e. '<xsl:text/>
               <xsl:value-of select="concat(.,'; ',following-sibling::*[1])"/>
               <xsl:text/>'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($pre-text,'^\)\p{Zs}?\($') and (preceding-sibling::*[1]/local-name() = 'xref')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($pre-text,'^\)\p{Zs}?\($') and (preceding-sibling::*[1]/local-name() = 'xref')">
            <xsl:attribute name="id">ref-xref-test-28</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/reference-citations#ref-xref-test-28</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[ref-xref-test-28] citation is preceded by ') (', which in turn is preceded by another link - '<xsl:text/>
               <xsl:value-of select="concat(preceding-sibling::*[1],$pre-sentence,.)"/>
               <xsl:text/>'. Should the closing and opening brackets be replaced with a '; '? i.e. '<xsl:text/>
               <xsl:value-of select="concat(preceding-sibling::*[1],'; ',.)"/>
               <xsl:text/>'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($post-text,'^\);\p{Zs}?$') and (starts-with(following-sibling::*[1]/following-sibling::text()[1],')') or starts-with(following-sibling::*[1]/following-sibling::text()[1],';)'))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($post-text,'^\);\p{Zs}?$') and (starts-with(following-sibling::*[1]/following-sibling::text()[1],')') or starts-with(following-sibling::*[1]/following-sibling::text()[1],';)'))">
            <xsl:attribute name="id">ref-xref-test-29</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/reference-citations#ref-xref-test-29</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[ref-xref-test-29] citation is followed by ');', which in turn is followed by something else followed by ')'. Is this punctuation correct? - '<xsl:text/>
               <xsl:value-of select="concat(.,$post-text,following-sibling::*[1],tokenize(following-sibling::*[1]/following-sibling::text()[1],'\. ')[position() = 1])"/>
               <xsl:text/>'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M456"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M456"/>
   <xsl:template match="@*|node()" priority="-2" mode="M456">
      <xsl:apply-templates select="*" mode="M456"/>
   </xsl:template>

   <!--PATTERN unlinked-ref-cite-pattern-->


	  <!--RULE unlinked-ref-cite-->
   <xsl:template match="ref-list/ref/element-citation[year]" priority="1000" mode="M457">
      <xsl:variable name="id" select="parent::ref/@id"/>
      <xsl:variable name="cite-name" select="e:cite-name-text(person-group[@person-group-type='author'][1])"/>
      <xsl:variable name="cite1" select="e:citation-format1(.)"/>
      <xsl:variable name="cite2" select="e:citation-format2(.)"/>
      <xsl:variable name="regex" select="replace(replace(concat(replace(replace($cite-name,'\)','\\)'),'\(','\\('),' (',./year[1],'|','\(',./year[1],'\)',')'),'\.','\\.?'),',',',?')"/>
      <xsl:variable name="article-text" select="string-join(for $x in ancestor::article/*[local-name() = 'body' or local-name() = 'back']//*         return         if ($x/ancestor::sec[@sec-type='data-availability']) then ()         else if ($x/ancestor::ack or local-name()='ack') then ()         else if ($x/ancestor::sec[@sec-type='additional-information']) then ()         else if ($x/ancestor::ref-list) then ()         else if ($x/local-name() = 'xref') then ()         else $x/text(),'')"/>

		    <!--REPORT warning-->
      <xsl:if test="matches($article-text,$regex)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($article-text,$regex)">
            <xsl:attribute name="id">text-v-cite-test</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[text-v-cite-test] ref with id <xsl:text/>
               <xsl:value-of select="$id"/>
               <xsl:text/> has unlinked citations in the text - search <xsl:text/>
               <xsl:value-of select="$cite1"/>
               <xsl:text/> or <xsl:text/>
               <xsl:value-of select="$cite2"/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M457"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M457"/>
   <xsl:template match="@*|node()" priority="-2" mode="M457">
      <xsl:apply-templates select="*" mode="M457"/>
   </xsl:template>

   <!--PATTERN missing-ref-cited-pattern-->


	  <!--RULE missing-ref-cited-->
   <xsl:template match="article[not(@article-type=('correction','retraction'))]//p[(ancestor::app or ancestor::body[parent::article]) and not(child::table-wrap) and not(child::supplementary-material)]|td[ancestor::app or ancestor::body[parent::article]]|th[ancestor::app or ancestor::body[parent::article]]" priority="1000" mode="M458">
      <xsl:variable name="text" select="string-join(for $x in self::*/(*|text())         return if ($x/local-name()='xref') then ()         else string($x),'')"/>
      <xsl:variable name="missing-ref-regex" select="'[A-Z][A-Za-z]+ et al\.?, [1][7-9][0-9][0-9]|[A-Z][A-Za-z]+ et al\.?, [2][0-2][0-9][0-9]|[A-Z][A-Za-z]+ et al\.? [\(]?[1][7-9][0-9][0-9][\)]?|[A-Z][A-Za-z]+ et al\.? [\(]?[1][7-9][0-9][0-9][\)]?'"/>
      <xsl:variable name="missing-file-regex" select="'figures? (supplements?\s?)?\d|source (data|code)s? \d|(audio|supplementary) files? \d|tables? \d'"/>

		    <!--REPORT warning-->
      <xsl:if test="matches($text,$missing-ref-regex)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($text,$missing-ref-regex)">
            <xsl:attribute name="id">missing-ref-in-text-test</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[missing-ref-in-text-test] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains possible citation which is unlinked or a missing reference - search - <xsl:text/>
               <xsl:value-of select="concat(tokenize(substring-before($text,' et al'),' ')[last()],' et al ',tokenize(substring-after($text,' et al'),' ')[2])"/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(lower-case($text),$missing-file-regex)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(lower-case($text),$missing-file-regex)">
            <xsl:attribute name="id">missing-file-in-text-test</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[missing-file-in-text-test] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains possible citation to a file which is unlinked or missing. If you are unsure what object needs to be cited then please add the following author query (replacing XXXX as appropriate): Please confirm which XXXXXX this refers to, or confirm that this citation refers to another article.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M458"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M458"/>
   <xsl:template match="@*|node()" priority="-2" mode="M458">
      <xsl:apply-templates select="*" mode="M458"/>
   </xsl:template>

   <!--PATTERN unlinked-object-cite-pattern-->


	  <!--RULE unlinked-object-cite-->
   <xsl:template match="fig[not(ancestor::sub-article) and label]|       table-wrap[not(ancestor::sub-article) and label[not(contains(.,'ey resources table'))]]|       media[not(ancestor::sub-article) and label]|       supplementary-material[not(ancestor::sub-article) and label]" priority="1000" mode="M459">
      <xsl:variable name="cite1" select="replace(label[1],'[\[\]\(\)\.]','')"/>
      <xsl:variable name="pre-regex" select="replace($cite1,'—','[—–\\-]')"/>
      <xsl:variable name="regex" select="replace($pre-regex,'\s','[\\s ]')"/>
      <xsl:variable name="article-text" select="string-join(         for $x in ancestor::article/*[local-name() = 'body' or local-name() = 'back']//*         return if ($x/local-name()='label') then ()         else if ($x/ancestor::sub-article or $x/local-name()='sub-article') then ()         else if ($x/ancestor::sec[@sec-type='data-availability']) then ()         else if ($x/ancestor::sec[@sec-type='additional-information']) then ()         else if ($x/ancestor::ref-list) then ()         else if ($x/local-name() = 'xref') then ()         else $x/text(),'')"/>

		    <!--REPORT warning-->
      <xsl:if test="matches(lower-case($article-text),lower-case($regex))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(lower-case($article-text),lower-case($regex))">
            <xsl:attribute name="id">text-v-object-cite-test</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[text-v-object-cite-test] <xsl:text/>
               <xsl:value-of select="$cite1"/>
               <xsl:text/> has possible unlinked citations in the text.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M459"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M459"/>
   <xsl:template match="@*|node()" priority="-2" mode="M459">
      <xsl:apply-templates select="*" mode="M459"/>
   </xsl:template>

   <!--PATTERN vid-xref-conformance-pattern-->


	  <!--RULE vid-xref-conformance-->
   <xsl:template match="xref[@ref-type='video']" priority="1000" mode="M460">
      <xsl:variable name="rids" select="tokenize(@rid,'\s')"/>
      <xsl:variable name="target-nos" select="for $rid in $rids return substring-after($rid,'video')"/>
      <xsl:variable name="pre-text" select="preceding-sibling::text()[1]"/>
      <xsl:variable name="post-text" select="following-sibling::text()[1]"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(.,'\p{N}')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'\p{N}')">
               <xsl:attribute name="id">vid-xref-conformity-1</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/asset-citations#vid-xref-conformity-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[vid-xref-conformity-1] <xsl:text/>
                  <xsl:value-of select="."/>
                  <xsl:text/> - video citation does not contain any numbers which must be incorrect.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="not(contains(.,'nimation')) and (count($rids) gt 1 and not(contains(.,$target-nos[1])) or not(contains(.,$target-nos[last()]))) or (count($rids)=1 and not(contains(.,$target-nos)))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="not(contains(.,'nimation')) and (count($rids) gt 1 and not(contains(.,$target-nos[1])) or not(contains(.,$target-nos[last()]))) or (count($rids)=1 and not(contains(.,$target-nos)))">
            <xsl:attribute name="id">vid-xref-conformity-2</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/asset-citations#vid-xref-conformity-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[vid-xref-conformity-2] video citation does not match the video that it links to. Target video label number(s) are <xsl:text/>
               <xsl:value-of select="$target-nos"/>
               <xsl:text/>, but <xsl:text/>
               <xsl:value-of select="if (count($rids) gt 1) then concat($target-nos[1],' and ',$target-nos[last()],' are') else concat($target-nos,' is')"/>
               <xsl:text/> not in the citation text - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($pre-text,'[\p{L}\p{N}\p{M}\p{Pe},;]$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($pre-text,'[\p{L}\p{N}\p{M}\p{Pe},;]$')">
            <xsl:attribute name="id">vid-xref-test-2</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/asset-citations#vid-xref-test-2</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[vid-xref-test-2] There is no space between citation and the preceding text - <xsl:text/>
               <xsl:value-of select="concat(substring($pre-text,string-length($pre-text)-15),.)"/>
               <xsl:text/> - Is this correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($post-text,'^[\p{L}\p{N}\p{M}\p{Ps}]')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($post-text,'^[\p{L}\p{N}\p{M}\p{Ps}]')">
            <xsl:attribute name="id">vid-xref-test-3</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/asset-citations#vid-xref-test-3</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[vid-xref-test-3] There is no space between citation and the following text - <xsl:text/>
               <xsl:value-of select="concat(.,substring($post-text,1,15))"/>
               <xsl:text/> - Is this correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="(ancestor::media[@mimetype='video']/@id = $rids)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(ancestor::media[@mimetype='video']/@id = $rids)">
            <xsl:attribute name="id">vid-xref-test-4</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/asset-citations#vid-xref-test-4</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[vid-xref-test-4] <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> - video citation is in the caption of the video that it links to. Is it correct or necessary?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="(matches($post-text,'^ in $|^ from $|^ of $')) and (following-sibling::*[1]/@ref-type='bibr')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(matches($post-text,'^ in $|^ from $|^ of $')) and (following-sibling::*[1]/@ref-type='bibr')">
            <xsl:attribute name="id">vid-xref-test-5</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/asset-citations#vid-xref-test-5</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[vid-xref-test-5] <xsl:text/>
               <xsl:value-of select="concat(.,$post-text,following-sibling::*[1])"/>
               <xsl:text/> - Video citation is in a reference to a video from a different paper, and therefore must be unlinked.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches($pre-text,'[A-Za-z0-9][\(]$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($pre-text,'[A-Za-z0-9][\(]$')">
            <xsl:attribute name="id">vid-xref-test-6</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/asset-citations#vid-xref-test-6</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[vid-xref-test-6] citation is preceded by a letter or number immediately followed by '('. Is there a space missing before the '('?  - '<xsl:text/>
               <xsl:value-of select="concat($pre-text,.)"/>
               <xsl:text/>'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches($post-text,'^[\)][A-Za-z0-9]')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($post-text,'^[\)][A-Za-z0-9]')">
            <xsl:attribute name="id">vid-xref-test-7</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/asset-citations#vid-xref-test-7</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[vid-xref-test-7] citation is followed by a ')' which in turn is immediately followed by a letter or number. Is there a space missing after the ')'?  - '<xsl:text/>
               <xsl:value-of select="concat(.,$post-text)"/>
               <xsl:text/>'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches($post-text,'^[\p{Zs}]?[\p{Zs}\p{P}][\p{Zs}]?[Ss]ource')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($post-text,'^[\p{Zs}]?[\p{Zs}\p{P}][\p{Zs}]?[Ss]ource')">
            <xsl:attribute name="id">vid-xref-test-8</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/asset-citations#vid-xref-test-8</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[vid-xref-test-8] Incomplete citation. Video citation is followed by text which suggests it should instead be a link to source data or code - <xsl:text/>
               <xsl:value-of select="concat(.,$post-text)"/>
               <xsl:text/>'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches($pre-text,'[Ff]igure [0-9]{1,3}[\p{Zs}]?[\p{Zs}\p{P}][\p{Zs}]?$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($pre-text,'[Ff]igure [0-9]{1,3}[\p{Zs}]?[\p{Zs}\p{P}][\p{Zs}]?$')">
            <xsl:attribute name="id">vid-xref-test-9</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/asset-citations#vid-xref-test-9</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[vid-xref-test-9] Incomplete citation. Video citation is preceded by text which suggests it should instead be a link to a figure level video - '<xsl:text/>
               <xsl:value-of select="concat($pre-text,.)"/>
               <xsl:text/>'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($pre-text,'cf[\.]?\p{Zs}?[\(]?$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($pre-text,'cf[\.]?\p{Zs}?[\(]?$')">
            <xsl:attribute name="id">vid-xref-test-10</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/asset-citations#vid-xref-test-10</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[vid-xref-test-10] citation is preceded by '<xsl:text/>
               <xsl:value-of select="substring($pre-text,string-length($pre-text)-10)"/>
               <xsl:text/>'. The 'cf.' is unnecessary and should be removed.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(lower-case(.),'figure') and contains(.,'Video')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(lower-case(.),'figure') and contains(.,'Video')">
            <xsl:attribute name="id">vid-xref-test-11</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/asset-citations#vid-xref-test-11</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[vid-xref-test-11] Figure video citation contains 'Video', when it should contain 'video' with a lowercase v - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M460"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M460"/>
   <xsl:template match="@*|node()" priority="-2" mode="M460">
      <xsl:apply-templates select="*" mode="M460"/>
   </xsl:template>

   <!--PATTERN fig-xref-conformance-pattern-->


	  <!--RULE fig-xref-conformance-->
   <xsl:template match="xref[@ref-type='fig' and @rid]" priority="1000" mode="M461">
      <xsl:variable name="rid" select="tokenize(@rid,'\s')[1]"/>
      <xsl:variable name="type" select="e:fig-id-type($rid)"/>
      <xsl:variable name="no" select="normalize-space(replace(.,'[^0-9]+',''))"/>
      <xsl:variable name="target-no" select="replace($rid,'[^0-9]+','')"/>
      <xsl:variable name="pre-text" select="replace(preceding-sibling::text()[1],'[—–‒]','-')"/>
      <xsl:variable name="post-text" select="replace(following-sibling::text()[1],'[—–‒]','-')"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(.,'\p{N}')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'\p{N}')">
               <xsl:attribute name="id">fig-xref-conformity-1</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/asset-citations#fig-xref-conformity-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[fig-xref-conformity-1] <xsl:text/>
                  <xsl:value-of select="."/>
                  <xsl:text/> - figure citation does not contain any numbers which must be incorrect.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="($type = ('Figure','Chemical structure','Scheme')) and not(contains($no,$target-no))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="($type = ('Figure','Chemical structure','Scheme')) and not(contains($no,$target-no))">
            <xsl:attribute name="id">fig-xref-conformity-2</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/asset-citations#fig-xref-conformity-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[fig-xref-conformity-2] <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> - figure citation does not appear to link to the same place as the content of the citation suggests it should.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="($type = ('Figure','Chemical structure','Scheme')) and ($no != $target-no)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="($type = ('Figure','Chemical structure','Scheme')) and ($no != $target-no)">
            <xsl:attribute name="id">fig-xref-conformity-3</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/asset-citations#fig-xref-conformity-3</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[fig-xref-conformity-3] <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> - figure citation does not appear to link to the same place as the content of the citation suggests it should.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="($type = 'Figure') and matches(.,'[Ss]upplement')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="($type = 'Figure') and matches(.,'[Ss]upplement')">
            <xsl:attribute name="id">fig-xref-conformity-4</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/asset-citations#fig-xref-conformity-4</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[fig-xref-conformity-4] <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> - figure citation links to a figure, but it contains the string 'supplement'. It cannot be correct.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="($type = 'Figure supplement') and (not(matches(.,'[Ss]upplement'))) and (not(matches(preceding-sibling::text()[1],'–[\p{Zs}]?$| and $| or $|,[\p{Zs}]?$')))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="($type = 'Figure supplement') and (not(matches(.,'[Ss]upplement'))) and (not(matches(preceding-sibling::text()[1],'–[\p{Zs}]?$| and $| or $|,[\p{Zs}]?$')))">
            <xsl:attribute name="id">fig-xref-conformity-5</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/asset-citations#fig-xref-conformity-5</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[fig-xref-conformity-5] figure citation stands alone, contains the text <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>, and links to a figure supplement, but it does not contain the string 'supplement'. Is it correct? Preceding text - '<xsl:text/>
               <xsl:value-of select="substring(preceding-sibling::text()[1],string-length(preceding-sibling::text()[1])-25)"/>
               <xsl:text/>'</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="($type = 'Figure supplement') and ($target-no != $no) and not(contains($no,substring($target-no, string-length($target-no), 1)))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="($type = 'Figure supplement') and ($target-no != $no) and not(contains($no,substring($target-no, string-length($target-no), 1)))">
            <xsl:attribute name="id">fig-xref-conformity-6</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/asset-citations#fig-xref-conformity-6</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[fig-xref-conformity-6] figure citation contains the text <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> but links to a figure supplement with the id <xsl:text/>
               <xsl:value-of select="$rid"/>
               <xsl:text/> which cannot be correct.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($pre-text,'[\p{L}\p{N}\p{M}\p{Pe},;]$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($pre-text,'[\p{L}\p{N}\p{M}\p{Pe},;]$')">
            <xsl:attribute name="id">fig-xref-test-2</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/asset-citations#fig-xref-test-2</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[fig-xref-test-2] There is no space between citation and the preceding text - <xsl:text/>
               <xsl:value-of select="concat(substring($pre-text,string-length($pre-text)-15),.)"/>
               <xsl:text/> - Is this correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($post-text,'^[\p{L}\p{N}\p{M}\p{Ps}]')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($post-text,'^[\p{L}\p{N}\p{M}\p{Ps}]')">
            <xsl:attribute name="id">fig-xref-test-3</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/asset-citations#fig-xref-test-3</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[fig-xref-test-3] There is no space between citation and the following text - <xsl:text/>
               <xsl:value-of select="concat(.,substring($post-text,1,15))"/>
               <xsl:text/> - Is this correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="not(ancestor::supplementary-material) and not(ancestor::license-p) and (ancestor::fig/@id = $rid)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="not(ancestor::supplementary-material) and not(ancestor::license-p) and (ancestor::fig/@id = $rid)">
            <xsl:attribute name="id">fig-xref-test-4</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/asset-citations#fig-xref-test-4</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[fig-xref-test-4] <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> - Figure citation is in the caption of the figure that it links to. Is it correct or necessary?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="($type = 'Figure') and (matches($post-text,'^ in $|^ from $|^ of $')) and (following-sibling::*[1]/@ref-type='bibr')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="($type = 'Figure') and (matches($post-text,'^ in $|^ from $|^ of $')) and (following-sibling::*[1]/@ref-type='bibr')">
            <xsl:attribute name="id">fig-xref-test-5</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/asset-citations#fig-xref-test-5</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[fig-xref-test-5] <xsl:text/>
               <xsl:value-of select="concat(.,$post-text,following-sibling::*[1])"/>
               <xsl:text/> - Figure citation refers to a figure from a different paper, and therefore must be unlinked.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches($pre-text,'[A-Za-z0-9][\(]$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($pre-text,'[A-Za-z0-9][\(]$')">
            <xsl:attribute name="id">fig-xref-test-6</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/asset-citations#fig-xref-test-6</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[fig-xref-test-6] citation is preceded by a letter or number immediately followed by '('. Is there a space missing before the '('?  - '<xsl:text/>
               <xsl:value-of select="concat($pre-text,.)"/>
               <xsl:text/>'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches($post-text,'^[\)][A-Za-z0-9]')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($post-text,'^[\)][A-Za-z0-9]')">
            <xsl:attribute name="id">fig-xref-test-7</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/asset-citations#fig-xref-test-7</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[fig-xref-test-7] citation is followed by a ')' which in turn is immediately followed by a letter or number. Is there a space missing after the ')'?  - '<xsl:text/>
               <xsl:value-of select="concat(.,$post-text)"/>
               <xsl:text/>'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($pre-text,'their $')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($pre-text,'their $')">
            <xsl:attribute name="id">fig-xref-test-8</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/asset-citations#fig-xref-test-8</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[fig-xref-test-8] Figure citation is preceded by 'their'. Does this refer to a figure in other content (and as such should be captured as plain text)? - '<xsl:text/>
               <xsl:value-of select="concat($pre-text,.)"/>
               <xsl:text/>'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($post-text,'^ of [\p{Lu}][\p{Ll}]+[\-]?[\p{Ll}]? et al[\.]?')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($post-text,'^ of [\p{Lu}][\p{Ll}]+[\-]?[\p{Ll}]? et al[\.]?')">
            <xsl:attribute name="id">fig-xref-test-9</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/asset-citations#fig-xref-test-9</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[fig-xref-test-9] Is this figure citation a reference to a figure from other content (and as such should be captured instead as plain text)? - <xsl:text/>
               <xsl:value-of select="concat(.,$post-text)"/>
               <xsl:text/>'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches($post-text,'^[\p{Zs}]?[\p{Zs}\p{P}][\p{Zs}]?[Ff]igure supplement')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($post-text,'^[\p{Zs}]?[\p{Zs}\p{P}][\p{Zs}]?[Ff]igure supplement')">
            <xsl:attribute name="id">fig-xref-test-10</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/asset-citations#fig-xref-test-10</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[fig-xref-test-10] Incomplete citation. Figure citation is followed by text which suggests it should instead be a link to a Figure supplement - <xsl:text/>
               <xsl:value-of select="concat(.,$post-text)"/>
               <xsl:text/>'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($post-text,'^[\p{Zs}]?[\p{Zs}\p{P}][\p{Zs}]?[Vv]ideo')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($post-text,'^[\p{Zs}]?[\p{Zs}\p{P}][\p{Zs}]?[Vv]ideo')">
            <xsl:attribute name="id">fig-xref-test-11</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/asset-citations#fig-xref-test-11</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[fig-xref-test-11] Incomplete citation. Figure citation is followed by text which suggests it should instead be a link to a video supplement - <xsl:text/>
               <xsl:value-of select="concat(.,$post-text)"/>
               <xsl:text/>'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($post-text,'^[\p{Zs}]?[\p{Zs}\p{P}][\p{Zs}]?[Ss]ource')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($post-text,'^[\p{Zs}]?[\p{Zs}\p{P}][\p{Zs}]?[Ss]ource')">
            <xsl:attribute name="id">fig-xref-test-12</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/asset-citations#fig-xref-test-12</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[fig-xref-test-12] Incomplete citation. Figure citation is followed by text which suggests it should instead be a link to source data or code - <xsl:text/>
               <xsl:value-of select="concat(.,$post-text)"/>
               <xsl:text/>'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($post-text,'^[\p{Zs}]?[Ss]upplement|^[\p{Zs}]?[Ff]igure [Ss]upplement|^[\p{Zs}]?[Ss]ource|^[\p{Zs}]?[Vv]ideo')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($post-text,'^[\p{Zs}]?[Ss]upplement|^[\p{Zs}]?[Ff]igure [Ss]upplement|^[\p{Zs}]?[Ss]ource|^[\p{Zs}]?[Vv]ideo')">
            <xsl:attribute name="id">fig-xref-test-13</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/asset-citations#fig-xref-test-13</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[fig-xref-test-13] Figure citation is followed by text which suggests it could be an incomplete citation - <xsl:text/>
               <xsl:value-of select="concat(.,$post-text)"/>
               <xsl:text/>'. Is this OK?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($pre-text,'cf[\.]?\p{Zs}?[\(]?$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($pre-text,'cf[\.]?\p{Zs}?[\(]?$')">
            <xsl:attribute name="id">fig-xref-test-14</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/asset-citations#fig-xref-test-14</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[fig-xref-test-14] citation is preceded by '<xsl:text/>
               <xsl:value-of select="substring($pre-text,string-length($pre-text)-10)"/>
               <xsl:text/>'. The 'cf.' is unnecessary and should be removed.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches(.,' [Ff]ig[\.]? ')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,' [Ff]ig[\.]? ')">
            <xsl:attribute name="id">fig-xref-test-15</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/asset-citations#fig-xref-test-15</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[fig-xref-test-15] Link - '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>' - is incomplete. It should have 'figure' or 'Figure' spelt out.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($pre-text,'[Ss]uppl?[\.]?\p{Zs}?$|[Ss]upp?l[ea]mental\p{Zs}?$|[Ss]upp?l[ea]mentary\p{Zs}?$|[Ss]upp?l[ea]ment\p{Zs}?$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($pre-text,'[Ss]uppl?[\.]?\p{Zs}?$|[Ss]upp?l[ea]mental\p{Zs}?$|[Ss]upp?l[ea]mentary\p{Zs}?$|[Ss]upp?l[ea]ment\p{Zs}?$')">
            <xsl:attribute name="id">fig-xref-test-16</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/asset-citations#fig-xref-test-16</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[fig-xref-test-16] Figure citation - '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>' - is preceded by the text '<xsl:text/>
               <xsl:value-of select="substring($pre-text,string-length($pre-text)-10)"/>
               <xsl:text/>' - should it be a figure supplement citation instead?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,'[A-Z]$') and matches($post-text,'^\p{Zs}?and [A-Z] |^\p{Zs}?and [A-Z]\.')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'[A-Z]$') and matches($post-text,'^\p{Zs}?and [A-Z] |^\p{Zs}?and [A-Z]\.')">
            <xsl:attribute name="id">fig-xref-test-17</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/asset-citations#fig-xref-test-17</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[fig-xref-test-17] Figure citation - '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>' - is followed by the text '<xsl:text/>
               <xsl:value-of select="substring($post-text,1,7)"/>
               <xsl:text/>' - should this text be included in the link text too (i.e. '<xsl:text/>
               <xsl:value-of select="concat(.,substring($post-text,1,6))"/>
               <xsl:text/>')?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($post-text,'^\-[A-Za-z0-9]')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($post-text,'^\-[A-Za-z0-9]')">
            <xsl:attribute name="id">fig-xref-test-18</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/asset-citations#fig-xref-test-18</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[fig-xref-test-18] Figure citation - '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>' - is followed by the text '<xsl:text/>
               <xsl:value-of select="substring($post-text,1,10)"/>
               <xsl:text/>' - should some or all of that text be included in the citation text?</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M461"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M461"/>
   <xsl:template match="@*|node()" priority="-2" mode="M461">
      <xsl:apply-templates select="*" mode="M461"/>
   </xsl:template>

   <!--PATTERN table-xref-conformance-pattern-->


	  <!--RULE table-xref-conformance-->
   <xsl:template match="xref[@ref-type='table']" priority="1000" mode="M462">
      <xsl:variable name="rid" select="tokenize(@rid,'\s')[1]"/>
      <xsl:variable name="text-no" select="normalize-space(replace(.,'[^0-9]+',''))"/>
      <xsl:variable name="rid-no" select="replace($rid,'[^0-9]+','')"/>
      <xsl:variable name="pre-text" select="preceding-sibling::text()[1]"/>
      <xsl:variable name="post-text" select="following-sibling::text()[1]"/>

		    <!--REPORT warning-->
      <xsl:if test="not(matches(.,'Table')) and ($pre-text != ' and ') and ($pre-text != '–') and ($pre-text != ', ') and not(contains($rid,'app')) and not(contains($rid,'resp')) and not(contains($rid,'sa'))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="not(matches(.,'Table')) and ($pre-text != ' and ') and ($pre-text != '–') and ($pre-text != ', ') and not(contains($rid,'app')) and not(contains($rid,'resp')) and not(contains($rid,'sa'))">
            <xsl:attribute name="id">table-xref-conformity-1</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/asset-citations#table-xref-conformity-1</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[table-xref-conformity-1] <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> - citation points to table, but does not include the string 'Table', which is very unusual.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="not(matches(.,'table')) and ($pre-text != ' and ') and ($pre-text != '–') and ($pre-text != ', ') and contains($rid,'app')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="not(matches(.,'table')) and ($pre-text != ' and ') and ($pre-text != '–') and ($pre-text != ', ') and contains($rid,'app')">
            <xsl:attribute name="id">table-xref-conformity-2</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/asset-citations#table-xref-conformity-2</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[table-xref-conformity-2] <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> - citation points to an Appendix table, but does not include the string 'table', which is very unusual.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="(not(contains($rid,'app') or contains($rid,'sa'))) and ($text-no != $rid-no) and not(contains(.,'–')) and not(contains(.,' and '))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(not(contains($rid,'app') or contains($rid,'sa'))) and ($text-no != $rid-no) and not(contains(.,'–')) and not(contains(.,' and '))">
            <xsl:attribute name="id">table-xref-conformity-3</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/asset-citations#table-xref-conformity-3</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[table-xref-conformity-3] <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> - Citation content does not match what it directs to.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="(contains($rid,'app')) and (not(ends-with($text-no,substring($rid-no,2)))) and not(contains(.,'–'))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(contains($rid,'app')) and (not(ends-with($text-no,substring($rid-no,2)))) and not(contains(.,'–'))">
            <xsl:attribute name="id">table-xref-conformity-4</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/asset-citations#table-xref-conformity-4</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[table-xref-conformity-4] <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> - Citation content does not match what it directs to.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="(contains($rid,'sa')) and (not(ends-with($text-no,substring($rid-no,2)))) and not(contains(.,'–')) and not(contains(.,' and '))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(contains($rid,'sa')) and (not(ends-with($text-no,substring($rid-no,2)))) and not(contains(.,'–')) and not(contains(.,' and '))">
            <xsl:attribute name="id">table-xref-conformity-5</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/asset-citations#table-xref-conformity-5</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[table-xref-conformity-5] <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> - Citation content does not match what it directs to.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="(ancestor::table-wrap/@id = $rid) and not(ancestor::supplementary-material)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(ancestor::table-wrap/@id = $rid) and not(ancestor::supplementary-material)">
            <xsl:attribute name="id">table-xref-test-1</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/asset-citations#table-xref-test-1</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[table-xref-test-1] <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> - Citation is in the caption of the Table that it links to. Is it correct or necessary?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches($pre-text,'[A-Za-z0-9][\(]$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($pre-text,'[A-Za-z0-9][\(]$')">
            <xsl:attribute name="id">table-xref-test-2</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/asset-citations#table-xref-test-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[table-xref-test-2] citation is preceded by a letter or number immediately followed by '('. Is there a space missing before the '('?  - '<xsl:text/>
               <xsl:value-of select="concat($pre-text,.)"/>
               <xsl:text/>'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches($post-text,'^[\)][A-Za-z0-9]')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($post-text,'^[\)][A-Za-z0-9]')">
            <xsl:attribute name="id">table-xref-test-3</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/asset-citations#table-xref-test-3</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[table-xref-test-3] citation is followed by a ')' which in turn is immediately followed by a letter or number. Is there a space missing after the ')'?  - '<xsl:text/>
               <xsl:value-of select="concat(.,$post-text)"/>
               <xsl:text/>'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches($post-text,'^[\p{Zs}]?[\p{Zs}—\-][\p{Zs}]?[Ss]ource')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($post-text,'^[\p{Zs}]?[\p{Zs}—\-][\p{Zs}]?[Ss]ource')">
            <xsl:attribute name="id">table-xref-test-4</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/asset-citations#table-xref-test-4</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[table-xref-test-4] Incomplete citation. Table citation is followed by text which suggests it should instead be a link to source data or code - <xsl:text/>
               <xsl:value-of select="concat(.,$post-text)"/>
               <xsl:text/>'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($pre-text,'cf[\.]?\p{Zs}?[\(]?$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($pre-text,'cf[\.]?\p{Zs}?[\(]?$')">
            <xsl:attribute name="id">table-xref-test-5</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/asset-citations#table-xref-test-5</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[table-xref-test-5] citation is preceded by '<xsl:text/>
               <xsl:value-of select="substring($pre-text,string-length($pre-text)-10)"/>
               <xsl:text/>'. The 'cf.' is unnecessary and should be removed</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($pre-text,'[Ss]uppl?[\.]?\p{Zs}?$|[Ss]upp?l[ea]mental\p{Zs}?$|[Ss]upp?l[ea]mentary\p{Zs}?$|[Ss]upp?l[ea]ment\p{Zs}?$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($pre-text,'[Ss]uppl?[\.]?\p{Zs}?$|[Ss]upp?l[ea]mental\p{Zs}?$|[Ss]upp?l[ea]mentary\p{Zs}?$|[Ss]upp?l[ea]ment\p{Zs}?$')">
            <xsl:attribute name="id">table-xref-test-6</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/asset-citations#table-xref-test-6</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[table-xref-test-6] Table citation - '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>' - is preceded by the text '<xsl:text/>
               <xsl:value-of select="substring($pre-text,string-length($pre-text)-10)"/>
               <xsl:text/>' - should it be a Supplementary file citation instead?</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M462"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M462"/>
   <xsl:template match="@*|node()" priority="-2" mode="M462">
      <xsl:apply-templates select="*" mode="M462"/>
   </xsl:template>

   <!--PATTERN supp-file-xref-conformance-pattern-->


	  <!--RULE supp-file-xref-conformance-->
   <xsl:template match="xref[@ref-type='supplementary-material']" priority="1000" mode="M463">
      <xsl:variable name="rid" select="tokenize(@rid,'\s')[1]"/>
      <xsl:variable name="text-no" select="normalize-space(replace(.,'[^0-9]+',''))"/>
      <xsl:variable name="last-text-no" select="substring($text-no,string-length($text-no), 1)"/>
      <xsl:variable name="rid-no" select="replace($rid,'[^0-9]+','')"/>
      <xsl:variable name="last-rid-no" select="substring($rid-no,string-length($rid-no))"/>
      <xsl:variable name="pre-text" select="preceding-sibling::text()[1]"/>
      <xsl:variable name="post-text" select="following-sibling::text()[1]"/>

		    <!--REPORT warning-->
      <xsl:if test="contains($rid,'data') and not(matches(.,'[Ss]ource data')) and ($pre-text != ' and ') and ($pre-text != '–') and ($pre-text != ', ')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains($rid,'data') and not(matches(.,'[Ss]ource data')) and ($pre-text != ' and ') and ($pre-text != '–') and ($pre-text != ', ')">
            <xsl:attribute name="id">supp-file-xref-conformity-1</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/asset-citations#supp-file-xref-conformity-1</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[supp-file-xref-conformity-1] <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> - citation points to source data, but does not include the string 'source data', which is very unusual.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains($rid,'code') and not(matches(.,'[Ss]ource code')) and ($pre-text != ' and ') and ($pre-text != '–') and ($pre-text != ', ')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains($rid,'code') and not(matches(.,'[Ss]ource code')) and ($pre-text != ' and ') and ($pre-text != '–') and ($pre-text != ', ')">
            <xsl:attribute name="id">supp-file-xref-conformity-2</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/asset-citations#supp-file-xref-conformity-2</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[supp-file-xref-conformity-2] <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> - citation points to source code, but does not include the string 'source code', which is very unusual.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains($rid,'supp') and not(matches(.,'[Ss]upplementary file')) and ($pre-text != ' and ') and ($pre-text != '–') and ($pre-text != ', ')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains($rid,'supp') and not(matches(.,'[Ss]upplementary file')) and ($pre-text != ' and ') and ($pre-text != '–') and ($pre-text != ', ')">
            <xsl:attribute name="id">supp-file-xref-conformity-3</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/asset-citations#supp-file-xref-conformity-3</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[supp-file-xref-conformity-3] <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> - citation points to a supplementary file, but does not include the string 'Supplementary file', which is very unusual.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--ASSERT warning-->
      <xsl:choose>
         <xsl:when test="contains(.,$last-rid-no)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,$last-rid-no)">
               <xsl:attribute name="id">supp-file-xref-conformity-4</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/asset-citations#supp-file-xref-conformity-4</xsl:attribute>
               <xsl:attribute name="role">warning</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[supp-file-xref-conformity-4] <xsl:text/>
                  <xsl:value-of select="."/>
                  <xsl:text/> - It looks like the citation content does not match what it directs to. The only case where this can be ignored is if this points to an audio file.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT warning-->
      <xsl:choose>
         <xsl:when test="$last-text-no = $last-rid-no"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="$last-text-no = $last-rid-no">
               <xsl:attribute name="id">supp-file-xref-conformity-5</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/asset-citations#supp-file-xref-conformity-5</xsl:attribute>
               <xsl:attribute name="role">warning</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[supp-file-xref-conformity-5] <xsl:text/>
                  <xsl:value-of select="."/>
                  <xsl:text/> - It looks like the citation content does not match what it directs to. Check that it is correct.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT warning-->
      <xsl:if test="ancestor::supplementary-material/@id = $rid">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="ancestor::supplementary-material/@id = $rid">
            <xsl:attribute name="id">supp-file-xref-test-1</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/asset-citations#supp-file-xref-test-1</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[supp-file-xref-test-1] <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> - Citation is in the caption of the Supplementary file that it links to. Is it correct or necessary?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches($pre-text,'[A-Za-z0-9][\(]$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($pre-text,'[A-Za-z0-9][\(]$')">
            <xsl:attribute name="id">supp-xref-test-2</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/asset-citations#supp-xref-test-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[supp-xref-test-2] citation is preceded by a letter or number immediately followed by '('. Is there a space missing before the '('?  - '<xsl:text/>
               <xsl:value-of select="concat($pre-text,.)"/>
               <xsl:text/>'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches($post-text,'^[\)][A-Za-z0-9]')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($post-text,'^[\)][A-Za-z0-9]')">
            <xsl:attribute name="id">supp-xref-test-3</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/asset-citations#supp-xref-test-3</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[supp-xref-test-3] citation is followed by a ')' which in turn is immediately followed by a letter or number. Is there a space missing after the ')'?  - '<xsl:text/>
               <xsl:value-of select="concat(.,$post-text)"/>
               <xsl:text/>'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches($pre-text,'[Ff]igure [\d]{1,2}[\p{Zs}]?[\p{Zs}\p{P}][\p{Zs}]?$|[Vv]ideo [\d]{1,2}[\p{Zs}]?[\p{Zs}\p{P}][\p{Zs}]?$|[Tt]able [\d]{1,2}[\p{Zs}]?[\p{Zs}\p{P}][\p{Zs}]?$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($pre-text,'[Ff]igure [\d]{1,2}[\p{Zs}]?[\p{Zs}\p{P}][\p{Zs}]?$|[Vv]ideo [\d]{1,2}[\p{Zs}]?[\p{Zs}\p{P}][\p{Zs}]?$|[Tt]able [\d]{1,2}[\p{Zs}]?[\p{Zs}\p{P}][\p{Zs}]?$')">
            <xsl:attribute name="id">supp-xref-test-4</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/asset-citations#supp-xref-test-4</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[supp-xref-test-4] Incomplete citation. <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> citation is preceded by text which suggests it should instead be a link to Figure/Video/Table level source data or code - <xsl:text/>
               <xsl:value-of select="concat($pre-text,.)"/>
               <xsl:text/>'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($pre-text,'cf[\.]?\p{Zs}?[\(]?$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($pre-text,'cf[\.]?\p{Zs}?[\(]?$')">
            <xsl:attribute name="id">supp-xref-test-5</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/asset-citations#supp-xref-test-5</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[supp-xref-test-5] citation is preceded by '<xsl:text/>
               <xsl:value-of select="substring($pre-text,string-length($pre-text)-10)"/>
               <xsl:text/>'. The 'cf.' is unnecessary and should be removed.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(.,'—Source')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'—Source')">
            <xsl:attribute name="id">supp-xref-test-6</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/asset-citations#supp-xref-test-6</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[supp-xref-test-6] citation contains '—Source' (<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>). If it refers to asset level source data or code, then 'Source' should be spelled with a lowercase s, as in the label for that file.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="contains($rid,'data') and matches(.,'[Ss]ource datas')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains($rid,'data') and matches(.,'[Ss]ource datas')">
            <xsl:attribute name="id">supp-file-xref-conformity-6</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/asset-citations#supp-file-xref-conformity-6</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[supp-file-xref-conformity-6] <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> - citation points to source data but contains the string 'source datas', which is grammatically incorrect. It should be source data instead.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="contains($rid,'code') and matches(.,'[Ss]ource codes')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains($rid,'code') and matches(.,'[Ss]ource codes')">
            <xsl:attribute name="id">supp-file-xref-conformity-7</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/asset-citations#supp-file-xref-conformity-7</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[supp-file-xref-conformity-7] <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> - citation points to source code but contains the string 'source codes', which is grammatically incorrect. It should be source code instead.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M463"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M463"/>
   <xsl:template match="@*|node()" priority="-2" mode="M463">
      <xsl:apply-templates select="*" mode="M463"/>
   </xsl:template>

   <!--PATTERN equation-xref-conformance-pattern-->


	  <!--RULE equation-xref-conformance-->
   <xsl:template match="xref[@ref-type='disp-formula']" priority="1000" mode="M464">
      <xsl:variable name="rids" select="replace(@rid,'^\s|\s$','')"/>
      <xsl:variable name="labels" select="for $rid in tokenize($rids,'\s')[position()=(1,last())] return translate(ancestor::article//disp-formula[@id = $rid]/label,'()','')"/>
      <xsl:variable name="prec-text" select="preceding-sibling::text()[1]"/>
      <xsl:variable name="post-text" select="following-sibling::text()[1]"/>

		    <!--REPORT warning-->
      <xsl:if test="not(matches(.,'[Ee]quation')) and ($prec-text != ' and ') and ($prec-text != '–')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="not(matches(.,'[Ee]quation')) and ($prec-text != ' and ') and ($prec-text != '–')">
            <xsl:attribute name="id">equ-xref-conformity-1</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/asset-citations#equ-xref-conformity-1</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[equ-xref-conformity-1] <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> - link points to equation, but does not include the string 'Equation', which is unusual. Is it correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="if (count($labels) gt 1) then (some $label in $labels satisfies not(contains(.,$label)))               else not(contains(.,$labels))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="if (count($labels) gt 1) then (some $label in $labels satisfies not(contains(.,$label))) else not(contains(.,$labels))">
            <xsl:attribute name="id">equ-xref-conformity-2</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/asset-citations#equ-xref-conformity-2</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[equ-xref-conformity-2] equation link content does not match what it directs to (content = <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>; label(s) = <xsl:text/>
               <xsl:value-of select="string-join($labels,'; ')"/>
               <xsl:text/>). Is this correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="(matches($post-text,'^ in $|^ from $|^ of $')) and (following-sibling::*[1]/@ref-type='bibr')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(matches($post-text,'^ in $|^ from $|^ of $')) and (following-sibling::*[1]/@ref-type='bibr')">
            <xsl:attribute name="id">equ-xref-conformity-3</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/asset-citations#equ-xref-conformity-3</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[equ-xref-conformity-3] <xsl:text/>
               <xsl:value-of select="concat(.,$post-text,following-sibling::*[1])"/>
               <xsl:text/> - Equation citation appears to be a reference to an equation from a different paper, and therefore must be unlinked.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($prec-text,'cf[\.]?\p{Zs}?[\(]?$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($prec-text,'cf[\.]?\p{Zs}?[\(]?$')">
            <xsl:attribute name="id">equ-xref-conformity-4</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/asset-citations#equ-xref-conformity-4</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[equ-xref-conformity-4] citation is preceded by '<xsl:text/>
               <xsl:value-of select="substring($prec-text,string-length($prec-text)-10)"/>
               <xsl:text/>'. The 'cf.' is unnecessary and should be removed.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M464"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M464"/>
   <xsl:template match="@*|node()" priority="-2" mode="M464">
      <xsl:apply-templates select="*" mode="M464"/>
   </xsl:template>

   <!--PATTERN org-ref-article-book-title-pattern-->


	  <!--RULE org-ref-article-book-title-->
   <xsl:template match="element-citation/article-title|element-citation/chapter-title|element-citation/source|element-citation/data-title" priority="1000" mode="M465">
      <xsl:variable name="lc" select="lower-case(.)"/>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'b\.\p{Zs}?subtilis') and not(italic[contains(text() ,'B. subtilis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'b\.\p{Zs}?subtilis') and not(italic[contains(text() ,'B. subtilis')])">
            <xsl:attribute name="id">bssubtilis-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#bssubtilis-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[bssubtilis-ref-article-title-check] ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'B. subtilis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'bacillus\p{Zs}?subtilis') and not(italic[contains(text() ,'Bacillus subtilis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'bacillus\p{Zs}?subtilis') and not(italic[contains(text() ,'Bacillus subtilis')])">
            <xsl:attribute name="id">bacillusssubtilis-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#bacillusssubtilis-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[bacillusssubtilis-ref-article-title-check] ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'Bacillus subtilis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'d\.\p{Zs}?melanogaster') and not(italic[contains(text() ,'D. melanogaster')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'d\.\p{Zs}?melanogaster') and not(italic[contains(text() ,'D. melanogaster')])">
            <xsl:attribute name="id">dsmelanogaster-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#dsmelanogaster-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[dsmelanogaster-ref-article-title-check] ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'D. melanogaster' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'drosophila\p{Zs}?melanogaster') and not(italic[contains(text() ,'Drosophila melanogaster')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'drosophila\p{Zs}?melanogaster') and not(italic[contains(text() ,'Drosophila melanogaster')])">
            <xsl:attribute name="id">drosophilasmelanogaster-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#drosophilasmelanogaster-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[drosophilasmelanogaster-ref-article-title-check] ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'Drosophila melanogaster' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'e\.\p{Zs}?coli') and not(italic[contains(text() ,'E. coli')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'e\.\p{Zs}?coli') and not(italic[contains(text() ,'E. coli')])">
            <xsl:attribute name="id">escoli-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#escoli-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[escoli-ref-article-title-check] ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'E. coli' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'escherichia\p{Zs}?coli') and not(italic[contains(text() ,'Escherichia coli')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'escherichia\p{Zs}?coli') and not(italic[contains(text() ,'Escherichia coli')])">
            <xsl:attribute name="id">escherichiascoli-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#escherichiascoli-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[escherichiascoli-ref-article-title-check] ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'Escherichia coli' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'s\.\p{Zs}?pombe') and not(italic[contains(text() ,'S. pombe')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'s\.\p{Zs}?pombe') and not(italic[contains(text() ,'S. pombe')])">
            <xsl:attribute name="id">sspombe-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#sspombe-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[sspombe-ref-article-title-check] ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'S. pombe' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'schizosaccharomyces\p{Zs}?pombe') and not(italic[contains(text() ,'Schizosaccharomyces pombe')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'schizosaccharomyces\p{Zs}?pombe') and not(italic[contains(text() ,'Schizosaccharomyces pombe')])">
            <xsl:attribute name="id">schizosaccharomycesspombe-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#schizosaccharomycesspombe-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[schizosaccharomycesspombe-ref-article-title-check] ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'Schizosaccharomyces pombe' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'s\.\p{Zs}?cerevisiae') and not(italic[contains(text() ,'S. cerevisiae')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'s\.\p{Zs}?cerevisiae') and not(italic[contains(text() ,'S. cerevisiae')])">
            <xsl:attribute name="id">sscerevisiae-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#sscerevisiae-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[sscerevisiae-ref-article-title-check] ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'S. cerevisiae' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'saccharomyces\p{Zs}?cerevisiae') and not(italic[contains(text() ,'Saccharomyces cerevisiae')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'saccharomyces\p{Zs}?cerevisiae') and not(italic[contains(text() ,'Saccharomyces cerevisiae')])">
            <xsl:attribute name="id">saccharomycesscerevisiae-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#saccharomycesscerevisiae-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[saccharomycesscerevisiae-ref-article-title-check] ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'Saccharomyces cerevisiae' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'c\.\p{Zs}?elegans') and not(italic[contains(text() ,'C. elegans')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'c\.\p{Zs}?elegans') and not(italic[contains(text() ,'C. elegans')])">
            <xsl:attribute name="id">cselegans-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#cselegans-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[cselegans-ref-article-title-check] ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'C. elegans' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'caenorhabditis\p{Zs}?elegans') and not(italic[contains(text() ,'Caenorhabditis elegans')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'caenorhabditis\p{Zs}?elegans') and not(italic[contains(text() ,'Caenorhabditis elegans')])">
            <xsl:attribute name="id">caenorhabditisselegans-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#caenorhabditisselegans-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[caenorhabditisselegans-ref-article-title-check] ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'Caenorhabditis elegans' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'a\.\p{Zs}?thaliana') and not(italic[contains(text() ,'A. thaliana')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'a\.\p{Zs}?thaliana') and not(italic[contains(text() ,'A. thaliana')])">
            <xsl:attribute name="id">asthaliana-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#asthaliana-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[asthaliana-ref-article-title-check] ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'A. thaliana' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'arabidopsis\p{Zs}?thaliana') and not(italic[contains(text() ,'Arabidopsis thaliana')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'arabidopsis\p{Zs}?thaliana') and not(italic[contains(text() ,'Arabidopsis thaliana')])">
            <xsl:attribute name="id">arabidopsissthaliana-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#arabidopsissthaliana-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[arabidopsissthaliana-ref-article-title-check] ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'Arabidopsis thaliana' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'m\.\p{Zs}?thermophila') and not(italic[contains(text() ,'M. thermophila')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'m\.\p{Zs}?thermophila') and not(italic[contains(text() ,'M. thermophila')])">
            <xsl:attribute name="id">msthermophila-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#msthermophila-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[msthermophila-ref-article-title-check] ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'M. thermophila' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'myceliophthora\p{Zs}?thermophila') and not(italic[contains(text() ,'Myceliophthora thermophila')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'myceliophthora\p{Zs}?thermophila') and not(italic[contains(text() ,'Myceliophthora thermophila')])">
            <xsl:attribute name="id">myceliophthorasthermophila-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#myceliophthorasthermophila-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[myceliophthorasthermophila-ref-article-title-check] ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'Myceliophthora thermophila' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'dictyostelium') and not(italic[contains(text() ,'Dictyostelium')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'dictyostelium') and not(italic[contains(text() ,'Dictyostelium')])">
            <xsl:attribute name="id">dictyostelium-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#dictyostelium-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[dictyostelium-ref-article-title-check] ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'Dictyostelium' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'p\.\p{Zs}?falciparum') and not(italic[contains(text() ,'P. falciparum')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'p\.\p{Zs}?falciparum') and not(italic[contains(text() ,'P. falciparum')])">
            <xsl:attribute name="id">psfalciparum-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#psfalciparum-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[psfalciparum-ref-article-title-check] ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'P. falciparum' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'plasmodium\p{Zs}?falciparum') and not(italic[contains(text() ,'Plasmodium falciparum')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'plasmodium\p{Zs}?falciparum') and not(italic[contains(text() ,'Plasmodium falciparum')])">
            <xsl:attribute name="id">plasmodiumsfalciparum-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#plasmodiumsfalciparum-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[plasmodiumsfalciparum-ref-article-title-check] ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'Plasmodium falciparum' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'s\.\p{Zs}?enterica') and not(italic[contains(text() ,'S. enterica')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'s\.\p{Zs}?enterica') and not(italic[contains(text() ,'S. enterica')])">
            <xsl:attribute name="id">ssenterica-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#ssenterica-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[ssenterica-ref-article-title-check] ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'S. enterica' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'salmonella\p{Zs}?enterica') and not(italic[contains(text() ,'Salmonella enterica')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'salmonella\p{Zs}?enterica') and not(italic[contains(text() ,'Salmonella enterica')])">
            <xsl:attribute name="id">salmonellasenterica-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#salmonellasenterica-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[salmonellasenterica-ref-article-title-check] ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'Salmonella enterica' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'s\.\p{Zs}?pyogenes') and not(italic[contains(text() ,'S. pyogenes')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'s\.\p{Zs}?pyogenes') and not(italic[contains(text() ,'S. pyogenes')])">
            <xsl:attribute name="id">sspyogenes-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#sspyogenes-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[sspyogenes-ref-article-title-check] ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'S. pyogenes' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'streptococcus\p{Zs}?pyogenes') and not(italic[contains(text() ,'Streptococcus pyogenes')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'streptococcus\p{Zs}?pyogenes') and not(italic[contains(text() ,'Streptococcus pyogenes')])">
            <xsl:attribute name="id">streptococcusspyogenes-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#streptococcusspyogenes-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[streptococcusspyogenes-ref-article-title-check] ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'Streptococcus pyogenes' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'p\.\p{Zs}?dumerilii') and not(italic[contains(text() ,'P. dumerilii')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'p\.\p{Zs}?dumerilii') and not(italic[contains(text() ,'P. dumerilii')])">
            <xsl:attribute name="id">psdumerilii-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#psdumerilii-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[psdumerilii-ref-article-title-check] ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'P. dumerilii' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'platynereis\p{Zs}?dumerilii') and not(italic[contains(text() ,'Platynereis dumerilii')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'platynereis\p{Zs}?dumerilii') and not(italic[contains(text() ,'Platynereis dumerilii')])">
            <xsl:attribute name="id">platynereissdumerilii-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#platynereissdumerilii-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[platynereissdumerilii-ref-article-title-check] ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'Platynereis dumerilii' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'p\.\p{Zs}?cynocephalus') and not(italic[contains(text() ,'P. cynocephalus')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'p\.\p{Zs}?cynocephalus') and not(italic[contains(text() ,'P. cynocephalus')])">
            <xsl:attribute name="id">pscynocephalus-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#pscynocephalus-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[pscynocephalus-ref-article-title-check] ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'P. cynocephalus' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'papio\p{Zs}?cynocephalus') and not(italic[contains(text() ,'Papio cynocephalus')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'papio\p{Zs}?cynocephalus') and not(italic[contains(text() ,'Papio cynocephalus')])">
            <xsl:attribute name="id">papioscynocephalus-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#papioscynocephalus-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[papioscynocephalus-ref-article-title-check] ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'Papio cynocephalus' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'o\.\p{Zs}?fasciatus') and not(italic[contains(text() ,'O. fasciatus')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'o\.\p{Zs}?fasciatus') and not(italic[contains(text() ,'O. fasciatus')])">
            <xsl:attribute name="id">osfasciatus-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#osfasciatus-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[osfasciatus-ref-article-title-check] ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'O. fasciatus' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'oncopeltus\p{Zs}?fasciatus') and not(italic[contains(text() ,'Oncopeltus fasciatus')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'oncopeltus\p{Zs}?fasciatus') and not(italic[contains(text() ,'Oncopeltus fasciatus')])">
            <xsl:attribute name="id">oncopeltussfasciatus-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#oncopeltussfasciatus-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[oncopeltussfasciatus-ref-article-title-check] ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'Oncopeltus fasciatus' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'n\.\p{Zs}?crassa') and not(italic[contains(text() ,'N. crassa')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'n\.\p{Zs}?crassa') and not(italic[contains(text() ,'N. crassa')])">
            <xsl:attribute name="id">nscrassa-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#nscrassa-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[nscrassa-ref-article-title-check] ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'N. crassa' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'neurospora\p{Zs}?crassa') and not(italic[contains(text() ,'Neurospora crassa')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'neurospora\p{Zs}?crassa') and not(italic[contains(text() ,'Neurospora crassa')])">
            <xsl:attribute name="id">neurosporascrassa-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#neurosporascrassa-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[neurosporascrassa-ref-article-title-check] ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'Neurospora crassa' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'c\.\p{Zs}?intestinalis') and not(italic[contains(text() ,'C. intestinalis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'c\.\p{Zs}?intestinalis') and not(italic[contains(text() ,'C. intestinalis')])">
            <xsl:attribute name="id">csintestinalis-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#csintestinalis-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[csintestinalis-ref-article-title-check] ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'C. intestinalis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'ciona\p{Zs}?intestinalis') and not(italic[contains(text() ,'Ciona intestinalis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'ciona\p{Zs}?intestinalis') and not(italic[contains(text() ,'Ciona intestinalis')])">
            <xsl:attribute name="id">cionasintestinalis-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#cionasintestinalis-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[cionasintestinalis-ref-article-title-check] ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'Ciona intestinalis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'e\.\p{Zs}?cuniculi') and not(italic[contains(text() ,'E. cuniculi')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'e\.\p{Zs}?cuniculi') and not(italic[contains(text() ,'E. cuniculi')])">
            <xsl:attribute name="id">escuniculi-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#escuniculi-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[escuniculi-ref-article-title-check] ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'E. cuniculi' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'encephalitozoon\p{Zs}?cuniculi') and not(italic[contains(text() ,'Encephalitozoon cuniculi')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'encephalitozoon\p{Zs}?cuniculi') and not(italic[contains(text() ,'Encephalitozoon cuniculi')])">
            <xsl:attribute name="id">encephalitozoonscuniculi-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#encephalitozoonscuniculi-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[encephalitozoonscuniculi-ref-article-title-check] ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'Encephalitozoon cuniculi' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'h\.\p{Zs}?salinarum') and not(italic[contains(text() ,'H. salinarum')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'h\.\p{Zs}?salinarum') and not(italic[contains(text() ,'H. salinarum')])">
            <xsl:attribute name="id">hssalinarum-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#hssalinarum-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[hssalinarum-ref-article-title-check] ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'H. salinarum' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'halobacterium\p{Zs}?salinarum') and not(italic[contains(text() ,'Halobacterium salinarum')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'halobacterium\p{Zs}?salinarum') and not(italic[contains(text() ,'Halobacterium salinarum')])">
            <xsl:attribute name="id">halobacteriumssalinarum-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#halobacteriumssalinarum-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[halobacteriumssalinarum-ref-article-title-check] ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'Halobacterium salinarum' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'s\.\p{Zs}?solfataricus') and not(italic[contains(text() ,'S. solfataricus')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'s\.\p{Zs}?solfataricus') and not(italic[contains(text() ,'S. solfataricus')])">
            <xsl:attribute name="id">sssolfataricus-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#sssolfataricus-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[sssolfataricus-ref-article-title-check] ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'S. solfataricus' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'sulfolobus\p{Zs}?solfataricus') and not(italic[contains(text() ,'Sulfolobus solfataricus')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'sulfolobus\p{Zs}?solfataricus') and not(italic[contains(text() ,'Sulfolobus solfataricus')])">
            <xsl:attribute name="id">sulfolobusssolfataricus-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#sulfolobusssolfataricus-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[sulfolobusssolfataricus-ref-article-title-check] ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'Sulfolobus solfataricus' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'s\.\p{Zs}?mediterranea') and not(italic[contains(text() ,'S. mediterranea')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'s\.\p{Zs}?mediterranea') and not(italic[contains(text() ,'S. mediterranea')])">
            <xsl:attribute name="id">ssmediterranea-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#ssmediterranea-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[ssmediterranea-ref-article-title-check] ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'S. mediterranea' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'schmidtea\p{Zs}?mediterranea') and not(italic[contains(text() ,'Schmidtea mediterranea')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'schmidtea\p{Zs}?mediterranea') and not(italic[contains(text() ,'Schmidtea mediterranea')])">
            <xsl:attribute name="id">schmidteasmediterranea-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#schmidteasmediterranea-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[schmidteasmediterranea-ref-article-title-check] ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'Schmidtea mediterranea' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'s\.\p{Zs}?rosetta') and not(italic[contains(text() ,'S. rosetta')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'s\.\p{Zs}?rosetta') and not(italic[contains(text() ,'S. rosetta')])">
            <xsl:attribute name="id">ssrosetta-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#ssrosetta-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[ssrosetta-ref-article-title-check] ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'S. rosetta' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'salpingoeca\p{Zs}?rosetta') and not(italic[contains(text() ,'Salpingoeca rosetta')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'salpingoeca\p{Zs}?rosetta') and not(italic[contains(text() ,'Salpingoeca rosetta')])">
            <xsl:attribute name="id">salpingoecasrosetta-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#salpingoecasrosetta-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[salpingoecasrosetta-ref-article-title-check] ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'Salpingoeca rosetta' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'n\.\p{Zs}?vectensis') and not(italic[contains(text() ,'N. vectensis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'n\.\p{Zs}?vectensis') and not(italic[contains(text() ,'N. vectensis')])">
            <xsl:attribute name="id">nsvectensis-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#nsvectensis-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[nsvectensis-ref-article-title-check] ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'N. vectensis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'nematostella\p{Zs}?vectensis') and not(italic[contains(text() ,'Nematostella vectensis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'nematostella\p{Zs}?vectensis') and not(italic[contains(text() ,'Nematostella vectensis')])">
            <xsl:attribute name="id">nematostellasvectensis-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#nematostellasvectensis-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[nematostellasvectensis-ref-article-title-check] ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'Nematostella vectensis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'s\.\p{Zs}?aureus') and not(italic[contains(text() ,'S. aureus')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'s\.\p{Zs}?aureus') and not(italic[contains(text() ,'S. aureus')])">
            <xsl:attribute name="id">ssaureus-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#ssaureus-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[ssaureus-ref-article-title-check] ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'S. aureus' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'staphylococcus\p{Zs}?aureus') and not(italic[contains(text() ,'Staphylococcus aureus')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'staphylococcus\p{Zs}?aureus') and not(italic[contains(text() ,'Staphylococcus aureus')])">
            <xsl:attribute name="id">staphylococcussaureus-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#staphylococcussaureus-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[staphylococcussaureus-ref-article-title-check] ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'Staphylococcus aureus' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'v\.\p{Zs}?cholerae') and not(italic[contains(text() ,'V. cholerae')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'v\.\p{Zs}?cholerae') and not(italic[contains(text() ,'V. cholerae')])">
            <xsl:attribute name="id">vscholerae-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#vscholerae-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[vscholerae-ref-article-title-check] ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'V. cholerae' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'vibrio\p{Zs}?cholerae') and not(italic[contains(text() ,'Vibrio cholerae')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'vibrio\p{Zs}?cholerae') and not(italic[contains(text() ,'Vibrio cholerae')])">
            <xsl:attribute name="id">vibrioscholerae-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#vibrioscholerae-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[vibrioscholerae-ref-article-title-check] ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'Vibrio cholerae' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'t\.\p{Zs}?thermophila') and not(italic[contains(text() ,'T. thermophila')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'t\.\p{Zs}?thermophila') and not(italic[contains(text() ,'T. thermophila')])">
            <xsl:attribute name="id">tsthermophila-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#tsthermophila-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[tsthermophila-ref-article-title-check] ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'T. thermophila' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'tetrahymena\p{Zs}?thermophila') and not(italic[contains(text() ,'Tetrahymena thermophila')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'tetrahymena\p{Zs}?thermophila') and not(italic[contains(text() ,'Tetrahymena thermophila')])">
            <xsl:attribute name="id">tetrahymenasthermophila-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#tetrahymenasthermophila-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[tetrahymenasthermophila-ref-article-title-check] ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'Tetrahymena thermophila' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'c\.\p{Zs}?reinhardtii') and not(italic[contains(text() ,'C. reinhardtii')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'c\.\p{Zs}?reinhardtii') and not(italic[contains(text() ,'C. reinhardtii')])">
            <xsl:attribute name="id">csreinhardtii-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#csreinhardtii-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[csreinhardtii-ref-article-title-check] ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'C. reinhardtii' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'chlamydomonas\p{Zs}?reinhardtii') and not(italic[contains(text() ,'Chlamydomonas reinhardtii')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'chlamydomonas\p{Zs}?reinhardtii') and not(italic[contains(text() ,'Chlamydomonas reinhardtii')])">
            <xsl:attribute name="id">chlamydomonassreinhardtii-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#chlamydomonassreinhardtii-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[chlamydomonassreinhardtii-ref-article-title-check] ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'Chlamydomonas reinhardtii' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'n\.\p{Zs}?attenuata') and not(italic[contains(text() ,'N. attenuata')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'n\.\p{Zs}?attenuata') and not(italic[contains(text() ,'N. attenuata')])">
            <xsl:attribute name="id">nsattenuata-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#nsattenuata-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[nsattenuata-ref-article-title-check] ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'N. attenuata' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'nicotiana\p{Zs}?attenuata') and not(italic[contains(text() ,'Nicotiana attenuata')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'nicotiana\p{Zs}?attenuata') and not(italic[contains(text() ,'Nicotiana attenuata')])">
            <xsl:attribute name="id">nicotianasattenuata-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#nicotianasattenuata-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[nicotianasattenuata-ref-article-title-check] ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'Nicotiana attenuata' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'e\.\p{Zs}?carotovora') and not(italic[contains(text() ,'E. carotovora')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'e\.\p{Zs}?carotovora') and not(italic[contains(text() ,'E. carotovora')])">
            <xsl:attribute name="id">escarotovora-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#escarotovora-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[escarotovora-ref-article-title-check] ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'E. carotovora' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'erwinia\p{Zs}?carotovora') and not(italic[contains(text() ,'Erwinia carotovora')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'erwinia\p{Zs}?carotovora') and not(italic[contains(text() ,'Erwinia carotovora')])">
            <xsl:attribute name="id">erwiniascarotovora-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#erwiniascarotovora-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[erwiniascarotovora-ref-article-title-check] ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'Erwinia carotovora' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'e\.\p{Zs}?faecalis') and not(italic[contains(text() ,'E. faecalis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'e\.\p{Zs}?faecalis') and not(italic[contains(text() ,'E. faecalis')])">
            <xsl:attribute name="id">esfaecalis-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#esfaecalis-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[esfaecalis-ref-article-title-check] ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'E. faecalis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'h\.\p{Zs}?sapiens') and not(italic[contains(text() ,'H. sapiens')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'h\.\p{Zs}?sapiens') and not(italic[contains(text() ,'H. sapiens')])">
            <xsl:attribute name="id">hsapiens-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#hsapiens-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[hsapiens-ref-article-title-check] ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'H. sapiens' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'homo\p{Zs}?sapiens') and not(italic[contains(text() ,'Homo sapiens')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'homo\p{Zs}?sapiens') and not(italic[contains(text() ,'Homo sapiens')])">
            <xsl:attribute name="id">homosapiens-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#homosapiens-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[homosapiens-ref-article-title-check] ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'Homo sapiens' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'c\.\p{Zs}?trachomatis') and not(italic[contains(text() ,'C. trachomatis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'c\.\p{Zs}?trachomatis') and not(italic[contains(text() ,'C. trachomatis')])">
            <xsl:attribute name="id">ctrachomatis-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#ctrachomatis-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[ctrachomatis-ref-article-title-check] ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'C. trachomatis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'chlamydia\p{Zs}?trachomatis') and not(italic[contains(text() ,'Chlamydia trachomatis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'chlamydia\p{Zs}?trachomatis') and not(italic[contains(text() ,'Chlamydia trachomatis')])">
            <xsl:attribute name="id">chlamydiatrachomatis-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#chlamydiatrachomatis-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[chlamydiatrachomatis-ref-article-title-check] ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'Chlamydia trachomatis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'enterococcus\p{Zs}?faecalis') and not(italic[contains(text() ,'Enterococcus faecalis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'enterococcus\p{Zs}?faecalis') and not(italic[contains(text() ,'Enterococcus faecalis')])">
            <xsl:attribute name="id">enterococcussfaecalis-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#enterococcussfaecalis-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[enterococcussfaecalis-ref-article-title-check] ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'Enterococcus faecalis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'x\.\p{Zs}?laevis') and not(italic[contains(text() ,'X. laevis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'x\.\p{Zs}?laevis') and not(italic[contains(text() ,'X. laevis')])">
            <xsl:attribute name="id">xlaevis-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#xlaevis-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[xlaevis-ref-article-title-check] 
        <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'X. laevis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'xenopus\p{Zs}?laevis') and not(italic[contains(text() ,'Xenopus laevis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'xenopus\p{Zs}?laevis') and not(italic[contains(text() ,'Xenopus laevis')])">
            <xsl:attribute name="id">xenopuslaevis-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#xenopuslaevis-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[xenopuslaevis-ref-article-title-check] 
        <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Xenopus laevis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'x\.\p{Zs}?tropicalis') and not(italic[contains(text() ,'X. tropicalis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'x\.\p{Zs}?tropicalis') and not(italic[contains(text() ,'X. tropicalis')])">
            <xsl:attribute name="id">xtropicalis-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#xtropicalis-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[xtropicalis-ref-article-title-check] 
        <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'X. tropicalis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'xenopus\p{Zs}?tropicalis') and not(italic[contains(text() ,'Xenopus tropicalis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'xenopus\p{Zs}?tropicalis') and not(italic[contains(text() ,'Xenopus tropicalis')])">
            <xsl:attribute name="id">xenopustropicalis-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#xenopustropicalis-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[xenopustropicalis-ref-article-title-check] 
        <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Xenopus tropicalis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'m\.\p{Zs}?musculus') and not(italic[contains(text() ,'M. musculus')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'m\.\p{Zs}?musculus') and not(italic[contains(text() ,'M. musculus')])">
            <xsl:attribute name="id">mmusculus-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#mmusculus-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[mmusculus-ref-article-title-check] 
        <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'M. musculus' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'mus\p{Zs}?musculus') and not(italic[contains(text() ,'Mus musculus')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'mus\p{Zs}?musculus') and not(italic[contains(text() ,'Mus musculus')])">
            <xsl:attribute name="id">musmusculus-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#musmusculus-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[musmusculus-ref-article-title-check] 
        <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Mus musculus' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'d\.\p{Zs}?immigrans') and not(italic[contains(text() ,'D. immigrans')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'d\.\p{Zs}?immigrans') and not(italic[contains(text() ,'D. immigrans')])">
            <xsl:attribute name="id">dimmigrans-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#dimmigrans-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[dimmigrans-ref-article-title-check] 
        <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'D. immigrans' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'drosophila\p{Zs}?immigrans') and not(italic[contains(text() ,'Drosophila immigrans')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'drosophila\p{Zs}?immigrans') and not(italic[contains(text() ,'Drosophila immigrans')])">
            <xsl:attribute name="id">drosophilaimmigrans-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#drosophilaimmigrans-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[drosophilaimmigrans-ref-article-title-check] 
        <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Drosophila immigrans' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'d\.\p{Zs}?subobscura') and not(italic[contains(text() ,'D. subobscura')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'d\.\p{Zs}?subobscura') and not(italic[contains(text() ,'D. subobscura')])">
            <xsl:attribute name="id">dsubobscura-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#dsubobscura-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[dsubobscura-ref-article-title-check] 
        <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'D. subobscura' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'drosophila\p{Zs}?subobscura') and not(italic[contains(text() ,'Drosophila subobscura')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'drosophila\p{Zs}?subobscura') and not(italic[contains(text() ,'Drosophila subobscura')])">
            <xsl:attribute name="id">drosophilasubobscura-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#drosophilasubobscura-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[drosophilasubobscura-ref-article-title-check] 
        <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Drosophila subobscura' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'d\.\p{Zs}?affinis') and not(italic[contains(text() ,'D. affinis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'d\.\p{Zs}?affinis') and not(italic[contains(text() ,'D. affinis')])">
            <xsl:attribute name="id">daffinis-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#daffinis-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[daffinis-ref-article-title-check] 
        <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'D. affinis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'drosophila\p{Zs}?affinis') and not(italic[contains(text() ,'Drosophila affinis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'drosophila\p{Zs}?affinis') and not(italic[contains(text() ,'Drosophila affinis')])">
            <xsl:attribute name="id">drosophilaaffinis-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#drosophilaaffinis-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[drosophilaaffinis-ref-article-title-check] 
        <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Drosophila affinis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'d\.\p{Zs}?obscura') and not(italic[contains(text() ,'D. obscura')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'d\.\p{Zs}?obscura') and not(italic[contains(text() ,'D. obscura')])">
            <xsl:attribute name="id">dobscura-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#dobscura-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[dobscura-ref-article-title-check] 
        <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'D. obscura' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'drosophila\p{Zs}?obscura') and not(italic[contains(text() ,'Drosophila obscura')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'drosophila\p{Zs}?obscura') and not(italic[contains(text() ,'Drosophila obscura')])">
            <xsl:attribute name="id">drosophilaobscura-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#drosophilaobscura-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[drosophilaobscura-ref-article-title-check] 
        <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Drosophila obscura' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'f\.\p{Zs}?tularensis') and not(italic[contains(text() ,'F. tularensis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'f\.\p{Zs}?tularensis') and not(italic[contains(text() ,'F. tularensis')])">
            <xsl:attribute name="id">ftularensis-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#ftularensis-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[ftularensis-ref-article-title-check] 
        <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'F. tularensis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'francisella\p{Zs}?tularensis') and not(italic[contains(text() ,'Francisella tularensis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'francisella\p{Zs}?tularensis') and not(italic[contains(text() ,'Francisella tularensis')])">
            <xsl:attribute name="id">francisellatularensis-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#francisellatularensis-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[francisellatularensis-ref-article-title-check] 
        <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Francisella tularensis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'p\.\p{Zs}?plantaginis') and not(italic[contains(text() ,'P. plantaginis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'p\.\p{Zs}?plantaginis') and not(italic[contains(text() ,'P. plantaginis')])">
            <xsl:attribute name="id">pplantaginis-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#pplantaginis-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[pplantaginis-ref-article-title-check] 
        <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'P. plantaginis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'podosphaera\p{Zs}?plantaginis') and not(italic[contains(text() ,'Podosphaera plantaginis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'podosphaera\p{Zs}?plantaginis') and not(italic[contains(text() ,'Podosphaera plantaginis')])">
            <xsl:attribute name="id">podosphaeraplantaginis-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#podosphaeraplantaginis-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[podosphaeraplantaginis-ref-article-title-check] 
        <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Podosphaera plantaginis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'p\.\p{Zs}?lanceolata') and not(italic[contains(text() ,'P. lanceolata')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'p\.\p{Zs}?lanceolata') and not(italic[contains(text() ,'P. lanceolata')])">
            <xsl:attribute name="id">planceolata-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#planceolata-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[planceolata-ref-article-title-check] 
        <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'P. lanceolata' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'plantago\p{Zs}?lanceolata') and not(italic[contains(text() ,'Plantago lanceolata')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'plantago\p{Zs}?lanceolata') and not(italic[contains(text() ,'Plantago lanceolata')])">
            <xsl:attribute name="id">plantagolanceolata-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#plantagolanceolata-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[plantagolanceolata-ref-article-title-check] 
        <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Plantago lanceolata' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'m\.\p{Zs}?trossulus') and not(italic[contains(text() ,'M. trossulus')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'m\.\p{Zs}?trossulus') and not(italic[contains(text() ,'M. trossulus')])">
            <xsl:attribute name="id">mtrossulus-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#mtrossulus-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[mtrossulus-ref-article-title-check] 
        <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'M. trossulus' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'mytilus\p{Zs}?trossulus') and not(italic[contains(text() ,'Mytilus trossulus')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'mytilus\p{Zs}?trossulus') and not(italic[contains(text() ,'Mytilus trossulus')])">
            <xsl:attribute name="id">mytilustrossulus-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#mytilustrossulus-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[mytilustrossulus-ref-article-title-check] 
        <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Mytilus trossulus' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'m\.\p{Zs}?edulis') and not(italic[contains(text() ,'M. edulis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'m\.\p{Zs}?edulis') and not(italic[contains(text() ,'M. edulis')])">
            <xsl:attribute name="id">medulis-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#medulis-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[medulis-ref-article-title-check] 
        <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'M. edulis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'mytilus\p{Zs}?edulis') and not(italic[contains(text() ,'Mytilus edulis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'mytilus\p{Zs}?edulis') and not(italic[contains(text() ,'Mytilus edulis')])">
            <xsl:attribute name="id">mytilusedulis-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#mytilusedulis-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[mytilusedulis-ref-article-title-check] 
        <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Mytilus edulis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'m\.\p{Zs}?chilensis') and not(italic[contains(text() ,'M. chilensis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'m\.\p{Zs}?chilensis') and not(italic[contains(text() ,'M. chilensis')])">
            <xsl:attribute name="id">mchilensis-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#mchilensis-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[mchilensis-ref-article-title-check] 
        <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'M. chilensis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'mytilus\p{Zs}?chilensis') and not(italic[contains(text() ,'Mytilus chilensis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'mytilus\p{Zs}?chilensis') and not(italic[contains(text() ,'Mytilus chilensis')])">
            <xsl:attribute name="id">mytiluschilensis-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#mytiluschilensis-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[mytiluschilensis-ref-article-title-check] 
        <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Mytilus chilensis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'u\.\p{Zs}?maydis') and not(italic[contains(text() ,'U. maydis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'u\.\p{Zs}?maydis') and not(italic[contains(text() ,'U. maydis')])">
            <xsl:attribute name="id">umaydis-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#umaydis-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[umaydis-ref-article-title-check] 
        <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'U. maydis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'ustilago\p{Zs}?maydis') and not(italic[contains(text() ,'Ustilago maydis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'ustilago\p{Zs}?maydis') and not(italic[contains(text() ,'Ustilago maydis')])">
            <xsl:attribute name="id">ustilagomaydis-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#ustilagomaydis-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[ustilagomaydis-ref-article-title-check] 
        <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Ustilago maydis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'p\.\p{Zs}?knowlesi') and not(italic[contains(text() ,'P. knowlesi')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'p\.\p{Zs}?knowlesi') and not(italic[contains(text() ,'P. knowlesi')])">
            <xsl:attribute name="id">pknowlesi-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#pknowlesi-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[pknowlesi-ref-article-title-check] 
        <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'P. knowlesi' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'plasmodium\p{Zs}?knowlesi') and not(italic[contains(text() ,'Plasmodium knowlesi')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'plasmodium\p{Zs}?knowlesi') and not(italic[contains(text() ,'Plasmodium knowlesi')])">
            <xsl:attribute name="id">plasmodiumknowlesi-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#plasmodiumknowlesi-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[plasmodiumknowlesi-ref-article-title-check] 
        <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Plasmodium knowlesi' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'p\.\p{Zs}?aeruginosa') and not(italic[contains(text() ,'P. aeruginosa')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'p\.\p{Zs}?aeruginosa') and not(italic[contains(text() ,'P. aeruginosa')])">
            <xsl:attribute name="id">paeruginosa-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#paeruginosa-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[paeruginosa-ref-article-title-check] 
        <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'P. aeruginosa' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'pseudomonas\p{Zs}?aeruginosa') and not(italic[contains(text() ,'Pseudomonas aeruginosa')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'pseudomonas\p{Zs}?aeruginosa') and not(italic[contains(text() ,'Pseudomonas aeruginosa')])">
            <xsl:attribute name="id">pseudomonasaeruginosa-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#pseudomonasaeruginosa-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[pseudomonasaeruginosa-ref-article-title-check] 
        <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Pseudomonas aeruginosa' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'t\.\p{Zs}?brucei') and not(italic[contains(text() ,'T. brucei')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'t\.\p{Zs}?brucei') and not(italic[contains(text() ,'T. brucei')])">
            <xsl:attribute name="id">tbrucei-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#tbrucei-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[tbrucei-ref-article-title-check] 
        <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'T. brucei' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'trypanosoma\p{Zs}?brucei') and not(italic[contains(text() ,'Trypanosoma brucei')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'trypanosoma\p{Zs}?brucei') and not(italic[contains(text() ,'Trypanosoma brucei')])">
            <xsl:attribute name="id">trypanosomabrucei-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#trypanosomabrucei-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[trypanosomabrucei-ref-article-title-check] 
        <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Trypanosoma brucei' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'t\.\p{Zs}?gondii') and not(italic[contains(text() ,'T. gondii')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'t\.\p{Zs}?gondii') and not(italic[contains(text() ,'T. gondii')])">
            <xsl:attribute name="id">tgondii-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#tbrucei-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[tgondii-ref-article-title-check] 
        <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'T. gondii' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'toxoplasma\p{Zs}?gondii') and not(italic[contains(text() ,'Toxoplasma gondii')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'toxoplasma\p{Zs}?gondii') and not(italic[contains(text() ,'Toxoplasma gondii')])">
            <xsl:attribute name="id">toxoplasmagondii-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#trypanosomabrucei-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[toxoplasmagondii-ref-article-title-check] 
        <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Toxoplasma gondii' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'d\.\p{Zs}?rerio') and not(italic[contains(text() ,'D. rerio')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'d\.\p{Zs}?rerio') and not(italic[contains(text() ,'D. rerio')])">
            <xsl:attribute name="id">drerio-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#drerio-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[drerio-ref-article-title-check] 
        <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'D. rerio' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'danio\p{Zs}?rerio') and not(italic[contains(text() ,'Danio rerio')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'danio\p{Zs}?rerio') and not(italic[contains(text() ,'Danio rerio')])">
            <xsl:attribute name="id">daniorerio-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#daniorerio-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[daniorerio-ref-article-title-check] 
        <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Danio rerio' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'yimenosaurus') and not(italic[contains(text() ,'Yimenosaurus')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'yimenosaurus') and not(italic[contains(text() ,'Yimenosaurus')])">
            <xsl:attribute name="id">yimenosaurus-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[yimenosaurus-ref-article-title-check] ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'Yimenosaurus' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'lesothosaurus\p{Zs}?diagnosticus') and not(italic[contains(text() ,'Lesothosaurus diagnosticus')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'lesothosaurus\p{Zs}?diagnosticus') and not(italic[contains(text() ,'Lesothosaurus diagnosticus')])">
            <xsl:attribute name="id">lesothosaurusdiagnosticus-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[lesothosaurusdiagnosticus-ref-article-title-check] ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'Lesothosaurus diagnosticus' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'l\.\p{Zs}?diagnosticus') and not(italic[contains(text() ,'L. diagnosticus')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'l\.\p{Zs}?diagnosticus') and not(italic[contains(text() ,'L. diagnosticus')])">
            <xsl:attribute name="id">ldiagnosticus-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[ldiagnosticus-ref-article-title-check] ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'L. diagnosticus' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'scelidosaurus\p{Zs}?harrisonii') and not(italic[contains(text() ,'Scelidosaurus harrisonii')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'scelidosaurus\p{Zs}?harrisonii') and not(italic[contains(text() ,'Scelidosaurus harrisonii')])">
            <xsl:attribute name="id">scelidosaurusHarrisonii-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[scelidosaurusHarrisonii-ref-article-title-check] ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'Scelidosaurus harrisonii' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'s\.\p{Zs}?harrisonii') and not(italic[contains(text() ,'S. harrisonii')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'s\.\p{Zs}?harrisonii') and not(italic[contains(text() ,'S. harrisonii')])">
            <xsl:attribute name="id">sharrisonii-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[sharrisonii-ref-article-title-check] ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'S. harrisonii' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'haya\p{Zs}?griva') and not(italic[contains(text() ,'Haya griva')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'haya\p{Zs}?griva') and not(italic[contains(text() ,'Haya griva')])">
            <xsl:attribute name="id">hayagriva-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[hayagriva-ref-article-title-check] ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'Haya griva' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'h\.\p{Zs}?griva') and not(italic[contains(text() ,'H. griva')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'h\.\p{Zs}?griva') and not(italic[contains(text() ,'H. griva')])">
            <xsl:attribute name="id">hgriva-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[hgriva-ref-article-title-check] ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'H. griva' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'polacanthus\p{Zs}?foxii') and not(italic[contains(text() ,'Polacanthus foxii')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'polacanthus\p{Zs}?foxii') and not(italic[contains(text() ,'Polacanthus foxii')])">
            <xsl:attribute name="id">polacanthusfoxii-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[polacanthusfoxii-ref-article-title-check] ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'Polacanthus foxii' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'p\.\p{Zs}?foxii') and not(italic[contains(text() ,'P. foxii')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'p\.\p{Zs}?foxii') and not(italic[contains(text() ,'P. foxii')])">
            <xsl:attribute name="id">pfoxii-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[pfoxii-ref-article-title-check] ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'P. foxii' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'scutellosaurus\p{Zs}?lawleri') and not(italic[contains(text() ,'Scutellosaurus lawleri')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'scutellosaurus\p{Zs}?lawleri') and not(italic[contains(text() ,'Scutellosaurus lawleri')])">
            <xsl:attribute name="id">scutellosaurusLawleri-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[scutellosaurusLawleri-ref-article-title-check] ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'Scutellosaurus lawleri' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'s\.\p{Zs}?lawleri') and not(italic[contains(text() ,'S. lawleri')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'s\.\p{Zs}?lawleri') and not(italic[contains(text() ,'S. lawleri')])">
            <xsl:attribute name="id">slawleri-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[slawleri-ref-article-title-check] ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'S. lawleri' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'saichania\p{Zs}?chulsanensis') and not(italic[contains(text() ,'Saichania chulsanensis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'saichania\p{Zs}?chulsanensis') and not(italic[contains(text() ,'Saichania chulsanensis')])">
            <xsl:attribute name="id">saichaniachulsanensis-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[saichaniachulsanensis-ref-article-title-check] ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'Saichania chulsanensis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'s\.\p{Zs}?chulsanensis') and not(italic[contains(text() ,'S. chulsanensis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'s\.\p{Zs}?chulsanensis') and not(italic[contains(text() ,'S. chulsanensis')])">
            <xsl:attribute name="id">schulsanensis-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[schulsanensis-ref-article-title-check] ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'S. chulsanensis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'gargoyleosaurus\p{Zs}?parkpinorum') and not(italic[contains(text() ,'Gargoyleosaurus parkpinorum')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'gargoyleosaurus\p{Zs}?parkpinorum') and not(italic[contains(text() ,'Gargoyleosaurus parkpinorum')])">
            <xsl:attribute name="id">gargoyleosaurusparkpinorum-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[gargoyleosaurusparkpinorum-ref-article-title-check] ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'Gargoyleosaurus parkpinorum' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'g\.\p{Zs}?parkpinorum') and not(italic[contains(text() ,'G. parkpinorum')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'g\.\p{Zs}?parkpinorum') and not(italic[contains(text() ,'G. parkpinorum')])">
            <xsl:attribute name="id">gparkpinorum-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[gparkpinorum-ref-article-title-check] ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'G. parkpinorum' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'europelta\p{Zs}?carbonensis') and not(italic[contains(text() ,'Europelta carbonensis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'europelta\p{Zs}?carbonensis') and not(italic[contains(text() ,'Europelta carbonensis')])">
            <xsl:attribute name="id">europeltacarbonensis-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[europeltacarbonensis-ref-article-title-check] ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'Europelta carbonensis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'e\.\p{Zs}?carbonensis') and not(italic[contains(text() ,'E. carbonensis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'e\.\p{Zs}?carbonensis') and not(italic[contains(text() ,'E. carbonensis')])">
            <xsl:attribute name="id">ecarbonensis-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[ecarbonensis-ref-article-title-check] ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'E. carbonensis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'stegosaurus\p{Zs}?stenops') and not(italic[contains(text() ,'Stegosaurus stenops')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'stegosaurus\p{Zs}?stenops') and not(italic[contains(text() ,'Stegosaurus stenops')])">
            <xsl:attribute name="id">stegosaurusstenops-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[stegosaurusstenops-ref-article-title-check] ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'Stegosaurus stenops' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'s\.\p{Zs}?stenops') and not(italic[contains(text() ,'S. stenops')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'s\.\p{Zs}?stenops') and not(italic[contains(text() ,'S. stenops')])">
            <xsl:attribute name="id">sstenops-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[sstenops-ref-article-title-check] ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'S. stenops' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'pinacosaurus\p{Zs}?grangeri') and not(italic[contains(text() ,'Pinacosaurus grangeri')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'pinacosaurus\p{Zs}?grangeri') and not(italic[contains(text() ,'Pinacosaurus grangeri')])">
            <xsl:attribute name="id">pinacosaurusgrangeri-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[pinacosaurusgrangeri-ref-article-title-check] ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'Pinacosaurus grangeri' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'p\.\p{Zs}?grangeri') and not(italic[contains(text() ,'P. grangeri')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'p\.\p{Zs}?grangeri') and not(italic[contains(text() ,'P. grangeri')])">
            <xsl:attribute name="id">pgrangeri-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[pgrangeri-ref-article-title-check] ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'P. grangeri' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'tatisaurus\p{Zs}?oehleri') and not(italic[contains(text() ,'Tatisaurus oehleri')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'tatisaurus\p{Zs}?oehleri') and not(italic[contains(text() ,'Tatisaurus oehleri')])">
            <xsl:attribute name="id">tatisaurusoehleri-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[tatisaurusoehleri-ref-article-title-check] ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'Tatisaurus oehleri' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'t\.\p{Zs}?oehleri') and not(italic[contains(text() ,'T. oehleri')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'t\.\p{Zs}?oehleri') and not(italic[contains(text() ,'T. oehleri')])">
            <xsl:attribute name="id">toehleri-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[toehleri-ref-article-title-check] ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'T. oehleri' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'hungarosaurus\p{Zs}?tormai') and not(italic[contains(text() ,'Hungarosaurus tormai')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'hungarosaurus\p{Zs}?tormai') and not(italic[contains(text() ,'Hungarosaurus tormai')])">
            <xsl:attribute name="id">Hungarosaurustormai-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[Hungarosaurustormai-ref-article-title-check] ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'Hungarosaurus tormai' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'h\.\p{Zs}?tormai') and not(italic[contains(text() ,'H. tormai')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'h\.\p{Zs}?tormai') and not(italic[contains(text() ,'H. tormai')])">
            <xsl:attribute name="id">htormai-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[htormai-ref-article-title-check] ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'H. tormai' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'bienosaurus\p{Zs}?lufengensis') and not(italic[contains(text() ,'Bienosaurus lufengensis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'bienosaurus\p{Zs}?lufengensis') and not(italic[contains(text() ,'Bienosaurus lufengensis')])">
            <xsl:attribute name="id">bienosauruslufengensis-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[bienosauruslufengensis-ref-article-title-check] ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'Bienosaurus lufengensis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'b\.\p{Zs}?lufengensis') and not(italic[contains(text() ,'B. lufengensis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'b\.\p{Zs}?lufengensis') and not(italic[contains(text() ,'B. lufengensis')])">
            <xsl:attribute name="id">blufengensis-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[blufengensis-ref-article-title-check] ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'B. lufengensis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'fabrosaurus\p{Zs}?australis') and not(italic[contains(text() ,'Fabrosaurus australis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'fabrosaurus\p{Zs}?australis') and not(italic[contains(text() ,'Fabrosaurus australis')])">
            <xsl:attribute name="id">fabrosaurusaustralis-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[fabrosaurusaustralis-ref-article-title-check] ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'Fabrosaurus australis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'f\.\p{Zs}?australis') and not(italic[contains(text() ,'F. australis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'f\.\p{Zs}?australis') and not(italic[contains(text() ,'F. australis')])">
            <xsl:attribute name="id">faustralis-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[faustralis-ref-article-title-check] ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'F. australis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'chinshakiangosaurus\p{Zs}?chunghoensis') and not(italic[contains(text() ,'Chinshakiangosaurus chunghoensis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'chinshakiangosaurus\p{Zs}?chunghoensis') and not(italic[contains(text() ,'Chinshakiangosaurus chunghoensis')])">
            <xsl:attribute name="id">chinshakiangosauruschunghoensis-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[chinshakiangosauruschunghoensis-ref-article-title-check] ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'Chinshakiangosaurus chunghoensis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'c\.\p{Zs}?chunghoensis') and not(italic[contains(text() ,'C. chunghoensis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'c\.\p{Zs}?chunghoensis') and not(italic[contains(text() ,'C. chunghoensis')])">
            <xsl:attribute name="id">cchunghoensis-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[cchunghoensis-ref-article-title-check] ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'C. chunghoensis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'euoplocephalus\p{Zs}?tutus') and not(italic[contains(text() ,'Euoplocephalus tutus')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'euoplocephalus\p{Zs}?tutus') and not(italic[contains(text() ,'Euoplocephalus tutus')])">
            <xsl:attribute name="id">euoplocephalustutus-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[euoplocephalustutus-ref-article-title-check] ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'Euoplocephalus tutus' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'e\.\p{Zs}?tutus') and not(italic[contains(text() ,'E. tutus')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'e\.\p{Zs}?tutus') and not(italic[contains(text() ,'E. tutus')])">
            <xsl:attribute name="id">etutus-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[etutus-ref-article-title-check] ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'E. tutus' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'drosophila') and not(italic[contains(text(),'Drosophila')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'drosophila') and not(italic[contains(text(),'Drosophila')])">
            <xsl:attribute name="id">drosophila-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#drosophila-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[drosophila-ref-article-title-check] ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'Drosophila' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'xenopus') and not(italic[contains(text() ,'Xenopus')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'xenopus') and not(italic[contains(text() ,'Xenopus')])">
            <xsl:attribute name="id">xenopus-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#xenopus-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[xenopus-ref-article-title-check] ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'Xenopus' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M465"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M465"/>
   <xsl:template match="@*|node()" priority="-2" mode="M465">
      <xsl:apply-templates select="*" mode="M465"/>
   </xsl:template>

   <!--PATTERN org-title-kwd-pattern-->


	  <!--RULE org-title-kwd-->
   <xsl:template match="article//article-meta/title-group/article-title | article/body//sec/title | article//article-meta//kwd" priority="1000" mode="M466">
      <xsl:variable name="lc" select="lower-case(.)"/>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'b\.\p{Zs}?subtilis') and not(italic[contains(text() ,'B. subtilis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'b\.\p{Zs}?subtilis') and not(italic[contains(text() ,'B. subtilis')])">
            <xsl:attribute name="id">bssubtilis-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[bssubtilis-article-title-check] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'B. subtilis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'bacillus\p{Zs}?subtilis') and not(italic[contains(text() ,'Bacillus subtilis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'bacillus\p{Zs}?subtilis') and not(italic[contains(text() ,'Bacillus subtilis')])">
            <xsl:attribute name="id">bacillusssubtilis-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[bacillusssubtilis-article-title-check] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Bacillus subtilis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'d\.\p{Zs}?melanogaster') and not(italic[contains(text() ,'D. melanogaster')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'d\.\p{Zs}?melanogaster') and not(italic[contains(text() ,'D. melanogaster')])">
            <xsl:attribute name="id">dsmelanogaster-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[dsmelanogaster-article-title-check] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'D. melanogaster' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'drosophila\p{Zs}?melanogaster') and not(italic[contains(text() ,'Drosophila melanogaster')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'drosophila\p{Zs}?melanogaster') and not(italic[contains(text() ,'Drosophila melanogaster')])">
            <xsl:attribute name="id">drosophilasmelanogaster-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[drosophilasmelanogaster-article-title-check] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Drosophila melanogaster' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'e\.\p{Zs}?coli') and not(italic[contains(text() ,'E. coli')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'e\.\p{Zs}?coli') and not(italic[contains(text() ,'E. coli')])">
            <xsl:attribute name="id">escoli-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[escoli-article-title-check] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'E. coli' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'escherichia\p{Zs}?coli') and not(italic[contains(text() ,'Escherichia coli')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'escherichia\p{Zs}?coli') and not(italic[contains(text() ,'Escherichia coli')])">
            <xsl:attribute name="id">escherichiascoli-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[escherichiascoli-article-title-check] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Escherichia coli' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'s\.\p{Zs}?pombe') and not(italic[contains(text() ,'S. pombe')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'s\.\p{Zs}?pombe') and not(italic[contains(text() ,'S. pombe')])">
            <xsl:attribute name="id">sspombe-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[sspombe-article-title-check] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'S. pombe' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'schizosaccharomyces\p{Zs}?pombe') and not(italic[contains(text() ,'Schizosaccharomyces pombe')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'schizosaccharomyces\p{Zs}?pombe') and not(italic[contains(text() ,'Schizosaccharomyces pombe')])">
            <xsl:attribute name="id">schizosaccharomycesspombe-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[schizosaccharomycesspombe-article-title-check] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Schizosaccharomyces pombe' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'s\.\p{Zs}?cerevisiae') and not(italic[contains(text() ,'S. cerevisiae')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'s\.\p{Zs}?cerevisiae') and not(italic[contains(text() ,'S. cerevisiae')])">
            <xsl:attribute name="id">sscerevisiae-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[sscerevisiae-article-title-check] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'S. cerevisiae' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'saccharomyces\p{Zs}?cerevisiae') and not(italic[contains(text() ,'Saccharomyces cerevisiae')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'saccharomyces\p{Zs}?cerevisiae') and not(italic[contains(text() ,'Saccharomyces cerevisiae')])">
            <xsl:attribute name="id">saccharomycesscerevisiae-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[saccharomycesscerevisiae-article-title-check] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Saccharomyces cerevisiae' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'c\.\p{Zs}?elegans') and not(italic[contains(text() ,'C. elegans')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'c\.\p{Zs}?elegans') and not(italic[contains(text() ,'C. elegans')])">
            <xsl:attribute name="id">cselegans-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[cselegans-article-title-check] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'C. elegans' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'caenorhabditis\p{Zs}?elegans') and not(italic[contains(text() ,'Caenorhabditis elegans')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'caenorhabditis\p{Zs}?elegans') and not(italic[contains(text() ,'Caenorhabditis elegans')])">
            <xsl:attribute name="id">caenorhabditisselegans-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[caenorhabditisselegans-article-title-check] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Caenorhabditis elegans' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'a\.\p{Zs}?thaliana') and not(italic[contains(text() ,'A. thaliana')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'a\.\p{Zs}?thaliana') and not(italic[contains(text() ,'A. thaliana')])">
            <xsl:attribute name="id">asthaliana-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[asthaliana-article-title-check] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'A. thaliana' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'arabidopsis\p{Zs}?thaliana') and not(italic[contains(text() ,'Arabidopsis thaliana')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'arabidopsis\p{Zs}?thaliana') and not(italic[contains(text() ,'Arabidopsis thaliana')])">
            <xsl:attribute name="id">arabidopsissthaliana-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[arabidopsissthaliana-article-title-check] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Arabidopsis thaliana' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'m\.\p{Zs}?thermophila') and not(italic[contains(text() ,'M. thermophila')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'m\.\p{Zs}?thermophila') and not(italic[contains(text() ,'M. thermophila')])">
            <xsl:attribute name="id">msthermophila-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[msthermophila-article-title-check] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'M. thermophila' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'myceliophthora\p{Zs}?thermophila') and not(italic[contains(text() ,'Myceliophthora thermophila')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'myceliophthora\p{Zs}?thermophila') and not(italic[contains(text() ,'Myceliophthora thermophila')])">
            <xsl:attribute name="id">myceliophthorasthermophila-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[myceliophthorasthermophila-article-title-check] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Myceliophthora thermophila' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'dictyostelium') and not(italic[contains(text() ,'Dictyostelium')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'dictyostelium') and not(italic[contains(text() ,'Dictyostelium')])">
            <xsl:attribute name="id">dictyostelium-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[dictyostelium-article-title-check] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Dictyostelium' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'p\.\p{Zs}?falciparum') and not(italic[contains(text() ,'P. falciparum')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'p\.\p{Zs}?falciparum') and not(italic[contains(text() ,'P. falciparum')])">
            <xsl:attribute name="id">psfalciparum-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[psfalciparum-article-title-check] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'P. falciparum' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'plasmodium\p{Zs}?falciparum') and not(italic[contains(text() ,'Plasmodium falciparum')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'plasmodium\p{Zs}?falciparum') and not(italic[contains(text() ,'Plasmodium falciparum')])">
            <xsl:attribute name="id">plasmodiumsfalciparum-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[plasmodiumsfalciparum-article-title-check] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Plasmodium falciparum' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'s\.\p{Zs}?enterica') and not(italic[contains(text() ,'S. enterica')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'s\.\p{Zs}?enterica') and not(italic[contains(text() ,'S. enterica')])">
            <xsl:attribute name="id">ssenterica-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[ssenterica-article-title-check] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'S. enterica' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'salmonella\p{Zs}?enterica') and not(italic[contains(text() ,'Salmonella enterica')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'salmonella\p{Zs}?enterica') and not(italic[contains(text() ,'Salmonella enterica')])">
            <xsl:attribute name="id">salmonellasenterica-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[salmonellasenterica-article-title-check] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Salmonella enterica' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'s\.\p{Zs}?pyogenes') and not(italic[contains(text() ,'S. pyogenes')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'s\.\p{Zs}?pyogenes') and not(italic[contains(text() ,'S. pyogenes')])">
            <xsl:attribute name="id">sspyogenes-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[sspyogenes-article-title-check] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'S. pyogenes' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'streptococcus\p{Zs}?pyogenes') and not(italic[contains(text() ,'Streptococcus pyogenes')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'streptococcus\p{Zs}?pyogenes') and not(italic[contains(text() ,'Streptococcus pyogenes')])">
            <xsl:attribute name="id">streptococcusspyogenes-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[streptococcusspyogenes-article-title-check] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Streptococcus pyogenes' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'p\.\p{Zs}?dumerilii') and not(italic[contains(text() ,'P. dumerilii')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'p\.\p{Zs}?dumerilii') and not(italic[contains(text() ,'P. dumerilii')])">
            <xsl:attribute name="id">psdumerilii-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[psdumerilii-article-title-check] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'P. dumerilii' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'platynereis\p{Zs}?dumerilii') and not(italic[contains(text() ,'Platynereis dumerilii')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'platynereis\p{Zs}?dumerilii') and not(italic[contains(text() ,'Platynereis dumerilii')])">
            <xsl:attribute name="id">platynereissdumerilii-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[platynereissdumerilii-article-title-check] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Platynereis dumerilii' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'p\.\p{Zs}?cynocephalus') and not(italic[contains(text() ,'P. cynocephalus')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'p\.\p{Zs}?cynocephalus') and not(italic[contains(text() ,'P. cynocephalus')])">
            <xsl:attribute name="id">pscynocephalus-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[pscynocephalus-article-title-check] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'P. cynocephalus' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'papio\p{Zs}?cynocephalus') and not(italic[contains(text() ,'Papio cynocephalus')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'papio\p{Zs}?cynocephalus') and not(italic[contains(text() ,'Papio cynocephalus')])">
            <xsl:attribute name="id">papioscynocephalus-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[papioscynocephalus-article-title-check] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Papio cynocephalus' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'o\.\p{Zs}?fasciatus') and not(italic[contains(text() ,'O. fasciatus')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'o\.\p{Zs}?fasciatus') and not(italic[contains(text() ,'O. fasciatus')])">
            <xsl:attribute name="id">osfasciatus-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[osfasciatus-article-title-check] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'O. fasciatus' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'oncopeltus\p{Zs}?fasciatus') and not(italic[contains(text() ,'Oncopeltus fasciatus')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'oncopeltus\p{Zs}?fasciatus') and not(italic[contains(text() ,'Oncopeltus fasciatus')])">
            <xsl:attribute name="id">oncopeltussfasciatus-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[oncopeltussfasciatus-article-title-check] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Oncopeltus fasciatus' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'n\.\p{Zs}?crassa') and not(italic[contains(text() ,'N. crassa')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'n\.\p{Zs}?crassa') and not(italic[contains(text() ,'N. crassa')])">
            <xsl:attribute name="id">nscrassa-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[nscrassa-article-title-check] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'N. crassa' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'neurospora\p{Zs}?crassa') and not(italic[contains(text() ,'Neurospora crassa')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'neurospora\p{Zs}?crassa') and not(italic[contains(text() ,'Neurospora crassa')])">
            <xsl:attribute name="id">neurosporascrassa-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[neurosporascrassa-article-title-check] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Neurospora crassa' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'c\.\p{Zs}?intestinalis') and not(italic[contains(text() ,'C. intestinalis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'c\.\p{Zs}?intestinalis') and not(italic[contains(text() ,'C. intestinalis')])">
            <xsl:attribute name="id">csintestinalis-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[csintestinalis-article-title-check] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'C. intestinalis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'ciona\p{Zs}?intestinalis') and not(italic[contains(text() ,'Ciona intestinalis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'ciona\p{Zs}?intestinalis') and not(italic[contains(text() ,'Ciona intestinalis')])">
            <xsl:attribute name="id">cionasintestinalis-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[cionasintestinalis-article-title-check] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Ciona intestinalis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'e\.\p{Zs}?cuniculi') and not(italic[contains(text() ,'E. cuniculi')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'e\.\p{Zs}?cuniculi') and not(italic[contains(text() ,'E. cuniculi')])">
            <xsl:attribute name="id">escuniculi-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[escuniculi-article-title-check] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'E. cuniculi' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'encephalitozoon\p{Zs}?cuniculi') and not(italic[contains(text() ,'Encephalitozoon cuniculi')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'encephalitozoon\p{Zs}?cuniculi') and not(italic[contains(text() ,'Encephalitozoon cuniculi')])">
            <xsl:attribute name="id">encephalitozoonscuniculi-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[encephalitozoonscuniculi-article-title-check] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Encephalitozoon cuniculi' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'h\.\p{Zs}?salinarum') and not(italic[contains(text() ,'H. salinarum')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'h\.\p{Zs}?salinarum') and not(italic[contains(text() ,'H. salinarum')])">
            <xsl:attribute name="id">hssalinarum-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[hssalinarum-article-title-check] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'H. salinarum' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'halobacterium\p{Zs}?salinarum') and not(italic[contains(text() ,'Halobacterium salinarum')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'halobacterium\p{Zs}?salinarum') and not(italic[contains(text() ,'Halobacterium salinarum')])">
            <xsl:attribute name="id">halobacteriumssalinarum-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[halobacteriumssalinarum-article-title-check] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Halobacterium salinarum' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'s\.\p{Zs}?solfataricus') and not(italic[contains(text() ,'S. solfataricus')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'s\.\p{Zs}?solfataricus') and not(italic[contains(text() ,'S. solfataricus')])">
            <xsl:attribute name="id">sssolfataricus-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[sssolfataricus-article-title-check] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'S. solfataricus' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'sulfolobus\p{Zs}?solfataricus') and not(italic[contains(text() ,'Sulfolobus solfataricus')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'sulfolobus\p{Zs}?solfataricus') and not(italic[contains(text() ,'Sulfolobus solfataricus')])">
            <xsl:attribute name="id">sulfolobusssolfataricus-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[sulfolobusssolfataricus-article-title-check] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Sulfolobus solfataricus' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'s\.\p{Zs}?mediterranea') and not(italic[contains(text() ,'S. mediterranea')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'s\.\p{Zs}?mediterranea') and not(italic[contains(text() ,'S. mediterranea')])">
            <xsl:attribute name="id">ssmediterranea-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[ssmediterranea-article-title-check] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'S. mediterranea' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'schmidtea\p{Zs}?mediterranea') and not(italic[contains(text() ,'Schmidtea mediterranea')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'schmidtea\p{Zs}?mediterranea') and not(italic[contains(text() ,'Schmidtea mediterranea')])">
            <xsl:attribute name="id">schmidteasmediterranea-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[schmidteasmediterranea-article-title-check] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Schmidtea mediterranea' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'s\.\p{Zs}?rosetta') and not(italic[contains(text() ,'S. rosetta')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'s\.\p{Zs}?rosetta') and not(italic[contains(text() ,'S. rosetta')])">
            <xsl:attribute name="id">ssrosetta-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[ssrosetta-article-title-check] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'S. rosetta' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'salpingoeca\p{Zs}?rosetta') and not(italic[contains(text() ,'Salpingoeca rosetta')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'salpingoeca\p{Zs}?rosetta') and not(italic[contains(text() ,'Salpingoeca rosetta')])">
            <xsl:attribute name="id">salpingoecasrosetta-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[salpingoecasrosetta-article-title-check] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Salpingoeca rosetta' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'n\.\p{Zs}?vectensis') and not(italic[contains(text() ,'N. vectensis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'n\.\p{Zs}?vectensis') and not(italic[contains(text() ,'N. vectensis')])">
            <xsl:attribute name="id">nsvectensis-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[nsvectensis-article-title-check] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'N. vectensis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'nematostella\p{Zs}?vectensis') and not(italic[contains(text() ,'Nematostella vectensis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'nematostella\p{Zs}?vectensis') and not(italic[contains(text() ,'Nematostella vectensis')])">
            <xsl:attribute name="id">nematostellasvectensis-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[nematostellasvectensis-article-title-check] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Nematostella vectensis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'s\.\p{Zs}?aureus') and not(italic[contains(text() ,'S. aureus')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'s\.\p{Zs}?aureus') and not(italic[contains(text() ,'S. aureus')])">
            <xsl:attribute name="id">ssaureus-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[ssaureus-article-title-check] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'S. aureus' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'staphylococcus\p{Zs}?aureus') and not(italic[contains(text() ,'Staphylococcus aureus')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'staphylococcus\p{Zs}?aureus') and not(italic[contains(text() ,'Staphylococcus aureus')])">
            <xsl:attribute name="id">staphylococcussaureus-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[staphylococcussaureus-article-title-check] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Staphylococcus aureus' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'v\.\p{Zs}?cholerae') and not(italic[contains(text() ,'V. cholerae')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'v\.\p{Zs}?cholerae') and not(italic[contains(text() ,'V. cholerae')])">
            <xsl:attribute name="id">vscholerae-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[vscholerae-article-title-check] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'V. cholerae' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'vibrio\p{Zs}?cholerae') and not(italic[contains(text() ,'Vibrio cholerae')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'vibrio\p{Zs}?cholerae') and not(italic[contains(text() ,'Vibrio cholerae')])">
            <xsl:attribute name="id">vibrioscholerae-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[vibrioscholerae-article-title-check] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Vibrio cholerae' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'t\.\p{Zs}?thermophila') and not(italic[contains(text() ,'T. thermophila')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'t\.\p{Zs}?thermophila') and not(italic[contains(text() ,'T. thermophila')])">
            <xsl:attribute name="id">tsthermophila-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[tsthermophila-article-title-check] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'T. thermophila' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'tetrahymena\p{Zs}?thermophila') and not(italic[contains(text() ,'Tetrahymena thermophila')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'tetrahymena\p{Zs}?thermophila') and not(italic[contains(text() ,'Tetrahymena thermophila')])">
            <xsl:attribute name="id">tetrahymenasthermophila-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[tetrahymenasthermophila-article-title-check] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Tetrahymena thermophila' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'c\.\p{Zs}?reinhardtii') and not(italic[contains(text() ,'C. reinhardtii')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'c\.\p{Zs}?reinhardtii') and not(italic[contains(text() ,'C. reinhardtii')])">
            <xsl:attribute name="id">csreinhardtii-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[csreinhardtii-article-title-check] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'C. reinhardtii' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'chlamydomonas\p{Zs}?reinhardtii') and not(italic[contains(text() ,'Chlamydomonas reinhardtii')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'chlamydomonas\p{Zs}?reinhardtii') and not(italic[contains(text() ,'Chlamydomonas reinhardtii')])">
            <xsl:attribute name="id">chlamydomonassreinhardtii-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[chlamydomonassreinhardtii-article-title-check] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Chlamydomonas reinhardtii' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'n\.\p{Zs}?attenuata') and not(italic[contains(text() ,'N. attenuata')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'n\.\p{Zs}?attenuata') and not(italic[contains(text() ,'N. attenuata')])">
            <xsl:attribute name="id">nsattenuata-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[nsattenuata-article-title-check] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'N. attenuata' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'nicotiana\p{Zs}?attenuata') and not(italic[contains(text() ,'Nicotiana attenuata')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'nicotiana\p{Zs}?attenuata') and not(italic[contains(text() ,'Nicotiana attenuata')])">
            <xsl:attribute name="id">nicotianasattenuata-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[nicotianasattenuata-article-title-check] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Nicotiana attenuata' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'e\.\p{Zs}?carotovora') and not(italic[contains(text() ,'E. carotovora')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'e\.\p{Zs}?carotovora') and not(italic[contains(text() ,'E. carotovora')])">
            <xsl:attribute name="id">escarotovora-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[escarotovora-article-title-check] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'E. carotovora' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'erwinia\p{Zs}?carotovora') and not(italic[contains(text() ,'Erwinia carotovora')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'erwinia\p{Zs}?carotovora') and not(italic[contains(text() ,'Erwinia carotovora')])">
            <xsl:attribute name="id">erwiniascarotovora-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[erwiniascarotovora-article-title-check] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Erwinia carotovora' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'h\.\p{Zs}?sapiens') and not(italic[contains(text() ,'H. sapiens')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'h\.\p{Zs}?sapiens') and not(italic[contains(text() ,'H. sapiens')])">
            <xsl:attribute name="id">hsapiens-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[hsapiens-article-title-check] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'H. sapiens' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'homo\p{Zs}?sapiens') and not(italic[contains(text() ,'Homo sapiens')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'homo\p{Zs}?sapiens') and not(italic[contains(text() ,'Homo sapiens')])">
            <xsl:attribute name="id">homosapiens-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[homosapiens-article-title-check] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Homo sapiens' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'c\.\p{Zs}?trachomatis') and not(italic[contains(text() ,'C. trachomatis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'c\.\p{Zs}?trachomatis') and not(italic[contains(text() ,'C. trachomatis')])">
            <xsl:attribute name="id">ctrachomatis-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[ctrachomatis-article-title-check] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'C. trachomatis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'chlamydia\p{Zs}?trachomatis') and not(italic[contains(text() ,'Chlamydia trachomatis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'chlamydia\p{Zs}?trachomatis') and not(italic[contains(text() ,'Chlamydia trachomatis')])">
            <xsl:attribute name="id">chlamydiatrachomatis-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[chlamydiatrachomatis-article-title-check] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Chlamydia trachomatis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'e\.\p{Zs}?faecalis') and not(italic[contains(text() ,'E. faecalis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'e\.\p{Zs}?faecalis') and not(italic[contains(text() ,'E. faecalis')])">
            <xsl:attribute name="id">esfaecalis-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[esfaecalis-article-title-check] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'E. faecalis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'enterococcus\p{Zs}?faecalis') and not(italic[contains(text() ,'Enterococcus faecalis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'enterococcus\p{Zs}?faecalis') and not(italic[contains(text() ,'Enterococcus faecalis')])">
            <xsl:attribute name="id">enterococcussfaecalis-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[enterococcussfaecalis-article-title-check] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Enterococcus faecalis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'x\.\p{Zs}?laevis') and not(italic[contains(text() ,'X. laevis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'x\.\p{Zs}?laevis') and not(italic[contains(text() ,'X. laevis')])">
            <xsl:attribute name="id">xlaevis-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[xlaevis-article-title-check] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'X. laevis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'xenopus\p{Zs}?laevis') and not(italic[contains(text() ,'Xenopus laevis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'xenopus\p{Zs}?laevis') and not(italic[contains(text() ,'Xenopus laevis')])">
            <xsl:attribute name="id">xenopuslaevis-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[xenopuslaevis-article-title-check] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Xenopus laevis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'x\.\p{Zs}?tropicalis') and not(italic[contains(text() ,'X. tropicalis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'x\.\p{Zs}?tropicalis') and not(italic[contains(text() ,'X. tropicalis')])">
            <xsl:attribute name="id">xtropicalis-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[xtropicalis-article-title-check] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'X. tropicalis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'xenopus\p{Zs}?tropicalis') and not(italic[contains(text() ,'Xenopus tropicalis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'xenopus\p{Zs}?tropicalis') and not(italic[contains(text() ,'Xenopus tropicalis')])">
            <xsl:attribute name="id">xenopustropicalis-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[xenopustropicalis-article-title-check] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Xenopus tropicalis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'m\.\p{Zs}?musculus') and not(italic[contains(text() ,'M. musculus')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'m\.\p{Zs}?musculus') and not(italic[contains(text() ,'M. musculus')])">
            <xsl:attribute name="id">mmusculus-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[mmusculus-article-title-check] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'M. musculus' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'mus\p{Zs}?musculus') and not(italic[contains(text() ,'Mus musculus')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'mus\p{Zs}?musculus') and not(italic[contains(text() ,'Mus musculus')])">
            <xsl:attribute name="id">musmusculus-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[musmusculus-article-title-check] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Mus musculus' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'d\.\p{Zs}?immigrans') and not(italic[contains(text() ,'D. immigrans')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'d\.\p{Zs}?immigrans') and not(italic[contains(text() ,'D. immigrans')])">
            <xsl:attribute name="id">dimmigrans-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[dimmigrans-article-title-check] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'D. immigrans' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'drosophila\p{Zs}?immigrans') and not(italic[contains(text() ,'Drosophila immigrans')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'drosophila\p{Zs}?immigrans') and not(italic[contains(text() ,'Drosophila immigrans')])">
            <xsl:attribute name="id">drosophilaimmigrans-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[drosophilaimmigrans-article-title-check] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Drosophila immigrans' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'d\.\p{Zs}?subobscura') and not(italic[contains(text() ,'D. subobscura')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'d\.\p{Zs}?subobscura') and not(italic[contains(text() ,'D. subobscura')])">
            <xsl:attribute name="id">dsubobscura-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[dsubobscura-article-title-check] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'D. subobscura' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'drosophila\p{Zs}?subobscura') and not(italic[contains(text() ,'Drosophila subobscura')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'drosophila\p{Zs}?subobscura') and not(italic[contains(text() ,'Drosophila subobscura')])">
            <xsl:attribute name="id">drosophilasubobscura-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[drosophilasubobscura-article-title-check] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Drosophila subobscura' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'d\.\p{Zs}?affinis') and not(italic[contains(text() ,'D. affinis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'d\.\p{Zs}?affinis') and not(italic[contains(text() ,'D. affinis')])">
            <xsl:attribute name="id">daffinis-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[daffinis-article-title-check] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'D. affinis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'drosophila\p{Zs}?affinis') and not(italic[contains(text() ,'Drosophila affinis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'drosophila\p{Zs}?affinis') and not(italic[contains(text() ,'Drosophila affinis')])">
            <xsl:attribute name="id">drosophilaaffinis-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[drosophilaaffinis-article-title-check] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Drosophila affinis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'d\.\p{Zs}?obscura') and not(italic[contains(text() ,'D. obscura')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'d\.\p{Zs}?obscura') and not(italic[contains(text() ,'D. obscura')])">
            <xsl:attribute name="id">dobscura-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[dobscura-article-title-check] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'D. obscura' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'drosophila\p{Zs}?obscura') and not(italic[contains(text() ,'Drosophila obscura')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'drosophila\p{Zs}?obscura') and not(italic[contains(text() ,'Drosophila obscura')])">
            <xsl:attribute name="id">drosophilaobscura-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[drosophilaobscura-article-title-check] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Drosophila obscura' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'f\.\p{Zs}?tularensis') and not(italic[contains(text() ,'F. tularensis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'f\.\p{Zs}?tularensis') and not(italic[contains(text() ,'F. tularensis')])">
            <xsl:attribute name="id">ftularensis-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[ftularensis-article-title-check] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'F. tularensis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'francisella\p{Zs}?tularensis') and not(italic[contains(text() ,'Francisella tularensis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'francisella\p{Zs}?tularensis') and not(italic[contains(text() ,'Francisella tularensis')])">
            <xsl:attribute name="id">francisellatularensis-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[francisellatularensis-article-title-check] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Francisella tularensis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'p\.\p{Zs}?plantaginis') and not(italic[contains(text() ,'P. plantaginis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'p\.\p{Zs}?plantaginis') and not(italic[contains(text() ,'P. plantaginis')])">
            <xsl:attribute name="id">pplantaginis-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[pplantaginis-article-title-check] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'P. plantaginis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'podosphaera\p{Zs}?plantaginis') and not(italic[contains(text() ,'Podosphaera plantaginis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'podosphaera\p{Zs}?plantaginis') and not(italic[contains(text() ,'Podosphaera plantaginis')])">
            <xsl:attribute name="id">podosphaeraplantaginis-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[podosphaeraplantaginis-article-title-check] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Podosphaera plantaginis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'p\.\p{Zs}?lanceolata') and not(italic[contains(text() ,'P. lanceolata')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'p\.\p{Zs}?lanceolata') and not(italic[contains(text() ,'P. lanceolata')])">
            <xsl:attribute name="id">planceolata-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[planceolata-article-title-check] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'P. lanceolata' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'plantago\p{Zs}?lanceolata') and not(italic[contains(text() ,'Plantago lanceolata')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'plantago\p{Zs}?lanceolata') and not(italic[contains(text() ,'Plantago lanceolata')])">
            <xsl:attribute name="id">plantagolanceolata-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[plantagolanceolata-article-title-check] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Plantago lanceolata' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'m\.\p{Zs}?trossulus') and not(italic[contains(text() ,'M. trossulus')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'m\.\p{Zs}?trossulus') and not(italic[contains(text() ,'M. trossulus')])">
            <xsl:attribute name="id">mtrossulus-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[mtrossulus-article-title-check] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'M. trossulus' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'mytilus\p{Zs}?trossulus') and not(italic[contains(text() ,'Mytilus trossulus')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'mytilus\p{Zs}?trossulus') and not(italic[contains(text() ,'Mytilus trossulus')])">
            <xsl:attribute name="id">mytilustrossulus-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[mytilustrossulus-article-title-check] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Mytilus trossulus' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'m\.\p{Zs}?edulis') and not(italic[contains(text() ,'M. edulis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'m\.\p{Zs}?edulis') and not(italic[contains(text() ,'M. edulis')])">
            <xsl:attribute name="id">medulis-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[medulis-article-title-check] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'M. edulis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'mytilus\p{Zs}?edulis') and not(italic[contains(text() ,'Mytilus edulis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'mytilus\p{Zs}?edulis') and not(italic[contains(text() ,'Mytilus edulis')])">
            <xsl:attribute name="id">mytilusedulis-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[mytilusedulis-article-title-check] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Mytilus edulis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'m\.\p{Zs}?chilensis') and not(italic[contains(text() ,'M. chilensis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'m\.\p{Zs}?chilensis') and not(italic[contains(text() ,'M. chilensis')])">
            <xsl:attribute name="id">mchilensis-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[mchilensis-article-title-check] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'M. chilensis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'mytilus\p{Zs}?chilensis') and not(italic[contains(text() ,'Mytilus chilensis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'mytilus\p{Zs}?chilensis') and not(italic[contains(text() ,'Mytilus chilensis')])">
            <xsl:attribute name="id">mytiluschilensis-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[mytiluschilensis-article-title-check] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Mytilus chilensis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'u\.\p{Zs}?maydis') and not(italic[contains(text() ,'U. maydis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'u\.\p{Zs}?maydis') and not(italic[contains(text() ,'U. maydis')])">
            <xsl:attribute name="id">umaydis-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[umaydis-article-title-check] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'U. maydis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'ustilago\p{Zs}?maydis') and not(italic[contains(text() ,'Ustilago maydis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'ustilago\p{Zs}?maydis') and not(italic[contains(text() ,'Ustilago maydis')])">
            <xsl:attribute name="id">ustilagomaydis-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[ustilagomaydis-article-title-check] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Ustilago maydis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'p\.\p{Zs}?knowlesi') and not(italic[contains(text() ,'P. knowlesi')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'p\.\p{Zs}?knowlesi') and not(italic[contains(text() ,'P. knowlesi')])">
            <xsl:attribute name="id">pknowlesi-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[pknowlesi-article-title-check] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'P. knowlesi' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'plasmodium\p{Zs}?knowlesi') and not(italic[contains(text() ,'Plasmodium knowlesi')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'plasmodium\p{Zs}?knowlesi') and not(italic[contains(text() ,'Plasmodium knowlesi')])">
            <xsl:attribute name="id">plasmodiumknowlesi-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[plasmodiumknowlesi-article-title-check] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Plasmodium knowlesi' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'p\.\p{Zs}?aeruginosa') and not(italic[contains(text() ,'P. aeruginosa')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'p\.\p{Zs}?aeruginosa') and not(italic[contains(text() ,'P. aeruginosa')])">
            <xsl:attribute name="id">paeruginosa-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[paeruginosa-article-title-check] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'P. aeruginosa' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT info-->
      <xsl:if test="matches($lc,'pseudomonas\p{Zs}?aeruginosa') and not(italic[contains(text() ,'Pseudomonas aeruginosa')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'pseudomonas\p{Zs}?aeruginosa') and not(italic[contains(text() ,'Pseudomonas aeruginosa')])">
            <xsl:attribute name="id">pseudomonasaeruginosa-article-title-check</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[pseudomonasaeruginosa-article-title-check] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Pseudomonas aeruginosa' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'t\.\p{Zs}?brucei') and not(italic[contains(text() ,'T. brucei')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'t\.\p{Zs}?brucei') and not(italic[contains(text() ,'T. brucei')])">
            <xsl:attribute name="id">tbrucei-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[tbrucei-article-title-check] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'T. brucei' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'trypanosoma\p{Zs}?brucei') and not(italic[contains(text() ,'Trypanosoma brucei')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'trypanosoma\p{Zs}?brucei') and not(italic[contains(text() ,'Trypanosoma brucei')])">
            <xsl:attribute name="id">trypanosomabrucei-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[trypanosomabrucei-article-title-check] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Trypanosoma brucei' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'t\.\p{Zs}?gondii') and not(italic[contains(text() ,'T. gondii')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'t\.\p{Zs}?gondii') and not(italic[contains(text() ,'T. gondii')])">
            <xsl:attribute name="id">tgondii-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[tgondii-article-title-check] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'T. gondii' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'toxoplasma\p{Zs}?gondii') and not(italic[contains(text() ,'Toxoplasma gondii')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'toxoplasma\p{Zs}?gondii') and not(italic[contains(text() ,'Toxoplasma gondii')])">
            <xsl:attribute name="id">toxoplasmagondii-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[toxoplasmagondii-article-title-check] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Toxoplasma gondii' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'d\.\p{Zs}?rerio') and not(italic[contains(text() ,'D. rerio')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'d\.\p{Zs}?rerio') and not(italic[contains(text() ,'D. rerio')])">
            <xsl:attribute name="id">drerio-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[drerio-article-title-check] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'D. rerio' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'danio\p{Zs}?rerio') and not(italic[contains(text() ,'Danio rerio')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'danio\p{Zs}?rerio') and not(italic[contains(text() ,'Danio rerio')])">
            <xsl:attribute name="id">daniorerio-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[daniorerio-article-title-check] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Danio rerio' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'yimenosaurus') and not(italic[contains(text() ,'Yimenosaurus')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'yimenosaurus') and not(italic[contains(text() ,'Yimenosaurus')])">
            <xsl:attribute name="id">yimenosaurus-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[yimenosaurus-article-title-check] 
        <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Yimenosaurus' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'scelidosaurus\p{Zs}?harrisonii') and not(italic[contains(text() ,'Scelidosaurus harrisonii')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'scelidosaurus\p{Zs}?harrisonii') and not(italic[contains(text() ,'Scelidosaurus harrisonii')])">
            <xsl:attribute name="id">scelidosaurusharrisonii-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[scelidosaurusharrisonii-article-title-check] 
        <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Scelidosaurus harrisonii' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'s\.\p{Zs}?harrisonii') and not(italic[contains(text() ,'S. harrisonii')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'s\.\p{Zs}?harrisonii') and not(italic[contains(text() ,'S. harrisonii')])">
            <xsl:attribute name="id">sharrisonii-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[sharrisonii-article-title-check] 
        <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'S. harrisonii' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'haya\p{Zs}?griva') and not(italic[contains(text() ,'Haya griva')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'haya\p{Zs}?griva') and not(italic[contains(text() ,'Haya griva')])">
            <xsl:attribute name="id">hayagriva-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[hayagriva-article-title-check] 
        <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Haya griva' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'h\.\p{Zs}?griva') and not(italic[contains(text() ,'H. griva')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'h\.\p{Zs}?griva') and not(italic[contains(text() ,'H. griva')])">
            <xsl:attribute name="id">hgriva-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[hgriva-article-title-check] 
        <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'H. griva' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'polacanthus\p{Zs}?foxii') and not(italic[contains(text() ,'Polacanthus foxii')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'polacanthus\p{Zs}?foxii') and not(italic[contains(text() ,'Polacanthus foxii')])">
            <xsl:attribute name="id">polacanthusfoxii-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[polacanthusfoxii-article-title-check] 
        <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Polacanthus foxii' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'p\.\p{Zs}?foxii') and not(italic[contains(text() ,'P. foxii')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'p\.\p{Zs}?foxii') and not(italic[contains(text() ,'P. foxii')])">
            <xsl:attribute name="id">pfoxii-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[pfoxii-article-title-check] 
        <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'P. foxii' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'scutellosaurus\p{Zs}?lawleri') and not(italic[contains(text() ,'Scutellosaurus lawleri')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'scutellosaurus\p{Zs}?lawleri') and not(italic[contains(text() ,'Scutellosaurus lawleri')])">
            <xsl:attribute name="id">scutellosauruslawleri-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[scutellosauruslawleri-article-title-check] 
        <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Scutellosaurus lawleri' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'s\.\p{Zs}?lawleri') and not(italic[contains(text() ,'S. lawleri')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'s\.\p{Zs}?lawleri') and not(italic[contains(text() ,'S. lawleri')])">
            <xsl:attribute name="id">slawleri-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[slawleri-article-title-check] 
        <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'S. lawleri' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'saichania\p{Zs}?chulsanensis') and not(italic[contains(text() ,'Saichania chulsanensis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'saichania\p{Zs}?chulsanensis') and not(italic[contains(text() ,'Saichania chulsanensis')])">
            <xsl:attribute name="id">saichaniachulsanensis-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[saichaniachulsanensis-article-title-check] 
        <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Saichania chulsanensis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'s\.\p{Zs}?chulsanensis') and not(italic[contains(text() ,'S. chulsanensis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'s\.\p{Zs}?chulsanensis') and not(italic[contains(text() ,'S. chulsanensis')])">
            <xsl:attribute name="id">schulsanensis-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[schulsanensis-article-title-check] 
        <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'S. chulsanensis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'gargoyleosaurus\p{Zs}?parkpinorum') and not(italic[contains(text() ,'Gargoyleosaurus parkpinorum')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'gargoyleosaurus\p{Zs}?parkpinorum') and not(italic[contains(text() ,'Gargoyleosaurus parkpinorum')])">
            <xsl:attribute name="id">gargoyleosaurusparkpinorum-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[gargoyleosaurusparkpinorum-article-title-check] 
        <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Gargoyleosaurus parkpinorum' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'g\.\p{Zs}?parkpinorum') and not(italic[contains(text() ,'G. parkpinorum')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'g\.\p{Zs}?parkpinorum') and not(italic[contains(text() ,'G. parkpinorum')])">
            <xsl:attribute name="id">gparkpinorum-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[gparkpinorum-article-title-check] 
        <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'G. parkpinorum' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'europelta\p{Zs}?carbonensis') and not(italic[contains(text() ,'Europelta carbonensis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'europelta\p{Zs}?carbonensis') and not(italic[contains(text() ,'Europelta carbonensis')])">
            <xsl:attribute name="id">europeltacarbonensis-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[europeltacarbonensis-article-title-check] 
        <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Europelta carbonensis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'e\.\p{Zs}?carbonensis') and not(italic[contains(text() ,'E. carbonensis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'e\.\p{Zs}?carbonensis') and not(italic[contains(text() ,'E. carbonensis')])">
            <xsl:attribute name="id">ecarbonensis-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[ecarbonensis-article-title-check] 
        <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'E. carbonensis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'stegosaurus\p{Zs}?stenops') and not(italic[contains(text() ,'Stegosaurus stenops')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'stegosaurus\p{Zs}?stenops') and not(italic[contains(text() ,'Stegosaurus stenops')])">
            <xsl:attribute name="id">stegosaurusstenops-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[stegosaurusstenops-article-title-check] 
        <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Stegosaurus stenops' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'s\.\p{Zs}?stenops') and not(italic[contains(text() ,'S. stenops')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'s\.\p{Zs}?stenops') and not(italic[contains(text() ,'S. stenops')])">
            <xsl:attribute name="id">sstenops-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[sstenops-article-title-check] 
        <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'S. stenops' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'pinacosaurus\p{Zs}?grangeri') and not(italic[contains(text() ,'Pinacosaurus grangeri')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'pinacosaurus\p{Zs}?grangeri') and not(italic[contains(text() ,'Pinacosaurus grangeri')])">
            <xsl:attribute name="id">pinacosaurusgrangeri-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[pinacosaurusgrangeri-article-title-check] 
        <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Pinacosaurus grangeri' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'p\.\p{Zs}?grangeri') and not(italic[contains(text() ,'P. grangeri')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'p\.\p{Zs}?grangeri') and not(italic[contains(text() ,'P. grangeri')])">
            <xsl:attribute name="id">pgrangeri-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[pgrangeri-article-title-check] 
        <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'P. grangeri' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'tatisaurus\p{Zs}?oehleri') and not(italic[contains(text() ,'Tatisaurus oehleri')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'tatisaurus\p{Zs}?oehleri') and not(italic[contains(text() ,'Tatisaurus oehleri')])">
            <xsl:attribute name="id">tatisaurusoehleri-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[tatisaurusoehleri-article-title-check] 
        <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Tatisaurus oehleri' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'t\.\p{Zs}?oehleri') and not(italic[contains(text() ,'T. oehleri')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'t\.\p{Zs}?oehleri') and not(italic[contains(text() ,'T. oehleri')])">
            <xsl:attribute name="id">toehleri-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[toehleri-article-title-check] 
        <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'T. oehleri' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'hungarosaurus\p{Zs}?tormai') and not(italic[contains(text() ,'Hungarosaurus tormai')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'hungarosaurus\p{Zs}?tormai') and not(italic[contains(text() ,'Hungarosaurus tormai')])">
            <xsl:attribute name="id">hungarosaurustormai-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[hungarosaurustormai-article-title-check] 
        <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Hungarosaurus tormai' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'h\.\p{Zs}?tormai') and not(italic[contains(text() ,'H. tormai')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'h\.\p{Zs}?tormai') and not(italic[contains(text() ,'H. tormai')])">
            <xsl:attribute name="id">htormai-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[htormai-article-title-check] 
        <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'H. tormai' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'lesothosaurus\p{Zs}?diagnosticus') and not(italic[contains(text() ,'Lesothosaurus diagnosticus')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'lesothosaurus\p{Zs}?diagnosticus') and not(italic[contains(text() ,'Lesothosaurus diagnosticus')])">
            <xsl:attribute name="id">lesothosaurusdiagnosticus-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[lesothosaurusdiagnosticus-article-title-check] 
        <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Lesothosaurus diagnosticus' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'l\.\p{Zs}?diagnosticus') and not(italic[contains(text() ,'L. diagnosticus')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'l\.\p{Zs}?diagnosticus') and not(italic[contains(text() ,'L. diagnosticus')])">
            <xsl:attribute name="id">ldiagnosticus-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[ldiagnosticus-article-title-check] 
        <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'L. diagnosticus' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'bienosaurus\p{Zs}?lufengensis') and not(italic[contains(text() ,'Bienosaurus lufengensis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'bienosaurus\p{Zs}?lufengensis') and not(italic[contains(text() ,'Bienosaurus lufengensis')])">
            <xsl:attribute name="id">bienosauruslufengensis-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[bienosauruslufengensis-article-title-check] 
        <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Bienosaurus lufengensis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'b\.\p{Zs}?lufengensis') and not(italic[contains(text() ,'B. lufengensis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'b\.\p{Zs}?lufengensis') and not(italic[contains(text() ,'B. lufengensis')])">
            <xsl:attribute name="id">blufengensis-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[blufengensis-article-title-check] 
        <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'B. lufengensis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'fabrosaurus\p{Zs}?australis') and not(italic[contains(text() ,'Fabrosaurus australis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'fabrosaurus\p{Zs}?australis') and not(italic[contains(text() ,'Fabrosaurus australis')])">
            <xsl:attribute name="id">fabrosaurusaustralis-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[fabrosaurusaustralis-article-title-check] 
        <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Fabrosaurus australis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'f\.\p{Zs}?australis') and not(italic[contains(text() ,'F. australis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'f\.\p{Zs}?australis') and not(italic[contains(text() ,'F. australis')])">
            <xsl:attribute name="id">faustralis-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[faustralis-article-title-check] 
        <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'F. australis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'chinshakiangosaurus\p{Zs}?chunghoensis') and not(italic[contains(text() ,'Chinshakiangosaurus chunghoensis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'chinshakiangosaurus\p{Zs}?chunghoensis') and not(italic[contains(text() ,'Chinshakiangosaurus chunghoensis')])">
            <xsl:attribute name="id">chinshakiangosauruschunghoensis-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[chinshakiangosauruschunghoensis-article-title-check] 
        <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Chinshakiangosaurus chunghoensis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'c\.\p{Zs}?chunghoensis') and not(italic[contains(text() ,'C. chunghoensis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'c\.\p{Zs}?chunghoensis') and not(italic[contains(text() ,'C. chunghoensis')])">
            <xsl:attribute name="id">cchunghoensis-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[cchunghoensis-article-title-check] 
        <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'C. chunghoensis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'euoplocephalus\p{Zs}?tutus') and not(italic[contains(text() ,'Euoplocephalus tutus')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'euoplocephalus\p{Zs}?tutus') and not(italic[contains(text() ,'Euoplocephalus tutus')])">
            <xsl:attribute name="id">euoplocephalustutus-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[euoplocephalustutus-article-title-check] 
        <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Euoplocephalus tutus' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'e\.\p{Zs}?tutus') and not(italic[contains(text() ,'E. tutus')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'e\.\p{Zs}?tutus') and not(italic[contains(text() ,'E. tutus')])">
            <xsl:attribute name="id">etutus-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[etutus-article-title-check] 
        <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'E. tutus' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'drosophila') and not(italic[contains(text(),'Drosophila')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'drosophila') and not(italic[contains(text(),'Drosophila')])">
            <xsl:attribute name="id">drosophila-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[drosophila-article-title-check] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Drosophila' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'xenopus') and not(italic[contains(text() ,'Xenopus')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'xenopus') and not(italic[contains(text() ,'Xenopus')])">
            <xsl:attribute name="id">xenopus-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[xenopus-article-title-check] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Xenopus' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M466"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M466"/>
   <xsl:template match="@*|node()" priority="-2" mode="M466">
      <xsl:apply-templates select="*" mode="M466"/>
   </xsl:template>

   <!--PATTERN unallowed-symbol-tests-pattern-->


	  <!--RULE unallowed-symbol-tests-->
   <xsl:template match="p|td|th|title|xref|bold|italic|sub|sc|named-content|monospace|code|underline|fn|institution|ext-link" priority="1000" mode="M467">

		<!--REPORT error-->
      <xsl:if test="contains(.,'©')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'©')">
            <xsl:attribute name="id">copyright-symbol</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[copyright-symbol] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains the copyright symbol, '©', which is not allowed.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="contains(.,'™')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'™')">
            <xsl:attribute name="id">trademark-symbol</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[trademark-symbol] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains the trademark symbol, '™', which is not allowed.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="contains(.,'®')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'®')">
            <xsl:attribute name="id">reg-trademark-symbol</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[reg-trademark-symbol] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains the registered trademark symbol, '®', which is not allowed.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,' [Ii]nc\. |[Ii]nc\.\)|[Ii]nc\.,')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,' [Ii]nc\. |[Ii]nc\.\)|[Ii]nc\.,')">
            <xsl:attribute name="id">Inc-presence</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[Inc-presence] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'Inc.' with a full stop. Remove the full stop.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,' [Aa]nd [Aa]nd ')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,' [Aa]nd [Aa]nd ')">
            <xsl:attribute name="id">andand-presence</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[andand-presence] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains ' and and ' which is very likely to be incorrect.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,'[Ff]igure [Ff]igure')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'[Ff]igure [Ff]igure')">
            <xsl:attribute name="id">figurefigure-presence</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/asset-citations#figurefigure-presence</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[figurefigure-presence] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains ' figure figure ' which is very likely to be incorrect.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(translate(.,'—– ','-- '),'[\+\-]\p{Zs}+/\p{Zs}?[\+\-]|[\+\-]\p{Zs}?/\p{Zs}+[\+\-]')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(translate(.,'—– ','-- '),'[\+\-]\p{Zs}+/\p{Zs}?[\+\-]|[\+\-]\p{Zs}?/\p{Zs}+[\+\-]')">
            <xsl:attribute name="id">plus-minus-presence</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[plus-minus-presence] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains two plus or minus signs separated by a space and a forward slash (such as '+ /-'). Should the space be removed? - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="not(ancestor::sub-article) and matches(.,'\p{Zs}?[Ss]upplemental [Ff]igure')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="not(ancestor::sub-article) and matches(.,'\p{Zs}?[Ss]upplemental [Ff]igure')">
            <xsl:attribute name="id">supplementalfigure-presence</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/asset-citations#supplementalfigure-presence</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[supplementalfigure-presence] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains the phrase ' Supplemental figure ' which almost certainly needs updating. <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> starts with - <xsl:text/>
               <xsl:value-of select="substring(.,1,25)"/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="not(ancestor::sub-article) and matches(.,'\p{Zs}?[Ss]upplemental [Ff]ile')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="not(ancestor::sub-article) and matches(.,'\p{Zs}?[Ss]upplemental [Ff]ile')">
            <xsl:attribute name="id">supplementalfile-presence</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/asset-citations#supplementalfile-presence</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[supplementalfile-presence] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains the phrase ' Supplemental file ' which almost certainly needs updating. <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> starts with - <xsl:text/>
               <xsl:value-of select="substring(.,1,25)"/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="not(ancestor::sub-article) and matches(.,'\p{Zs}?[Ss]upplementary [Ff]igure')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="not(ancestor::sub-article) and matches(.,'\p{Zs}?[Ss]upplementary [Ff]igure')">
            <xsl:attribute name="id">supplementaryfigure-presence</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/asset-citations#supplementaryfigure-presence</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[supplementaryfigure-presence] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains the phrase ' Supplementary figure ' which almost certainly needs updating. If it's unclear which figure/figure supplement should be cited, please query the authors. <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> starts with - <xsl:text/>
               <xsl:value-of select="substring(.,1,25)"/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="not(ancestor::sub-article) and matches(.,'\p{Zs}?[Ss]upplementa(l|ry) [Tt]able')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="not(ancestor::sub-article) and matches(.,'\p{Zs}?[Ss]upplementa(l|ry) [Tt]able')">
            <xsl:attribute name="id">supplement-table-presence</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/asset-citations#supplement-table-presence</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[supplement-table-presence] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains the phrase 'Supplementary table' or 'Supplemental table'. Does it need updating? If it's unclear what should be cited, please query the authors. <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> starts with - <xsl:text/>
               <xsl:value-of select="substring(.,1,25)"/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="not(local-name()='code') and not(ancestor::sub-article) and matches(.,' [Rr]ef\. ')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="not(local-name()='code') and not(ancestor::sub-article) and matches(.,' [Rr]ef\. ')">
            <xsl:attribute name="id">ref-presence</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[ref-presence] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'Ref.' which is either incorrect or unnecessary.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="not(local-name()='code') and not(ancestor::sub-article) and matches(.,' [Rr]efs\. ')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="not(local-name()='code') and not(ancestor::sub-article) and matches(.,' [Rr]efs\. ')">
            <xsl:attribute name="id">refs-presence</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[refs-presence] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'Refs.' which is either incorrect or unnecessary.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="contains(.,'�')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'�')">
            <xsl:attribute name="id">replacement-character-presence</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[replacement-character-presence] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains the replacement character '�' which is not allowed.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="contains(.,'')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'')">
            <xsl:attribute name="id">junk-character-presence</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[junk-character-presence] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains a junk character '' which should be replaced.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(.,'¿')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'¿')">
            <xsl:attribute name="id">inverterted-question-presence</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[inverterted-question-presence] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains an inverted question mark '¿' which should very likely be replaced/removed.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="some $x in self::*[not(local-name() = ('monospace','code'))]/text() satisfies matches($x,'\(\)|\[\]')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="some $x in self::*[not(local-name() = ('monospace','code'))]/text() satisfies matches($x,'\(\)|\[\]')">
            <xsl:attribute name="id">empty-parentheses-presence</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[empty-parentheses-presence] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains empty parentheses ('[]', or '()'). Is there a missing citation within the parentheses? Or perhaps this is a piece of code that needs formatting?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,'&amp;#x\d')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'&amp;#x\d')">
            <xsl:attribute name="id">broken-unicode-presence</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[broken-unicode-presence] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains what looks like a broken unicode - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="not(ancestor::sub-article) and not(local-name()='code') and contains(.,'..') and not(contains(.,'...'))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="not(ancestor::sub-article) and not(local-name()='code') and contains(.,'..') and not(contains(.,'...'))">
            <xsl:attribute name="id">extra-full-stop-presence</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[extra-full-stop-presence] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains what looks two full stops right next to each other (..) - Is that correct? - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="not(local-name()='code') and not(inline-formula|element-citation|code|disp-formula|table-wrap|list|inline-graphic|supplementary-material|break) and matches(replace(.,' ',' '),'\s\s+')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="not(local-name()='code') and not(inline-formula|element-citation|code|disp-formula|table-wrap|list|inline-graphic|supplementary-material|break) and matches(replace(.,' ',' '),'\s\s+')">
            <xsl:attribute name="id">extra-space-presence</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[extra-space-presence] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains two or more spaces right next to each other - it is very likely that only 1 space is necessary - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="contains(.,'&#x9D;')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'&#x9D;')">
            <xsl:attribute name="id">operating-system-command-presence</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[operating-system-command-presence] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains an operating system command character '&#x9D;' (unicode string: &amp;#x9D;) which should very likely be replaced/removed. - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M467"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M467"/>
   <xsl:template match="@*|node()" priority="-2" mode="M467">
      <xsl:apply-templates select="*" mode="M467"/>
   </xsl:template>

   <!--PATTERN unallowed-symbol-tests-sup-pattern-->


	  <!--RULE unallowed-symbol-tests-sup-->
   <xsl:template match="sup" priority="1000" mode="M468">

		<!--REPORT error-->
      <xsl:if test="contains(.,'©')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'©')">
            <xsl:attribute name="id">copyright-symbol-sup</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[copyright-symbol-sup] '<xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/>' element contains the copyright symbol, '©', which is not allowed.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="contains(.,'™')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'™')">
            <xsl:attribute name="id">trademark-symbol-1-sup</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[trademark-symbol-1-sup] '<xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/>' element contains the trademark symbol, '™', which is not allowed.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test=". = 'TM'">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test=". = 'TM'">
            <xsl:attribute name="id">trademark-symbol-2-sup</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[trademark-symbol-2-sup] '<xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/>' element contains the text 'TM', which means that it resembles the trademark symbol. The trademark symbol is not allowed.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="contains(.,'®')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'®')">
            <xsl:attribute name="id">reg-trademark-symbol-sup</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[reg-trademark-symbol-sup] '<xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/>' element contains the registered trademark symbol, '®', which is not allowed.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="contains(.,'°')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'°')">
            <xsl:attribute name="id">degree-symbol-sup</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[degree-symbol-sup] '<xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/>' element contains the degree symbol, '°', which is not unnecessary. It does not need to be superscript.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(.,'○')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'○')">
            <xsl:attribute name="id">white-circle-symbol-sup</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[white-circle-symbol-sup] '<xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/>' element contains the white circle symbol, '○'. Should this be a (non-superscript) degree symbol - ° - instead?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(.,'∘')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'∘')">
            <xsl:attribute name="id">ring-op-symbol-sup</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[ring-op-symbol-sup] '<xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/>' element contains the Ring Operator symbol, '∘'. Should this be a (non-superscript) degree symbol - ° - instead?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(.,'˚')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'˚')">
            <xsl:attribute name="id">ring-diacritic-symbol-sup</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[ring-diacritic-symbol-sup] '<xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/>' element contains the ring above symbol, '∘'. Should this be a (non-superscript) degree symbol - ° - instead?</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M468"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M468"/>
   <xsl:template match="@*|node()" priority="-2" mode="M468">
      <xsl:apply-templates select="*" mode="M468"/>
   </xsl:template>

   <!--PATTERN underline-tests-pattern-->


	  <!--RULE underline-tests-->
   <xsl:template match="underline" priority="1000" mode="M469">

		<!--REPORT warning-->
      <xsl:if test="matches(.,'^\p{P}*$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'^\p{P}*$')">
            <xsl:attribute name="id">underline-test-1</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[underline-test-1] '<xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/>' element only contains punctuation - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> - Should it have underline formatting?</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M469"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M469"/>
   <xsl:template match="@*|node()" priority="-2" mode="M469">
      <xsl:apply-templates select="*" mode="M469"/>
   </xsl:template>

   <!--PATTERN latex-tests-pattern-->


	  <!--RULE latex-tests-->
   <xsl:template match="p[not(descendant::mml:math)]|td[not(descendant::mml:math)]|th[not(descendant::mml:math)]|monospace|code" priority="1000" mode="M470">

		<!--REPORT warning-->
      <xsl:if test="matches(.,'\p{Zs}*\\[a-z]*\p{Ps}')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'\p{Zs}*\\[a-z]*\p{Ps}')">
            <xsl:attribute name="id">latex-test</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[latex-test] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains what looks like possible LaTeX. Please check that this is correct (i.e. that it is not the case that the authors included LaTeX markup expecting the content to be rendered as it would be in LaTeX. Content - "<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>"</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M470"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M470"/>
   <xsl:template match="@*|node()" priority="-2" mode="M470">
      <xsl:apply-templates select="*" mode="M470"/>
   </xsl:template>

   <!--PATTERN country-tests-pattern-->


	  <!--RULE country-tests-->
   <xsl:template match="front//aff/country" priority="1000" mode="M471">
      <xsl:variable name="text" select="self::*/text()"/>
      <xsl:variable name="countries" select="'countries.xml'"/>
      <xsl:variable name="city" select="parent::aff/descendant::named-content[@content-type='city'][1]"/>

		    <!--REPORT error-->
      <xsl:if test="$text = 'United States of America'">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="$text = 'United States of America'">
            <xsl:attribute name="id">united-states-test-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[united-states-test-1] <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> is not allowed it. This should be 'United States'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="$text = 'USA'">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="$text = 'USA'">
            <xsl:attribute name="id">united-states-test-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[united-states-test-2] <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> is not allowed it. This should be 'United States'</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="$text = 'UK'">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="$text = 'UK'">
            <xsl:attribute name="id">united-kingdom-test-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[united-kingdom-test-2] <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> is not allowed it. This should be 'United Kingdom'</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="$text = document($countries)/countries/country"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="$text = document($countries)/countries/country">
               <xsl:attribute name="id">gen-country-test</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[gen-country-test] affiliation contains a country which is not in the allowed list - <xsl:text/>
                  <xsl:value-of select="."/>
                  <xsl:text/>. For a list of allowed countries, refer to https://github.com/elifesciences/eLife-JATS-schematron/blob/master/src/countries.xml.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="(. = 'Singapore') and ($city != 'Singapore')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(. = 'Singapore') and ($city != 'Singapore')">
            <xsl:attribute name="id">singapore-test-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[singapore-test-1] <xsl:text/>
               <xsl:value-of select="ancestor::aff/@id"/>
               <xsl:text/> has 'Singapore' as its country but '<xsl:text/>
               <xsl:value-of select="$city"/>
               <xsl:text/>' as its city, which must be incorrect.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="(. != 'Taiwan') and  (matches(lower-case($city),'ta[i]?pei|tai\p{Zs}?chung|kaohsiung|taoyuan|tainan|hsinchu|keelung|chiayi|changhua|jhongli|tao-yuan|hualien'))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(. != 'Taiwan') and (matches(lower-case($city),'ta[i]?pei|tai\p{Zs}?chung|kaohsiung|taoyuan|tainan|hsinchu|keelung|chiayi|changhua|jhongli|tao-yuan|hualien'))">
            <xsl:attribute name="id">taiwan-test</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[taiwan-test] Affiliation has a Taiwanese city - <xsl:text/>
               <xsl:value-of select="$city"/>
               <xsl:text/> - but its country is '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>'. Please check the original manuscript. If it has 'Taiwan' as the country in the original manuscript then ensure it is changed to 'Taiwan'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="(. != 'Republic of Korea') and  (matches(lower-case($city),'chuncheon|gyeongsan|daejeon|seoul|daegu|gwangju|ansan|goyang|suwon|gwanju|ochang|wonju|jeonnam|cheongju|ulsan|inharo|chonnam|miryang|pohang|deagu|gwangjin-gu|gyeonggi-do|incheon|gimhae|gyungnam|muan-gun|chungbuk|chungnam|ansung|cheongju-si'))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(. != 'Republic of Korea') and (matches(lower-case($city),'chuncheon|gyeongsan|daejeon|seoul|daegu|gwangju|ansan|goyang|suwon|gwanju|ochang|wonju|jeonnam|cheongju|ulsan|inharo|chonnam|miryang|pohang|deagu|gwangjin-gu|gyeonggi-do|incheon|gimhae|gyungnam|muan-gun|chungbuk|chungnam|ansung|cheongju-si'))">
            <xsl:attribute name="id">s-korea-test</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[s-korea-test] Affiliation has a South Korean city - <xsl:text/>
               <xsl:value-of select="$city"/>
               <xsl:text/> - but its country is '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>', instead of 'Republic of Korea'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="replace(.,'\p{P}','') = 'Democratic Peoples Republic of Korea'">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="replace(.,'\p{P}','') = 'Democratic Peoples Republic of Korea'">
            <xsl:attribute name="id">n-korea-test</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[n-korea-test] Affiliation has '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>' as its country which is very likely to be incorrect.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M471"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M471"/>
   <xsl:template match="@*|node()" priority="-2" mode="M471">
      <xsl:apply-templates select="*" mode="M471"/>
   </xsl:template>

   <!--PATTERN city-tests-pattern-->


	  <!--RULE city-tests-->
   <xsl:template match="front//aff//named-content[@content-type='city']" priority="1000" mode="M472">
      <xsl:variable name="lc" select="normalize-space(lower-case(.))"/>
      <xsl:variable name="states-regex" select="'^alabama$|^al$|^alaska$|^ak$|^arizona$|^az$|^arkansas$|^ar$|^california$|^ca$|^colorado$|^co$|^connecticut$|^ct$|^delaware$|^de$|^florida$|^fl$|^georgia$|^ga$|^hawaii$|^hi$|^idaho$|^id$|^illinois$|^il$|^indiana$|^in$|^iowa$|^ia$|^kansas$|^ks$|^kentucky$|^ky$|^louisiana$|^la$|^maine$|^me$|^maryland$|^md$|^massachusetts$|^ma$|^michigan$|^mi$|^minnesota$|^mn$|^mississippi$|^ms$|^missouri$|^mo$|^montana$|^mt$|^nebraska$|^ne$|^nevada$|^nv$|^new hampshire$|^nh$|^new jersey$|^nj$|^new mexico$|^nm$|^ny$|^north carolina$|^nc$|^north dakota$|^nd$|^ohio$|^oh$|^oklahoma$|^ok$|^oregon$|^or$|^pennsylvania$|^pa$|^rhode island$|^ri$|^south carolina$|^sc$|^south dakota$|^sd$|^tennessee$|^tn$|^texas$|^tx$|^utah$|^ut$|^vermont$|^vt$|^virginia$|^va$|^wa$|^west virginia$|^wv$|^wisconsin$|^wi$|^wyoming$|^wy$'"/>

		    <!--REPORT error-->
      <xsl:if test="matches($lc,$states-regex)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,$states-regex)">
            <xsl:attribute name="id">final-US-states-test</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[final-US-states-test] city contains a US state (or an abbreviation for it) - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="(. = 'Singapore') and (ancestor::aff/country/text() != 'Singapore')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(. = 'Singapore') and (ancestor::aff/country/text() != 'Singapore')">
            <xsl:attribute name="id">singapore-test-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[singapore-test-2] <xsl:text/>
               <xsl:value-of select="ancestor::aff/@id"/>
               <xsl:text/> has 'Singapore' as its city but '<xsl:text/>
               <xsl:value-of select="ancestor::aff/country/text()"/>
               <xsl:text/>' as its country, which must be incorrect.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches(.,'�')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'�')">
            <xsl:attribute name="id">city-replacement-character-presence</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[city-replacement-character-presence] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains the replacement character '�' which is unallowed.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,'\d')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'\d')">
            <xsl:attribute name="id">city-number-presence</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[city-number-presence] city contains a number, which is almost certainly incorrect - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(lower-case(.),'^rue | rue |^street | street |^building | building |^straße | straße |^stadt | stadt |^platz | platz |^strada | strada |^cedex | cedex |^blvd | blvd |^boulevard| boulevard ')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(lower-case(.),'^rue | rue |^street | street |^building | building |^straße | straße |^stadt | stadt |^platz | platz |^strada | strada |^cedex | cedex |^blvd | blvd |^boulevard| boulevard ')">
            <xsl:attribute name="id">city-street-presence</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[city-street-presence] city likely contains a street or building name, which is almost certainly incorrect - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M472"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M472"/>
   <xsl:template match="@*|node()" priority="-2" mode="M472">
      <xsl:apply-templates select="*" mode="M472"/>
   </xsl:template>

   <!--PATTERN institution-tests-pattern-->


	  <!--RULE institution-tests-->
   <xsl:template match="aff/institution[not(@*)]" priority="1000" mode="M473">
      <xsl:variable name="city" select="parent::*/addr-line[1]/named-content[@content-type='city'][1]"/>

		    <!--REPORT error-->
      <xsl:if test="matches(normalize-space(.),'[Uu]niversity of [Cc]alifornia$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(normalize-space(.),'[Uu]niversity of [Cc]alifornia$')">
            <xsl:attribute name="id">UC-no-test1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[UC-no-test1] <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> is not allowed as insitution name, since this is always followed by city name. This should very likely be <xsl:text/>
               <xsl:value-of select="concat('University of California, ',$city)"/>
               <xsl:text/> (provided there is a city tagged).</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(normalize-space(.),'[Uu]niversity of [Cc]alifornia.') and not(contains(.,'San Diego')) and ($city !='') and not(contains(.,$city))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(normalize-space(.),'[Uu]niversity of [Cc]alifornia.') and not(contains(.,'San Diego')) and ($city !='') and not(contains(.,$city))">
            <xsl:attribute name="id">UC-no-test-2</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[UC-no-test-2] <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> has '<xsl:text/>
               <xsl:value-of select="substring-after(.,'alifornia')"/>
               <xsl:text/>' as its campus name in the institution field, but '<xsl:text/>
               <xsl:value-of select="$city"/>
               <xsl:text/>' is the city. Which is correct? Should it end with '<xsl:text/>
               <xsl:value-of select="concat('University of California, ',following-sibling::addr-line[1]/named-content[@content-type='city'][1])"/>
               <xsl:text/>' instead?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(normalize-space(.),'[Uu]niversity of [Cc]alifornia.') and not(contains(.,'San Diego')) and ($city='La Jolla')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(normalize-space(.),'[Uu]niversity of [Cc]alifornia.') and not(contains(.,'San Diego')) and ($city='La Jolla')">
            <xsl:attribute name="id">UC-no-test-3</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[UC-no-test-3] <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> has '<xsl:text/>
               <xsl:value-of select="substring-after(.,'alifornia')"/>
               <xsl:text/>' as its campus name in the institution field, but '<xsl:text/>
               <xsl:value-of select="$city"/>
               <xsl:text/>' is the city. Should the institution end with 'University of California, San Diego' instead?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches(.,'�')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'�')">
            <xsl:attribute name="id">institution-replacement-character-presence</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[institution-replacement-character-presence] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains the replacement character '�' which is unallowed.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(lower-case(.),'^rue | rue |^street | street |^building | building |^straße | straße |^stadt | stadt |^platz | platz |^strada | strada |^cedex | cedex |^blvd | blvd |^boulevard| boulevard ')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(lower-case(.),'^rue | rue |^street | street |^building | building |^straße | straße |^stadt | stadt |^platz | platz |^strada | strada |^cedex | cedex |^blvd | blvd |^boulevard| boulevard ')">
            <xsl:attribute name="id">institution-street-presence</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[institution-street-presence] institution likely contains a street or building name, which is likely to be incorrect - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M473"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M473"/>
   <xsl:template match="@*|node()" priority="-2" mode="M473">
      <xsl:apply-templates select="*" mode="M473"/>
   </xsl:template>

   <!--PATTERN department-tests-pattern-->


	  <!--RULE department-tests-->
   <xsl:template match="aff/institution[@content-type='dept']" priority="1000" mode="M474">

		<!--REPORT error-->
      <xsl:if test="contains(.,'�')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'�')">
            <xsl:attribute name="id">dept-replacement-character-presence</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[dept-replacement-character-presence] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains the replacement character '�' which is unallowed.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M474"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M474"/>
   <xsl:template match="@*|node()" priority="-2" mode="M474">
      <xsl:apply-templates select="*" mode="M474"/>
   </xsl:template>

   <!--PATTERN journal-title-tests-pattern-->


	  <!--RULE journal-title-tests-->
   <xsl:template match="element-citation[@publication-type='journal']/source" priority="1000" mode="M475">
      <xsl:variable name="doi" select="ancestor::element-citation/pub-id[@pub-id-type='doi'][1]"/>
      <xsl:variable name="uc" select="upper-case(.)"/>

		    <!--REPORT error-->
      <xsl:if test="($uc != 'PLOS ONE') and matches(.,'plos|Plos|PLoS')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="($uc != 'PLOS ONE') and matches(.,'plos|Plos|PLoS')">
            <xsl:attribute name="id">PLOS-1</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references/journal-references#PLOS-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[PLOS-1] ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' contains
        <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>. 'PLOS' should be upper-case.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="($uc = 'PLOS ONE') and (. != 'PLOS ONE')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="($uc = 'PLOS ONE') and (. != 'PLOS ONE')">
            <xsl:attribute name="id">PLOS-2</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references/journal-references#PLOS-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[PLOS-2] ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' contains
         <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>. 'PLOS ONE' should be upper-case.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="if (starts-with($doi,'10.1073')) then . != 'PNAS'         else()">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="if (starts-with($doi,'10.1073')) then . != 'PNAS' else()">
            <xsl:attribute name="id">PNAS</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references/journal-references#PNAS</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[PNAS] ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has the doi for 'PNAS' but the journal name is
        <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>, which is incorrect.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="($uc = 'RNA') and (. != 'RNA')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="($uc = 'RNA') and (. != 'RNA')">
            <xsl:attribute name="id">RNA</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references/journal-references#RNA</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[RNA] ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' contains
        <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>. 'RNA' should be upper-case.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="(matches($uc,'^BMJ$|BMJ[:]? ')) and matches(.,'Bmj|bmj|BMj|BmJ|bMj|bmJ')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(matches($uc,'^BMJ$|BMJ[:]? ')) and matches(.,'Bmj|bmj|BMj|BmJ|bMj|bmJ')">
            <xsl:attribute name="id">bmj</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references/journal-references#bmj</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[bmj] ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' contains
        <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>. 'BMJ' should be upper-case.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="starts-with($doi,'10.1534/g3') and (. != 'G3: Genes, Genomes, Genetics')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="starts-with($doi,'10.1534/g3') and (. != 'G3: Genes, Genomes, Genetics')">
            <xsl:attribute name="id">G3</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references/journal-references#G3</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[G3] ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has the doi for 'G3' but the journal name is
        <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> - it should be 'G3: Genes, Genomes, Genetics'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,'[Aa]mp;')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'[Aa]mp;')">
            <xsl:attribute name="id">ampersand-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references/journal-references#ampersand-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[ampersand-check] ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' appears to contain the text 'amp', is this a broken ampersand?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="(normalize-space($uc) = 'RESEARCH GATE') or (normalize-space($uc) = 'RESEARCHGATE')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(normalize-space($uc) = 'RESEARCH GATE') or (normalize-space($uc) = 'RESEARCHGATE')">
            <xsl:attribute name="id">Research-gate-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references/journal-references#Research-gate-check</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[Research-gate-check]  ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has a source title '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>' which must be incorrect.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches(.,'�')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'�')">
            <xsl:attribute name="id">journal-replacement-character-presence</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references/journal-references#journal-replacement-character-presence</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[journal-replacement-character-presence] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains the replacement character '�' which is unallowed - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,'[Oo]fficial [Jj]ournal')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'[Oo]fficial [Jj]ournal')">
            <xsl:attribute name="id">journal-off-presence</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references/journal-references#journal-off-presence</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[journal-off-presence] ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has a source title which contains the text 'official journal' - '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>'. Is this necessary?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="contains($uc,'HANDBOOK')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains($uc,'HANDBOOK')">
            <xsl:attribute name="id">handbook-presence</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references/journal-references#handbook-presence</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[handbook-presence] Journal ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has a journal name '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>'. Should it be captured as a book type reference instead?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="starts-with($doi,'10.7554/eLife.') and (. != 'eLife')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="starts-with($doi,'10.7554/eLife.') and (. != 'eLife')">
            <xsl:attribute name="id">elife-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references/journal-references#elife-check</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[elife-check] Journal ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has an eLife doi <xsl:text/>
               <xsl:value-of select="$doi"/>
               <xsl:text/>, but the journal name is '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>', when it should be 'eLife'. Either the journal name needs updating to eLife, or the doi is incorrect.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,'\[|\(|\)|\]')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'\[|\(|\)|\]')">
            <xsl:attribute name="id">journal-bracket-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[journal-bracket-check] Journal ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has a journal name which contains brackets '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>'. It is very unlikely that the content in the brackets is required.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M475"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M475"/>
   <xsl:template match="@*|node()" priority="-2" mode="M475">
      <xsl:apply-templates select="*" mode="M475"/>
   </xsl:template>

   <!--PATTERN ref-article-title-tests-pattern-->


	  <!--RULE ref-article-title-tests-->
   <xsl:template match="element-citation[@publication-type='journal']/article-title" priority="1000" mode="M476">
      <xsl:variable name="rep" select="replace(.,' [Ii]{1,3}\. | IV\. | V. | [Cc]\. [Ee]legans| vs\. | sp\. ','')"/>
      <xsl:variable name="word-count" select="count(tokenize(.,'\p{Zs}'))"/>
      <xsl:variable name="title-word-count" select="count(tokenize(.,'\p{Zs}')[.=concat(upper-case(substring(.,1,1)),substring(.,2))])"/>

		    <!--REPORT info-->
      <xsl:if test="(matches($rep,'[A-Za-z][A-Za-z]+\. [A-Za-z]'))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(matches($rep,'[A-Za-z][A-Za-z]+\. [A-Za-z]'))">
            <xsl:attribute name="id">article-title-fullstop-check-1</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references/journal-references#article-title-fullstop-check-1</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[article-title-fullstop-check-1] ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has an article-title with a full stop. Is this correct, or has the journal/source title been included? Or perhaps the full stop should be a colon ':'?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches(.,'\.$') and not(matches(.,'\.\.$'))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'\.$') and not(matches(.,'\.\.$'))">
            <xsl:attribute name="id">article-title-fullstop-check-2</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references/journal-references#article-title-fullstop-check-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[article-title-fullstop-check-2] ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has an article-title which ends with a full stop, which cannot be correct - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,'\.$') and matches(.,'\.\.$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'\.$') and matches(.,'\.\.$')">
            <xsl:attribute name="id">article-title-fullstop-check-3</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references/journal-references#article-title-fullstop-check-3</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[article-title-fullstop-check-3] ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has an article-title which ends with some full stops - is this correct? - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,'^[Cc]orrection|^[Rr]etraction|[Ee]rratum')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'^[Cc]orrection|^[Rr]etraction|[Ee]rratum')">
            <xsl:attribute name="id">article-title-correction-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references/journal-references#article-title-correction-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[article-title-correction-check] ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has an article-title which begins with 'Correction', 'Retraction' or contains 'Erratum'. Is this a reference to the notice or the original article?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,' [Jj]ournal ')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,' [Jj]ournal ')">
            <xsl:attribute name="id">article-title-journal-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references/journal-references#article-title-journal-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[article-title-journal-check] ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has an article-title which contains the text ' journal '. Is a journal name (source) erroneously included in the title? - '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>'</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="(count(child::*) = 1) and (count(child::text()) = 0)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(count(child::*) = 1) and (count(child::text()) = 0)">
            <xsl:attribute name="id">article-title-child-1</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references/journal-references#article-title-child-1</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[article-title-child-1] ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has an article-title with one child <xsl:text/>
               <xsl:value-of select="*/local-name()"/>
               <xsl:text/> element, and no text. This is almost certainly incorrect. - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches(.,'�')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'�')">
            <xsl:attribute name="id">a-title-replacement-character-presence</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references/journal-references#a-title-replacement-character-presence</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[a-title-replacement-character-presence] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains the replacement character '�' which is unallowed - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="($word-count gt 4) and ($title-word-count gt ($word-count div 2))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="($word-count gt 4) and ($title-word-count gt ($word-count div 2))">
            <xsl:attribute name="id">article-title-case</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[article-title-case] Journal ref has <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> in mostly title case. Is that correct? eLife style is to use sentence case. "<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>"</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M476"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M476"/>
   <xsl:template match="@*|node()" priority="-2" mode="M476">
      <xsl:apply-templates select="*" mode="M476"/>
   </xsl:template>

   <!--PATTERN journal-tests-pattern-->


	  <!--RULE journal-tests-->
   <xsl:template match="element-citation[@publication-type='journal']" priority="1000" mode="M477">

		<!--REPORT warning-->
      <xsl:if test="not(fpage) and not(elocation-id) and not(comment)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="not(fpage) and not(elocation-id) and not(comment)">
            <xsl:attribute name="id">eloc-page-assert</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references/journal-references#eloc-page-assert</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[eloc-page-assert] ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' is a journal, but it doesn't have a page range or e-location. Is this right?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="not(comment[.='In press']) and not(volume)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="not(comment[.='In press']) and not(volume)">
            <xsl:attribute name="id">volume-assert</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references/journal-references#volume-assert</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[volume-assert] ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' is a journal, but it doesn't have a volume. Is this right?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches(normalize-space(lower-case(source[1])),'^biorxiv$|^arxiv$|^chemrxiv$|^peerj preprints$|^medrxiv$|^psyarxiv$|^paleorxiv$|^preprints$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(normalize-space(lower-case(source[1])),'^biorxiv$|^arxiv$|^chemrxiv$|^peerj preprints$|^medrxiv$|^psyarxiv$|^paleorxiv$|^preprints$')">
            <xsl:attribute name="id">journal-preprint-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references/journal-references#journal-preprint-check</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[journal-preprint-check] ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has a source <xsl:text/>
               <xsl:value-of select="source[1]"/>
               <xsl:text/>, but it is captured as a journal not a preprint.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="(lower-case(source[1]) = 'elife') and not(matches(pub-id[@pub-id-type='doi'][1],'^10.7554/eLife\.\d{5}$|^10.7554/eLife\.\d{5}\.\d{3}$|^10.7554/eLife\.\d{5}\.sa[12]$'))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(lower-case(source[1]) = 'elife') and not(matches(pub-id[@pub-id-type='doi'][1],'^10.7554/eLife\.\d{5}$|^10.7554/eLife\.\d{5}\.\d{3}$|^10.7554/eLife\.\d{5}\.sa[12]$'))">
            <xsl:attribute name="id">elife-ref-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references/journal-references#elife-ref-check</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[elife-ref-check] ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' is an <xsl:text/>
               <xsl:value-of select="source[1]"/>
               <xsl:text/> article, but it has no doi in the format 10.7554/eLife.00000, which must be incorrect.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(lower-case(source[1]),'conference|symposium|symposia|neural information processing|nips|computer vision and pattern recognition|scipy|workshop|meeting|spie|congress|[\d]st|[\d]nd|[\d]rd|[\d]th')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(lower-case(source[1]),'conference|symposium|symposia|neural information processing|nips|computer vision and pattern recognition|scipy|workshop|meeting|spie|congress|[\d]st|[\d]nd|[\d]rd|[\d]th')">
            <xsl:attribute name="id">journal-conference-ref-check-1</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references/journal-references#journal-conference-ref-check-1</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[journal-conference-ref-check-1] Journal ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has the journal name <xsl:text/>
               <xsl:value-of select="source[1]"/>
               <xsl:text/>. Should it be a conference type reference instead?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(source[1],'^[1][7-9][0-9][0-9] |\([1][7-9][0-9][0-9][\)\p{Zs}]| [1][7-9][0-9][0-9] | [1][7-9][0-9][0-9]$|^[2][0-2][0-9][0-9] |\([2][0-2][0-9][0-9][\)\p{Zs}]| [2][0-2][0-9][0-9] | [2][0-2][0-9][0-9]$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(source[1],'^[1][7-9][0-9][0-9] |\([1][7-9][0-9][0-9][\)\p{Zs}]| [1][7-9][0-9][0-9] | [1][7-9][0-9][0-9]$|^[2][0-2][0-9][0-9] |\([2][0-2][0-9][0-9][\)\p{Zs}]| [2][0-2][0-9][0-9] | [2][0-2][0-9][0-9]$')">
            <xsl:attribute name="id">journal-conference-ref-check-2</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references/journal-references#journal-conference-ref-check-2</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[journal-conference-ref-check-2] Journal ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has a journal name containing a year - <xsl:text/>
               <xsl:value-of select="source[1]"/>
               <xsl:text/>. Should it be a conference type reference instead? Or should the year be removed from the journal name?</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M477"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M477"/>
   <xsl:template match="@*|node()" priority="-2" mode="M477">
      <xsl:apply-templates select="*" mode="M477"/>
   </xsl:template>

   <!--PATTERN book-chapter-tests-pattern-->


	  <!--RULE book-chapter-tests-->
   <xsl:template match="element-citation[(@publication-type='book') and chapter-title]" priority="1000" mode="M478">

		<!--ASSERT warning-->
      <xsl:choose>
         <xsl:when test="person-group[@person-group-type='editor']"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="person-group[@person-group-type='editor']">
               <xsl:attribute name="id">book-chapter-test-1</xsl:attribute>
               <xsl:attribute name="role">warning</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[book-chapter-test-1] ref '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' (<xsl:text/>
                  <xsl:value-of select="e:citation-format1(.)"/>
                  <xsl:text/>) is tagged as a book reference with a chapter title, but there are no editors. Is this correct, or are these details missing?</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT warning-->
      <xsl:choose>
         <xsl:when test="fpage and lpage"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="fpage and lpage">
               <xsl:attribute name="id">book-chapter-test-2</xsl:attribute>
               <xsl:attribute name="role">warning</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[book-chapter-test-2] ref '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' (<xsl:text/>
                  <xsl:value-of select="e:citation-format1(.)"/>
                  <xsl:text/>) is tagged as a book reference with a chapter title, but there is not a first page and last page. Is this correct, or are these details missing?</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M478"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M478"/>
   <xsl:template match="@*|node()" priority="-2" mode="M478">
      <xsl:apply-templates select="*" mode="M478"/>
   </xsl:template>

   <!--PATTERN ref-chapter-title-tests-pattern-->


	  <!--RULE ref-chapter-title-tests-->
   <xsl:template match="element-citation[@publication-type='book']/chapter-title" priority="1000" mode="M479">

		<!--REPORT warning-->
      <xsl:if test="matches(.,' [Rr]eport |^[Rr]eport | [Rr]eport[\p{Zs}\p{P}]?$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,' [Rr]eport |^[Rr]eport | [Rr]eport[\p{Zs}\p{P}]?$')">
            <xsl:attribute name="id">report-chapter-title-test</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[report-chapter-title-test] ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' is tagged as a book reference, but the chapter title is <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>. Should it be captured as a report type reference instead?</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M479"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M479"/>
   <xsl:template match="@*|node()" priority="-2" mode="M479">
      <xsl:apply-templates select="*" mode="M479"/>
   </xsl:template>

   <!--PATTERN ref-book-source-tests-pattern-->


	  <!--RULE ref-book-source-tests-->
   <xsl:template match="element-citation[@publication-type='book']/source" priority="1000" mode="M480">

		<!--REPORT warning-->
      <xsl:if test="matches(.,' [Rr]eport |^[Rr]eport | [Rr]eport[\p{Zs}\p{P}]?$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,' [Rr]eport |^[Rr]eport | [Rr]eport[\p{Zs}\p{P}]?$')">
            <xsl:attribute name="id">report-book-source-test</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[report-book-source-test] ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' is tagged as a book reference, but the book title is <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>. Should it be captured as a report type reference instead?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,'\[|\(|\)|\]')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'\[|\(|\)|\]')">
            <xsl:attribute name="id">book-bracket-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[book-bracket-check] Book ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has a book name which contains brackets '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>'. Is the content in the brackets is required?</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M480"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M480"/>
   <xsl:template match="@*|node()" priority="-2" mode="M480">
      <xsl:apply-templates select="*" mode="M480"/>
   </xsl:template>

   <!--PATTERN preprint-title-tests-pattern-->


	  <!--RULE preprint-title-tests-->
   <xsl:template match="element-citation[@publication-type='preprint']/source" priority="1000" mode="M481">
      <xsl:variable name="lc" select="lower-case(.)"/>

		    <!--ASSERT warning-->
      <xsl:choose>
         <xsl:when test="matches($lc,'biorxiv|arxiv|chemrxiv|medrxiv|osf preprints|peerj preprints|psyarxiv|paleorxiv|preprints|zenodo')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'biorxiv|arxiv|chemrxiv|medrxiv|osf preprints|peerj preprints|psyarxiv|paleorxiv|preprints|zenodo')">
               <xsl:attribute name="id">not-rxiv-test</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references/preprint-references#not-rxiv-test</xsl:attribute>
               <xsl:attribute name="role">warning</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[not-rxiv-test] ref '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' is tagged as a preprint, but has a source <xsl:text/>
                  <xsl:value-of select="."/>
                  <xsl:text/>, which doesn't look like a preprint. Is it correct?</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="matches($lc,'biorxiv') and not(. = 'bioRxiv')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'biorxiv') and not(. = 'bioRxiv')">
            <xsl:attribute name="id">biorxiv-test</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references/preprint-references#biorxiv-test</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[biorxiv-test] ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has a source <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>, which is not the correct proprietary capitalisation - 'bioRxiv'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches($lc,'biorxiv') and not(starts-with(parent::element-citation/pub-id[@pub-id-type='doi'][1],'10.1101/'))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'biorxiv') and not(starts-with(parent::element-citation/pub-id[@pub-id-type='doi'][1],'10.1101/'))">
            <xsl:attribute name="id">biorxiv-test-2</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references/preprint-references#biorxiv-test-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[biorxiv-test-2] ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' is captured as a <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> preprint, but it does not have a doi starting with the bioRxiv prefix, '10.1101/'. <xsl:text/>
               <xsl:value-of select="if (parent::element-citation/pub-id[@pub-id-type='doi']) then concat('The doi does not point to bioRxiv - https://doi.org/',parent::element-citation/pub-id[@pub-id-type='doi'][1]) else 'The doi is missing'"/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches($lc,'^arxiv$') and not(. = 'arXiv')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'^arxiv$') and not(. = 'arXiv')">
            <xsl:attribute name="id">arxiv-test</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references/preprint-references#arxiv-test</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[arxiv-test] ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has a source <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>, which is not the correct proprietary capitalisation - 'arXiv'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches($lc,'chemrxiv') and not(. = 'ChemRxiv')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'chemrxiv') and not(. = 'ChemRxiv')">
            <xsl:attribute name="id">chemrxiv-test</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references/preprint-references#chemrxiv-test</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[chemrxiv-test] ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has a source <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>, which is not the correct proprietary capitalisation - 'ChemRxiv'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches($lc,'medrxiv') and not(. = 'medRxiv')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'medrxiv') and not(. = 'medRxiv')">
            <xsl:attribute name="id">medrxiv-test</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references/preprint-references#medrxiv-test</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[medrxiv-test] ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has a source <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>, which is not the correct proprietary capitalisation - 'medRxiv'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches($lc,'osf preprints') and not(. = 'OSF Preprints')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'osf preprints') and not(. = 'OSF Preprints')">
            <xsl:attribute name="id">osfpreprints-test</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[osfpreprints-test] ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has a source <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>, which is not the correct proprietary capitalisation - 'OSF Preprints'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches($lc,'peerj preprints') and not(. = 'PeerJ Preprints')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'peerj preprints') and not(. = 'PeerJ Preprints')">
            <xsl:attribute name="id">peerjpreprints-test</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references/preprint-references#peerjpreprints-test</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[peerjpreprints-test] ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has a source <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>, which is not the correct proprietary capitalisation - 'PeerJ Preprints'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches($lc,'psyarxiv') and not(. = 'PsyArXiv')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'psyarxiv') and not(. = 'PsyArXiv')">
            <xsl:attribute name="id">psyarxiv-test</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references/preprint-references#psyarxiv-test</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[psyarxiv-test] ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has a source <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>, which is not the correct proprietary capitalisation - 'PsyArXiv'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches($lc,'paleorxiv') and not(. = 'PaleorXiv')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'paleorxiv') and not(. = 'PaleorXiv')">
            <xsl:attribute name="id">paleorxiv-test</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references/preprint-references#paleorxiv-test</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[paleorxiv-test] ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has a source <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>, which is not the correct proprietary capitalisation - 'PaleorXiv'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches(.,'�')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'�')">
            <xsl:attribute name="id">preprint-replacement-character-presence</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references/preprint-references#preprint-replacement-character-presence</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[preprint-replacement-character-presence] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains the replacement character '�' which is unallowed - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="contains(.,'handbook')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'handbook')">
            <xsl:attribute name="id">preprint-handbook-presence</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references/preprint-references#preprint-handbook-presence</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[preprint-handbook-presence] Preprint ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has a source '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>'. Should it be captured as a book type reference instead?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches($lc,'africarxiv') and not(. = 'AfricArXiv')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'africarxiv') and not(. = 'AfricArXiv')">
            <xsl:attribute name="id">africarxiv-test</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[africarxiv-test] ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has a source <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>, which is not the correct proprietary capitalisation - 'AfricArXiv'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M481"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M481"/>
   <xsl:template match="@*|node()" priority="-2" mode="M481">
      <xsl:apply-templates select="*" mode="M481"/>
   </xsl:template>

   <!--PATTERN website-tests-pattern-->


	  <!--RULE website-tests-->
   <xsl:template match="element-citation[@publication-type='web']" priority="1000" mode="M482">
      <xsl:variable name="link" select="lower-case(ext-link[1])"/>

		    <!--REPORT warning-->
      <xsl:if test="contains($link,'github') and not(contains($link,'github.io'))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains($link,'github') and not(contains($link,'github.io'))">
            <xsl:attribute name="id">github-web-test</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references/software-references#github-web-test</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[github-web-test] web ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has a link which contains 'github', therefore it should almost certainly be captured as a software ref (unless it's a blog post by GitHub).</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches(.,'�')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'�')">
            <xsl:attribute name="id">webreplacement-character-presence</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[webreplacement-character-presence] web citation contains the replacement character '�' which is unallowed - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches($link,'psyarxiv.org')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($link,'psyarxiv.org')">
            <xsl:attribute name="id">psyarxiv-web-test</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[psyarxiv-web-test] web ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has a link which points to a preprint server, PsyArXiv, therefore it should be captured as a preprint type ref - <xsl:text/>
               <xsl:value-of select="ext-link"/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches($link,'/arxiv.org')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($link,'/arxiv.org')">
            <xsl:attribute name="id">arxiv-web-test</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[arxiv-web-test] web ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has a link which points to a preprint server, arXiv, therefore it should be captured as a preprint type ref - <xsl:text/>
               <xsl:value-of select="ext-link"/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($link,'biorxiv.org')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($link,'biorxiv.org')">
            <xsl:attribute name="id">biorxiv-web-test</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[biorxiv-web-test] web ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has a link which points to a preprint server, bioRxiv, therefore it should almost certainly be captured as a preprint type ref - <xsl:text/>
               <xsl:value-of select="ext-link"/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches($link,'chemrxiv.org')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($link,'chemrxiv.org')">
            <xsl:attribute name="id">chemrxiv-web-test</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[chemrxiv-web-test] web ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has a link which points to a preprint server, ChemRxiv, therefore it should be captured as a preprint type ref - <xsl:text/>
               <xsl:value-of select="ext-link"/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches($link,'peerj.com/preprints/')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($link,'peerj.com/preprints/')">
            <xsl:attribute name="id">peerj-preprints-web-test</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[peerj-preprints-web-test] web ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has a link which points to a preprint server, PeerJ Preprints, therefore it should be captured as a preprint type ref - <xsl:text/>
               <xsl:value-of select="ext-link"/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches($link,'paleorxiv.org')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($link,'paleorxiv.org')">
            <xsl:attribute name="id">paleorxiv-web-test</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[paleorxiv-web-test] web ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has a link which points to a preprint server, bioRxiv, therefore it should be captured as a preprint type ref - <xsl:text/>
               <xsl:value-of select="ext-link"/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M482"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M482"/>
   <xsl:template match="@*|node()" priority="-2" mode="M482">
      <xsl:apply-templates select="*" mode="M482"/>
   </xsl:template>

   <!--PATTERN software-ref-tests-pattern-->


	  <!--RULE software-ref-tests-->
   <xsl:template match="element-citation[@publication-type='software']" priority="1000" mode="M483">
      <xsl:variable name="lc" select="lower-case(data-title[1])"/>

		    <!--REPORT error-->
      <xsl:if test="matches($lc,'r: a language and environment for statistical computing') and not(matches(person-group[@person-group-type='author']/collab[1],'^R Development Core Team$'))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'r: a language and environment for statistical computing') and not(matches(person-group[@person-group-type='author']/collab[1],'^R Development Core Team$'))">
            <xsl:attribute name="id">R-test-1</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references/software-references#r-test-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[R-test-1] software ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has a data-title '<xsl:text/>
               <xsl:value-of select="data-title[1]"/>
               <xsl:text/>' but it does not have one collab element containing 'R Development Core Team'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches($lc,'r: a language and environment for statistical computing') and (count(person-group[@person-group-type='author']/collab) != 1)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'r: a language and environment for statistical computing') and (count(person-group[@person-group-type='author']/collab) != 1)">
            <xsl:attribute name="id">R-test-2</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references/software-references#r-test-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[R-test-2] software ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has a data-title '<xsl:text/>
               <xsl:value-of select="data-title[1]"/>
               <xsl:text/>' but it has <xsl:text/>
               <xsl:value-of select="count(person-group[@person-group-type='author']/collab)"/>
               <xsl:text/> collab element(s).</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches($lc,'r: a language and environment for statistical computing') and (count((publisher-loc[text() = 'Vienna, Austria'])) != 1)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'r: a language and environment for statistical computing') and (count((publisher-loc[text() = 'Vienna, Austria'])) != 1)">
            <xsl:attribute name="id">R-test-3</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references/software-references#r-test-3</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[R-test-3] software ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has a data-title '<xsl:text/>
               <xsl:value-of select="data-title[1]"/>
               <xsl:text/>' but does not have a &lt;publisher-loc&gt;Vienna, Austria&lt;/publisher-loc&gt; element.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches($lc,'r: a language and environment for statistical computing') and not(matches(ext-link[1]/@xlink:href,'^http[s]?://www.[Rr]-project.org'))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'r: a language and environment for statistical computing') and not(matches(ext-link[1]/@xlink:href,'^http[s]?://www.[Rr]-project.org'))">
            <xsl:attribute name="id">R-test-4</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references/software-references#r-test-4</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[R-test-4] software ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has a data-title '<xsl:text/>
               <xsl:value-of select="data-title[1]"/>
               <xsl:text/>' but does not have a 'http://www.r-project.org' type link.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches(lower-case(source[1]),'r: a language and environment for statistical computing')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(lower-case(source[1]),'r: a language and environment for statistical computing')">
            <xsl:attribute name="id">R-test-5</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references/software-references#r-test-5</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[R-test-5] software ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has a source '<xsl:text/>
               <xsl:value-of select="source"/>
               <xsl:text/>' but this is the data-title.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches(lower-case(publisher-name[1]),'r: a language and environment for statistical computing')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(lower-case(publisher-name[1]),'r: a language and environment for statistical computing')">
            <xsl:attribute name="id">R-test-6</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references/software-references#r-test-6</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[R-test-6] software ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has a publisher-name '<xsl:text/>
               <xsl:value-of select="publisher-name"/>
               <xsl:text/>' but this is the data-title.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches($lc,'r: a language and environment for statistical computing') and (lower-case(publisher-name[1]) != 'r foundation for statistical computing')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($lc,'r: a language and environment for statistical computing') and (lower-case(publisher-name[1]) != 'r foundation for statistical computing')">
            <xsl:attribute name="id">R-test-7</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references/software-references#r-test-7</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[R-test-7] software ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' with the title '<xsl:text/>
               <xsl:value-of select="data-title"/>
               <xsl:text/>' must have a publisher-name element which contains 'R Foundation for Statistical Computing'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches(.,'�')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'�')">
            <xsl:attribute name="id">software-replacement-character-presence</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references/software-references#software-replacement-character-presence</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[software-replacement-character-presence] software reference contains the replacement character '�' which is unallowed - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="source and publisher-name">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="source and publisher-name">
            <xsl:attribute name="id">ref-software-test-1</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references/software-references#ref-software-test-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[ref-software-test-1] software ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has both a source - <xsl:text/>
               <xsl:value-of select="source[1]"/>
               <xsl:text/> - and a publisher-name - <xsl:text/>
               <xsl:value-of select="publisher-name[1]"/>
               <xsl:text/> - which is incorrect. It should have either one or the other.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="source or publisher-name"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="source or publisher-name">
               <xsl:attribute name="id">ref-software-test-2</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references/software-references#ref-software-test-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[ref-software-test-2] software ref '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' with the title - <xsl:text/>
                  <xsl:value-of select="data-title"/>
                  <xsl:text/> - must contain either one source element or one publisher-name element.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="matches(lower-case(publisher-name[1]),'github|gitlab|bitbucket|sourceforge|figshare|^osf$|open science framework|zenodo|matlab')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(lower-case(publisher-name[1]),'github|gitlab|bitbucket|sourceforge|figshare|^osf$|open science framework|zenodo|matlab')">
            <xsl:attribute name="id">ref-software-test-3</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references/software-references#ref-software-test-3</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[ref-software-test-3] software ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has a publisher-name - <xsl:text/>
               <xsl:value-of select="publisher-name[1]"/>
               <xsl:text/>. Since this is a software source, it should be captured in a source element. Please move into the source field (rather than publisher).</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches(lower-case(source[1]),'schr[öo]dinger|r foundation|rstudio ,? inc|mathworks| llc| ltd')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(lower-case(source[1]),'schr[öo]dinger|r foundation|rstudio ,? inc|mathworks| llc| ltd')">
            <xsl:attribute name="id">ref-software-test-4</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references/software-references#ref-software-test-4</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[ref-software-test-4] software ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has a source - <xsl:text/>
               <xsl:value-of select="source[1]"/>
               <xsl:text/>. Since this is a software publisher, it should be captured in a publisher-name element. Please move into the Software publisher field.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="(normalize-space(lower-case(source[1]))='github') and not(version)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(normalize-space(lower-case(source[1]))='github') and not(version)">
            <xsl:attribute name="id">ref-software-test-5</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references/software-references#ref-software-test-5</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[ref-software-test-5] <xsl:text/>
               <xsl:value-of select="source[1]"/>
               <xsl:text/> software ref (with id '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>') does not have a version number. Is this correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches(lower-case(source[1]),'github|gitlab|bitbucket|sourceforge|figshare|^osf$|open science framework|zenodo|matlab') and not(ext-link)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(lower-case(source[1]),'github|gitlab|bitbucket|sourceforge|figshare|^osf$|open science framework|zenodo|matlab') and not(ext-link)">
            <xsl:attribute name="id">ref-software-test-6</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references/software-references#ref-software-test-6</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[ref-software-test-6] <xsl:text/>
               <xsl:value-of select="source[1]"/>
               <xsl:text/> software ref (with id '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>') does not have a URL which is incorrect.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M483"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M483"/>
   <xsl:template match="@*|node()" priority="-2" mode="M483">
      <xsl:apply-templates select="*" mode="M483"/>
   </xsl:template>

   <!--PATTERN data-ref-tests-pattern-->


	  <!--RULE data-ref-tests-->
   <xsl:template match="element-citation[@publication-type='data']" priority="1000" mode="M484">

		<!--REPORT warning-->
      <xsl:if test="contains(pub-id[1]/@xlink:href,'www.ncbi.nlm.nih.gov/geo') and not(source[1]='NCBI Gene Expression Omnibus')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(pub-id[1]/@xlink:href,'www.ncbi.nlm.nih.gov/geo') and not(source[1]='NCBI Gene Expression Omnibus')">
            <xsl:attribute name="id">data-geo-test</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/data-availability#data-geo-test</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[data-geo-test] Data reference with the title '<xsl:text/>
               <xsl:value-of select="data-title[1]"/>
               <xsl:text/>' has a 'https://www.ncbi.nlm.nih.gov/geo' type link, but the database name is not 'NCBI Gene Expression Omnibus' - <xsl:text/>
               <xsl:value-of select="source[1]"/>
               <xsl:text/>. Is that correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(pub-id[1]/@xlink:href,'www.ncbi.nlm.nih.gov/nuccore') and not(source[1]='NCBI GenBank') and not(source[1]='NCBI Nucleotide')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(pub-id[1]/@xlink:href,'www.ncbi.nlm.nih.gov/nuccore') and not(source[1]='NCBI GenBank') and not(source[1]='NCBI Nucleotide')">
            <xsl:attribute name="id">data-nucleotide-test</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/data-availability#data-nucleotide-test</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[data-nucleotide-test] Data reference with the title '<xsl:text/>
               <xsl:value-of select="data-title[1]"/>
               <xsl:text/>' has a 'https://www.ncbi.nlm.nih.gov/nuccore' type link, but the database name is not 'NCBI Nucleotide' or 'NCBI GenBank' - <xsl:text/>
               <xsl:value-of select="source[1]"/>
               <xsl:text/>. Is that correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(pub-id[1]/@xlink:href,'www.ncbi.nlm.nih.gov/bioproject') and not(source[1]='NCBI BioProject')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(pub-id[1]/@xlink:href,'www.ncbi.nlm.nih.gov/bioproject') and not(source[1]='NCBI BioProject')">
            <xsl:attribute name="id">data-bioproject-test</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/data-availability#data-bioproject-test</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[data-bioproject-test] Data reference with the title '<xsl:text/>
               <xsl:value-of select="data-title[1]"/>
               <xsl:text/>' has a 'https://www.ncbi.nlm.nih.gov/bioproject' type link, but the database name is not 'NCBI BioProject' - <xsl:text/>
               <xsl:value-of select="source[1]"/>
               <xsl:text/>. Is that correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(pub-id[1]/@xlink:href,'www.ncbi.nlm.nih.gov/gap') and not(source[1]='NCBI dbGaP')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(pub-id[1]/@xlink:href,'www.ncbi.nlm.nih.gov/gap') and not(source[1]='NCBI dbGaP')">
            <xsl:attribute name="id">data-dbgap-test</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/data-availability#data-dbgap-test</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[data-dbgap-test] Data reference with the title '<xsl:text/>
               <xsl:value-of select="data-title[1]"/>
               <xsl:text/>' has a 'https://www.ncbi.nlm.nih.gov/gap' type link, but the database name is not 'NCBI dbGaP' - <xsl:text/>
               <xsl:value-of select="source[1]"/>
               <xsl:text/>. Is that correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(pub-id[1]/@xlink:href,'www.ncbi.nlm.nih.gov/popset') and not(source[1]='NCBI PopSet')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(pub-id[1]/@xlink:href,'www.ncbi.nlm.nih.gov/popset') and not(source[1]='NCBI PopSet')">
            <xsl:attribute name="id">data-popset-test</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/data-availability#data-popset-test</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[data-popset-test] Data reference with the title '<xsl:text/>
               <xsl:value-of select="data-title[1]"/>
               <xsl:text/>' has a 'https://www.ncbi.nlm.nih.gov/popset' type link, but the database name is not 'NCBI PopSet' - <xsl:text/>
               <xsl:value-of select="source[1]"/>
               <xsl:text/>. Is that correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(pub-id[1]/@xlink:href,'www.ncbi.nlm.nih.gov/sra') and not(source[1]='NCBI Sequence Read Archive')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(pub-id[1]/@xlink:href,'www.ncbi.nlm.nih.gov/sra') and not(source[1]='NCBI Sequence Read Archive')">
            <xsl:attribute name="id">data-sra-test</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/data-availability#data-sra-test</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[data-sra-test] Data reference with the title '<xsl:text/>
               <xsl:value-of select="data-title[1]"/>
               <xsl:text/>' has a 'https://www.ncbi.nlm.nih.gov/sra' type link, but the database name is not 'NCBI Sequence Read Archive' - <xsl:text/>
               <xsl:value-of select="source[1]"/>
               <xsl:text/>. Is that correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(pub-id[1]/@xlink:href,'www.ncbi.nlm.nih.gov/biosample') and not(source[1]='NCBI BioSample')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(pub-id[1]/@xlink:href,'www.ncbi.nlm.nih.gov/biosample') and not(source[1]='NCBI BioSample')">
            <xsl:attribute name="id">data-biosample-test</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/data-availability#data-biosample-test</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[data-biosample-test] Data reference with the title '<xsl:text/>
               <xsl:value-of select="data-title[1]"/>
               <xsl:text/>' has a 'https://www.ncbi.nlm.nih.gov/biosample' type link, but the database name is not 'NCBI BioSample' - <xsl:text/>
               <xsl:value-of select="source[1]"/>
               <xsl:text/>. Is that correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(pub-id[1]/@xlink:href,'www.ncbi.nlm.nih.gov/protein') and not(source[1]='NCBI Protein')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(pub-id[1]/@xlink:href,'www.ncbi.nlm.nih.gov/protein') and not(source[1]='NCBI Protein')">
            <xsl:attribute name="id">data-protein-test</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/data-availability#data-protein-test</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[data-protein-test] Data reference with the title '<xsl:text/>
               <xsl:value-of select="data-title[1]"/>
               <xsl:text/>' has a 'https://www.ncbi.nlm.nih.gov/protein' type link, but the database name is not 'NCBI Protein' - <xsl:text/>
               <xsl:value-of select="source[1]"/>
               <xsl:text/>. Is that correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(pub-id[1]/@xlink:href,'www.ncbi.nlm.nih.gov/assembly') and not(source[1]='NCBI Assembly')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(pub-id[1]/@xlink:href,'www.ncbi.nlm.nih.gov/assembly') and not(source[1]='NCBI Assembly')">
            <xsl:attribute name="id">data-assembly-test</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/data-availability#data-assembly-test</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[data-assembly-test] Data reference with the title '<xsl:text/>
               <xsl:value-of select="data-title[1]"/>
               <xsl:text/>' has a 'https://www.ncbi.nlm.nih.gov/assembly' type link, but the database name is not 'NCBI Assembly' - <xsl:text/>
               <xsl:value-of select="source[1]"/>
               <xsl:text/>. Is that correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(pub-id[1]/@xlink:href,'www.ncbi.nlm.nih.gov/') and pub-id[@pub-id-type!='accession']">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(pub-id[1]/@xlink:href,'www.ncbi.nlm.nih.gov/') and pub-id[@pub-id-type!='accession']">
            <xsl:attribute name="id">data-ncbi-test-1</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/data-availability#data-ncbi-test-1</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[data-ncbi-test-1] Data reference with an NCBI link '<xsl:text/>
               <xsl:value-of select="pub-id[1]/@xlink:href"/>
               <xsl:text/>' is not marked as an accession number, which is likely incorrect.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(lower-case(source[1]),'^ncbi gene expression omnibus$|^ncbi nucleotide$|^ncbi genbank$|^ncbi assembly$|^ncbi bioproject$|^ncbi dbgap$|^ncbi sequence read archive$|^ncbi popset$|^ncbi biosample$') and pub-id[@pub-id-type!='accession']">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(lower-case(source[1]),'^ncbi gene expression omnibus$|^ncbi nucleotide$|^ncbi genbank$|^ncbi assembly$|^ncbi bioproject$|^ncbi dbgap$|^ncbi sequence read archive$|^ncbi popset$|^ncbi biosample$') and pub-id[@pub-id-type!='accession']">
            <xsl:attribute name="id">data-ncbi-test-2</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/data-availability#data-ncbi-test-2</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[data-ncbi-test-2] Data reference with the database source '<xsl:text/>
               <xsl:value-of select="source[1]"/>
               <xsl:text/>' is not marked as an accession number, which is very likely incorrect.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="(starts-with(pub-id[1][@pub-id-type='doi'],'10.5061/dryad') or starts-with(pub-id[1][@pub-id-type='doi'],'10.7272')) and (source[1]!='Dryad Digital Repository')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(starts-with(pub-id[1][@pub-id-type='doi'],'10.5061/dryad') or starts-with(pub-id[1][@pub-id-type='doi'],'10.7272')) and (source[1]!='Dryad Digital Repository')">
            <xsl:attribute name="id">data-dryad-test-1</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/data-availability#data-dryad-test-1</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[data-dryad-test-1] Data reference with the title '<xsl:text/>
               <xsl:value-of select="data-title[1]"/>
               <xsl:text/>' has a Dryad type doi <xsl:text/>
               <xsl:value-of select="pub-id[1][@pub-id-type='doi']"/>
               <xsl:text/>, but the database name is not 'Dryad Digital Repository' - <xsl:text/>
               <xsl:value-of select="source[1]"/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="(pub-id or ext-link) and not(starts-with(pub-id[1][@pub-id-type='doi'],'10.5061/dryad') or starts-with(pub-id[1][@pub-id-type='doi'],'10.7272')) and (source[1]='Dryad Digital Repository')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(pub-id or ext-link) and not(starts-with(pub-id[1][@pub-id-type='doi'],'10.5061/dryad') or starts-with(pub-id[1][@pub-id-type='doi'],'10.7272')) and (source[1]='Dryad Digital Repository')">
            <xsl:attribute name="id">data-dryad-test-2</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/data-availability#data-dryad-test-2</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[data-dryad-test-2] Data reference with the title '<xsl:text/>
               <xsl:value-of select="data-title[1]"/>
               <xsl:text/>' has the database name  <xsl:text/>
               <xsl:value-of select="source[1]"/>
               <xsl:text/>, but no doi starting with '10.5061/dryad' or '10.7272', which is incorrect.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(pub-id[1]/@xlink:href,'www.rcsb.org') and not(source[1]='RCSB Protein Data Bank')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(pub-id[1]/@xlink:href,'www.rcsb.org') and not(source[1]='RCSB Protein Data Bank')">
            <xsl:attribute name="id">data-rcsbpbd-test-1</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/data-availability#data-rcsbpbd-test-1</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[data-rcsbpbd-test-1] Data reference with the title '<xsl:text/>
               <xsl:value-of select="data-title[1]"/>
               <xsl:text/>' has a 'http://www.rcsb.org' type link, but the database name is not 'RCSB Protein Data Bank' - <xsl:text/>
               <xsl:value-of select="source[1]"/>
               <xsl:text/>. Is that correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(pub-id[1]/@xlink:href,'www.rcsb.org') and pub-id[1][@pub-id-type!='accession' or not(@pub-id-type)]">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(pub-id[1]/@xlink:href,'www.rcsb.org') and pub-id[1][@pub-id-type!='accession' or not(@pub-id-type)]">
            <xsl:attribute name="id">data-rcsbpbd-test-3</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/data-availability#data-rcsbpbd-test-3</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[data-rcsbpbd-test-3] Data reference with the title '<xsl:text/>
               <xsl:value-of select="data-title[1]"/>
               <xsl:text/>' has a PDB 'http://www.rcsb.org' type link, but is not marked as an accession type link.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="not(contains(pub-id[1]/@xlink:href,'empiar')) and matches(pub-id[1]/@xlink:href,'www.ebi.ac.uk/pdbe/emdb|www.ebi.ac.uk/pdbe/entry/emdb') and not(source[1]='Electron Microscopy Data Bank')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="not(contains(pub-id[1]/@xlink:href,'empiar')) and matches(pub-id[1]/@xlink:href,'www.ebi.ac.uk/pdbe/emdb|www.ebi.ac.uk/pdbe/entry/emdb') and not(source[1]='Electron Microscopy Data Bank')">
            <xsl:attribute name="id">data-emdb-test-1</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/data-availability#data-emdb-test-1</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[data-emdb-test-1] Data reference with the title '<xsl:text/>
               <xsl:value-of select="data-title[1]"/>
               <xsl:text/>' has a 'http://www.ebi.ac.uk/pdbe/emdb' type link, but the database name is not 'Electron Microscopy Data Bank' - <xsl:text/>
               <xsl:value-of select="source[1]"/>
               <xsl:text/>. Is that correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(pub-id[1]/@xlink:href,'www.ebi.ac.uk/pdbe/emdb|www.ebi.ac.uk/pdbe/entry/emdb') and pub-id[1][@pub-id-type!='accession' or not(@pub-id-type)]">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(pub-id[1]/@xlink:href,'www.ebi.ac.uk/pdbe/emdb|www.ebi.ac.uk/pdbe/entry/emdb') and pub-id[1][@pub-id-type!='accession' or not(@pub-id-type)]">
            <xsl:attribute name="id">data-emdb-test-3</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/data-availability#data-emdb-test-3</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[data-emdb-test-3] Data reference with the title '<xsl:text/>
               <xsl:value-of select="data-title[1]"/>
               <xsl:text/>' has a EMDB 'http://www.ebi.ac.uk/pdbe/emdb' type link, but is not marked as an accession type link.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(pub-id[1]/@xlink:href,'www.ebi.ac.uk/pdbe/emdb/empiar/') and not(source[1]='Electron Microscopy Public Image Archive')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(pub-id[1]/@xlink:href,'www.ebi.ac.uk/pdbe/emdb/empiar/') and not(source[1]='Electron Microscopy Public Image Archive')">
            <xsl:attribute name="id">data-empiar-test-1</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/data-availability#data-empiar-test-1</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[data-empiar-test-1] Data reference with the title '<xsl:text/>
               <xsl:value-of select="data-title[1]"/>
               <xsl:text/>' has a 'http://www.ebi.ac.uk/pdbe/emdb/empiar' type link, but the database name is not 'Electron Microscopy Public Image Archive' - <xsl:text/>
               <xsl:value-of select="source[1]"/>
               <xsl:text/>. Is that correct? https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/data-availability#data-empiar-test-1</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(pub-id[1]/@xlink:href,'www.ebi.ac.uk/arrayexpress') and not(source[1]='ArrayExpress')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(pub-id[1]/@xlink:href,'www.ebi.ac.uk/arrayexpress') and not(source[1]='ArrayExpress')">
            <xsl:attribute name="id">data-arrayexpress-test-1</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/data-availability#data-arrayexpress-test-1</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[data-arrayexpress-test-1] Data reference with the title '<xsl:text/>
               <xsl:value-of select="data-title[1]"/>
               <xsl:text/>' has a 'www.ebi.ac.uk/arrayexpress' type link, but the database name is not 'ArrayExpress' - <xsl:text/>
               <xsl:value-of select="source[1]"/>
               <xsl:text/>. Is that correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(pub-id[1]/@xlink:href,'www.ebi.ac.uk/arrayexpress') and pub-id[1][@pub-id-type!='accession' or not(@pub-id-type)]">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(pub-id[1]/@xlink:href,'www.ebi.ac.uk/arrayexpress') and pub-id[1][@pub-id-type!='accession' or not(@pub-id-type)]">
            <xsl:attribute name="id">data-arrayexpress-test-3</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/data-availability#data-arrayexpress-test-3</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[data-arrayexpress-test-3] Data reference with the title '<xsl:text/>
               <xsl:value-of select="data-title[1]"/>
               <xsl:text/>' has an ArrayExpress 'www.ebi.ac.uk/arrayexpress' type link, but is not marked as an accession type link.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(pub-id[1]/@xlink:href,'www.ebi.ac.uk/pride') and not(source[1]='PRIDE')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(pub-id[1]/@xlink:href,'www.ebi.ac.uk/pride') and not(source[1]='PRIDE')">
            <xsl:attribute name="id">data-pride-test-1</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/data-availability#data-pride-test-1</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[data-pride-test-1] Data reference with the title '<xsl:text/>
               <xsl:value-of select="data-title[1]"/>
               <xsl:text/>' has a 'www.ebi.ac.uk/pride' type link, but the database name is not 'PRIDE' - <xsl:text/>
               <xsl:value-of select="source[1]"/>
               <xsl:text/>. Is that correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(pub-id[1]/@xlink:href,'www.ebi.ac.uk/pride') and pub-id[1][@pub-id-type!='accession' or not(@pub-id-type)]">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(pub-id[1]/@xlink:href,'www.ebi.ac.uk/pride') and pub-id[1][@pub-id-type!='accession' or not(@pub-id-type)]">
            <xsl:attribute name="id">data-pride-test-3</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/data-availability#data-pride-test-3</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[data-pride-test-3] Data reference with the title '<xsl:text/>
               <xsl:value-of select="data-title[1]"/>
               <xsl:text/>' has a PRIDE 'www.ebi.ac.uk/pride' type link, but is not marked as an accession type link.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="starts-with(pub-id[1][@pub-id-type='doi'],'10.5281/zenodo') and (source[1]!='Zenodo')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="starts-with(pub-id[1][@pub-id-type='doi'],'10.5281/zenodo') and (source[1]!='Zenodo')">
            <xsl:attribute name="id">data-zenodo-test-1</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/data-availability#data-zenodo-test-1</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[data-zenodo-test-1] Data reference with the title '<xsl:text/>
               <xsl:value-of select="data-title[1]"/>
               <xsl:text/>' has a doi starting with '10.5281/zenodo' but the database name is not 'Zenodo' - <xsl:text/>
               <xsl:value-of select="source[1]"/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="(pub-id or ext-link) and not(starts-with(pub-id[1][@pub-id-type='doi'],'10.5281/zenodo')) and (source[1]='Zenodo')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(pub-id or ext-link) and not(starts-with(pub-id[1][@pub-id-type='doi'],'10.5281/zenodo')) and (source[1]='Zenodo')">
            <xsl:attribute name="id">data-zenodo-test-2</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/data-availability#data-zenodo-test-2</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[data-zenodo-test-2] Data reference with the title '<xsl:text/>
               <xsl:value-of select="data-title[1]"/>
               <xsl:text/>' has the database name  <xsl:text/>
               <xsl:value-of select="source[1]"/>
               <xsl:text/>, but no doi starting with '10.5281/zenodo', which is incorrect.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(pub-id[1]/@xlink:href,'^http[s]?://osf.io') and not(source[1]='Open Science Framework')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(pub-id[1]/@xlink:href,'^http[s]?://osf.io') and not(source[1]='Open Science Framework')">
            <xsl:attribute name="id">data-osf-test-1</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/data-availability#data-osf-test-1</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[data-osf-test-1] Data reference with the title '<xsl:text/>
               <xsl:value-of select="data-title[1]"/>
               <xsl:text/>' has a 'https://osf.io' type link, but the database name is not 'Open Science Framework' - <xsl:text/>
               <xsl:value-of select="source[1]"/>
               <xsl:text/>. Is that correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(pub-id[1]/@xlink:href,'^http[s]?://osf.io') and pub-id[1][@pub-id-type!='accession' or not(@pub-id-type)]">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(pub-id[1]/@xlink:href,'^http[s]?://osf.io') and pub-id[1][@pub-id-type!='accession' or not(@pub-id-type)]">
            <xsl:attribute name="id">data-osf-test-3</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/data-availability#data-osf-test-3</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[data-osf-test-3] Data reference with the title '<xsl:text/>
               <xsl:value-of select="data-title[1]"/>
               <xsl:text/>' has an OSF 'https://osf.io' type link, but is not marked as an accession type link.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="starts-with(pub-id[1][@pub-id-type='doi'],'10.17605/OSF') and (source[1]!='Open Science Framework')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="starts-with(pub-id[1][@pub-id-type='doi'],'10.17605/OSF') and (source[1]!='Open Science Framework')">
            <xsl:attribute name="id">data-osf-test-4</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/data-availability#data-osf-test-4</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[data-osf-test-4] Data reference with the title '<xsl:text/>
               <xsl:value-of select="data-title[1]"/>
               <xsl:text/>' has a doi starting with '10.17605/OSF' but the database name is not 'Open Science Framework' - <xsl:text/>
               <xsl:value-of select="source[1]"/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="starts-with(pub-id[1][@pub-id-type='doi'],'10.6084/m9.figshare') and (source[1]!='figshare')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="starts-with(pub-id[1][@pub-id-type='doi'],'10.6084/m9.figshare') and (source[1]!='figshare')">
            <xsl:attribute name="id">data-figshare-test-1</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/data-availability#data-figshare-test-1</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[data-figshare-test-1] Data reference with the title '<xsl:text/>
               <xsl:value-of select="data-title[1]"/>
               <xsl:text/>' has a doi starting with '10.6084/m9.figshare' but the database name is not 'figshare' - <xsl:text/>
               <xsl:value-of select="source[1]"/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="(pub-id or ext-link) and not(starts-with(pub-id[1][@pub-id-type='doi'],'10.6084/m9.figshare')) and (source[1]='figshare')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(pub-id or ext-link) and not(starts-with(pub-id[1][@pub-id-type='doi'],'10.6084/m9.figshare')) and (source[1]='figshare')">
            <xsl:attribute name="id">data-figshare-test-2</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/data-availability#data-figshare-test-2</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[data-figshare-test-2] Data reference with the title '<xsl:text/>
               <xsl:value-of select="data-title[1]"/>
               <xsl:text/>' has the database name <xsl:text/>
               <xsl:value-of select="source[1]"/>
               <xsl:text/>, but no doi starting with '10.6084/m9.figshare' - is this correct? Figshare sometimes host for other organisations (example http://doi.org/10.1184/R1/9963566), so this may be fine.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(pub-id[1]/@xlink:href,'proteomecentral.proteomexchange.org/') and not(source[1]='ProteomeXchange')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(pub-id[1]/@xlink:href,'proteomecentral.proteomexchange.org/') and not(source[1]='ProteomeXchange')">
            <xsl:attribute name="id">data-proteomexchange-test-1</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/data-availability#data-proteomexchange-test-1</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[data-proteomexchange-test-1] Data reference with the title '<xsl:text/>
               <xsl:value-of select="data-title[1]"/>
               <xsl:text/>' has a 'http://proteomecentral.proteomexchange.org/' type link, but the database name is not 'ProteomeXchange' - <xsl:text/>
               <xsl:value-of select="source[1]"/>
               <xsl:text/>. Is that correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(pub-id[1]/@xlink:href,'proteomecentral.proteomexchange.org/') and pub-id[1][@pub-id-type!='accession' or not(@pub-id-type)]">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(pub-id[1]/@xlink:href,'proteomecentral.proteomexchange.org/') and pub-id[1][@pub-id-type!='accession' or not(@pub-id-type)]">
            <xsl:attribute name="id">data-proteomexchange-test-3</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/data-availability#data-proteomexchange-test-3</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[data-proteomexchange-test-3] Data reference with the title '<xsl:text/>
               <xsl:value-of select="data-title[1]"/>
               <xsl:text/>' has a ProteomeXchange 'http://proteomecentral.proteomexchange.org/' type link, but is not marked as an accession type link.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="starts-with(pub-id[1][@pub-id-type='doi'],'10.18112/openneuro') and (source[1]!='OpenNeuro')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="starts-with(pub-id[1][@pub-id-type='doi'],'10.18112/openneuro') and (source[1]!='OpenNeuro')">
            <xsl:attribute name="id">data-openneuro-test-1</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/data-availability#data-openneuro-test-1</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[data-openneuro-test-1] Data reference with the title '<xsl:text/>
               <xsl:value-of select="data-title[1]"/>
               <xsl:text/>' has a doi starting with '10.18112/openneuro' but the database name is not 'OpenNeuro' - <xsl:text/>
               <xsl:value-of select="source[1]"/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="(pub-id or ext-link) and not(starts-with(pub-id[1][@pub-id-type='doi'],'10.18112/openneuro')) and not(contains(pub-id[1]/@xlink:href,'openneuro.org/datasets')) and (source[1]='OpenNeuro')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(pub-id or ext-link) and not(starts-with(pub-id[1][@pub-id-type='doi'],'10.18112/openneuro')) and not(contains(pub-id[1]/@xlink:href,'openneuro.org/datasets')) and (source[1]='OpenNeuro')">
            <xsl:attribute name="id">data-openneuro-test-2</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/data-availability#data-openneuro-test-2</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[data-openneuro-test-2] Data reference with the title '<xsl:text/>
               <xsl:value-of select="data-title[1]"/>
               <xsl:text/>' has the database name <xsl:text/>
               <xsl:value-of select="source[1]"/>
               <xsl:text/>, but no doi starting with '10.18112/openneuro' or 'openneuro.org/datasets' type link, which is incorrect.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="starts-with(pub-id[1][@pub-id-type='doi'],'10.7303/syn') and (source[1]!='Synapse')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="starts-with(pub-id[1][@pub-id-type='doi'],'10.7303/syn') and (source[1]!='Synapse')">
            <xsl:attribute name="id">data-synapse-test-1</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/data-availability#data-synapse-test-1</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[data-synapse-test-1] Data reference with the title '<xsl:text/>
               <xsl:value-of select="data-title[1]"/>
               <xsl:text/>' has a doi starting with '10.7303/syn' but the database name is not 'Synapse' - <xsl:text/>
               <xsl:value-of select="source[1]"/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="(pub-id or ext-link) and not(starts-with(pub-id[1][@pub-id-type='doi'],'10.7303/syn')) and (source[1]='Synapse')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(pub-id or ext-link) and not(starts-with(pub-id[1][@pub-id-type='doi'],'10.7303/syn')) and (source[1]='Synapse')">
            <xsl:attribute name="id">data-synapse-test-2</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/data-availability#data-synapse-test-2</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[data-synapse-test-2] Data reference with the title '<xsl:text/>
               <xsl:value-of select="data-title[1]"/>
               <xsl:text/>' has the database name <xsl:text/>
               <xsl:value-of select="source[1]"/>
               <xsl:text/>, but no doi starting with '10.7303/syn', which is incorrect.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(pub-id[1]/@xlink:href,'www.bmrb.wisc.edu/data_library/summary') and not(source[1]='Biological Magnetic Resonance Data Bank')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(pub-id[1]/@xlink:href,'www.bmrb.wisc.edu/data_library/summary') and not(source[1]='Biological Magnetic Resonance Data Bank')">
            <xsl:attribute name="id">data-bmrb-test-1</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/data-availability#data-bmrb-test-1</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[data-bmrb-test-1] Data reference with the title '<xsl:text/>
               <xsl:value-of select="data-title[1]"/>
               <xsl:text/>' has a 'www.bmrb.wisc.edu/data_library/summary' type link, but the database name is not 'Biological Magnetic Resonance Data Bank' - <xsl:text/>
               <xsl:value-of select="source[1]"/>
               <xsl:text/>. Is that correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(pub-id[1]/@xlink:href,'www.bmrb.wisc.edu/data_library/summary') and pub-id[1][@pub-id-type!='accession' or not(@pub-id-type)]">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(pub-id[1]/@xlink:href,'www.bmrb.wisc.edu/data_library/summary') and pub-id[1][@pub-id-type!='accession' or not(@pub-id-type)]">
            <xsl:attribute name="id">data-bmrb-test-3</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/data-availability#data-bmrb-test-3</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[data-bmrb-test-3] Data reference with the title '<xsl:text/>
               <xsl:value-of select="data-title[1]"/>
               <xsl:text/>' has a BMRB 'www.bmrb.wisc.edu/data_library/summary' type link, but is not marked as an accession type link.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(pub-id[1]/@xlink:href,'www.morphdbase.de') and not(source[1]='Morph D Base')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(pub-id[1]/@xlink:href,'www.morphdbase.de') and not(source[1]='Morph D Base')">
            <xsl:attribute name="id">data-morphdbase-test-1</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/data-availability#data-morphdbase-test-1</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[data-morphdbase-test-1] Data reference with the title '<xsl:text/>
               <xsl:value-of select="data-title[1]"/>
               <xsl:text/>' has a 'www.morphdbase.de' type link, but the database name is not 'Morph D Base' - <xsl:text/>
               <xsl:value-of select="source[1]"/>
               <xsl:text/>. Is that correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(pub-id[1]/@xlink:href,'www.morphdbase.de') and pub-id[1][@pub-id-type!='accession' or not(@pub-id-type)]">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(pub-id[1]/@xlink:href,'www.morphdbase.de') and pub-id[1][@pub-id-type!='accession' or not(@pub-id-type)]">
            <xsl:attribute name="id">data-morphdbase-test-3</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/data-availability#data-morphdbase-test-3</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[data-morphdbase-test-3] Data reference with the title '<xsl:text/>
               <xsl:value-of select="data-title[1]"/>
               <xsl:text/>' has a Morph D Base 'www.morphdbase.de' type link, but is not marked as an accession type link.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="starts-with(pub-id[1][@pub-id-type='doi'],'10.17632') and (source[1]!='Mendeley Data')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="starts-with(pub-id[1][@pub-id-type='doi'],'10.17632') and (source[1]!='Mendeley Data')">
            <xsl:attribute name="id">data-mendeley-test-1</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/data-availability#data-mendeley-test-1</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[data-mendeley-test-1] Data reference with the title '<xsl:text/>
               <xsl:value-of select="data-title[1]"/>
               <xsl:text/>' has a doi starting with '10.17632' but the database name is not 'Mendeley Data' - <xsl:text/>
               <xsl:value-of select="source[1]"/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="(pub-id or ext-link) and not(starts-with(pub-id[1][@pub-id-type='doi'],'10.17632')) and (source[1]='Mendeley Data')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(pub-id or ext-link) and not(starts-with(pub-id[1][@pub-id-type='doi'],'10.17632')) and (source[1]='Mendeley Data')">
            <xsl:attribute name="id">data-mendeley-test-2</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/data-availability#data-mendeley-test-2</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[data-mendeley-test-2] Data reference with the title '<xsl:text/>
               <xsl:value-of select="data-title[1]"/>
               <xsl:text/>' has the database name <xsl:text/>
               <xsl:value-of select="source[1]"/>
               <xsl:text/>, but no doi starting with '10.17632', which is incorrect.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="starts-with(pub-id[1][@pub-id-type='doi'],'10.7488') and (source[1]!='Edinburgh DataShare')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="starts-with(pub-id[1][@pub-id-type='doi'],'10.7488') and (source[1]!='Edinburgh DataShare')">
            <xsl:attribute name="id">data-edatashare-test-1</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/data-availability#data-edatashare-test-1</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[data-edatashare-test-1] Data reference with the title '<xsl:text/>
               <xsl:value-of select="data-title[1]"/>
               <xsl:text/>' has a doi starting with '10.7488' but the database name is not 'Edinburgh DataShare' - <xsl:text/>
               <xsl:value-of select="source[1]"/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="(pub-id or ext-link) and not(starts-with(pub-id[1][@pub-id-type='doi'],'10.7488')) and (source[1]='Edinburgh DataShare')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(pub-id or ext-link) and not(starts-with(pub-id[1][@pub-id-type='doi'],'10.7488')) and (source[1]='Edinburgh DataShare')">
            <xsl:attribute name="id">data-edatashare-test-2</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/data-availability#data-edatashare-test-2</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[data-edatashare-test-2] Data reference with the title '<xsl:text/>
               <xsl:value-of select="data-title[1]"/>
               <xsl:text/>' has the database name <xsl:text/>
               <xsl:value-of select="source[1]"/>
               <xsl:text/>, but no doi starting with '10.7488', which is incorrect.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="starts-with(pub-id[1][@pub-id-type='doi'],'10.3929') and (source[1]!='ETH Library research collection')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="starts-with(pub-id[1][@pub-id-type='doi'],'10.3929') and (source[1]!='ETH Library research collection')">
            <xsl:attribute name="id">data-eth-test-1</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/data-availability#data-eth-test-1</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[data-eth-test-1] Data reference with the title '<xsl:text/>
               <xsl:value-of select="data-title[1]"/>
               <xsl:text/>' has a doi starting with '10.3929' but the database name is not 'ETH Library research collection' - <xsl:text/>
               <xsl:value-of select="source[1]"/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="(pub-id or ext-link) and not(starts-with(pub-id[1][@pub-id-type='doi'],'10.3929')) and (source[1]='ETH Library research collection')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(pub-id or ext-link) and not(starts-with(pub-id[1][@pub-id-type='doi'],'10.3929')) and (source[1]='ETH Library research collection')">
            <xsl:attribute name="id">data-eth-test-2</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/data-availability#data-eth-test-2</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[data-eth-test-2] Data reference with the title '<xsl:text/>
               <xsl:value-of select="data-title[1]"/>
               <xsl:text/>' has the database name <xsl:text/>
               <xsl:value-of select="source[1]"/>
               <xsl:text/>, but no doi starting with '10.3929', which is incorrect.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="starts-with(pub-id[1][@pub-id-type='doi'],'10.6080') and (source[1]!='Collaborative Research in Computational Neuroscience')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="starts-with(pub-id[1][@pub-id-type='doi'],'10.6080') and (source[1]!='Collaborative Research in Computational Neuroscience')">
            <xsl:attribute name="id">data-crcns-test-1</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/data-availability#data-crcns-test-1</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[data-crcns-test-1] Data reference with the title '<xsl:text/>
               <xsl:value-of select="data-title[1]"/>
               <xsl:text/>' has a doi starting with '10.6080' but the database name is not 'Collaborative Research in Computational Neuroscience' - <xsl:text/>
               <xsl:value-of select="source[1]"/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="(pub-id or ext-link) and not(starts-with(pub-id[1][@pub-id-type='doi'],'10.6080')) and (source[1]='Collaborative Research in Computational Neuroscience')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(pub-id or ext-link) and not(starts-with(pub-id[1][@pub-id-type='doi'],'10.6080')) and (source[1]='Collaborative Research in Computational Neuroscience')">
            <xsl:attribute name="id">data-crcns-test-2</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/data-availability#data-crcns-test-2</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[data-crcns-test-2] Data reference with the title '<xsl:text/>
               <xsl:value-of select="data-title[1]"/>
               <xsl:text/>' has the database name <xsl:text/>
               <xsl:value-of select="source[1]"/>
               <xsl:text/>, but no doi starting with '10.6080', which is incorrect.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="starts-with(pub-id[1][@pub-id-type='doi'],'10.17602') and (source[1]!='MorphoSource')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="starts-with(pub-id[1][@pub-id-type='doi'],'10.17602') and (source[1]!='MorphoSource')">
            <xsl:attribute name="id">data-morphosource-test-1</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/data-availability#data-morphosource-test-1</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[data-morphosource-test-1] Data reference with the title '<xsl:text/>
               <xsl:value-of select="data-title[1]"/>
               <xsl:text/>' has a doi starting with '10.17602' but the database name is not 'MorphoSource' - <xsl:text/>
               <xsl:value-of select="source[1]"/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="(pub-id or ext-link) and not(starts-with(pub-id[1][@pub-id-type='doi'],'10.17602')) and (source[1]='MorphoSource')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(pub-id or ext-link) and not(starts-with(pub-id[1][@pub-id-type='doi'],'10.17602')) and (source[1]='MorphoSource')">
            <xsl:attribute name="id">data-morphosource-test-2</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/data-availability#data-morphosource-test-2</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[data-morphosource-test-2] Data reference with the title '<xsl:text/>
               <xsl:value-of select="data-title[1]"/>
               <xsl:text/>' has the database name <xsl:text/>
               <xsl:value-of select="source[1]"/>
               <xsl:text/>, but no doi starting with '10.17602', which is incorrect.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(pub-id[1]/@xlink:href,'neurovault.org/collections') and not(source[1]='NeuroVault')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(pub-id[1]/@xlink:href,'neurovault.org/collections') and not(source[1]='NeuroVault')">
            <xsl:attribute name="id">data-neurovault-test-1</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/data-availability#data-neurovault-test-1</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[data-neurovault-test-1] Data reference with the title '<xsl:text/>
               <xsl:value-of select="data-title[1]"/>
               <xsl:text/>' has a 'neurovault.org/collections' type link, but the database name is not 'NeuroVault' - <xsl:text/>
               <xsl:value-of select="source[1]"/>
               <xsl:text/>. Is that correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(pub-id[1]/@xlink:href,'neurovault.org/collections') and pub-id[1][@pub-id-type!='accession' or not(@pub-id-type)]">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(pub-id[1]/@xlink:href,'neurovault.org/collections') and pub-id[1][@pub-id-type!='accession' or not(@pub-id-type)]">
            <xsl:attribute name="id">data-neurovault-test-3</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/data-availability#data-neurovault-test-3</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[data-neurovault-test-3] Data reference with the title '<xsl:text/>
               <xsl:value-of select="data-title[1]"/>
               <xsl:text/>' has a NeuroVault 'neurovault.org/collections' type link, but is not marked as an accession type link.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="starts-with(pub-id[1][@pub-id-type='doi'],'10.2210') and (source[1]!='Worldwide Protein Data Bank')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="starts-with(pub-id[1][@pub-id-type='doi'],'10.2210') and (source[1]!='Worldwide Protein Data Bank')">
            <xsl:attribute name="id">data-wwpdb-test-1</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/data-availability#data-wwpdb-test-1</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[data-wwpdb-test-1] Data reference with the title '<xsl:text/>
               <xsl:value-of select="data-title[1]"/>
               <xsl:text/>' has a doi starting with '10.2210' but the database name is not 'Worldwide Protein Data Bank' - <xsl:text/>
               <xsl:value-of select="source[1]"/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="(pub-id or ext-link) and not(starts-with(pub-id[1][@pub-id-type='doi'],'10.2210')) and (source[1]='Worldwide Protein Data Bank')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(pub-id or ext-link) and not(starts-with(pub-id[1][@pub-id-type='doi'],'10.2210')) and (source[1]='Worldwide Protein Data Bank')">
            <xsl:attribute name="id">data-wwpdb-test-2</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/data-availability#data-wwpdb-test-2</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[data-wwpdb-test-2] Data reference with the title '<xsl:text/>
               <xsl:value-of select="data-title[1]"/>
               <xsl:text/>' has the database name <xsl:text/>
               <xsl:value-of select="source[1]"/>
               <xsl:text/>, but no doi starting with '10.2210', which is incorrect.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="starts-with(pub-id[1][@pub-id-type='doi'],'10.15785/SBGRID') and (source[1]!='SBGrid Data Bank')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="starts-with(pub-id[1][@pub-id-type='doi'],'10.15785/SBGRID') and (source[1]!='SBGrid Data Bank')">
            <xsl:attribute name="id">data-sbgdb-test-1</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/data-availability#data-sbgdb-test-1</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[data-sbgdb-test-1] Data reference with the title '<xsl:text/>
               <xsl:value-of select="data-title[1]"/>
               <xsl:text/>' has a doi starting with '10.15785/SBGRID' but the database name is not 'SBGrid Data Bank' - <xsl:text/>
               <xsl:value-of select="source[1]"/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="(pub-id or ext-link) and not(starts-with(pub-id[1][@pub-id-type='doi'],'10.15785/SBGRID')) and (source[1]='SBGrid Data Bank')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(pub-id or ext-link) and not(starts-with(pub-id[1][@pub-id-type='doi'],'10.15785/SBGRID')) and (source[1]='SBGrid Data Bank')">
            <xsl:attribute name="id">data-sbgdb-test-2</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/data-availability#data-sbgdb-test-2</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[data-sbgdb-test-2] Data reference with the title '<xsl:text/>
               <xsl:value-of select="data-title[1]"/>
               <xsl:text/>' has the database name <xsl:text/>
               <xsl:value-of select="source[1]"/>
               <xsl:text/>, but no doi starting with '10.15785/SBGRID', which is likely incorrect.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="starts-with(pub-id[1][@pub-id-type='doi'],'10.7910') and (source[1]!='Harvard Dataverse')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="starts-with(pub-id[1][@pub-id-type='doi'],'10.7910') and (source[1]!='Harvard Dataverse')">
            <xsl:attribute name="id">data-harvard-dataverse-test-1</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/data-availability#data-harvard-dataverse-test-1</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[data-harvard-dataverse-test-1] Data reference with the title '<xsl:text/>
               <xsl:value-of select="data-title[1]"/>
               <xsl:text/>' has a doi starting with '10.7910' but the database name is not 'Harvard Dataverse' - <xsl:text/>
               <xsl:value-of select="source[1]"/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="(pub-id or ext-link) and not(starts-with(pub-id[1][@pub-id-type='doi'],'10.7910')) and (source[1]='Harvard Dataverse')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(pub-id or ext-link) and not(starts-with(pub-id[1][@pub-id-type='doi'],'10.7910')) and (source[1]='Harvard Dataverse')">
            <xsl:attribute name="id">data-harvard-dataverse-test-2</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/data-availability#data-harvard-dataverse-test-2</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[data-harvard-dataverse-test-2] Data reference with the title '<xsl:text/>
               <xsl:value-of select="data-title[1]"/>
               <xsl:text/>' has the database name <xsl:text/>
               <xsl:value-of select="source[1]"/>
               <xsl:text/>, but no doi starting with '10.7910', which is likely incorrect.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(pub-id[1]/@xlink:href,'www.encodeproject.org') and not(source[1]='ENCODE')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(pub-id[1]/@xlink:href,'www.encodeproject.org') and not(source[1]='ENCODE')">
            <xsl:attribute name="id">data-encode-test-1</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/data-availability#data-encode-test-1</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[data-encode-test-1] Data reference with the title '<xsl:text/>
               <xsl:value-of select="data-title[1]"/>
               <xsl:text/>' has a 'www.encodeproject.org' type link, but the database name is not 'ENCODE' - <xsl:text/>
               <xsl:value-of select="source[1]"/>
               <xsl:text/>. Is that correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(pub-id[1]/@xlink:href,'www.encodeproject.org') and pub-id[1][@pub-id-type!='accession' or not(@pub-id-type)]">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(pub-id[1]/@xlink:href,'www.encodeproject.org') and pub-id[1][@pub-id-type!='accession' or not(@pub-id-type)]">
            <xsl:attribute name="id">data-encode-test-3</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/data-availability#data-encode-test-3</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[data-encode-test-3] Data reference with the title '<xsl:text/>
               <xsl:value-of select="data-title[1]"/>
               <xsl:text/>' has an ENCODE 'www.encodeproject.org' type link, but is not marked as an accession type link.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(pub-id[1]/@xlink:href,'www.emdataresource.org') and not(source[1]='EMDataResource')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(pub-id[1]/@xlink:href,'www.emdataresource.org') and not(source[1]='EMDataResource')">
            <xsl:attribute name="id">data-emdr-test-1</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/data-availability#data-emdr-test-1</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[data-emdr-test-1] Data reference with the title '<xsl:text/>
               <xsl:value-of select="data-title[1]"/>
               <xsl:text/>' has a 'www.emdataresource.org' type link, but the database name is not 'EMDataResource' - <xsl:text/>
               <xsl:value-of select="source[1]"/>
               <xsl:text/>. Is that correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(pub-id[1]/@xlink:href,'www.emdataresource.org') and pub-id[1][@pub-id-type!='accession' or not(@pub-id-type)]">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(pub-id[1]/@xlink:href,'www.emdataresource.org') and pub-id[1][@pub-id-type!='accession' or not(@pub-id-type)]">
            <xsl:attribute name="id">data-emdr-test-3</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/data-availability#data-emdr-test-3</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[data-emdr-test-3] Data reference with the title '<xsl:text/>
               <xsl:value-of select="data-title[1]"/>
               <xsl:text/>' has an EMDataResource 'www.emdataresource.org' type link, but is not marked as an accession type link.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M484"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M484"/>
   <xsl:template match="@*|node()" priority="-2" mode="M484">
      <xsl:apply-templates select="*" mode="M484"/>
   </xsl:template>

   <!--PATTERN ncbi-pub-id-checks-pattern-->


	  <!--RULE ncbi-pub-id-checks-->
   <xsl:template match="element-citation[@publication-type='data']/pub-id[@pub-id-type='accession' and contains(@xlink:href,'.ncbi.nlm.nih.gov')]" priority="1000" mode="M485">

		<!--ASSERT warning-->
      <xsl:choose>
         <xsl:when test="contains(lower-case(@xlink:href),lower-case(.))"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(lower-case(@xlink:href),lower-case(.))">
               <xsl:attribute name="id">ncbi-pub-id-1</xsl:attribute>
               <xsl:attribute name="role">warning</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[ncbi-pub-id-1] Dataset reference is an NCBI dataset, but the link for the dataset - <xsl:text/>
                  <xsl:value-of select="@xlink:href"/>
                  <xsl:text/> - does not contain the accession number - <xsl:text/>
                  <xsl:value-of select="."/>
                  <xsl:text/> - which is particularly unusual, and its likely that one of these is incorrect.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M485"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M485"/>
   <xsl:template match="@*|node()" priority="-2" mode="M485">
      <xsl:apply-templates select="*" mode="M485"/>
   </xsl:template>

   <!--PATTERN publisher-name-tests-pattern-->


	  <!--RULE publisher-name-tests-->
   <xsl:template match="element-citation/publisher-name" priority="1000" mode="M486">

		<!--REPORT warning-->
      <xsl:if test="matches(.,':')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,':')">
            <xsl:attribute name="id">publisher-name-colon</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#publisher-name-colon</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[publisher-name-colon] ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has a publisher-name containing a colon - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>. Should the text preceding the colon instead be captured as publisher-loc?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,'[Ii]nc\.')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'[Ii]nc\.')">
            <xsl:attribute name="id">publisher-name-inc</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#publisher-name-inc</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[publisher-name-inc] ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has a publisher-name containing the text 'Inc.' Should the fullstop be removed? <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches(.,'�')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'�')">
            <xsl:attribute name="id">pub-name-replacement-character-presence</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#pub-name-replacement-character-presence</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[pub-name-replacement-character-presence] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains the replacement character '�' which is unallowed - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(lower-case(.),'guardian|the independent|times|post|news')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(lower-case(.),'guardian|the independent|times|post|news')">
            <xsl:attribute name="id">pub-name-newspaper</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#pub-name-newspaper</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[pub-name-newspaper] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains the text 'guardian', 'independent', 'times' or 'post' - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> - is it a newspaper reference? If so, it should be captured as a web or a periodical reference.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M486"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M486"/>
   <xsl:template match="@*|node()" priority="-2" mode="M486">
      <xsl:apply-templates select="*" mode="M486"/>
   </xsl:template>

   <!--PATTERN ref-name-tests-pattern-->


	  <!--RULE ref-name-tests-->
   <xsl:template match="element-citation//name" priority="1000" mode="M487">
      <xsl:variable name="type" select="ancestor::person-group[1]/@person-group-type"/>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,'[Aa]uthor')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'[Aa]uthor')">
            <xsl:attribute name="id">author-test-1</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#author-test-1</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[author-test-1] name in ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' contans the text 'Author'. Is this correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,'[Ed]itor')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'[Ed]itor')">
            <xsl:attribute name="id">author-test-2</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#author-test-2</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[author-test-2] name in ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' contans the text 'Editor'. Is this correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,'[Pp]ress')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'[Pp]ress')">
            <xsl:attribute name="id">author-test-3</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#author-test-3</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[author-test-3] name in ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' contans the text 'Press'. Is this correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(surname[1],'^[A-Z]*$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(surname[1],'^[A-Z]*$')">
            <xsl:attribute name="id">all-caps-surname</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#all-caps-surname</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[all-caps-surname] surname in ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' is composed of only capitalised letters - <xsl:text/>
               <xsl:value-of select="surname[1]"/>
               <xsl:text/>. Should this be captured as a collab? If not, Should it be - <xsl:text/>
               <xsl:value-of select="concat(substring(surname[1],1,1),lower-case(substring(surname[1],2)))"/>
               <xsl:text/>?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,'[0-9]')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'[0-9]')">
            <xsl:attribute name="id">surname-number-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#surname-number-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[surname-number-check] name in ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' contains numbers - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>. Should this be captured as a collab?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches(surname[1],'^\p{Zs}*?…|^\p{Zs}*?\.\p{Zs}?\.\p{Zs}?\.')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(surname[1],'^\p{Zs}*?…|^\p{Zs}*?\.\p{Zs}?\.\p{Zs}?\.')">
            <xsl:attribute name="id">surname-ellipsis-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#surname-ellipsis-check</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[surname-ellipsis-check] surname in ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' begins with an ellipsis which is wrong - <xsl:text/>
               <xsl:value-of select="surname"/>
               <xsl:text/>. Are there preceding authors missing from the list?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(surname) = 1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(surname) = 1">
               <xsl:attribute name="id">surname-count</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#surname-count</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[surname-count] ref '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has an <xsl:text/>
                  <xsl:value-of select="$type"/>
                  <xsl:text/> with <xsl:text/>
                  <xsl:value-of select="count(surname)"/>
                  <xsl:text/> surnames - <xsl:text/>
                  <xsl:value-of select="."/>
                  <xsl:text/> - which is incorrect.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="count(given-names) gt 1">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(given-names) gt 1">
            <xsl:attribute name="id">given-names-count</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#given-names-count</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[given-names-count] ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has an <xsl:text/>
               <xsl:value-of select="$type"/>
               <xsl:text/> with <xsl:text/>
               <xsl:value-of select="count(given-names)"/>
               <xsl:text/> given-names - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> - which is incorrect.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="count(given-names) lt 1">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(given-names) lt 1">
            <xsl:attribute name="id">given-names-count-2</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#given-names-count-2</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[given-names-count-2] ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has an <xsl:text/>
               <xsl:value-of select="$type"/>
               <xsl:text/> with <xsl:text/>
               <xsl:value-of select="count(given-names)"/>
               <xsl:text/> given-names - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> - is this incorrect?</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M487"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M487"/>
   <xsl:template match="@*|node()" priority="-2" mode="M487">
      <xsl:apply-templates select="*" mode="M487"/>
   </xsl:template>

   <!--PATTERN page-conformity-pattern-->


	  <!--RULE page-conformity-->
   <xsl:template match="element-citation[(@publication-type='journal') and (fpage or lpage)]" priority="1000" mode="M488">
      <xsl:variable name="cite" select="e:citation-format1(.)"/>

		    <!--REPORT error-->
      <xsl:if test="matches(lower-case(source[1]),'plos|^elife$|^mbio$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(lower-case(source[1]),'plos|^elife$|^mbio$')">
            <xsl:attribute name="id">online-journal-w-page</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[online-journal-w-page] <xsl:text/>
               <xsl:value-of select="$cite"/>
               <xsl:text/> is a <xsl:text/>
               <xsl:value-of select="source"/>
               <xsl:text/> article, but has a page number, which is incorrect.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M488"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M488"/>
   <xsl:template match="@*|node()" priority="-2" mode="M488">
      <xsl:apply-templates select="*" mode="M488"/>
   </xsl:template>

   <!--PATTERN isbn-conformity-pattern-->


	  <!--RULE isbn-conformity-->
   <xsl:template match="element-citation/pub-id[@pub-id-type='isbn']" priority="1000" mode="M489">
      <xsl:variable name="t" select="translate(.,'-','')"/>
      <xsl:variable name="sum" select="e:isbn-sum($t)"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="$sum = 0"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="$sum = 0">
               <xsl:attribute name="id">isbn-conformity-test</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#isbn-conformity-test</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[isbn-conformity-test] pub-id contains an invalid ISBN - '<xsl:text/>
                  <xsl:value-of select="."/>
                  <xsl:text/>'. Should it be captured as another type of pub-id?</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M489"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M489"/>
   <xsl:template match="@*|node()" priority="-2" mode="M489">
      <xsl:apply-templates select="*" mode="M489"/>
   </xsl:template>

   <!--PATTERN isbn-conformity-2-pattern-->


	  <!--RULE isbn-conformity-2-->
   <xsl:template match="isbn" priority="1000" mode="M490">
      <xsl:variable name="t" select="translate(.,'-','')"/>
      <xsl:variable name="sum" select="e:isbn-sum($t)"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="$sum = 0"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="$sum = 0">
               <xsl:attribute name="id">isbn-conformity-test-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[isbn-conformity-test-2] isbn contains an invalid ISBN - '<xsl:text/>
                  <xsl:value-of select="."/>
                  <xsl:text/>'. Should it be captured as another type of pub-id?</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M490"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M490"/>
   <xsl:template match="@*|node()" priority="-2" mode="M490">
      <xsl:apply-templates select="*" mode="M490"/>
   </xsl:template>

   <!--PATTERN data-availability-statement-pattern-->


	  <!--RULE data-availability-statement-->
   <xsl:template match="sec[@sec-type='data-availability']/p[1]" priority="1000" mode="M491">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(.,'\.$|\?$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'\.$|\?$')">
               <xsl:attribute name="id">das-sentence-conformity</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/data-availability#das-sentence-conformity</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[das-sentence-conformity] The Data Availability Statement must end with a full stop.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="matches(.,'[Dd]ryad') and          (not(parent::sec//element-citation[contains(source[1],'Dryad') or pub-id[@pub-id-type='doi' and (contains(.,'10.7272') or contains(.,'10.5061/dryad'))]]))         and not(ancestor::back//ref-list/ref[element-citation[@publication-type='data' and (contains(source[1],'Dryad') or pub-id[@pub-id-type='doi' and (contains(.,'10.7272') or contains(.,'10.5061/dryad'))])]]/@id = xref[@ref-type='bibr']/@rid)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'[Dd]ryad') and (not(parent::sec//element-citation[contains(source[1],'Dryad') or pub-id[@pub-id-type='doi' and (contains(.,'10.7272') or contains(.,'10.5061/dryad'))]])) and not(ancestor::back//ref-list/ref[element-citation[@publication-type='data' and (contains(source[1],'Dryad') or pub-id[@pub-id-type='doi' and (contains(.,'10.7272') or contains(.,'10.5061/dryad'))])]]/@id = xref[@ref-type='bibr']/@rid)">
            <xsl:attribute name="id">final-das-dryad-conformity</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/data-availability#final-das-dryad-conformity</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[final-das-dryad-conformity] Data Availability Statement contains the word Dryad, but there is no data citation in the dataset section with a dryad doi and/or database name containing 'Dryad'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,'[Ss]upplemental [Ff]igure')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'[Ss]upplemental [Ff]igure')">
            <xsl:attribute name="id">das-supplemental-conformity</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/data-availability#das-supplemental-conformity</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[das-supplemental-conformity] Data Availability Statement contains the phrase 'supplemental figure'. This will almost certainly need updating to account for eLife's figure labelling.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,'[Rr]equest')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'[Rr]equest')">
            <xsl:attribute name="id">das-request-conformity-1</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/data-availability#das-request-conformity-1</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[das-request-conformity-1] Data Availability Statement contains the phrase 'request'. Does it state data is available upon request, and if so, has this been approved by editorial?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches(.,'10\.\d{4,9}/[-._;()/:A-Za-z0-9&lt;&gt;\+#&amp;`~–−]+$') and not(matches(.,'http[s]?://doi.org/'))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'10\.\d{4,9}/[-._;()/:A-Za-z0-9&lt;&gt;\+#&amp;`~–−]+$') and not(matches(.,'http[s]?://doi.org/'))">
            <xsl:attribute name="id">das-doi-conformity-1</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/data-availability#das-doi-conformity-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[das-doi-conformity-1] Data Availability Statement contains a doi, but it does not contain the 'https://doi.org/' proxy. All dois should be updated to include a full 'https://doi.org/...' type link.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M491"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M491"/>
   <xsl:template match="@*|node()" priority="-2" mode="M491">
      <xsl:apply-templates select="*" mode="M491"/>
   </xsl:template>

   <!--PATTERN data-availability-version-2-pattern-->


	  <!--RULE data-availability-version-2-->
   <xsl:template match="article[e:get-version(.)!='1']//sec[@sec-type='data-availability']" priority="1000" mode="M492">

		<!--REPORT error-->
      <xsl:if test="descendant::element-citation">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="descendant::element-citation">
            <xsl:attribute name="id">das-no-refs</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[das-no-refs] Version 2 xml cannot have references in the data availability section. Data references must instead be cited from the data availability section.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(p) = 1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(p) = 1">
               <xsl:attribute name="id">das-p-count</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[das-p-count] Version 2 xml cannot have more than one p element in the data availability section.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M492"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M492"/>
   <xsl:template match="@*|node()" priority="-2" mode="M492">
      <xsl:apply-templates select="*" mode="M492"/>
   </xsl:template>

   <!--PATTERN data-availability-child-version-2-pattern-->


	  <!--RULE data-availability-child-version-2-->
   <xsl:template match="article[e:get-version(.)!='1']//sec[@sec-type='data-availability']/*" priority="1000" mode="M493">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="name()=('p','title')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="name()=('p','title')">
               <xsl:attribute name="id">das-child-conformance</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[das-child-conformance] Only p and title elements are permitted within the data availability section. In version 2 XML <xsl:text/>
                  <xsl:value-of select="name()"/>
                  <xsl:text/> is not permitted.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M493"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M493"/>
   <xsl:template match="@*|node()" priority="-2" mode="M493">
      <xsl:apply-templates select="*" mode="M493"/>
   </xsl:template>

   <!--PATTERN data-availability-p-pattern-->


	  <!--RULE data-availability-p-->
   <xsl:template match="sec[@sec-type='data-availability']/p[not(*)]" priority="1000" mode="M494">

		<!--REPORT error-->
      <xsl:if test="normalize-space(replace(.,' ',''))=''">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="normalize-space(replace(.,' ',''))=''">
            <xsl:attribute name="id">final-das-p-conformity-1</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/data-availability#final-das-p-conformity-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[final-das-p-conformity-1] p element in data availability section contains no content. It must be removed.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M494"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M494"/>
   <xsl:template match="@*|node()" priority="-2" mode="M494">
      <xsl:apply-templates select="*" mode="M494"/>
   </xsl:template>

   <!--PATTERN data-availability-generated-p-pattern-->


	  <!--RULE data-availability-generated-p-->
   <xsl:template match="article[e:get-version(.)='1']//sec[@sec-type='data-availability']/p[position() gt 1 and not(element-citation) and following-sibling::p[element-citation[@specific-use='isSupplementedBy']]]" priority="1000" mode="M495">
      <xsl:variable name="ref-count" select="count(ancestor::sec[@sec-type='data-availability']//element-citation[@specific-use='isSupplementedBy'])"/>

		    <!--REPORT error-->
      <xsl:if test="$ref-count = 1 and not(matches(.,'^The following dataset was generated:\s?$'))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="$ref-count = 1 and not(matches(.,'^The following dataset was generated:\s?$'))">
            <xsl:attribute name="id">das-generated-p-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[das-generated-p-1] p element before generated datasets in data availability sections that contain 1 generated dataset should contain 'The following dataset was generated:', but this one contains '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="($ref-count gt 1) and not(matches(.,'^The following datasets were generated:\s?$'))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="($ref-count gt 1) and not(matches(.,'^The following datasets were generated:\s?$'))">
            <xsl:attribute name="id">das-generated-p-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[das-generated-p-2] p element before generated datasets in data availability sections that contain more than 1 generated dataset should contain 'The following datasets were generated:', but this one contains '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M495"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M495"/>
   <xsl:template match="@*|node()" priority="-2" mode="M495">
      <xsl:apply-templates select="*" mode="M495"/>
   </xsl:template>

   <!--PATTERN data-availability-used-p-pattern-->


	  <!--RULE data-availability-used-p-->
   <xsl:template match="article[e:get-version(.)='1']//sec[@sec-type='data-availability']/p[position() gt 1 and not(element-citation) and not(following-sibling::p[element-citation[@specific-use='isSupplementedBy']]) and following-sibling::p[element-citation[@specific-use='references']]]" priority="1000" mode="M496">
      <xsl:variable name="ref-count" select="count(ancestor::sec[@sec-type='data-availability']//element-citation[@specific-use='references'])"/>

		    <!--REPORT error-->
      <xsl:if test="$ref-count = 1 and not(matches(.,'^The following previously published dataset was used:\s?$'))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="$ref-count = 1 and not(matches(.,'^The following previously published dataset was used:\s?$'))">
            <xsl:attribute name="id">das-used-p-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[das-used-p-1] p element before used datasets in data availability sections that contain 1 used dataset should contain 'The following previously published dataset was used:', but this one contains '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="($ref-count gt 1) and not(matches(.,'^The following previously published datasets were used:\s?$'))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="($ref-count gt 1) and not(matches(.,'^The following previously published datasets were used:\s?$'))">
            <xsl:attribute name="id">das-used-p-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[das-used-p-2] p element before used datasets in data availability sections that contain more than 1 used dataset should contain 'The following previously published datasets were used:', but this one contains '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M496"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M496"/>
   <xsl:template match="@*|node()" priority="-2" mode="M496">
      <xsl:apply-templates select="*" mode="M496"/>
   </xsl:template>

   <!--PATTERN data-availability-extra-p-pattern-->


	  <!--RULE data-availability-extra-p-->
   <xsl:template match="sec[@sec-type='data-availability' and not(descendant::element-citation)]/p" priority="1000" mode="M497">

		<!--REPORT warning-->
      <xsl:if test="preceding-sibling::p">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="preceding-sibling::p">
            <xsl:attribute name="id">das-extra-p</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[das-extra-p] Is this extra p element in the data availability section required? There are no dataset references within the section.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M497"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M497"/>
   <xsl:template match="@*|node()" priority="-2" mode="M497">
      <xsl:apply-templates select="*" mode="M497"/>
   </xsl:template>

   <!--PATTERN ethics-info-pattern-->


	  <!--RULE ethics-info-->
   <xsl:template match="fn-group[@content-type='ethics-information']/fn" priority="1000" mode="M498">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(replace(normalize-space(.),'&quot;',''),'\.$|\?$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(replace(normalize-space(.),'&quot;',''),'\.$|\?$')">
               <xsl:attribute name="id">ethics-info-conformity</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/ethics#ethics-info-conformity</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[ethics-info-conformity] The ethics statement must end with a full stop.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,'[Ss]upplemental [Ffigure]')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'[Ss]upplemental [Ffigure]')">
            <xsl:attribute name="id">ethics-info-supplemental-conformity</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/ethics#ethics-info-supplemental-conformity</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[ethics-info-supplemental-conformity] Ethics statement contains the phrase 'supplemental figure'. This will almost certainly need updating to account for eLife's figure labelling.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M498"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M498"/>
   <xsl:template match="@*|node()" priority="-2" mode="M498">
      <xsl:apply-templates select="*" mode="M498"/>
   </xsl:template>

   <!--PATTERN sec-title-conformity-pattern-->


	  <!--RULE sec-title-conformity-->
   <xsl:template match="sec/title" priority="1000" mode="M499">
      <xsl:variable name="free-text" select="replace(         normalize-space(string-join(for $x in self::*/text() return $x,''))         ,' ','')"/>
      <xsl:variable name="no-link-text" select="translate(         normalize-space(string-join(for $x in self::*/(*[not(name()='xref')]|text()) return $x,''))         ,' ?.',' ')"/>
      <xsl:variable name="new-org-regex" select="string-join(for $x in tokenize($org-regex,'\|') return concat('^',$x,'$'),'|')"/>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,'^\p{Zs}?[A-Za-z]{1,3}\)|^\p{Zs}?\([A-Za-z]{1,3}')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'^\p{Zs}?[A-Za-z]{1,3}\)|^\p{Zs}?\([A-Za-z]{1,3}')">
            <xsl:attribute name="id">sec-title-list-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/article-structure#sec-title-list-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[sec-title-list-check] Section title might start with a list indicator - '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>'. Is this correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,'^[Aa]ppendix')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'^[Aa]ppendix')">
            <xsl:attribute name="id">sec-title-appendix-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/article-structure#sec-title-appendix-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[sec-title-appendix-check] Section title contains the word appendix - '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>'. Should it be captured as an appendix?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="ancestor::body and matches(.,'^[Ss]upplementary |^[Ss]upplemental ')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="ancestor::body and matches(.,'^[Ss]upplementary |^[Ss]upplemental ')">
            <xsl:attribute name="id">sec-title-appendix-check-2</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/article-structure#sec-title-appendix-check-2</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[sec-title-appendix-check-2] Should the section titled '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>' be captured as an appendix?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,'^[Aa]bbreviation[s]?')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'^[Aa]bbreviation[s]?')">
            <xsl:attribute name="id">sec-title-abbr-check</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/article-structure#sec-title-abbr-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[sec-title-abbr-check] Section title contains the word abbreviation - '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>'. Is it an abbreviation section? eLife house style is to define abbreviations in the text when they are first mentioned.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="not(*) and (normalize-space(.)='')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="not(*) and (normalize-space(.)='')">
            <xsl:attribute name="id">sec-title-content-mandate</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/article-structure#sec-title-content-mandate</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[sec-title-content-mandate] Section title must not be empty.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(replace(.,' ',' '),'\.[\p{Zs}]*$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(replace(.,' ',' '),'\.[\p{Zs}]*$')">
            <xsl:attribute name="id">sec-title-full-stop</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/article-structure#sec-title-full-stop</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[sec-title-full-stop] Section title ends with full stop, which is very likely to be incorrect - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches(.,'\p{Zs}$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'\p{Zs}$')">
            <xsl:attribute name="id">sec-title-space</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[sec-title-space] Section title ends with space(s). Please remove the space '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>'</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="(count(*) = 1) and child::bold and ($free-text='')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(count(*) = 1) and child::bold and ($free-text='')">
            <xsl:attribute name="id">sec-title-bold</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/article-structure#sec-title-bold</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[sec-title-bold] All section title content is captured in bold. This is incorrect - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="(count(*) = 1) and child::underline and ($free-text='')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(count(*) = 1) and child::underline and ($free-text='')">
            <xsl:attribute name="id">sec-title-underline</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/article-structure#sec-title-underline</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[sec-title-underline] All section title content is captured in underline. This is incorrect - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="(count(*) = 1) and child::italic and ($free-text='') and not(matches(normalize-space(lower-case(.)),$new-org-regex))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(count(*) = 1) and child::italic and ($free-text='') and not(matches(normalize-space(lower-case(.)),$new-org-regex))">
            <xsl:attribute name="id">sec-title-italic</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/article-structure#sec-title-italic</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[sec-title-italic] All section title content is captured in italics. Is this incorrect? If it is just a species name, then this is likely to be fine - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(upper-case($no-link-text),'^DNA | DNA | DNA$') and not(matches($no-link-text,'^DNA | DNA | DNA$'))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(upper-case($no-link-text),'^DNA | DNA | DNA$') and not(matches($no-link-text,'^DNA | DNA | DNA$'))">
            <xsl:attribute name="id">sec-title-dna</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/article-structure#sec-title-dna</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[sec-title-dna] Section title contains the phrase DNA, but it is not in all caps - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(upper-case($no-link-text),'^RNA | RNA | RNA$') and not(matches($no-link-text,'^RNA | RNA | RNA$'))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(upper-case($no-link-text),'^RNA | RNA | RNA$') and not(matches($no-link-text,'^RNA | RNA | RNA$'))">
            <xsl:attribute name="id">sec-title-rna</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/article-structure#sec-title-rna</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[sec-title-rna] Section title contains the phrase RNA, but it is not in all caps - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($no-link-text,'^[1-4]d | [1-4]d | [1-4]d$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($no-link-text,'^[1-4]d | [1-4]d | [1-4]d$')">
            <xsl:attribute name="id">sec-title-dimension</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/article-structure#sec-title-dimension</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[sec-title-dimension] Section title contains lowercase abbreviation for dimension, when this should always be uppercase 'D' - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(upper-case($no-link-text),'^HIV | HIV | HIV') and not(matches($no-link-text,'^HIV | HIV | HIV'))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(upper-case($no-link-text),'^HIV | HIV | HIV') and not(matches($no-link-text,'^HIV | HIV | HIV'))">
            <xsl:attribute name="id">sec-title-hiv</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/article-structure#sec-title-hiv</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[sec-title-hiv] Section title contains the word HIV, but it is not in all caps - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches(.,'^[\p{Zs}\p{P}]*[Aa][ck][ck]n?ow[le][le]?[dg][dg]?e?ments?[\p{Zs}\p{P}]*$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'^[\p{Zs}\p{P}]*[Aa][ck][ck]n?ow[le][le]?[dg][dg]?e?ments?[\p{Zs}\p{P}]*$')">
            <xsl:attribute name="id">sec-title-ack</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[sec-title-ack] Section title indicates that it is an acknowledgements section - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>. Acknowledgements must be tagged as an &lt;ack&gt; element in the back of the article.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M499"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M499"/>
   <xsl:template match="@*|node()" priority="-2" mode="M499">
      <xsl:apply-templates select="*" mode="M499"/>
   </xsl:template>

   <!--PATTERN abstract-house-tests-pattern-->


	  <!--RULE abstract-house-tests-->
   <xsl:template match="abstract[not(@*)]" priority="1000" mode="M500">
      <xsl:variable name="subj" select="parent::article-meta/article-categories/subj-group[@subj-group-type='display-channel']/subject[1]"/>

		    <!--REPORT warning-->
      <xsl:if test="descendant::xref[@ref-type='bibr']">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="descendant::xref[@ref-type='bibr']">
            <xsl:attribute name="id">xref-bibr-presence</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/article-structure/abstract-digest-impact-statement#xref-bibr-presence</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[xref-bibr-presence] Abstract contains a citation - '<xsl:text/>
               <xsl:value-of select="descendant::xref[@ref-type='bibr'][1]"/>
               <xsl:text/>' - which isn't usually allowed. Check that this is correct.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="($subj = 'Research Communication') and (not(matches(self::*/descendant::p[2],'^Editorial note')))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="($subj = 'Research Communication') and (not(matches(self::*/descendant::p[2],'^Editorial note')))">
            <xsl:attribute name="id">final-res-comm-test</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/article-structure/abstract-digest-impact-statement#final-res-comm-test</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[final-res-comm-test] '<xsl:text/>
               <xsl:value-of select="$subj"/>
               <xsl:text/>' has only one paragraph in its abstract or the second paragraph does not begin with 'Editorial note', which is incorrect.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="(count(p) &gt; 1) and ($subj = 'Research Article')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(count(p) &gt; 1) and ($subj = 'Research Article')">
            <xsl:attribute name="id">res-art-test</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/article-structure/abstract-digest-impact-statement#res-art-test</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[res-art-test] '<xsl:text/>
               <xsl:value-of select="$subj"/>
               <xsl:text/>' has more than one paragraph in its abstract, is this correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M500"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M500"/>
   <xsl:template match="@*|node()" priority="-2" mode="M500">
      <xsl:apply-templates select="*" mode="M500"/>
   </xsl:template>

   <!--PATTERN KRT-xref-tests-pattern-->


	  <!--RULE KRT-xref-tests-->
   <xsl:template match="table-wrap[@id='keyresource']//xref[@ref-type='bibr']" priority="1000" mode="M501">

		<!--REPORT warning-->
      <xsl:if test="(count(ancestor::*:td/preceding-sibling::td) = 0) or (count(ancestor::*:td/preceding-sibling::td) = 1) or (count(ancestor::*:td/preceding-sibling::td) = 3)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(count(ancestor::*:td/preceding-sibling::td) = 0) or (count(ancestor::*:td/preceding-sibling::td) = 1) or (count(ancestor::*:td/preceding-sibling::td) = 3)">
            <xsl:attribute name="id">xref-column-test</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/tables#xref-column-test</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[xref-column-test] '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>' citation is in a column in the Key Resources Table which usually does not include references. Is it correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M501"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M501"/>
   <xsl:template match="@*|node()" priority="-2" mode="M501">
      <xsl:apply-templates select="*" mode="M501"/>
   </xsl:template>

   <!--PATTERN KRT-check-pattern-->


	  <!--RULE KRT-check-->
   <xsl:template match="article" priority="1000" mode="M502">
      <xsl:variable name="subj" select="descendant::subj-group[@subj-group-type='display-channel']/subject[1]"/>
      <xsl:variable name="methods" select="('model', 'methods', 'materials|methods')"/>

		    <!--REPORT warning-->
      <xsl:if test="($subj = 'Research Article') and not(descendant::table-wrap[@id = 'keyresource']) and (descendant::sec[@sec-type=$methods]/*[2]/local-name()='table-wrap')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="($subj = 'Research Article') and not(descendant::table-wrap[@id = 'keyresource']) and (descendant::sec[@sec-type=$methods]/*[2]/local-name()='table-wrap')">
            <xsl:attribute name="id">KRT-presence</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[KRT-presence] '<xsl:text/>
               <xsl:value-of select="$subj"/>
               <xsl:text/>' does not have a key resources table, but the <xsl:text/>
               <xsl:value-of select="descendant::sec[@sec-type=$methods]/title"/>
               <xsl:text/> starts with a table. Should this table be a key resources table?</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M502"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M502"/>
   <xsl:template match="@*|node()" priority="-2" mode="M502">
      <xsl:apply-templates select="*" mode="M502"/>
   </xsl:template>

   <!--PATTERN KRT-td-checks-pattern-->


	  <!--RULE KRT-td-checks-->
   <xsl:template match="table-wrap[@id='keyresource']//td" priority="1000" mode="M503">

		<!--REPORT error-->
      <xsl:if test="matches(.,'10\.\d{4,9}/') and (count(ext-link[contains(@xlink:href,'doi.org')]) = 0)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'10\.\d{4,9}/') and (count(ext-link[contains(@xlink:href,'doi.org')]) = 0)">
            <xsl:attribute name="id">doi-link-test</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/tables#doi-link-test</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[doi-link-test] td element containing - '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>' - looks like it contains a doi, but it contains no link with 'doi.org', which is incorrect.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches(.,'[Pp][Mm][Ii][Dd][:]?\p{Zs}?[0-9][0-9][0-9][0-9]+') and (count(ext-link[contains(@xlink:href,'ncbi.nlm.nih.gov/pubmed/') or contains(@xlink:href,'pubmed.ncbi.nlm.nih.gov/')]) = 0)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'[Pp][Mm][Ii][Dd][:]?\p{Zs}?[0-9][0-9][0-9][0-9]+') and (count(ext-link[contains(@xlink:href,'ncbi.nlm.nih.gov/pubmed/') or contains(@xlink:href,'pubmed.ncbi.nlm.nih.gov/')]) = 0)">
            <xsl:attribute name="id">PMID-link-test</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/tables#PMID-link-test</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[PMID-link-test] td element containing - '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>' - looks like it contains a PMID, but it contains no link pointing to PubMed, which is incorrect.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches(.,'PMCID[:]?\p{Zs}?PMC[0-9][0-9][0-9]+') and (count(ext-link[contains(@xlink:href,'www.ncbi.nlm.nih.gov/pmc')]) = 0)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'PMCID[:]?\p{Zs}?PMC[0-9][0-9][0-9]+') and (count(ext-link[contains(@xlink:href,'www.ncbi.nlm.nih.gov/pmc')]) = 0)">
            <xsl:attribute name="id">PMCID-link-test</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/tables#PMCID-link-test</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[PMCID-link-test] td element containing - '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>' - looks like it contains a PMCID, but it contains no link pointing to PMC, which is incorrect.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(lower-case(.),'addgene\p{Zs}?#?\p{Zs}?\d') and not(ext-link[matches(@xlink:href,'identifiers\.org/RRID/.*')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(lower-case(.),'addgene\p{Zs}?#?\p{Zs}?\d') and not(ext-link[matches(@xlink:href,'identifiers\.org/RRID/.*')])">
            <xsl:attribute name="id">addgene-test</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[addgene-test] td element containing - '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>' - looks like it contains an addgene number. Should this be changed to an RRID with a https://identifiers.org/RRID/RRID:addgene_{number} link?</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M503"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M503"/>
   <xsl:template match="@*|node()" priority="-2" mode="M503">
      <xsl:apply-templates select="*" mode="M503"/>
   </xsl:template>

   <!--PATTERN colour-table-pattern-->


	  <!--RULE colour-table-->
   <xsl:template match="th|td" priority="1000" mode="M504">

		<!--REPORT warning-->
      <xsl:if test="starts-with(@style,'author-callout') or starts-with(@style,'background-color: ')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="starts-with(@style,'author-callout') or starts-with(@style,'background-color: ')">
            <xsl:attribute name="id">colour-check-table</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/tables#colour-check-table</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[colour-check-table] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element has colour background. Is this correct? It contains <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M504"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M504"/>
   <xsl:template match="@*|node()" priority="-2" mode="M504">
      <xsl:apply-templates select="*" mode="M504"/>
   </xsl:template>

   <!--PATTERN colour-table-2-pattern-->


	  <!--RULE colour-table-2-->
   <xsl:template match="th[@style]|td[@style]" priority="1000" mode="M505">
      <xsl:variable name="old-allowed-values" select="('author-callout-style-b1', 'author-callout-style-b2', 'author-callout-style-b3', 'author-callout-style-b4', 'author-callout-style-b5', 'author-callout-style-b6', 'author-callout-style-b7', 'author-callout-style-b8')"/>
      <xsl:variable name="allowed-values" select="('background-color: #90caf9;','background-color: #C5E1A5;','background-color: #FFB74D;','background-color: #FFF176;','background-color: #9E86C9;','background-color: #E57373;','background-color: #F48FB1;','background-color: #E6E6E6;')"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@style=($old-allowed-values,$allowed-values)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@style=($old-allowed-values,$allowed-values)">
               <xsl:attribute name="id">final-colour-check-table-2</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/tables#final-colour-check-table-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[final-colour-check-table-2] <xsl:text/>
                  <xsl:value-of select="name(.)"/>
                  <xsl:text/> element contanining '<xsl:text/>
                  <xsl:value-of select="."/>
                  <xsl:text/>' has an @style with an unallowed value - '<xsl:text/>
                  <xsl:value-of select="@style"/>
                  <xsl:text/>'. The only allowed values are 'author-callout-style-b1', 'author-callout-style-b2', 'author-callout-style-b3', 'author-callout-style-b4', 'author-callout-style-b5', 'author-callout-style-b6', 'author-callout-style-b7', 'author-callout-style-b8' for blue, green orange, yellow, purple, red, pink and grey respectively.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M505"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M505"/>
   <xsl:template match="@*|node()" priority="-2" mode="M505">
      <xsl:apply-templates select="*" mode="M505"/>
   </xsl:template>

   <!--PATTERN colour-named-content-pattern-->


	  <!--RULE colour-named-content-->
   <xsl:template match="article[e:get-version(.)='1']//named-content" priority="1000" mode="M506">
      <xsl:variable name="allowed-values" select="('city', 'department', 'state', 'sequence', 'author-callout-style-a1','author-callout-style-a2','author-callout-style-a3')"/>

		    <!--REPORT warning-->
      <xsl:if test="starts-with(@content-type,'author-callout')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="starts-with(@content-type,'author-callout')">
            <xsl:attribute name="id">colour-named-content-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[colour-named-content-check] <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> has colour formatting. Is this correct? Preceding text - <xsl:text/>
               <xsl:value-of select="substring(preceding-sibling::text()[1],string-length(preceding-sibling::text()[1])-25)"/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@content-type = $allowed-values"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@content-type = $allowed-values">
               <xsl:attribute name="id">final-named-content-type-check</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[final-named-content-type-check] <xsl:text/>
                  <xsl:value-of select="."/>
                  <xsl:text/> - text in <xsl:text/>
                  <xsl:value-of select="parent::*/name()"/>
                  <xsl:text/> element is captured in a &lt;named-content content-type="<xsl:text/>
                  <xsl:value-of select="@content-type"/>
                  <xsl:text/>"&gt;. The only allowed values for the @content-type are <xsl:text/>
                  <xsl:value-of select="string-join($allowed-values,', ')"/>
                  <xsl:text/>.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M506"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M506"/>
   <xsl:template match="@*|node()" priority="-2" mode="M506">
      <xsl:apply-templates select="*" mode="M506"/>
   </xsl:template>

   <!--PATTERN colour-styled-content-pattern-->


	  <!--RULE colour-styled-content-->
   <xsl:template match="article[e:get-version(.)='1']//styled-content" priority="1000" mode="M507">
      <xsl:variable name="parent" select="parent::*/local-name()"/>

		    <!--REPORT error-->
      <xsl:if test=".">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test=".">
            <xsl:attribute name="id">final-colour-styled-content-check</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[final-colour-styled-content-check] '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>' - <xsl:text/>
               <xsl:value-of select="$parent"/>
               <xsl:text/> element contains a styled content element. This is not allowed. Please ensure that &lt;named-content&gt; is used with the three permitted colours for text - red, blue and purple.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M507"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M507"/>
   <xsl:template match="@*|node()" priority="-2" mode="M507">
      <xsl:apply-templates select="*" mode="M507"/>
   </xsl:template>

   <!--PATTERN colour-styled-content-v2-pattern-->


	  <!--RULE colour-styled-content-v2-->
   <xsl:template match="article[e:get-version(.)!='1']//styled-content" priority="1000" mode="M508">
      <xsl:variable name="allowed-values" select="('color: #366BFB;','color: #9C27B0;','color: #D50000;')"/>

		    <!--REPORT warning-->
      <xsl:if test="@style = $allowed-values">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@style = $allowed-values">
            <xsl:attribute name="id">colour-styled-content-flag</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[colour-styled-content-flag] <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> has colour formatting. Is this correct? Preceding text - <xsl:text/>
               <xsl:value-of select="substring(preceding-sibling::text()[1],string-length(preceding-sibling::text()[1])-25)"/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@style = $allowed-values"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@style = $allowed-values">
               <xsl:attribute name="id">final-styled-content-style-check</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[final-styled-content-style-check] <xsl:text/>
                  <xsl:value-of select="."/>
                  <xsl:text/> - text in <xsl:text/>
                  <xsl:value-of select="parent::*/name()"/>
                  <xsl:text/> element is captured in a &lt;styled-content style="<xsl:text/>
                  <xsl:value-of select="@style"/>
                  <xsl:text/>"&gt;. The only allowed values for the @style are <xsl:text/>
                  <xsl:value-of select="string-join($allowed-values,', ')"/>
                  <xsl:text/>.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M508"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M508"/>
   <xsl:template match="@*|node()" priority="-2" mode="M508">
      <xsl:apply-templates select="*" mode="M508"/>
   </xsl:template>

   <!--PATTERN math-colour-tests-pattern-->


	  <!--RULE math-colour-tests-->
   <xsl:template match="mml:*[@mathcolor]" priority="1000" mode="M509">
      <xsl:variable name="allowed-values" select="('red','blue','purple')"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@mathcolor = $allowed-values"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@mathcolor = $allowed-values">
               <xsl:attribute name="id">final-mathcolor-test-1</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/maths#final-mathcolor-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[final-mathcolor-test-1] math (<xsl:text/>
                  <xsl:value-of select="name()"/>
                  <xsl:text/> element) containing '<xsl:text/>
                  <xsl:value-of select="."/>
                  <xsl:text/>' has a color style which is not red, blue or purple - '<xsl:text/>
                  <xsl:value-of select="@mathcolor"/>
                  <xsl:text/>' - which is not allowed. Only 'red', 'blue' and 'purple' are allowed.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT warning-->
      <xsl:if test="@mathcolor = $allowed-values">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@mathcolor = $allowed-values">
            <xsl:attribute name="id">mathcolor-test-2</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/maths#mathcolor-test-2</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[mathcolor-test-2] math (<xsl:text/>
               <xsl:value-of select="name()"/>
               <xsl:text/> element) containing '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>' has <xsl:text/>
               <xsl:value-of select="@mathcolor"/>
               <xsl:text/> colour formatting. Is this OK?</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M509"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M509"/>
   <xsl:template match="@*|node()" priority="-2" mode="M509">
      <xsl:apply-templates select="*" mode="M509"/>
   </xsl:template>

   <!--PATTERN mathbackground-tests-pattern-->


	  <!--RULE mathbackground-tests-->
   <xsl:template match="mml:*[@mathbackground]" priority="1000" mode="M510">

		<!--REPORT error-->
      <xsl:if test="not(ancestor::table-wrap)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="not(ancestor::table-wrap)">
            <xsl:attribute name="id">final-mathbackground-test-1</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/maths#final-mathbackground-test-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[final-mathbackground-test-1] math (<xsl:text/>
               <xsl:value-of select="name()"/>
               <xsl:text/> element) containing '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>' has '<xsl:text/>
               <xsl:value-of select="@mathbackground"/>
               <xsl:text/>' colour background formatting. This likely means that there's a mistake in the content which will not render correctly online. If it's not a mistake, and the background colour is deliberate, then this will need to removed.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="ancestor::table-wrap">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="ancestor::table-wrap">
            <xsl:attribute name="id">final-mathbackground-test-2</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/maths#final-mathbackground-test-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[final-mathbackground-test-2] math (<xsl:text/>
               <xsl:value-of select="name()"/>
               <xsl:text/> element) containing '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>' has '<xsl:text/>
               <xsl:value-of select="@mathbackground"/>
               <xsl:text/>' colour background formatting. This likely means that there's a mistake in the content which will not render correctly online. If it's not a mistake, and the background colour is deliberate, then either the background colour will need to added to the table cell (rather than the maths), or it needs to be removed.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M510"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M510"/>
   <xsl:template match="@*|node()" priority="-2" mode="M510">
      <xsl:apply-templates select="*" mode="M510"/>
   </xsl:template>

   <!--PATTERN mtext-tests-pattern-->


	  <!--RULE mtext-tests-->
   <xsl:template match="mml:mtext" priority="1000" mode="M511">

		<!--REPORT warning-->
      <xsl:if test="matches(.,'^\p{Zs}*\\')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'^\p{Zs}*\\')">
            <xsl:attribute name="id">mtext-test-1</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/maths#mtext-test-1</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[mtext-test-1] math (<xsl:text/>
               <xsl:value-of select="name()"/>
               <xsl:text/> element) contains '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>' which looks suspiciously like LaTeX markup. Is it correct? Or is there missing content or content which has been processed incompletely?</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M511"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M511"/>
   <xsl:template match="@*|node()" priority="-2" mode="M511">
      <xsl:apply-templates select="*" mode="M511"/>
   </xsl:template>

   <!--PATTERN inline-formula-length-tests-pattern-->


	  <!--RULE inline-formula-length-tests-->
   <xsl:template match="inline-formula[not(descendant::mml:mtable) and following-sibling::text()]" priority="1000" mode="M512">

		<!--REPORT warning-->
      <xsl:if test="string-length(.) gt 89">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="string-length(.) gt 89">
            <xsl:attribute name="id">inline-formula-length-test-1</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/maths#inline-formula-length-test-1</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[inline-formula-length-test-1] Inline formula containing '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>' is particularly long. Consider either splitting this up into multiple equations or capturing this as a display equation, as the display on Continuum will likely be strange.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M512"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M512"/>
   <xsl:template match="@*|node()" priority="-2" mode="M512">
      <xsl:apply-templates select="*" mode="M512"/>
   </xsl:template>

   <!--PATTERN p-punctuation-pattern-->


	  <!--RULE p-punctuation-->
   <xsl:template match="article[not(@article-type=($notice-article-types,'article-commentary'))]/body//p[not(parent::list-item) and not(descendant::*[last()]/ancestor::disp-formula) and not(table-wrap)]|       article[@article-type='article-commentary']/body//p[not(parent::boxed-text)]" priority="1000" mode="M513">
      <xsl:variable name="para" select="replace(.,' ',' ')"/>

		    <!--ASSERT warning-->
      <xsl:choose>
         <xsl:when test="matches($para,'\p{P}\p{Zs}*?$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($para,'\p{P}\p{Zs}*?$')">
               <xsl:attribute name="id">p-punctuation-test</xsl:attribute>
               <xsl:attribute name="role">warning</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[p-punctuation-test] paragraph doesn't end with punctuation - Is this correct?</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT warning-->
      <xsl:choose>
         <xsl:when test="matches($para,'\.\)?\p{Zs}*?$|:\p{Zs}*?$|\?\p{Zs}*?$|!\p{Zs}*?$|\.”\p{Zs}*?|\.&quot;\p{Zs}*?')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($para,'\.\)?\p{Zs}*?$|:\p{Zs}*?$|\?\p{Zs}*?$|!\p{Zs}*?$|\.”\p{Zs}*?|\.&quot;\p{Zs}*?')">
               <xsl:attribute name="id">p-bracket-test</xsl:attribute>
               <xsl:attribute name="role">warning</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[p-bracket-test] paragraph doesn't end with a full stop, colon, question or exclamation mark - Is this correct?</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,'\p{Zs}$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'\p{Zs}$')">
            <xsl:attribute name="id">p-space-test</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[p-space-test] paragraph ends with space(s). Is this correct? '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>'</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M513"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M513"/>
   <xsl:template match="@*|node()" priority="-2" mode="M513">
      <xsl:apply-templates select="*" mode="M513"/>
   </xsl:template>

   <!--PATTERN italic-house-style-pattern-->


	  <!--RULE italic-house-style-->
   <xsl:template match="italic[not(ancestor::ref) and not(ancestor::sub-article)]" priority="1000" mode="M514">

		<!--REPORT warning-->
      <xsl:if test="matches(.,'et al[\.]?')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'et al[\.]?')">
            <xsl:attribute name="id">final-et-al-italic-test</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[final-et-al-italic-test] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'et al.' - this should not be in italics (eLife house style).</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M514"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M514"/>
   <xsl:template match="@*|node()" priority="-2" mode="M514">
      <xsl:apply-templates select="*" mode="M514"/>
   </xsl:template>

   <!--PATTERN final-latin-conformance-pattern-->


	  <!--RULE final-latin-conformance-->
   <xsl:template match="article" priority="1000" mode="M515">
      <xsl:variable name="latin-terms" select="e:get-latin-terms(.,$latin-regex)"/>
      <xsl:variable name="roman-count" select="sum(for $x in $latin-terms//*:list[@list-type='roman']//*:match return number($x/@count))"/>
      <xsl:variable name="italic-count" select="sum(for $x in $latin-terms//*:list[@list-type='italic']//*:match return number($x/@count))"/>

		    <!--REPORT warning-->
      <xsl:if test="($italic-count != 0) and ($roman-count gt $italic-count)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="($italic-count != 0) and ($roman-count gt $italic-count)">
            <xsl:attribute name="id">latin-italic-info</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[latin-italic-info] Latin terms are not consistenly either roman or italic. There are <xsl:text/>
               <xsl:value-of select="$roman-count"/>
               <xsl:text/> roman terms which is more common, and <xsl:text/>
               <xsl:value-of select="$italic-count"/>
               <xsl:text/> italic term(s). The following terms should be unitalicised: <xsl:text/>
               <xsl:value-of select="e:print-latin-terms($latin-terms//*:list[@list-type='italic'])"/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="($roman-count != 0) and ($italic-count gt $roman-count)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="($roman-count != 0) and ($italic-count gt $roman-count)">
            <xsl:attribute name="id">latin-roman-info</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[latin-roman-info] Latin terms are not consistenly either roman or italic. There are <xsl:text/>
               <xsl:value-of select="$italic-count"/>
               <xsl:text/> italic terms which is more common, and <xsl:text/>
               <xsl:value-of select="$roman-count"/>
               <xsl:text/> roman term(s). The following terms should be italicised: <xsl:text/>
               <xsl:value-of select="e:print-latin-terms($latin-terms//*:list[@list-type='roman'])"/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="($roman-count != 0) and ($italic-count = $roman-count)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="($roman-count != 0) and ($italic-count = $roman-count)">
            <xsl:attribute name="id">latin-conformance-info</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[latin-conformance-info] Latin terms are not consistenly either roman or italic. There are an equal number of italic (<xsl:text/>
               <xsl:value-of select="$italic-count"/>
               <xsl:text/>) and roman (<xsl:text/>
               <xsl:value-of select="$roman-count"/>
               <xsl:text/>) terms. The following terms are italicised: <xsl:text/>
               <xsl:value-of select="e:print-latin-terms($latin-terms//*:list[@list-type='italic'])"/>
               <xsl:text/>. The following terms are unitalicised: <xsl:text/>
               <xsl:value-of select="e:print-latin-terms($latin-terms//*:list[@list-type='roman'])"/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M515"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M515"/>
   <xsl:template match="@*|node()" priority="-2" mode="M515">
      <xsl:apply-templates select="*" mode="M515"/>
   </xsl:template>

   <!--PATTERN pubmed-link-pattern-->


	  <!--RULE pubmed-link-->
   <xsl:template match="p//ext-link[not(ancestor::table-wrap) and not(ancestor::sub-article)]" priority="1000" mode="M516">

		<!--REPORT warning-->
      <xsl:if test="matches(@xlink:href,'^http[s]?://www.ncbi.nlm.nih.gov/pubmed/[\d]*')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(@xlink:href,'^http[s]?://www.ncbi.nlm.nih.gov/pubmed/[\d]*')">
            <xsl:attribute name="id">pubmed-presence</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[pubmed-presence] <xsl:text/>
               <xsl:value-of select="parent::*/local-name()"/>
               <xsl:text/> element contains what looks like a link to a PubMed article - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> - should this be added a reference instead?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(@xlink:href,'^http[s]?://www.ncbi.nlm.nih.gov/pmc/articles/PMC[\d]*')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(@xlink:href,'^http[s]?://www.ncbi.nlm.nih.gov/pmc/articles/PMC[\d]*')">
            <xsl:attribute name="id">pmc-presence</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[pmc-presence] <xsl:text/>
               <xsl:value-of select="parent::*/local-name()"/>
               <xsl:text/> element contains what looks like a link to a PMC article - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> - should this be added a reference instead?</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M516"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M516"/>
   <xsl:template match="@*|node()" priority="-2" mode="M516">
      <xsl:apply-templates select="*" mode="M516"/>
   </xsl:template>

   <!--PATTERN pubmed-link-2-pattern-->


	  <!--RULE pubmed-link-2-->
   <xsl:template match="table-wrap//ext-link[(contains(@xlink:href,'ncbi.nlm.nih.gov/pubmed') or contains(@xlink:href,'pubmed.ncbi.nlm.nih.gov')) and not(ancestor::sub-article)]" priority="1000" mode="M517">
      <xsl:variable name="pre-text" select="preceding-sibling::text()[1]"/>
      <xsl:variable name="lc" select="lower-case($pre-text)"/>

		    <!--REPORT warning-->
      <xsl:if test="ends-with($lc,'pmid: ') or ends-with($lc,'pmid ')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="ends-with($lc,'pmid: ') or ends-with($lc,'pmid ')">
            <xsl:attribute name="id">final-pmid-spacing-table</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/tables#final-pmid-spacing-table</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[final-pmid-spacing-table] PMID link should be preceding by 'PMID:' with no space but instead it is preceded by '<xsl:text/>
               <xsl:value-of select="concat(substring($pre-text,string-length($pre-text)-15),.)"/>
               <xsl:text/>'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M517"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M517"/>
   <xsl:template match="@*|node()" priority="-2" mode="M517">
      <xsl:apply-templates select="*" mode="M517"/>
   </xsl:template>

   <!--PATTERN rrid-link-pattern-->


	  <!--RULE rrid-link-->
   <xsl:template match="ext-link[contains(@xlink:href,'scicrunch.org/resolver') and not(ancestor::sub-article)]" priority="1000" mode="M518">
      <xsl:variable name="pre-text" select="preceding-sibling::text()[1]"/>
      <xsl:variable name="lc" select="lower-case($pre-text)"/>

		    <!--REPORT warning-->
      <xsl:if test="ends-with($lc,'rrid: ') or ends-with($lc,'rrid ')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="ends-with($lc,'rrid: ') or ends-with($lc,'rrid ')">
            <xsl:attribute name="id">final-rrid-spacing</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/rrids#final-rrid-spacing</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[final-rrid-spacing] RRID link should be preceded by 'RRID:' with no space but instead it is preceded by '<xsl:text/>
               <xsl:value-of select="concat(substring($pre-text,string-length($pre-text)-15),.)"/>
               <xsl:text/>'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M518"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M518"/>
   <xsl:template match="@*|node()" priority="-2" mode="M518">
      <xsl:apply-templates select="*" mode="M518"/>
   </xsl:template>

   <!--PATTERN ref-link-mandate-pattern-->


	  <!--RULE ref-link-mandate-->
   <xsl:template match="ref-list/ref" priority="1000" mode="M519">
      <xsl:variable name="id" select="@id"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="ancestor::article//xref[@rid = $id]"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="ancestor::article//xref[@rid = $id]">
               <xsl:attribute name="id">final-ref-link-presence</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#final-ref-link-presence</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[final-ref-link-presence] '<xsl:text/>
                  <xsl:value-of select="$id"/>
                  <xsl:text/>' has no linked citations. Either the reference should be removed or a citation linking to it needs to be added.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M519"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M519"/>
   <xsl:template match="@*|node()" priority="-2" mode="M519">
      <xsl:apply-templates select="*" mode="M519"/>
   </xsl:template>

   <!--PATTERN fig-permissions-check-pattern-->


	  <!--RULE fig-permissions-check-->
   <xsl:template match="fig[not(descendant::permissions)]|media[@mimetype='video' and not(descendant::permissions)]|table-wrap[not(descendant::permissions)]|supplementary-material[not(descendant::permissions)]" priority="1000" mode="M520">
      <xsl:variable name="label" select="replace(label[1],'\.','')"/>

		    <!--REPORT warning-->
      <xsl:if test="matches(caption[1],'[Rr]eproduced from')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(caption[1],'[Rr]eproduced from')">
            <xsl:attribute name="id">reproduce-test-1</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/licensing-and-copyright#reproduce-test-1</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[reproduce-test-1] The caption for <xsl:text/>
               <xsl:value-of select="$label"/>
               <xsl:text/> contains the text 'reproduced from', but has no permissions. Is this correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(caption[1],'[Rr]eproduced [Ww]ith [Pp]ermission')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(caption[1],'[Rr]eproduced [Ww]ith [Pp]ermission')">
            <xsl:attribute name="id">reproduce-test-2</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/licensing-and-copyright#reproduce-test-2</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[reproduce-test-2] The caption for <xsl:text/>
               <xsl:value-of select="$label"/>
               <xsl:text/> contains the text 'reproduced with permission', but has no permissions. Is this correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(caption[1],'[Aa]dapted from|[Aa]dapted with')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(caption[1],'[Aa]dapted from|[Aa]dapted with')">
            <xsl:attribute name="id">reproduce-test-3</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/licensing-and-copyright#reproduce-test-3</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[reproduce-test-3] The caption for <xsl:text/>
               <xsl:value-of select="$label"/>
               <xsl:text/> contains the text 'adapted from ...', but has no permissions. Is this correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(caption[1],'[Rr]eprinted from')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(caption[1],'[Rr]eprinted from')">
            <xsl:attribute name="id">reproduce-test-4</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/licensing-and-copyright#reproduce-test-4</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[reproduce-test-4] The caption for <xsl:text/>
               <xsl:value-of select="$label"/>
               <xsl:text/> contains the text 'reprinted from', but has no permissions. Is this correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(caption[1],'[Rr]eprinted [Ww]ith [Pp]ermission')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(caption[1],'[Rr]eprinted [Ww]ith [Pp]ermission')">
            <xsl:attribute name="id">reproduce-test-5</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/licensing-and-copyright#reproduce-test-5</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[reproduce-test-5] The caption for <xsl:text/>
               <xsl:value-of select="$label"/>
               <xsl:text/> contains the text 'reprinted with permission', but has no permissions. Is this correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(caption[1],'[Mm]odified from')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(caption[1],'[Mm]odified from')">
            <xsl:attribute name="id">reproduce-test-6</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/licensing-and-copyright#reproduce-test-6</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[reproduce-test-6] The caption for <xsl:text/>
               <xsl:value-of select="$label"/>
               <xsl:text/> contains the text 'modified from', but has no permissions. Is this correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(caption[1],'[Mm]odified [Ww]ith')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(caption[1],'[Mm]odified [Ww]ith')">
            <xsl:attribute name="id">reproduce-test-7</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/licensing-and-copyright#reproduce-test-7</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[reproduce-test-7] The caption for <xsl:text/>
               <xsl:value-of select="$label"/>
               <xsl:text/> contains the text 'modified with', but has no permissions. Is this correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(caption[1],'[Uu]sed [Ww]ith [Pp]ermission')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(caption[1],'[Uu]sed [Ww]ith [Pp]ermission')">
            <xsl:attribute name="id">reproduce-test-8</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/licensing-and-copyright#reproduce-test-8</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[reproduce-test-8] The caption for <xsl:text/>
               <xsl:value-of select="$label"/>
               <xsl:text/> contains the text 'used with permission', but has no permissions. Is this correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M520"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M520"/>
   <xsl:template match="@*|node()" priority="-2" mode="M520">
      <xsl:apply-templates select="*" mode="M520"/>
   </xsl:template>

   <!--PATTERN xref-formatting-pattern-->


	  <!--RULE xref-formatting-->
   <xsl:template match="xref[not(@ref-type='bibr')]" priority="1000" mode="M521">
      <xsl:variable name="parent" select="parent::*/local-name()"/>
      <xsl:variable name="child" select="child::*/local-name()"/>
      <xsl:variable name="formatting-elems" select="('bold','fixed-case','italic','monospace','overline','overline-start','overline-end','roman','sans-serif','sc','strike','underline','underline-start','underline-end','ruby')"/>

		    <!--REPORT error-->
      <xsl:if test="$parent = $formatting-elems">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="$parent = $formatting-elems">
            <xsl:attribute name="id">xref-parent-test</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/asset-citations#xref-parent-test</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[xref-parent-test] xref - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> - has a formatting parent element - <xsl:text/>
               <xsl:value-of select="$parent"/>
               <xsl:text/> - which is not correct.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="$child = $formatting-elems">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="$child = $formatting-elems">
            <xsl:attribute name="id">xref-child-test</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/asset-citations#xref-child-test</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[xref-child-test] xref - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> - has a formatting child element - <xsl:text/>
               <xsl:value-of select="$child"/>
               <xsl:text/> - which is likely not correct.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M521"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M521"/>
   <xsl:template match="@*|node()" priority="-2" mode="M521">
      <xsl:apply-templates select="*" mode="M521"/>
   </xsl:template>

   <!--PATTERN ref-xref-formatting-pattern-->


	  <!--RULE ref-xref-formatting-->
   <xsl:template match="xref[@ref-type='bibr']" priority="1000" mode="M522">
      <xsl:variable name="parent" select="parent::*/local-name()"/>
      <xsl:variable name="child" select="child::*/local-name()"/>
      <xsl:variable name="formatting-elems" select="('bold','fixed-case','monospace','overline','overline-start','overline-end','roman','sans-serif','sc','strike','underline','underline-start','underline-end','ruby','sub','sup')"/>

		    <!--REPORT error-->
      <xsl:if test="$parent = ($formatting-elems,'italic')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="$parent = ($formatting-elems,'italic')">
            <xsl:attribute name="id">ref-xref-parent-test</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[ref-xref-parent-test] xref - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> - has a formatting parent element - <xsl:text/>
               <xsl:value-of select="$parent"/>
               <xsl:text/> - which is not correct.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="$child = $formatting-elems">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="$child = $formatting-elems">
            <xsl:attribute name="id">ref-xref-child-test</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[ref-xref-child-test] xref - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> - has a formatting child element - <xsl:text/>
               <xsl:value-of select="$child"/>
               <xsl:text/> - which is not correct.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="italic">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="italic">
            <xsl:attribute name="id">ref-xref-italic-child-test</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[ref-xref-italic-child-test] xref - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> - contains italic formatting. Is this correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M522"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M522"/>
   <xsl:template match="@*|node()" priority="-2" mode="M522">
      <xsl:apply-templates select="*" mode="M522"/>
   </xsl:template>

   <!--PATTERN code-fork-pattern-->


	  <!--RULE code-fork-->
   <xsl:template match="article" priority="1000" mode="M523">
      <xsl:variable name="test" select="e:code-check(lower-case(.))"/>

		    <!--REPORT warning-->
      <xsl:if test="$test//*:match">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="$test//*:match">
            <xsl:attribute name="id">code-fork-info</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/toolkit/archiving-code#code-fork-info</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[code-fork-info] Article possibly contains code that needs forking. Search - <xsl:text/>
               <xsl:value-of select="string-join(for $x in $test//*:match return $x,', ')"/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M523"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M523"/>
   <xsl:template match="@*|node()" priority="-2" mode="M523">
      <xsl:apply-templates select="*" mode="M523"/>
   </xsl:template>

   <!--PATTERN auth-kwd-style-pattern-->


	  <!--RULE auth-kwd-style-->
   <xsl:template match="kwd-group[@kwd-group-type='author-keywords']/kwd" priority="1000" mode="M524">
      <xsl:variable name="article-text" select="string-join(for $x in ancestor::article/*[local-name() = 'body' or local-name() = 'back']//*         return         if ($x/ancestor::sec[@sec-type='data-availability']) then ()         else if ($x/ancestor::sec[@sec-type='additional-information']) then ()         else if ($x/ancestor::ref-list) then ()         else if ($x/local-name() = 'xref') then ()         else $x/text(),'')"/>
      <xsl:variable name="lower" select="lower-case(.)"/>
      <xsl:variable name="t" select="replace($article-text,concat('\. ',.),'')"/>

		    <!--REPORT warning-->
      <xsl:if test="not(matches(.,'RNA|[Cc]ryoEM|[34]D')) and (. != $lower) and not(contains($t,.))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="not(matches(.,'RNA|[Cc]ryoEM|[34]D')) and (. != $lower) and not(contains($t,.))">
            <xsl:attribute name="id">auth-kwd-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[auth-kwd-check] Keyword - '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>' - does not appear in the article text with this capitalisation. Should it be <xsl:text/>
               <xsl:value-of select="$lower"/>
               <xsl:text/> instead?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,'&amp;#x\d')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'&amp;#x\d')">
            <xsl:attribute name="id">auth-kwd-check-2</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[auth-kwd-check-2] Keyword contains what looks like a broken unicode - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="contains(.,'&lt;') or contains(.,'&gt;')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'&lt;') or contains(.,'&gt;')">
            <xsl:attribute name="id">auth-kwd-check-3</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[auth-kwd-check-3] Keyword contains markup captured as text - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>. Please remove it and ensure that it is marked up properly (if necessary).</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,'[\(\)\[\]]') or contains(.,'{') or contains(.,'}')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'[\(\)\[\]]') or contains(.,'{') or contains(.,'}')">
            <xsl:attribute name="id">auth-kwd-check-4</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[auth-kwd-check-4] Keyword contains brackets - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>. These should either simply be removed, or added as two keywords (with the brackets still removed).</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains($lower,' and ')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains($lower,' and ')">
            <xsl:attribute name="id">auth-kwd-check-5</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[auth-kwd-check-5] Keyword contains 'and' - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>. These should be split out into two keywords.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="not(ancestor::article-meta/article-categories/subj-group[@subj-group-type='display-channel']/subject[1] = $features-subj) and count(tokenize(.,'\p{Zs}')) gt 4">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="not(ancestor::article-meta/article-categories/subj-group[@subj-group-type='display-channel']/subject[1] = $features-subj) and count(tokenize(.,'\p{Zs}')) gt 4">
            <xsl:attribute name="id">auth-kwd-check-6</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[auth-kwd-check-6] Keyword contains more than 4 words - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>. Should these be split out into separate keywords?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="not(italic) and matches($lower,$org-regex)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="not(italic) and matches($lower,$org-regex)">
            <xsl:attribute name="id">auth-kwd-check-7</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[auth-kwd-check-7] Keyword contains an organism name which is not in italics - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>. Please italicise the organism name in the keyword.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M524"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M524"/>
   <xsl:template match="@*|node()" priority="-2" mode="M524">
      <xsl:apply-templates select="*" mode="M524"/>
   </xsl:template>

   <!--PATTERN general-kwd-pattern-->


	  <!--RULE general-kwd-->
   <xsl:template match="kwd" priority="1000" mode="M525">

		<!--REPORT warning-->
      <xsl:if test="contains(.,', ')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,', ')">
            <xsl:attribute name="id">auth-kwd-check-8</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[auth-kwd-check-8] Keyword contains a comma - '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>'. Should this be split into multiple keywords?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,'[”“‘’&quot;]')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'[”“‘’&quot;]')">
            <xsl:attribute name="id">auth-kwd-check-9</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[auth-kwd-check-9] Keyword contains a quotation mark - '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>'. Should this be removed and/or should the keyword be split into multiple keywords?</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M525"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M525"/>
   <xsl:template match="@*|node()" priority="-2" mode="M525">
      <xsl:apply-templates select="*" mode="M525"/>
   </xsl:template>

   <!--PATTERN ref-given-names-pattern-->


	  <!--RULE ref-given-names-->
   <xsl:template match="ref-list//element-citation/person-group[@person-group-type='author']//given-names" priority="1000" mode="M526">

		<!--REPORT warning-->
      <xsl:if test="string-length(.) gt 4">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="string-length(.) gt 4">
            <xsl:attribute name="id">ref-given-names-test-1</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#ref-given-names-test-1</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[ref-given-names-test-1] Given names should always be initialised. Ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref[1]/@id"/>
               <xsl:text/>' contains a given names with a string longer than 4 characters - '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>' in <xsl:text/>
               <xsl:value-of select="concat(preceding-sibling::surname[1],' ',.)"/>
               <xsl:text/>. Is this a surname captured as given names? Or a fully spelt out given names?</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M526"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M526"/>
   <xsl:template match="@*|node()" priority="-2" mode="M526">
      <xsl:apply-templates select="*" mode="M526"/>
   </xsl:template>

   <!--PATTERN data-ref-given-names-pattern-->


	  <!--RULE data-ref-given-names-->
   <xsl:template match="sec[@sec-type='data-availability']//element-citation/person-group[@person-group-type='author']//given-names" priority="1000" mode="M527">

		<!--REPORT warning-->
      <xsl:if test="string-length(.) gt 4">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="string-length(.) gt 4">
            <xsl:attribute name="id">data-ref-given-names-test-1</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/data-availability#data-ref-given-names-test-1</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[data-ref-given-names-test-1] Given names should always be initialised. Ref contains a given names with a string longer than 4 characters - '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>' in <xsl:text/>
               <xsl:value-of select="concat(preceding-sibling::surname[1],' ',.)"/>
               <xsl:text/>. Is this a surname captured as given names? Or a fully spelt out given names?</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M527"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M527"/>
   <xsl:template match="@*|node()" priority="-2" mode="M527">
      <xsl:apply-templates select="*" mode="M527"/>
   </xsl:template>

   <!--PATTERN ar-fig-title-tests-pattern-->


	  <!--RULE ar-fig-title-tests-->
   <xsl:template match="fig[ancestor::sub-article]/caption/title" priority="1000" mode="M528">

		<!--REPORT warning-->
      <xsl:if test="lower-case(normalize-space(.))=('title','title.')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="lower-case(normalize-space(.))=('title','title.')">
            <xsl:attribute name="id">ar-fig-title-test-1</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/allowed-assets/figures#ar-fig-title-test-1</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[ar-fig-title-test-1] Please query author for a <xsl:text/>
               <xsl:value-of select="ancestor::fig/label"/>
               <xsl:text/> title, and/or remove placeholder title text - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M528"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M528"/>
   <xsl:template match="@*|node()" priority="-2" mode="M528">
      <xsl:apply-templates select="*" mode="M528"/>
   </xsl:template>

   <!--PATTERN section-title-tests-pattern-->


	  <!--RULE section-title-tests-->
   <xsl:template match="sec/p/*[1][not(preceding-sibling::text()) or (normalize-space(preceding-sibling::text())='')]" priority="1000" mode="M529">
      <xsl:variable name="following-text" select="following-sibling::text()[1]"/>

		    <!--REPORT warning-->
      <xsl:if test="(name()=('italic','bold','underline')) and (ends-with(.,'.') or matches($following-text,'^\p{Zs}?\.|^[\p{P}]?\p{Zs}?[A-Z]|^[\p{P}]?\p{Zs}?\d')) and not((name()='italic') and matches(lower-case(.),$sec-title-regex))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(name()=('italic','bold','underline')) and (ends-with(.,'.') or matches($following-text,'^\p{Zs}?\.|^[\p{P}]?\p{Zs}?[A-Z]|^[\p{P}]?\p{Zs}?\d')) and not((name()='italic') and matches(lower-case(.),$sec-title-regex))">
            <xsl:attribute name="id">section-title-test-1</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/article-structure#section-title-test-1</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[section-title-test-1] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> text begins a paragraph - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> - Should it be marked up as a section title (Heading level <xsl:text/>
               <xsl:value-of select="count(ancestor::sec) + 1"/>
               <xsl:text/>)?</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M529"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M529"/>
   <xsl:template match="@*|node()" priority="-2" mode="M529">
      <xsl:apply-templates select="*" mode="M529"/>
   </xsl:template>

   <!--PATTERN strike-tests-pattern-->


	  <!--RULE strike-tests-->
   <xsl:template match="strike" priority="1000" mode="M530">

		<!--REPORT warning-->
      <xsl:if test=".">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test=".">
            <xsl:attribute name="id">final-strike-flag</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[final-strike-flag] <xsl:text/>
               <xsl:value-of select="parent::*/local-name()"/>
               <xsl:text/> element contains text with strikethrough formatting - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> - Is this correct? Or have the authors added strikethrough formatting as an indication that the content should be removed?</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M530"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M530"/>
   <xsl:template match="@*|node()" priority="-2" mode="M530">
      <xsl:apply-templates select="*" mode="M530"/>
   </xsl:template>

   <!--PATTERN title-bold-tests-pattern-->


	  <!--RULE title-bold-tests-->
   <xsl:template match="title[(count(*)=1) and (child::bold or child::italic)]" priority="1000" mode="M531">
      <xsl:variable name="free-text" select="replace(       normalize-space(string-join(for $x in self::*/text() return $x,''))       ,' ','')"/>

		    <!--REPORT warning-->
      <xsl:if test="$free-text=''">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="$free-text=''">
            <xsl:attribute name="id">title-all-bold-test-1</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[title-all-bold-test-1] Title is entirely in <xsl:text/>
               <xsl:value-of select="child::*[1]/local-name()"/>
               <xsl:text/> - '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>'. Is this correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M531"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M531"/>
   <xsl:template match="@*|node()" priority="-2" mode="M531">
      <xsl:apply-templates select="*" mode="M531"/>
   </xsl:template>

   <!--PATTERN italic-org-tests-pattern-->


	  <!--RULE italic-org-tests-->
   <xsl:template match="italic[matches(lower-case(.),$org-regex)]" priority="1000" mode="M532">
      <xsl:variable name="pre-text" select="preceding-sibling::text()[1]"/>
      <xsl:variable name="post-text" select="following-sibling::text()[1]"/>
      <xsl:variable name="pre-token" select="substring($pre-text, string-length($pre-text), 1)"/>
      <xsl:variable name="post-token" select="substring($post-text, 1, 1)"/>

		    <!--ASSERT warning-->
      <xsl:choose>
         <xsl:when test="(substring(.,1,1) = (' ',' ')) or ($pre-token='') or matches($pre-token,'[\p{Zs}\p{P}]')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(substring(.,1,1) = (' ',' ')) or ($pre-token='') or matches($pre-token,'[\p{Zs}\p{P}]')">
               <xsl:attribute name="id">italic-org-test-1</xsl:attribute>
               <xsl:attribute name="role">warning</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[italic-org-test-1] There is no space between the organism name '<xsl:text/>
                  <xsl:value-of select="."/>
                  <xsl:text/>' and its preceeding text - '<xsl:text/>
                  <xsl:value-of select="concat(substring($pre-text,string-length($pre-text)-10),.)"/>
                  <xsl:text/>'. Is this correct or is there a missing space?</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT warning-->
      <xsl:choose>
         <xsl:when test="(substring(., string-length(.), 1) = (' ',' ')) or ($post-token='') or matches($post-token,'[\p{Zs}\p{P}]')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="(substring(., string-length(.), 1) = (' ',' ')) or ($post-token='') or matches($post-token,'[\p{Zs}\p{P}]')">
               <xsl:attribute name="id">italic-org-test-2</xsl:attribute>
               <xsl:attribute name="role">warning</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[italic-org-test-2] There is no space between the organism name '<xsl:text/>
                  <xsl:value-of select="."/>
                  <xsl:text/>' and its following text - '<xsl:text/>
                  <xsl:value-of select="concat(.,substring($post-text,1,10))"/>
                  <xsl:text/>'. Is this correct or is there a missing space?</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M532"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M532"/>
   <xsl:template match="@*|node()" priority="-2" mode="M532">
      <xsl:apply-templates select="*" mode="M532"/>
   </xsl:template>

   <!--PATTERN sub-sup-tests-pattern-->


	  <!--RULE sub-sup-tests-->
   <xsl:template match="sub|sup" priority="1000" mode="M533">

		<!--REPORT error-->
      <xsl:if test="parent::*/name() = name()">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="parent::*/name() = name()">
            <xsl:attribute name="id">double-sup-sub</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[double-sup-sub] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> is captured as a child of <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/>, which is not permitted.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M533"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M533"/>
   <xsl:template match="@*|node()" priority="-2" mode="M533">
      <xsl:apply-templates select="*" mode="M533"/>
   </xsl:template>

   <!--PATTERN break-tests-pattern-->


	  <!--RULE break-tests-->
   <xsl:template match="break" priority="1000" mode="M534">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="ancestor::td or ancestor::th"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="ancestor::td or ancestor::th">
               <xsl:attribute name="id">break-placement</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[break-placement] The break element is only permitted as a child (or descendant) of a table cell. This one is placed elsewhere (<xsl:text/>
                  <xsl:value-of select="concat(string-join(for $x in ancestor::* return $x/name(),'/'),'/',name())"/>
                  <xsl:text/>).</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M534"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M534"/>
   <xsl:template match="@*|node()" priority="-2" mode="M534">
      <xsl:apply-templates select="*" mode="M534"/>
   </xsl:template>

   <!--PATTERN flag-github-pattern-->


	  <!--RULE flag-github-->
   <xsl:template match="ext-link[not(ancestor::sub-article or ancestor::element-citation or ancestor::sec[@sec-type='data-availability']) and contains(lower-case(@xlink:href),'github.com') and not(contains(@xlink:href,'archive.softwareheritage.org'))]" priority="1000" mode="M535">
      <xsl:variable name="l" select="lower-case(@xlink:href)"/>
      <xsl:variable name="substring" select="substring-after($l,'github.com/')"/>
      <xsl:variable name="owner-repo" select="string-join(for $x in tokenize($substring,'/')[position()=(1,2)] return if (contains($x,'#')) then substring-before($x,'#') else $x,'/')"/>

		    <!--ASSERT warning-->
      <xsl:choose>
         <xsl:when test="preceding::ext-link[contains(lower-case(@xlink:href),$owner-repo)] or ancestor::article//element-citation[@publication-type=('software','data') and (contains(lower-case(ext-link[1]),$owner-repo) or  contains(lower-case(pub-id[1]/@xlink:href),$owner-repo))]"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="preceding::ext-link[contains(lower-case(@xlink:href),$owner-repo)] or ancestor::article//element-citation[@publication-type=('software','data') and (contains(lower-case(ext-link[1]),$owner-repo) or contains(lower-case(pub-id[1]/@xlink:href),$owner-repo))]">
               <xsl:attribute name="id">github-no-citation</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references/software-references#github-no-citation</xsl:attribute>
               <xsl:attribute name="role">warning</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[github-no-citation] This GitHub link - <xsl:text/>
                  <xsl:value-of select="@xlink:href"/>
                  <xsl:text/> - is included in the text, but there is no software reference for it. Please add a software reference or, in the event that all the information is not available, query the authors for the reference details.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M535"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M535"/>
   <xsl:template match="@*|node()" priority="-2" mode="M535">
      <xsl:apply-templates select="*" mode="M535"/>
   </xsl:template>

   <!--PATTERN flag-gitlab-pattern-->


	  <!--RULE flag-gitlab-->
   <xsl:template match="ext-link[not(ancestor::sub-article or ancestor::element-citation or ancestor::sec[@sec-type='data-availability']) and contains(lower-case(@xlink:href),'gitlab.com') and not(contains(@xlink:href,'archive.softwareheritage.org'))]" priority="1000" mode="M536">
      <xsl:variable name="l" select="lower-case(@xlink:href)"/>
      <xsl:variable name="substring" select="substring-after($l,'gitlab.com/')"/>
      <xsl:variable name="owner-repo" select="string-join(for $x in tokenize($substring,'/')[position()=(1,2)] return if (contains($x,'#')) then substring-before($x,'#') else $x,'/')"/>

		    <!--ASSERT warning-->
      <xsl:choose>
         <xsl:when test="preceding::ext-link[contains(lower-case(@xlink:href),$owner-repo)] or ancestor::article//element-citation[@publication-type=('software','data') and (contains(lower-case(ext-link[1]),$owner-repo) or  contains(lower-case(pub-id[1]/@xlink:href),$owner-repo))]"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="preceding::ext-link[contains(lower-case(@xlink:href),$owner-repo)] or ancestor::article//element-citation[@publication-type=('software','data') and (contains(lower-case(ext-link[1]),$owner-repo) or contains(lower-case(pub-id[1]/@xlink:href),$owner-repo))]">
               <xsl:attribute name="id">gitlab-no-citation</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references/software-references#gitlab-no-citation</xsl:attribute>
               <xsl:attribute name="role">warning</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[gitlab-no-citation] This GitLab link - <xsl:text/>
                  <xsl:value-of select="@xlink:href"/>
                  <xsl:text/> - is included in the text, but there is no software reference for it. Please add a software reference or, in the event that all the information is not available, query the authors for the reference details.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M536"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M536"/>
   <xsl:template match="@*|node()" priority="-2" mode="M536">
      <xsl:apply-templates select="*" mode="M536"/>
   </xsl:template>

   <!--PATTERN doi-journal-ref-checks-pattern-->


	  <!--RULE doi-journal-ref-checks-->
   <xsl:template match="element-citation[(@publication-type='journal') and not(pub-id[@pub-id-type='doi']) and year and source]" priority="1000" mode="M537">
      <xsl:variable name="cite" select="e:citation-format1(.)"/>
      <xsl:variable name="year" select="number(replace(year[1],'[^\d]',''))"/>
      <xsl:variable name="journal" select="replace(lower-case(source[1]),'^the ','')"/>
      <xsl:variable name="journals" select="'journals.xml'"/>

		    <!--ASSERT warning-->
      <xsl:choose>
         <xsl:when test="some $x in document($journals)/journals/journal satisfies (($x/@title/string()=$journal) and (number($x/@year) ge $year))"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="some $x in document($journals)/journals/journal satisfies (($x/@title/string()=$journal) and (number($x/@year) ge $year))">
               <xsl:attribute name="id">journal-doi-test-1</xsl:attribute>
               <xsl:attribute name="role">warning</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[journal-doi-test-1] <xsl:text/>
                  <xsl:value-of select="$cite"/>
                  <xsl:text/> is a journal ref without a doi. Should it have one?</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M537"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M537"/>
   <xsl:template match="@*|node()" priority="-2" mode="M537">
      <xsl:apply-templates select="*" mode="M537"/>
   </xsl:template>

   <!--PATTERN doi-book-ref-checks-pattern-->


	  <!--RULE doi-book-ref-checks-->
   <xsl:template match="element-citation[(@publication-type='book') and not(pub-id[@pub-id-type='doi']) and year and publisher-name]" priority="1000" mode="M538">
      <xsl:variable name="cite" select="e:citation-format1(.)"/>
      <xsl:variable name="year" select="number(replace(year[1],'[^\d]',''))"/>
      <xsl:variable name="publisher" select="lower-case(publisher-name[1])"/>
      <xsl:variable name="publishers" select="'publishers.xml'"/>

		    <!--REPORT warning-->
      <xsl:if test="some $x in document($publishers)/publishers/publisher satisfies ($x/@title/string()=$publisher)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="some $x in document($publishers)/publishers/publisher satisfies ($x/@title/string()=$publisher)">
            <xsl:attribute name="id">book-doi-test-1</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[book-doi-test-1] <xsl:text/>
               <xsl:value-of select="$cite"/>
               <xsl:text/> is a book ref without a doi, but its publisher (<xsl:text/>
               <xsl:value-of select="publisher-name[1]"/>
               <xsl:text/>) is known to register dois with some books/chapters. Should it have one?</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M538"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M538"/>
   <xsl:template match="@*|node()" priority="-2" mode="M538">
      <xsl:apply-templates select="*" mode="M538"/>
   </xsl:template>

   <!--PATTERN doi-software-ref-checks-pattern-->


	  <!--RULE doi-software-ref-checks-->
   <xsl:template match="element-citation[(@publication-type='software') and year and source]" priority="1000" mode="M539">
      <xsl:variable name="cite" select="e:citation-format1(.)"/>
      <xsl:variable name="host" select="lower-case(source[1])"/>

		    <!--REPORT warning-->
      <xsl:if test="$host='zenodo' and not(contains(ext-link,'10.5281/zenodo'))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="$host='zenodo' and not(contains(ext-link,'10.5281/zenodo'))">
            <xsl:attribute name="id">software-doi-test-1</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references/software-references#software-doi-test-1</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[software-doi-test-1] <xsl:text/>
               <xsl:value-of select="$cite"/>
               <xsl:text/> is a software ref with a source (<xsl:text/>
               <xsl:value-of select="source[1]"/>
               <xsl:text/>) known to register dois starting with '10.5281/zenodo'. Should it have a link in the format 'https://doi.org/10.5281/zenodo...'?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="$host='figshare' and not(contains(ext-link,'10.6084/m9.figshare'))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="$host='figshare' and not(contains(ext-link,'10.6084/m9.figshare'))">
            <xsl:attribute name="id">software-doi-test-2</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references/software-references#software-doi-test-2</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[software-doi-test-2] <xsl:text/>
               <xsl:value-of select="$cite"/>
               <xsl:text/> is a software ref with a source (<xsl:text/>
               <xsl:value-of select="source[1]"/>
               <xsl:text/>) known to register dois starting with '10.6084/m9.figshare'. Should it have a link in the format 'https://doi.org/10.6084/m9.figshare...'?</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M539"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M539"/>
   <xsl:template match="@*|node()" priority="-2" mode="M539">
      <xsl:apply-templates select="*" mode="M539"/>
   </xsl:template>

   <!--PATTERN doi-conf-ref-checks-pattern-->


	  <!--RULE doi-conf-ref-checks-->
   <xsl:template match="element-citation[(@publication-type='confproc') and not(pub-id[@pub-id-type='doi']) and year and conf-name]" priority="1000" mode="M540">
      <xsl:variable name="name" select="lower-case(conf-name[1])"/>

		    <!--REPORT warning-->
      <xsl:if test="contains($name,'ieee')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains($name,'ieee')">
            <xsl:attribute name="id">conf-doi-test-1</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[conf-doi-test-1] <xsl:text/>
               <xsl:value-of select="e:citation-format1(.)"/>
               <xsl:text/> is a conference ref without a doi, but it's a conference which is known to possibly have dois - (<xsl:text/>
               <xsl:value-of select="conf-name[1]"/>
               <xsl:text/>). Should it have one?</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M540"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M540"/>
   <xsl:template match="@*|node()" priority="-2" mode="M540">
      <xsl:apply-templates select="*" mode="M540"/>
   </xsl:template>

   <!--PATTERN zenodo-tests-pattern-->


	  <!--RULE zenodo-tests-->
   <xsl:template match="element-citation[(lower-case(source[1])='zenodo') or contains(ext-link[1],'10.5281/zenodo') or contains(pub-id[@pub-id-type='doi'][1],'10.5281/zenodo')]" priority="1000" mode="M541">

		<!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@publication-type=('data','software','preprint','report')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@publication-type=('data','software','preprint','report')">
               <xsl:attribute name="id">zenodo-check</xsl:attribute>
               <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references/journal-references#zenodo-check</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[zenodo-check] <xsl:text/>
                  <xsl:value-of select="@publication-type"/>
                  <xsl:text/> type reference <xsl:text/>
                  <xsl:value-of select="if (parent::ref[@id]) then concat('(with id ',parent::ref[1]/@id,')') else ()"/>
                  <xsl:text/> is a zenodo one, which means that it must be one of the following reference types: data, software, preprint or report.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M541"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M541"/>
   <xsl:template match="@*|node()" priority="-2" mode="M541">
      <xsl:apply-templates select="*" mode="M541"/>
   </xsl:template>

   <!--PATTERN link-ref-tests-pattern-->


	  <!--RULE link-ref-tests-->
   <xsl:template match="element-citation/source | element-citation/article-title | element-citation/chapter-title | element-citation/data-title" priority="1000" mode="M542">

		<!--REPORT error-->
      <xsl:if test="matches(.,'^10\.\d{4,9}/[-._;()/:A-Za-z0-9&lt;&gt;\+#&amp;`~–−]+|\p{Zs}10\.\d{4,9}/[-._;()/:A-Za-z0-9&lt;&gt;\+#&amp;`~–−]+')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'^10\.\d{4,9}/[-._;()/:A-Za-z0-9&lt;&gt;\+#&amp;`~–−]+|\p{Zs}10\.\d{4,9}/[-._;()/:A-Za-z0-9&lt;&gt;\+#&amp;`~–−]+')">
            <xsl:attribute name="id">doi-in-display-test</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#doi-in-display-test</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[doi-in-display-test] <xsl:text/>
               <xsl:value-of select="name()"/>
               <xsl:text/> element contains a doi - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>. The doi must be moved to the appropriate field, and the correct information should be included in this element (or queried if the information is missing).</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches(.,'https?:|ftp://|git://|tel:|mailto:')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'https?:|ftp://|git://|tel:|mailto:')">
            <xsl:attribute name="id">link-in-display-test</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/references#link-in-display-test</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[link-in-display-test] <xsl:text/>
               <xsl:value-of select="name()"/>
               <xsl:text/> element contains a url - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>. The url must be moved to the appropriate field (if it is a doi, then it should be captured as a doi without the 'https://doi.org/' prefix), and the correct information should be included in this element (or queried if the information is missing).</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M542"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M542"/>
   <xsl:template match="@*|node()" priority="-2" mode="M542">
      <xsl:apply-templates select="*" mode="M542"/>
   </xsl:template>

   <!--PATTERN fundref-rule-pattern-->


	  <!--RULE fundref-rule-->
   <xsl:template match="article[not(@article-type='article-commentary')]//ack" priority="1000" mode="M543">
      <xsl:variable name="ack" select="."/>
      <xsl:variable name="funding-group" select="distinct-values(ancestor::article//funding-group//institution-id)"/>
      <xsl:variable name="funders" select="'funders.xml'"/>

		    <!--REPORT warning-->
      <xsl:if test="some $funder in document($funders)//funder satisfies ((contains($ack,concat(' ',$funder,' ')) or contains($ack,concat(' ',$funder,'.'))) and not($funder/@fundref = $funding-group))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="some $funder in document($funders)//funder satisfies ((contains($ack,concat(' ',$funder,' ')) or contains($ack,concat(' ',$funder,'.'))) and not($funder/@fundref = $funding-group))">
            <xsl:attribute name="id">fundref-test-1</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[fundref-test-1] Acknowledgements contains funder(s) in the open funder registry, but their doi is not listed in the funding section. Please check - <xsl:text/>
               <xsl:value-of select="string-join(for $x in document($funders)//funder[((contains($ack,concat(' ',.,' ')) or contains($ack,concat(' ',.,'.'))) and not(@fundref = $funding-group))] return concat($x,' - ',$x/@fundref),'; ')"/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M543"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M543"/>
   <xsl:template match="@*|node()" priority="-2" mode="M543">
      <xsl:apply-templates select="*" mode="M543"/>
   </xsl:template>

   <!--PATTERN unicode-tests-pattern-->


	  <!--RULE unicode-tests-->
   <xsl:template match="sub-article//p[matches(.,'[âÂÅÃËÆ]')]|sub-article//td[matches(.,'[âÂÅÃËÆ]')]|sub-article//th[matches(.,'[âÂÅÃËÆ]')]" priority="1000" mode="M544">

		<!--REPORT warning-->
      <xsl:if test="contains(.,'â‚¬')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'â‚¬')">
            <xsl:attribute name="id">unicode-test-1</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#unicode-test-1</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[unicode-test-1] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'â‚¬' - this should instead be the character '€'. - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(.,'Ã€')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'Ã€')">
            <xsl:attribute name="id">unicode-test-2</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#unicode-test-2</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[unicode-test-2] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'Ã€' - this should instead be the character 'À'. - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(.,'Ã')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'Ã')">
            <xsl:attribute name="id">unicode-test-3</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#unicode-test-3</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[unicode-test-3] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'Ã' - this should instead be the character 'Á'. - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(.,'â€š')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'â€š')">
            <xsl:attribute name="id">unicode-test-4</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#unicode-test-4</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[unicode-test-4] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'â€š' - this should instead be the character '‚'. - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(.,'Ã‚')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'Ã‚')">
            <xsl:attribute name="id">unicode-test-5</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#unicode-test-5</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[unicode-test-5] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'Ã‚' - this should instead be the character 'Â'. - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(.,'Æ’')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'Æ’')">
            <xsl:attribute name="id">unicode-test-6</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#unicode-test-6</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[unicode-test-6] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'Æ’' - this should instead be the character 'ƒ'. - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(.,'Ãƒ')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'Ãƒ')">
            <xsl:attribute name="id">unicode-test-7</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#unicode-test-7</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[unicode-test-7] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'Ãƒ' - this should instead be the character 'Ã'. - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(.,'â€ž')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'â€ž')">
            <xsl:attribute name="id">unicode-test-8</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#unicode-test-8</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[unicode-test-8] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'â€ž' - this should instead be the character '„'. - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(.,'Ã„')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'Ã„')">
            <xsl:attribute name="id">unicode-test-9</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#unicode-test-9</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[unicode-test-9] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'Ã„' - this should instead be the character 'Ä'. - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(.,'â€¦')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'â€¦')">
            <xsl:attribute name="id">unicode-test-10</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#unicode-test-10</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[unicode-test-10] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'â€¦' - this should instead be the character '…'. - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(.,'Ã…')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'Ã…')">
            <xsl:attribute name="id">unicode-test-11</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#unicode-test-11</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[unicode-test-11] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'Ã…' - this should instead be the character 'Å'. - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(.,'Ã†')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'Ã†')">
            <xsl:attribute name="id">unicode-test-13</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#unicode-test-13</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[unicode-test-13] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'Ã†' - this should instead be the character 'Æ'. - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(.,'â€¡')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'â€¡')">
            <xsl:attribute name="id">unicode-test-14</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#unicode-test-14</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[unicode-test-14] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'â€¡' - this should instead be the character '‡'. - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(.,'Ã‡')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'Ã‡')">
            <xsl:attribute name="id">unicode-test-15</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#unicode-test-15</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[unicode-test-15] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'Ã‡' - this should instead be the character 'Ç'. - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(.,'Ë†')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'Ë†')">
            <xsl:attribute name="id">unicode-test-16</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#unicode-test-16</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[unicode-test-16] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'Ë†' - this should instead be the character 'ˆ'. - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(.,'Ãˆ')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'Ãˆ')">
            <xsl:attribute name="id">unicode-test-17</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#unicode-test-17</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[unicode-test-17] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'Ãˆ' - this should instead be the character 'È'. - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(.,'â€°')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'â€°')">
            <xsl:attribute name="id">unicode-test-18</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#unicode-test-18</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[unicode-test-18] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'â€°' - this should instead be the character '‰'. - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(.,'Ã‰')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'Ã‰')">
            <xsl:attribute name="id">unicode-test-19</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#unicode-test-19</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[unicode-test-19] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'Ã‰' - this should instead be the character 'É'. - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(.,'ÃŠ')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'ÃŠ')">
            <xsl:attribute name="id">unicode-test-21</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#unicode-test-21</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[unicode-test-21] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'ÃŠ' - this should instead be the character 'Ê'. - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(.,'â€¹')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'â€¹')">
            <xsl:attribute name="id">unicode-test-22</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#unicode-test-22</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[unicode-test-22] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'â€¹' - this should instead be the character '‹'. - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(.,'Ã‹')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'Ã‹')">
            <xsl:attribute name="id">unicode-test-23</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#unicode-test-23</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[unicode-test-23] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'Ã‹' - this should instead be the character 'Ë'. - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(.,'Å’')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'Å’')">
            <xsl:attribute name="id">unicode-test-24</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#unicode-test-24</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[unicode-test-24] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'Å’' - should this instead be the character 'Œ'? - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(.,'ÃŒ')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'ÃŒ')">
            <xsl:attribute name="id">unicode-test-25</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#unicode-test-25</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[unicode-test-25] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'ÃŒ' - this should instead be the character 'Ì'. - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(.,'Ã')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'Ã')">
            <xsl:attribute name="id">unicode-test-26</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#unicode-test-26</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[unicode-test-26] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'Ã' - this should instead be the character 'Í'. - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(.,'Å½')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'Å½')">
            <xsl:attribute name="id">unicode-test-27</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#unicode-test-27</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[unicode-test-27] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'Å½' - this should instead be the character 'Ž'. - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(.,'ÃŽ')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'ÃŽ')">
            <xsl:attribute name="id">unicode-test-28</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#unicode-test-28</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[unicode-test-28] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'ÃŽ' - this should instead be the character 'Î'. - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(.,'Ã')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'Ã')">
            <xsl:attribute name="id">unicode-test-29</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#unicode-test-29</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[unicode-test-29] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'Ã' - this should instead be the character 'Ï'. - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(.,'Ã')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'Ã')">
            <xsl:attribute name="id">unicode-test-30</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#unicode-test-30</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[unicode-test-30] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'Ã' - this should instead be the character 'Ð'. - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(.,'â€˜')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'â€˜')">
            <xsl:attribute name="id">unicode-test-31</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#unicode-test-31</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[unicode-test-31] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'â€˜' - this should instead be the character '‘'. - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(.,'Ã‘')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'Ã‘')">
            <xsl:attribute name="id">unicode-test-32</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#unicode-test-32</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[unicode-test-32] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'Ã‘' - this should instead be the character 'Ñ'. - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(.,'â€™')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'â€™')">
            <xsl:attribute name="id">unicode-test-33</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#unicode-test-33</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[unicode-test-33] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'â€™' - this should instead be the character '’'. - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(.,'Ã’')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'Ã’')">
            <xsl:attribute name="id">unicode-test-34</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#unicode-test-34</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[unicode-test-34] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'Ã’' - this should instead be the character 'Ò'. - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(.,'â€œ')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'â€œ')">
            <xsl:attribute name="id">unicode-test-35</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#unicode-test-35</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[unicode-test-35] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'â€œ' - this should instead be the character '“'. - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(.,'Ã“')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'Ã“')">
            <xsl:attribute name="id">unicode-test-36</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#unicode-test-36</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[unicode-test-36] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'Ã“' - this should instead be the character 'Ó'. - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(.,'â€')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'â€')">
            <xsl:attribute name="id">unicode-test-37</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#unicode-test-37</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[unicode-test-37] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'â€' - this should instead be the character '”'. - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(.,'Ã”')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'Ã”')">
            <xsl:attribute name="id">unicode-test-38</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#unicode-test-38</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[unicode-test-38] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'Ã”' - this should instead be the character 'Ô'. - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(.,'Ã•')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'Ã•')">
            <xsl:attribute name="id">unicode-test-39</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#unicode-test-39</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[unicode-test-39] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'Ã•' - this should instead be the character 'Õ'. - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(.,'â€“')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'â€“')">
            <xsl:attribute name="id">unicode-test-40</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#unicode-test-40</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[unicode-test-40] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'â€“' - this should instead be the character '–'. - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(.,'Ã–')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'Ã–')">
            <xsl:attribute name="id">unicode-test-41</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#unicode-test-41</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[unicode-test-41] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'Ã–' - this should instead be the character 'Ö'. - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(.,'â€”')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'â€”')">
            <xsl:attribute name="id">unicode-test-42</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#unicode-test-42</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[unicode-test-42] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'â€”' - this should instead be the character '—'. - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(.,'Ã—')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'Ã—')">
            <xsl:attribute name="id">unicode-test-43</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#unicode-test-43</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[unicode-test-43] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'Ã—' - this should instead be the character '×'. - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(.,'Ëœ')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'Ëœ')">
            <xsl:attribute name="id">unicode-test-44</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#unicode-test-44</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[unicode-test-44] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'Ëœ' - this should instead be the character '˜'. - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(.,'Ã˜')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'Ã˜')">
            <xsl:attribute name="id">unicode-test-45</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#unicode-test-45</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[unicode-test-45] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'Ã˜' - this should instead be the character 'Ø'. - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(.,'Ã™')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'Ã™')">
            <xsl:attribute name="id">unicode-test-46</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#unicode-test-46</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[unicode-test-46] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'Ã™' - this should instead be the character 'Ù'. - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(.,'Å¡')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'Å¡')">
            <xsl:attribute name="id">unicode-test-47</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#unicode-test-47</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[unicode-test-47] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'Å¡' - this should instead be the character 'š'. - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(.,'Ãš')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'Ãš')">
            <xsl:attribute name="id">unicode-test-48</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#unicode-test-48</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[unicode-test-48] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'Ãš' - this should instead be the character 'Ú'. - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(.,'â€º')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'â€º')">
            <xsl:attribute name="id">unicode-test-49</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#unicode-test-49</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[unicode-test-49] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'â€º' - this should instead be the character '›'. - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(.,'Ã›')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'Ã›')">
            <xsl:attribute name="id">unicode-test-50</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#unicode-test-50</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[unicode-test-50] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'Ã›' - this should instead be the character 'Û'. - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(.,'Å“')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'Å“')">
            <xsl:attribute name="id">unicode-test-51</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#unicode-test-51</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[unicode-test-51] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'Å“' - this should instead be the character 'œ'. - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(.,'Ãœ')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'Ãœ')">
            <xsl:attribute name="id">unicode-test-52</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#unicode-test-52</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[unicode-test-52] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'Ãœ' - this should instead be the character 'Ü'. - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(.,'Ã')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'Ã')">
            <xsl:attribute name="id">unicode-test-53</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#unicode-test-53</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[unicode-test-53] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'Ã' - this should instead be the character 'Ý'. - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(.,'Å¾')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'Å¾')">
            <xsl:attribute name="id">unicode-test-54</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#unicode-test-54</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[unicode-test-54] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'Å¾' - this should instead be the character 'ž'. - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(.,'Ãž')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'Ãž')">
            <xsl:attribute name="id">unicode-test-55</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#unicode-test-55</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[unicode-test-55] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'Ãž' - this should instead be the character 'Þ'. - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(.,'Å¸')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'Å¸')">
            <xsl:attribute name="id">unicode-test-56</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#unicode-test-56</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[unicode-test-56] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'Å¸' - this should instead be the character 'Ÿ'. - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(.,'ÃŸ')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'ÃŸ')">
            <xsl:attribute name="id">unicode-test-57</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#unicode-test-57</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[unicode-test-57] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'ÃŸ' - this should instead be the character 'ß'. - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(.,'Â¡')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'Â¡')">
            <xsl:attribute name="id">unicode-test-58</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#unicode-test-58</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[unicode-test-58] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'Â¡' - this should instead be the character '¡'. - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(.,'Ã¡')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'Ã¡')">
            <xsl:attribute name="id">unicode-test-59</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#unicode-test-59</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[unicode-test-59] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'Ã¡' - this should instead be the character 'á'. - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(.,'Â¢')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'Â¢')">
            <xsl:attribute name="id">unicode-test-60</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#unicode-test-60</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[unicode-test-60] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'Â¢' - this should instead be the character '¢'. - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(.,'Ã¢')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'Ã¢')">
            <xsl:attribute name="id">unicode-test-61</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#unicode-test-61</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[unicode-test-61] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'Ã¢' - this should instead be the character 'â'. - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(.,'Â£')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'Â£')">
            <xsl:attribute name="id">unicode-test-62</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#unicode-test-62</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[unicode-test-62] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'Â£' - this should instead be the character '£'. - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(.,'Ã£')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'Ã£')">
            <xsl:attribute name="id">unicode-test-63</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#unicode-test-63</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[unicode-test-63] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'Ã£' - this should instead be the character 'ã'. - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(.,'Â¤')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'Â¤')">
            <xsl:attribute name="id">unicode-test-64</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#unicode-test-64</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[unicode-test-64] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'Â¤' - this should instead be the character '¤'. - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(.,'Ã¤')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'Ã¤')">
            <xsl:attribute name="id">unicode-test-65</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#unicode-test-65</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[unicode-test-65] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'Ã¤' - this should instead be the character 'ä'. - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(.,'Ã¥')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'Ã¥')">
            <xsl:attribute name="id">unicode-test-66</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#unicode-test-66</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[unicode-test-66] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'Ã¥' - this should instead be the character 'å'. - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(.,'Â¨')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'Â¨')">
            <xsl:attribute name="id">unicode-test-67</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#unicode-test-67</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[unicode-test-67] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'Â¨' - this should instead be the character '¨'. - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(.,'Ã¨')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'Ã¨')">
            <xsl:attribute name="id">unicode-test-68</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#unicode-test-68</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[unicode-test-68] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'Ã¨' - this should instead be the character 'è'. - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(.,'Âª')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'Âª')">
            <xsl:attribute name="id">unicode-test-69</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#unicode-test-69</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[unicode-test-69] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'Âª' - this should instead be the character 'ª'. - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(.,'Ãª')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'Ãª')">
            <xsl:attribute name="id">unicode-test-70</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#unicode-test-70</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[unicode-test-70] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'Ãª' - this should instead be the character 'ê'. - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(.,'Â­')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'Â­')">
            <xsl:attribute name="id">unicode-test-71</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#unicode-test-71</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[unicode-test-71] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'Â­' - this should instead be the character '­'. - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(.,'Ã­')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'Ã­')">
            <xsl:attribute name="id">unicode-test-72</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#unicode-test-72</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[unicode-test-72] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'Ã­' - this should instead be the character 'í'. - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(.,'Â¯')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'Â¯')">
            <xsl:attribute name="id">unicode-test-73</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#unicode-test-73</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[unicode-test-73] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'Â¯' - this should instead be the character '¯'. - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(.,'Ã¯')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'Ã¯')">
            <xsl:attribute name="id">unicode-test-74</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#unicode-test-74</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[unicode-test-74] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'Ã¯' - this should instead be the character 'ï'. - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(.,'Â°')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'Â°')">
            <xsl:attribute name="id">unicode-test-75</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#unicode-test-75</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[unicode-test-75] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'Â°' - this should instead be the character '°'. - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(.,'Ã°')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'Ã°')">
            <xsl:attribute name="id">unicode-test-76</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#unicode-test-76</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[unicode-test-76] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'Ã°' - this should instead be the character 'ð'. - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(.,'Â±')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'Â±')">
            <xsl:attribute name="id">unicode-test-77</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#unicode-test-77</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[unicode-test-77] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'Â±' - this should instead be the character '±'. - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(.,'Ã±')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'Ã±')">
            <xsl:attribute name="id">unicode-test-78</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#unicode-test-78</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[unicode-test-78] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'Ã±' - this should instead be the character 'ñ'. - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(.,'Â´')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'Â´')">
            <xsl:attribute name="id">unicode-test-79</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#unicode-test-79</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[unicode-test-79] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'Â´' - this should instead be the character '´'. - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(.,'Ã´')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'Ã´')">
            <xsl:attribute name="id">unicode-test-80</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#unicode-test-80</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[unicode-test-80] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'Ã´' - this should instead be the character 'ô'. - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(.,'Âµ')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'Âµ')">
            <xsl:attribute name="id">unicode-test-81</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#unicode-test-81</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[unicode-test-81] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'Âµ' - this should instead be the character 'µ'. - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(.,'Ãµ')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'Ãµ')">
            <xsl:attribute name="id">unicode-test-82</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#unicode-test-82</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[unicode-test-82] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'Ãµ' - this should instead be the character 'õ'. - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(.,'Â¶')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'Â¶')">
            <xsl:attribute name="id">unicode-test-83</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#unicode-test-83</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[unicode-test-83] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'Â¶' - this should instead be the character '¶'. - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(.,'Ã¶')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'Ã¶')">
            <xsl:attribute name="id">unicode-test-84</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#unicode-test-84</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[unicode-test-84] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'Ã¶' - this should instead be the character 'ö'. - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(.,'Â·')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'Â·')">
            <xsl:attribute name="id">unicode-test-85</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#unicode-test-85</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[unicode-test-85] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'Â·' - this should instead be the character '·'. - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(.,'Ã·')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'Ã·')">
            <xsl:attribute name="id">unicode-test-86</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#unicode-test-86</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[unicode-test-86] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'Ã·' - this should instead be the character '÷'. - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(.,'Â¸')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'Â¸')">
            <xsl:attribute name="id">unicode-test-87</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#unicode-test-87</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[unicode-test-87] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'Â¸' - this should instead be the character '¸'. - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(.,'Ã¸')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'Ã¸')">
            <xsl:attribute name="id">unicode-test-88</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#unicode-test-88</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[unicode-test-88] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'Ã¸' - this should instead be the character 'ø'. - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(.,'Ã¹')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'Ã¹')">
            <xsl:attribute name="id">unicode-test-89</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#unicode-test-89</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[unicode-test-89] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'Ã¹' - this should instead be the character 'ù'. - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(.,'Âº')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'Âº')">
            <xsl:attribute name="id">unicode-test-90</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#unicode-test-90</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[unicode-test-90] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'Âº' - this should instead be the character 'º'. - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(.,'Ãº')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'Ãº')">
            <xsl:attribute name="id">unicode-test-91</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#unicode-test-91</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[unicode-test-91] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'Ãº' - this should instead be the character 'ú'. - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(.,'Â¿')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'Â¿')">
            <xsl:attribute name="id">unicode-test-92</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#unicode-test-92</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[unicode-test-92] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'Â¿' - this should instead be the character '¿'. - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(.,'Ã¿')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'Ã¿')">
            <xsl:attribute name="id">unicode-test-93</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/decision-letters-and-author-responses#unicode-test-93</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[unicode-test-93] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'Ã¿' - this should instead be the character 'ÿ'. - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M544"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M544"/>
   <xsl:template match="@*|node()" priority="-2" mode="M544">
      <xsl:apply-templates select="*" mode="M544"/>
   </xsl:template>

   <!--PATTERN private-char-tests-pattern-->


	  <!--RULE private-char-tests-->
   <xsl:template match="p[not(descendant::p or descendant::td or descendant::th)]|td[not(descendant::p)]|th[not(descendant::p)]" priority="1000" mode="M545">

		<!--REPORT error-->
      <xsl:if test="matches(.,'\p{Co}')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'\p{Co}')">
            <xsl:attribute name="id">private-char-test</xsl:attribute>
            <xsl:attribute name="see">https://elifesciences.gitbook.io/productionhowto/-M1eY9ikxECYR-0OcnGt/article-details/content/general-content#private-char-test</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[private-char-test] <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains private use character(s). They either need removing or changing to the correct character. Private characters: '<xsl:text/>
               <xsl:value-of select="string-join(distinct-values(tokenize(.,'\p{Zs}')[matches(.,'\p{Co}')]),' ')"/>
               <xsl:text/>'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M545"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M545"/>
   <xsl:template match="@*|node()" priority="-2" mode="M545">
      <xsl:apply-templates select="*" mode="M545"/>
   </xsl:template>

   <!--PATTERN element-allowlist-pattern-->


	  <!--RULE element-allowlist-->
   <xsl:template match="article//*[not(ancestor::mml:math)]" priority="1000" mode="M546">
      <xsl:variable name="allowed-elements" select="('abstract',         'ack',         'addr-line',         'aff',         'ali:free_to_read',         'ali:license_ref',         'anonymous',         'app',         'app-group',         'article',         'article-categories',         'article-id',         'article-meta',         'article-title',         'attrib',         'author-notes',         'award-group',         'award-id',         'back',         'bio',         'body',         'bold',         'boxed-text',         'break',         'caption',         'chapter-title',         'code',         'collab',         'comment',         'conf-date',         'conf-loc',         'conf-name',         'contrib',         'contrib-group',         'contrib-id',         'copyright-holder',         'copyright-statement',         'copyright-year',         'corresp',         'country',         'custom-meta',         'custom-meta-group',         'data-title',         'date',         'date-in-citation',         'day',         'disp-formula',         'disp-quote',         'edition',         'element-citation',         'elocation-id',         'email',         'event',         'event-desc',         'ext-link',         'fig',         'fig-group',         'fn',         'fn-group',         'fpage',         'front',         'front-stub',         'funding-group',         'funding-source',         'funding-statement',         'given-names',         'graphic',         'history',         'inline-formula',         'inline-graphic',         'institution',         'institution-id',         'institution-wrap',         'issn',         'issue',         'italic',         'journal-id',         'journal-meta',         'journal-title',         'journal-title-group',         'kwd',         'kwd-group',         'label',         'license',         'license-p',         'list',         'list-item',         'lpage',         'media',         'meta-name',         'meta-value',         'mml:math',         'monospace',         'month',         'name',         'named-content',         'on-behalf-of',         'p',         'patent',         'permissions',         'person-group',         'principal-award-recipient',         'pub-date',         'pub-history',         'pub-id',         'publisher',         'publisher-loc',         'publisher-name',         'ref',         'ref-list',         'related-article',         'related-object',         'role',         'sc',         'sec',         'self-uri',         'source',         'strike',         'string-date',         'string-name',         'styled-content',         'sub',         'sub-article',         'subj-group',         'subject',         'suffix',         'sup',         'supplementary-material',         'surname',         'table',         'table-wrap',         'table-wrap-foot',         'tbody',         'td',         'th',         'thead',         'title',         'title-group',         'tr',         'underline',         'version',         'volume',         'xref',         'year')"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="name()=$allowed-elements"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="name()=$allowed-elements">
               <xsl:attribute name="id">element-conformity</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[element-conformity] <xsl:text/>
                  <xsl:value-of select="name()"/>
                  <xsl:text/> element is not allowed.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M546"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M546"/>
   <xsl:template match="@*|node()" priority="-2" mode="M546">
      <xsl:apply-templates select="*" mode="M546"/>
   </xsl:template>

   <!--PATTERN empty-attribute-test-pattern-->


	  <!--RULE empty-attribute-test-->
   <xsl:template match="*[@*/normalize-space(.)='']" priority="1000" mode="M547">

		<!--REPORT error-->
      <xsl:if test=".">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test=".">
            <xsl:attribute name="id">final-empty-attribute-conformance</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[final-empty-attribute-conformance] <xsl:text/>
               <xsl:value-of select="name()"/>
               <xsl:text/> element has attribute(s) with an empty value. &lt;<xsl:text/>
               <xsl:value-of select="name()"/>
               <xsl:text/>
               <xsl:text/>
               <xsl:value-of select="for $att in ./@*[normalize-space(.)=''] return concat(' ',$att/name(),'=&quot;',$att,'&quot;')"/>
               <xsl:text/>&gt;</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M547"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M547"/>
   <xsl:template match="@*|node()" priority="-2" mode="M547">
      <xsl:apply-templates select="*" mode="M547"/>
   </xsl:template>

   <!--PATTERN contrib-id-attribute-test-pattern-->


	  <!--RULE contrib-id-attribute-test-->
   <xsl:template match="contrib[@contrib-type]" priority="1000" mode="M548">
      <xsl:variable name="allowed-values" select="('author','senior_editor','editor','reviewer')"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@contrib-type=$allowed-values"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@contrib-type=$allowed-values">
               <xsl:attribute name="id">contrib-id-value-conformance</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[contrib-id-value-conformance] '<xsl:text/>
                  <xsl:value-of select="@contrib-type"/>
                  <xsl:text/>' is not a permitted value for a <xsl:text/>
                  <xsl:value-of select="name(.)"/>
                  <xsl:text/> element. The only permitted values are 'author','senior_editor','editor', and 'reviewer'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M548"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M548"/>
   <xsl:template match="@*|node()" priority="-2" mode="M548">
      <xsl:apply-templates select="*" mode="M548"/>
   </xsl:template>

   <!--PATTERN content-type-attribute-test-pattern-->


	  <!--RULE content-type-attribute-test-->
   <xsl:template match="*[@content-type]" priority="1000" mode="M549">
      <xsl:variable name="allowed-elements" select="('named-content','contrib-group','self-uri','institution','fn-group','disp-quote')"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="name()=$allowed-elements"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="name()=$allowed-elements">
               <xsl:attribute name="id">content-type-value-conformance</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[content-type-value-conformance] <xsl:text/>
                  <xsl:value-of select="name(.)"/>
                  <xsl:text/> element cannot have a content-type attribute. The only elements that can have that can have a content-type attribtue are named-content, contrib-group, self-uri, institution, fn-group, and disp-quote.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M549"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M549"/>
   <xsl:template match="@*|node()" priority="-2" mode="M549">
      <xsl:apply-templates select="*" mode="M549"/>
   </xsl:template>
</xsl:stylesheet>